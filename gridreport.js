(function(){ window.CLOSURE_NO_DEPS = true; var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.CHARTS_ONLY_LAYER = false;
goog.IS_COMPILED = false;
goog.LANG = "en";
goog.LOCALE = goog.LANG;
if (!goog.CHARTS_ONLY_LAYER) {
  if (window["EikonLocale"]) {
    goog.LOCALE = window["EikonLocale"];
  } else {
    if (window["dojo"]) {
      goog.LOCALE = window["dojo"]["locale"];
    }
  }
} else {
  if (window["dojo"]) {
    window["dojo"]["provide"]("shared.html5chart.TrWebChart" + (goog.LOCALE === "en" ? "" : "_" + goog.LOCALE));
  }
}
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.ColumnFilterTypes = {MembershipColumnFilter:"MembershipColumnFilter", NumericRangeColumnFilter:"NumericRangeColumnFilter", DateRangeColumnFilter:"DateRangeColumnFilter", VectorNumericColumnFilter:"VectorNumericColumnFilter", VectorDateColumnFilter:"VectorDateColumnFilter", VectorMembershipColumnFilter:"VectorMembershipColumnFilter"};
goog.provide("gridReport.model.filters.ColumnFilter");
gridReport.model.filters.ColumnFilter = function() {
};
gridReport.model.filters.ColumnFilter.prototype.convertToJqxFilter = function() {
  throw new Error("Not implemented");
};
gridReport.model.filters.ColumnFilter.prototype.serialize = function() {
  throw new Error("Not implemented");
};
gridReport.model.filters.ColumnFilter.prototype.deserialize = function(state) {
  throw new Error("Not implemented");
};
goog.provide("gridReport.model.filters.MembershipColumnFilter");
goog.require("gridReport.model.filters.ColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.MembershipColumnFilter = function(options) {
  this.selectedItems = [];
  if (options) {
    this.selectedItems = options.selectedItems;
  }
};
goog.inherits(gridReport.model.filters.MembershipColumnFilter, gridReport.model.filters.ColumnFilter);
gridReport.model.filters.MembershipColumnFilter.prototype.selectedItems = null;
gridReport.model.filters.MembershipColumnFilter.prototype.returnType = null;
gridReport.model.filters.MembershipColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "stringfilter", filterOrOperator = 1, defaultCondition = "equal";
  _.each(this.selectedItems, function(item) {
    var currentCondition = defaultCondition;
    if (this.returnType === scr.DataTypes.Boolean) {
      filtertype = "booleanfilter";
      if (_.isNull(item) || _.isUndefined(item)) {
        currentCondition = "null";
      }
    } else {
      if (_.isNull(item) || _.isUndefined(item)) {
        currentCondition = "null";
      } else {
        if (_.isEmpty(item)) {
          currentCondition = "empty";
        }
      }
    }
    filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, item, currentCondition));
  }, this);
  return filtergroup;
};
gridReport.model.filters.MembershipColumnFilter.prototype.serialize = function() {
  return{selectedItems:angular.copy(this.selectedItems), type:gridReport.model.filters.ColumnFilterTypes.MembershipColumnFilter};
};
goog.provide("gridReport.utils.jsUtils");
gridReport.jsUtils = function() {
  var service = {};
  service.mergeProperties = function(objA, objB, propertyNames) {
    if (!objA || !objB) {
      return;
    }
    propertyNames = propertyNames || [];
    for (var prop in objA) {
      if (propertyNames.length && !_.contains(propertyNames, prop)) {
        continue;
      }
      if (objB.hasOwnProperty(prop) && !_.isUndefined(objB[prop])) {
        objA[prop] = objB[prop];
      }
    }
  };
  service.getResultOrValue = function(objF) {
    return _.isFunction(objF) ? objF() : objF;
  };
  service.switchNgViewOpacity = function(modal, mode) {
    var dataKey = "UGR-641-GridReport-fixZIndexScope";
    var needFix = mode !== "off";
    var ngView = modal.closest("ng-view");
    if (!ngView.length) {
      return;
    }
    if (needFix) {
      var prevValue = ngView.attr("style");
      ngView.data(dataKey, prevValue);
      ngView.attr("style", prevValue + " opacity: 1 !important;");
    } else {
      ngView.attr("style", ngView.data(dataKey));
    }
  };
  service.findIndex = function(arr, propName, value) {
    var index = -1;
    if (propName) {
      _.every(arr, function(o, i) {
        if (o[propName] == value) {
          index = i;
          return false;
        }
        return true;
      });
    }
    return index;
  };
  service.mergeSort = function(array, compare) {
    var length = array.length, middle = Math.floor(length / 2);
    if (!compare) {
      compare = function(left, right) {
        if (left < right) {
          return-1;
        }
        if (left == right) {
          return 0;
        } else {
          return 1;
        }
      };
    }
    if (length < 2) {
      return array;
    }
    return merge(service.mergeSort(array.slice(0, middle), compare), service.mergeSort(array.slice(middle, length), compare), compare);
  };
  function merge(left, right, compare) {
    var result = [];
    while (left.length > 0 || right.length > 0) {
      if (left.length > 0 && right.length > 0) {
        if (compare(left[0], right[0]) <= 0) {
          result.push(left[0]);
          left = left.slice(1);
        } else {
          result.push(right[0]);
          right = right.slice(1);
        }
      } else {
        if (left.length > 0) {
          result.push(left[0]);
          left = left.slice(1);
        } else {
          if (right.length > 0) {
            result.push(right[0]);
            right = right.slice(1);
          }
        }
      }
    }
    return result;
  }
  return service;
}();
goog.provide("gridReport.model.NegativeNumberFormats");
gridReport.model.NegativeNumberFormats = {Default:"Default", ColoredDefault:"ColoredDefault", Colored:"Colored", Brackets:"Brackets", ColoredBrackets:"ColoredBrackets"};
goog.provide("gridReport.model.CellsFormat");
goog.require("gridReport.utils.jsUtils");
goog.require("gridReport.model.NegativeNumberFormats");
gridReport.model.CellsFormat = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
gridReport.model.CellsFormat.prototype.percentage = false;
gridReport.model.CellsFormat.prototype.dateFormat = "dd/MM/yyyy";
gridReport.model.CellsFormat.prototype.negativeNumberFormat = gridReport.model.NegativeNumberFormats.Default;
gridReport.model.CellsFormat.prototype.decimalDigits = 0;
gridReport.model.CellsFormat.prototype.thousandsSeparator = ",";
gridReport.model.CellsFormat.prototype.decimalSeparator = ".";
gridReport.model.CellsFormat.prototype.percentSymbol = "%";
gridReport.model.CellsFormat.prototype.setPercentage = function(percentage) {
  this.percentage = percentage;
  if (this.percentage) {
    this.negativeNumberFormat = null;
  } else {
    if (this.negativeNumberFormat == null) {
      this.negativeNumberFormat = gridReport.model.NegativeNumberFormats.Default;
    }
  }
};
gridReport.model.CellsFormat.prototype.setNegativeNumberFormat = function(negativeNumberFormat) {
  this.negativeNumberFormat = negativeNumberFormat;
  this.percentage = this.negativeNumberFormat == null;
};
goog.provide("gridReport.model.filters.CompositeTopBottomNumericColumnFilter");
goog.require("gridReport.model.filters.ColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.CompositeTopBottomNumericColumnFilter = function(options) {
  if (options) {
    this.minValueTB = options.minValueTB;
    this.maxValueTB = options.maxValueTB;
    this.minValue = options.minValue;
    this.maxValue = options.maxValue;
    this.topBottomValue = options.topBottomValue;
    this.typeTB = options.typeTB;
  }
};
goog.inherits(gridReport.model.filters.CompositeTopBottomNumericColumnFilter, gridReport.model.filters.ColumnFilter);
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.minValue = null;
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.maxValue = null;
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.minValueTB = null;
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.maxValueTB = null;
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.topBottomValue = null;
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.typeTB = null;
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "numericfilter", filterOrOperator = 0, minVal = this.minValue || this.minValueTB, maxVal = this.maxValue || this.maxValueTB;
  filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, minVal, "GREATER_THAN_OR_EQUAL"));
  filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, maxVal, "LESS_THAN_OR_EQUAL"));
  filtergroup;
  return filtergroup;
};
gridReport.model.filters.CompositeTopBottomNumericColumnFilter.prototype.serialize = function() {
  return{minValueTB:this.minValueTB, maxValueTB:this.maxValueTB, minValue:this.minValue, maxValue:this.maxValue, topBottomValue:this.topBottomValue, typeTB:this.type, type:gridReport.model.filters.ColumnFilterTypes.CompositeTopBottomNumericColumnFilter};
};
goog.provide("gridReport.model.SortingTypes");
gridReport.model.SortingTypes = {ByValue:"value", ByAbsoluteValue:"absoluteValue"};
goog.provide("gridReport.model.TotalCalculation");
gridReport.model.TotalCalculation = function(options) {
  if (options) {
    if (options.hasOwnProperty("name")) {
      this.name = options.name;
    }
    if (options.hasOwnProperty("displayText")) {
      this.displayText = options.displayText;
    }
    if (options.hasOwnProperty("isNone")) {
      this.isNone = options.isNone;
    }
    if (options.hasOwnProperty("isServerSide")) {
      this.isServerSide = options.isServerSide;
    }
    if (options.hasOwnProperty("func")) {
      this.func = options.func;
    }
  }
};
gridReport.model.TotalCalculation.prototype.name = undefined;
gridReport.model.TotalCalculation.prototype.displayText = undefined;
gridReport.model.TotalCalculation.prototype.isNone = undefined;
gridReport.model.TotalCalculation.prototype.isServerSide = undefined;
gridReport.model.TotalCalculation.prototype.func = undefined;
gridReport.model.TotalCalculation.prototype.getShortName = function() {
  switch(this.name) {
    case "Sum":
      return "Sum";
    case "Average":
      return "Avg";
    case "Median":
      return "Median";
    default:
      return this.name;
  }
};
goog.provide("gridReport.model.filters.CompositeColumnFilter");
goog.require("gridReport.model.filters.ColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.CompositeColumnFilter = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
  this.filters = options && options.filters || [];
};
goog.inherits(gridReport.model.filters.CompositeColumnFilter, gridReport.model.filters.ColumnFilter);
gridReport.model.filters.CompositeColumnFilter.prototype.filters = null;
gridReport.model.filters.CompositeColumnFilter.prototype.getAll = function() {
  return this.filters;
};
gridReport.model.filters.CompositeColumnFilter.prototype.add = function(filter) {
  this.filters.push(filter);
};
gridReport.model.filters.CompositeColumnFilter.prototype.remove = function(filter) {
  if (filter) {
    this.filters = _.without(this.filters, filter);
  } else {
    this.filters = [];
  }
};
gridReport.model.filters.CompositeColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filterAndOperator = 0;
  _.each(this.filters, function(filter) {
    filtergroup.addfilter(filterAndOperator, filter.convertToJqxFilter());
  });
  return filtergroup;
};
goog.provide("gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter");
goog.require("gridReport.model.filters.CompositeTopBottomNumericColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
goog.inherits(gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter, gridReport.model.filters.CompositeTopBottomNumericColumnFilter);
gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter.prototype.vectorIndex = null;
gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter.prototype.subColId = null;
gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "custom", filterAndOperator = 0, min = this.minValue || this.minValueTB, max = this.maxValue || this.maxValueTB;
  filtergroup.addfilter(filterAndOperator, filtergroup.createfilter(filtertype, {value:min, vectorIndex:this.vectorIndex, subColId:this.subColId}, "GREATER_THAN_OR_EQUAL", this.customFilter));
  filtergroup.addfilter(filterAndOperator, filtergroup.createfilter(filtertype, {value:max, vectorIndex:this.vectorIndex, subColId:this.subColId}, "LESS_THAN_OR_EQUAL", this.customFilter));
  return filtergroup;
};
gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter.prototype.serialize = function() {
  return{minValueTB:this.minValueTB, maxValueTB:this.maxValueTB, minValue:this.minValue, maxValue:this.maxValue, topBottomValue:this.topBottomValue, typeTB:this.type, vectorIndex:this.vectorIndex, type:gridReport.model.filters.ColumnFilterTypes.VectorCompositeTopBottomNumericColumnFilter};
};
gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter.prototype.customFilter = function(filterValue, cellValue, operator) {
  var vectorIndex = filterValue.vectorIndex, subColId = filterValue.subColId, cellVal = cellValue, filterVal = filterValue.value;
  if (subColId) {
    if (cellVal) {
      cellVal = cellValue[subColId];
    } else {
      cellVal = null;
    }
  }
  if (vectorIndex != undefined) {
    if (cellVal) {
      cellVal = cellValue[vectorIndex];
    } else {
      cellVal = null;
    }
  }
  if (_.isNull(cellVal) || _.isUndefined(cellVal)) {
    return false;
  }
  switch(operator) {
    case "LESS_THAN_OR_EQUAL":
      return cellVal <= filterVal;
    case "GREATER_THAN_OR_EQUAL":
      return cellVal >= filterVal;
    default:
      return true;
  }
};
goog.provide("gridReport.model.filters.NumericRangeColumnFilter");
goog.require("gridReport.model.filters.ColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.NumericRangeColumnFilter = function(options) {
  if (options) {
    this.minValue = options.minValue;
    this.maxValue = options.maxValue;
  }
};
goog.inherits(gridReport.model.filters.NumericRangeColumnFilter, gridReport.model.filters.ColumnFilter);
gridReport.model.filters.NumericRangeColumnFilter.prototype.minValue = null;
gridReport.model.filters.NumericRangeColumnFilter.prototype.maxValue = null;
gridReport.model.filters.NumericRangeColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "numericfilter", filterOrOperator = 0;
  filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, this.minValue, "GREATER_THAN_OR_EQUAL"));
  filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, this.maxValue, "LESS_THAN_OR_EQUAL"));
  return filtergroup;
};
gridReport.model.filters.NumericRangeColumnFilter.prototype.serialize = function() {
  return{minValue:this.minValue, maxValue:this.maxValue, type:gridReport.model.filters.ColumnFilterTypes.NumericRangeColumnFilter};
};
goog.provide("gridReport.model.filters.VectorNumericColumnFilter");
goog.require("gridReport.model.filters.NumericRangeColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.VectorNumericColumnFilter = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
goog.inherits(gridReport.model.filters.VectorNumericColumnFilter, gridReport.model.filters.NumericRangeColumnFilter);
gridReport.model.filters.VectorNumericColumnFilter.prototype.vectorIndex = null;
gridReport.model.filters.VectorNumericColumnFilter.prototype.subColId = null;
gridReport.model.filters.VectorNumericColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "custom", filterAndOperator = 0;
  filtergroup.addfilter(filterAndOperator, filtergroup.createfilter(filtertype, {value:this.minValue, vectorIndex:this.vectorIndex, subColId:this.subColId}, "GREATER_THAN_OR_EQUAL", this.customFilter));
  filtergroup.addfilter(filterAndOperator, filtergroup.createfilter(filtertype, {value:this.maxValue, vectorIndex:this.vectorIndex, subColId:this.subColId}, "LESS_THAN_OR_EQUAL", this.customFilter));
  return filtergroup;
};
gridReport.model.filters.VectorNumericColumnFilter.prototype.serialize = function() {
  return{minValue:this.minValue, maxValue:this.maxValue, vectorIndex:this.vectorIndex, type:gridReport.model.filters.ColumnFilterTypes.VectorNumericColumnFilter};
};
gridReport.model.filters.VectorNumericColumnFilter.prototype.customFilter = function(filterValue, cellValue, operator) {
  var vectorIndex = filterValue.vectorIndex, subColId = filterValue.subColId, cellVal = cellValue, filterVal = filterValue.value;
  if (subColId) {
    cellVal = cellValue[subColId];
  }
  if (vectorIndex != undefined) {
    cellVal = cellVal[vectorIndex];
  }
  if (_.isNull(cellVal) || _.isUndefined(cellVal)) {
    return false;
  }
  switch(operator) {
    case "LESS_THAN_OR_EQUAL":
      return cellVal <= filterVal;
    case "GREATER_THAN_OR_EQUAL":
      return cellVal >= filterVal;
    default:
      return true;
  }
};
goog.provide("gridReport.model.GridColumn");
goog.require("gridReport.model.TotalCalculation");
goog.require("gridReport.utils.jsUtils");
goog.require("gridReport.model.SortingTypes");
goog.require("gridReport.model.filters.ColumnFilter");
goog.require("gridReport.model.filters.MembershipColumnFilter");
goog.require("gridReport.model.filters.NumericRangeColumnFilter");
goog.require("gridReport.model.filters.CompositeTopBottomNumericColumnFilter");
goog.require("gridReport.model.filters.VectorNumericColumnFilter");
goog.require("gridReport.model.filters.CompositeColumnFilter");
goog.require("gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter");
goog.require("gridReport.model.CellsFormat");
(function() {
  gridReport.model.GridColumn = function(options) {
    this.cellsFormat = new gridReport.model.CellsFormat;
    gridReport.jsUtils.mergeProperties(this, options);
    if (options && options.gridColumns) {
      var that = this;
      this.gridColumns = {};
      _.each(options.gridColumns, function(c, id) {
        that.gridColumns[id] = new gridReport.model.GridColumn(c);
      });
    }
  };
  gridReport.model.GridColumn.prototype.id = null;
  gridReport.model.GridColumn.prototype.header = null;
  gridReport.model.GridColumn.prototype.headerReferenceText = null;
  gridReport.model.GridColumn.prototype.dataProviderKey = undefined;
  gridReport.model.GridColumn.prototype.parameters = [];
  gridReport.model.GridColumn.prototype.totalCalculations = [];
  gridReport.model.GridColumn.prototype.pinned = false;
  gridReport.model.GridColumn.prototype.groupable = true;
  gridReport.model.GridColumn.prototype.canEdit = true;
  gridReport.model.GridColumn.prototype.canDelete = true;
  gridReport.model.GridColumn.prototype.canPin = true;
  gridReport.model.GridColumn.prototype.canAdd = true;
  gridReport.model.GridColumn.prototype.canRename = true;
  gridReport.model.GridColumn.prototype.canAddRank = true;
  gridReport.model.GridColumn.prototype.canAddFormula = true;
  gridReport.model.GridColumn.prototype.canHideParameters = true;
  gridReport.model.GridColumn.prototype.canChangeValueFormatting = true;
  gridReport.model.GridColumn.prototype.canChangeStatistics = true;
  gridReport.model.GridColumn.prototype.hidden = false;
  gridReport.model.GridColumn.prototype.forcePinned = false;
  gridReport.model.GridColumn.prototype.tooltipField = null;
  gridReport.model.GridColumn.prototype.tooltipFormat = null;
  gridReport.model.GridColumn.prototype.columnSpan = 0;
  gridReport.model.GridColumn.prototype.vectorIndex = null;
  gridReport.model.GridColumn.prototype.canSubscribe = function() {
    return!_.isNull(this.command) && (!_.isUndefined(this.command) && (!_.isNull(this.command.dataProviderId) && !_.isUndefined(this.command.dataProviderId))) || _.some(this.gridColumns, function(column) {
      return column.canSubscribe();
    });
  };
  gridReport.model.GridColumn.prototype.canHaveStatistics = function() {
    return this.isNumber() || (this.isPercentage() || _.some(this.gridColumns, function(column) {
      return column.canHaveStatistics();
    }));
  };
  gridReport.model.GridColumn.prototype.isNumber = function() {
    return this.command != undefined && this.command.isNumber();
  };
  gridReport.model.GridColumn.prototype.isDate = function() {
    return this.command != undefined && this.command.isDate();
  };
  gridReport.model.GridColumn.prototype.isPercentage = function() {
    return this.command != undefined && this.command.isPercentage();
  };
  gridReport.model.GridColumn.prototype.getReturnType = function() {
    return this.command != undefined ? this.command.returnType : undefined;
  };
  gridReport.model.GridColumn.prototype.getDecimalDigits = function() {
    return this.command != undefined ? this.command.decimalDigits : undefined;
  };
  gridReport.model.GridColumn.prototype.hasSubColumns = function() {
    return this.gridColumns !== undefined && this.gridColumns !== null;
  };
  gridReport.model.GridColumn.prototype.hasSubColumn = function(colId) {
    return _.any(this.gridColums, function(c) {
      return c.id === colId;
    });
  };
  gridReport.model.GridColumn.prototype.resetHeaderToDefault = function() {
    if (this.initialHeader != null) {
      this.setHeader(this.initialHeader);
    }
  };
  gridReport.model.GridColumn.prototype.setHeader = function(newHeader) {
    if (newHeader != null) {
      this.header = newHeader;
    }
  };
  gridReport.model.GridColumn.prototype.initialHeader = null;
  gridReport.model.GridColumn.prototype.conditionalValueFormatting = null;
  gridReport.model.GridColumn.prototype.cellClickedAction = null;
  gridReport.model.GridColumn.prototype.cellRightClickedAction = null;
  gridReport.model.GridColumn.prototype.cellHoveringAction = null;
  gridReport.model.GridColumn.prototype.areParametersVisible = false;
  gridReport.model.GridColumn.prototype.isTimeSeriesable = function() {
    return this.command ? this.command.isTimeSeriesable : undefined;
  };
  gridReport.model.GridColumn.prototype.getPropsId = function() {
    return this.id + "_props";
  };
  gridReport.model.GridColumn.prototype.command = null;
  gridReport.model.GridColumn.prototype.gridColumns = null;
  gridReport.model.GridColumn.prototype.sortingType = gridReport.model.SortingTypes.ByValue;
  gridReport.model.GridColumn.prototype.width = null;
  gridReport.model.GridColumn.prototype.cellMouseEnterAction = null;
  gridReport.model.GridColumn.prototype.cellMouseLeaveAction = null;
  gridReport.model.GridColumn.prototype.selectedTotalsCalculation = null;
  gridReport.model.GridColumn.prototype.isHeaderChanged = function() {
    return this.initialHeader != null && this.initialHeader != this.header;
  };
  gridReport.model.GridColumn.prototype.cellClass = null;
  gridReport.model.GridColumn.prototype.isAutoresizable = null;
  gridReport.model.GridColumn.prototype.doNotShowPremiumDiscount = false;
  gridReport.model.GridColumn.prototype.showInHeaderAsTransposed = false;
  gridReport.model.GridColumn.prototype.parentColumn = null;
  gridReport.model.GridColumn.prototype.isComposeToVector = false;
  gridReport.model.GridColumn.prototype.isBarChartEnabled = false;
  gridReport.model.GridColumn.prototype.canHaveBarChart = function() {
    return this.command && (this.command.isNumber() && (!this.command.isVector() && (!this.command.isFactorRank() && (!this.command.isDataBlock() && (!this.command.isMultiSelect() && !(this.command.isCustom() && this.command.isTimeSeriesable === true))))));
  };
  gridReport.model.GridColumn.prototype.cellsTooltipFormat = undefined;
  gridReport.model.GridColumn.prototype.canHaveHeatMapping = function() {
    if (this.command && this.command.isColumnMath()) {
      return false;
    }
    if (this.gridColumns) {
      return _.any(this.gridColumns, function(gridColumn) {
        return gridColumn.canHaveHeatMapping();
      });
    }
    var isEnableHeatMapPropertySet = !!this.command && this.command.enableHeatMap != null;
    return isEnableHeatMapPropertySet && (this.isNumber() && (this.getReturnType() != scr.DataTypes.Money && this.command.enableHeatMap)) || !isEnableHeatMapPropertySet && (this.isNumber() && this.getReturnType() != scr.DataTypes.Money) || this.command && this.command.isFactorRank();
  };
  gridReport.model.GridColumn.prototype.disableFilter = false;
  gridReport.model.GridColumn.prototype.canBeFiltered = function() {
    return!this.disableFilter && (this.isValid() && (this.command == null || this.command && (!this.command.isVector() && (!this.command.isFactorRank() && (!this.command.isDataBlock() && (!this.command.isMultiSelect() && !(this.command.isCustom() && this.command.isTimeSeriesable === true)))))));
  };
  gridReport.model.GridColumn.prototype.getCellsFormat = function(colIndex) {
    if (!this.command.isDataBlock()) {
      return this.cellsFormat;
    }
    var index = 0;
    var subColumn = null;
    for (var key in this.gridColumns) {
      if (colIndex == index) {
        subColumn = this.gridColumns[key];
      }
      index++;
    }
    return subColumn ? subColumn.cellsFormat : this.cellsFormat;
  };
  gridReport.model.GridColumn.prototype.getSubColumnByVectorIndex = function(index) {
    if (!this.command.isDataBlock()) {
      return this;
    }
    var processedCols = 0;
    for (var colId in this.gridColumns) {
      processedCols += this.gridColumns[colId].getRepresentedColumnsCount();
      if (processedCols > index) {
        return this.gridColumns[colId];
      }
    }
    return this;
  };
  gridReport.model.GridColumn.prototype.getCellAlign = function() {
    var returnType = this.getReturnType();
    switch(returnType) {
      case "Text":
      ;
      case "String":
      ;
      case "Currency":
      ;
      case undefined:
      ;
      case null:
        return "left";
      default:
        return "right";
    }
  };
  gridReport.model.GridColumn.prototype.getMultiSelections = function() {
    var result = [];
    _.each(this.command.parameters, function(parameter) {
      if (parameter.isMultiSelect == true && !_.isEmpty(parameter.getValueOrDefault())) {
        _.each(parameter.getValues(), function(v) {
          var subResults = [];
          _.each(this.command.parameters, function(p) {
            if (p.id != parameter.id && (p.isMultiSelect == true && !_.isEmpty(p.getValueOrDefault()))) {
              _.each(p.getValues(), function(vv) {
                subResults.push(vv.value);
              });
            }
          });
          if (_.isEmpty(subResults)) {
            result.push(v.value);
          } else {
            result.push(v.value + " (" + subResults.join(", ") + ")");
          }
        }, this);
      }
    }, this);
    return result;
  };
  gridReport.model.GridColumn.prototype.getPeriods = function() {
    if (!this.command.isTimeSeries()) {
      return[];
    }
    var command = this.command;
    var periods = [];
    var eDate = null;
    var eDateParam = _.findWhere(command.parameters || [], {id:scr.output.ParameterIds.EDate});
    if (eDateParam != undefined && (eDateParam.getValue() != undefined && eDateParam.getValue() != "")) {
      eDate = parseInt(eDateParam.getValue());
    }
    var frqParam = _.findWhere(command.parameters || [], {id:scr.output.ParameterIds.Frq});
    if (frqParam != undefined && eDate != undefined) {
      var shift = getShift(command.parameters);
      eDate = eDate > 0 ? eDate + 1 : eDate - 1;
      var range = _.range(0, eDate, eDate > 0 ? 1 : -1);
      range = command.isNewestFirst ? range : range.reverse();
      _.each(range, function(period) {
        periods.push(frqParam.getValueOrDefault().toString() + (period + shift).toString());
      });
    }
    return periods;
  };
  gridReport.model.GridColumn.prototype.getFactors = function() {
    if (!this.command.isFactorRank() || !this.gridColumns) {
      return[];
    }
    var result = [];
    var idx = 0;
    for (var i in this.gridColumns) {
      if (this.gridColumns.hasOwnProperty(i)) {
        var title = idx > 0 ? "RANK" : "FACTOR";
        result.push(title);
      }
      idx += 1;
    }
    return result;
  };
  gridReport.model.GridColumn.prototype.getRepresentedColumnsCount = function() {
    var result = _.toArray(this.gridColumns).length || 1;
    if (result === 1) {
      var subColsLength = Math.max(this.getPeriods().length, this.getMultiSelections().length, this.getFactors().length);
      result = Math.max(result, subColsLength);
    }
    return result;
  };
  gridReport.model.GridColumn.prototype.isSummaryColumn = false;
  gridReport.model.GridColumn.prototype.isSavedInState = true;
  gridReport.model.GridColumn.prototype.filter = null;
  gridReport.model.GridColumn.prototype.isFilterApplied = function() {
    return!!this.filter;
  };
  gridReport.model.GridColumn.prototype.removeFilter = function() {
    this.filter = null;
  };
  gridReport.model.GridColumn.prototype.isSortable = function() {
    return this.command ? !this.command.isVector() && (!this.command.isFactorRank() && (!this.command.isDataBlock() && (!this.command.isMultiSelect() && !this.command.isMultiOutput()))) : true;
  };
  gridReport.model.GridColumn.prototype.cellsFormat = null;
  gridReport.model.GridColumn.prototype.isDeleted = function() {
    return!!this.command && this.command.isDeleted();
  };
  gridReport.model.GridColumn.prototype.isValid = function() {
    if (this.command && this.command.formula) {
      return!!this.command.formula.isValid;
    }
    return true;
  };
  gridReport.model.GridColumn.prototype.isMultiColumn = function() {
    return this.command && (this.command.isDataBlock() || this.command.isMultiOutput());
  };
  function getShift(parameters) {
    var frqParam = _.findWhere(parameters || [], {id:scr.output.ParameterIds.Frq}), periodParam = _.findWhere(parameters || [], {id:scr.output.ParameterIds.Period});
    try {
      if (frqParam && periodParam) {
        var periodValue = periodParam.getValue(), frqType = frqParam.getValueOrDefault(), periodType = periodValue.substring(0, frqType.length);
        if (periodType == frqType) {
          var shift = parseInt(periodValue.substring(frqType.length));
          if (_.isNumber(shift) && !isNaN(shift)) {
            return shift;
          }
        }
      }
    } catch (e) {
    }
    return 0;
  }
  gridReport.model.GridColumn.prototype.isColumnEmpty = false;
})();
goog.provide("gridReport.model.Response");
gridReport.model.Response = function(options) {
  if (options != null) {
    if (options.hasOwnProperty("exceptions")) {
      this.exceptions = options.exceptions;
    }
    if (options.hasOwnProperty("data")) {
      this.data = options.data;
    }
    if (options.hasOwnProperty("screenCount")) {
      this.screenCount = options.screenCount;
    }
  }
};
gridReport.model.Response.prototype.exceptions = null;
gridReport.model.Response.prototype.data = null;
gridReport.model.Response.prototype.screenCount = null;
gridReport.model.Response.prototype.isSuccess = function() {
  return this.exceptions == undefined;
};
gridReport.model.Response.prototype.hasData = function() {
  return this.data != undefined;
};
goog.provide("gridReport.directives.TickerAutosuggestDirective");
gridReport.Module.directive("gfTickerAutosuggest", ["$translate", "gfConfig", "$timeout", function($translate, gfConfig, $timeout) {
  return{replace:true, templateUrl:"", scope:{placeholderText:"=", isEnabled:"=", tickerSelected:"&", moreSearchSelected:"&"}, link:function(scope, element) {
    var autoSuggest = new nova.AutoSuggest(element[0], {url:gfConfig.synapseServiceUrl + gfConfig.tickerAutosuggestQuertyParams});
    var textbox = autoSuggest.getTextBox();
    textbox.setPlaceholderText(scope.placeholderText || $translate.instant("ADD_SECURITY"));
    autoSuggest.listen("itemSelected", function(e) {
      $timeout(function() {
        (scope.tickerSelected || angular.noop)({ticker:e.item.getValue().cmd});
      }, 100);
      textbox.setText("");
    });
    autoSuggest.listen("moreSearch", function(e) {
      (scope.moreSearchSelected || angular.noop)({event:e});
    });
    scope.$watch("isEnabled", function(newValue) {
      if (newValue !== null && newValue !== undefined) {
        if (newValue) {
          autoSuggest.enable();
        } else {
          autoSuggest.disable();
        }
      }
    });
    element.on("$destroy", function() {
      autoSuggest.dispose();
      delete scope.moreSearchSelected;
      delete scope.tickerSelected;
      scope.$destroy();
    });
  }};
}]);
goog.provide("gridReport.Module");
gridReport.Module = angular.module("gridReport", ["scr.RootModule", "LocalStorageModule", "pascalprecht.translate", "ui.bootstrap", "excelExporter", "ngGrid", "pdfExporter", "ngAnimate"]);
gridReport.Module.constant("gfDefaultCalculationName", "None");
gridReport.Module.constant("gfGroupableColumnsLabels", {"TR.HeadquartersRegion":"Region of Headquarters", "TR.HeadquartersCountry":"Country of Headquarters", "TR.ExchangeCountry":"Country of Exchange", "TR.TRBCBusinessSector":"TRBC Business Sector Name", "TR.TRBCEconomicSector":"TRBC Economic Sector Name", "TR.TRBCIndustryGroup":"TRBC Industry Group Name", "TR.TRBCIndustry":"TRBC Industry Name", "TR.GICSSector":"GICS Sector Name", "TR.GICSIndustryGroup":"GICS Industry Group Name", "TR.GICSIndustry":"GICS Industry Name", 
"TR.GICSSubIndustry":"GICS Sub-Industry Name"});
gridReport.Module.constant("gfColumnSources", {UDIP:"UDIP", QDIP:"QDIP"});
gridReport.Module.constant("gfAggregateRestrictions", [{text:"Current Universe", id:"univ"}, {text:"All Companies", id:"EquityAll"}, {text:"List / Portfolio / Index ...", id:"PWHEADER"}]);
gridReport.Module.constant("gfDefaultToolbarState", null);
gridReport.Module.config(["$translateProvider", function($translateProvider) {
  $translateProvider.translations("en-US", gridReport.localization.en);
  $translateProvider.translations("ja-JP", gridReport.localization.ja);
  $translateProvider.translations("zh-CN", gridReport.localization.zh);
}]);
gridReport.Module.factory("peValueFormatting", ["gfValueFormatting", function(gfValueFormatting) {
  return gfValueFormatting;
}]);
gridReport.Module.config(["$httpProvider", function($httpProvider) {
  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  }
  $httpProvider.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT";
  $httpProvider.defaults.headers.get["Cache-Control"] = "no-cache";
  $httpProvider.defaults.headers.get["Pragma"] = "no-cache";
}]);
goog.exportSymbol("gridReport", gridReport);
goog.provide("gridReport.directives.StatisticsControlController");
gridReport.Module.controller("gfStatisticsControlController", ["$scope", "gfStatisticsAlgorithms", "gfGridManagementService", function($scope, gfStatisticsAlgorithms, gfGridManagementService) {
  function toDictionary(array, uniqueFieldName) {
    var dictionary = {};
    angular.forEach(array, function(item) {
      var key = item[uniqueFieldName];
      if (key) {
        dictionary[key] = item;
      }
    });
    return dictionary;
  }
  function mergeAlgorithms(algorithms, selectedAlgorithms) {
    var algorithmsDictionary = toDictionary(selectedAlgorithms, "name");
    angular.forEach(algorithms, function(algorith) {
      var selectedAlgorith = algorithmsDictionary[algorith.name];
      algorith.selected = selectedAlgorith && selectedAlgorith.selected;
      algorith.isPremium = selectedAlgorith && selectedAlgorith.isPremium;
    });
    return algorithms;
  }
  function selectAlgorithm(algorithm) {
    if (!algorithm.selected) {
      algorithm.selected = true;
    }
  }
  function removePremiumStatusInOtherAlgorithms(premiumAlgorithm, allAlgorithms) {
    angular.forEach(allAlgorithms, function(algorithm) {
      algorithm.isPremium = algorithm.name === premiumAlgorithm.name;
    });
  }
  function init() {
    var selectedStatistics = gfGridManagementService.getStatistics($scope.gridInstanceId);
    _.forEach(selectedStatistics, function(s) {
      s.selected = true;
    });
    $scope.algorithms = mergeAlgorithms(gfStatisticsAlgorithms.getAll(), selectedStatistics);
  }
  $scope.markAsPremium = function(algorithm) {
    algorithm.isPremium = true;
    selectAlgorithm(algorithm);
    removePremiumStatusInOtherAlgorithms(algorithm, $scope.algorithms);
  };
  $scope.unmarkPremium = function(algorithm) {
    algorithm.isPremium = false;
  };
  init();
}]);
goog.provide("gridReport.directives.StatisticsControlDirective");
goog.require("gridReport.Module");
goog.require("gridReport.directives.StatisticsControlController");
gridReport.Module.directive("gfStatisticsControl", [function() {
  return{restrict:"E", replace:true, scope:{algorithms:"=", isEnabled:"=", showPremiumDiscount:"=", gridInstanceId:"="}, templateUrl:"scripts/directives/statistics/StatisticsControl.html", controller:"gfStatisticsControlController"};
}]);
goog.provide("gridReport.services.UuidGenerator");
gridReport.Module.factory("gfUuidGenerator", [function() {
  var service = {};
  service.get = function() {
    return uiIDGenerator.v1();
  };
  return service;
}]);
goog.provide("gridReport.services.BaseEventsAggregatorService");
goog.require("gridReport.services.UuidGenerator");
gridReport.Module.service("gfEventsAggregator", ["gfUuidGenerator", function(gfUuidGenerator) {
  var eventHandlers = [];
  function eventsContainer(containerId) {
    this.$containerId = containerId;
    this.raiseEvent = function(eventName) {
      var listeners = _.filter(eventHandlers, function(h) {
        return h.event == eventName && (containerId == null || (h.containerId == null || h.containerId == containerId));
      });
      var i = 0;
      var agrsToPass = Array.prototype.slice.call(arguments);
      agrsToPass.splice(0, 1);
      for (i = 0;i < listeners.length;i++) {
        listeners[i].callback.apply(this, agrsToPass);
      }
    };
    this.addHandler = function(event, callback, pushFirst) {
      if (_.isFunction(callback)) {
        var guid = gfUuidGenerator.get();
        if (!pushFirst) {
          eventHandlers.push({event:event, callback:callback, guid:guid, containerId:containerId});
        } else {
          eventHandlers.splice(0, 0, {event:event, callback:callback, guid:guid, containerId:containerId});
        }
        return guid;
      }
      return null;
    };
    this.removeHandler = function(guid) {
      var handlers = _.where(eventHandlers, {guid:guid});
      if (handlers) {
        for (var i = 0;i < handlers.length;i++) {
          eventHandlers.splice(eventHandlers.indexOf(handlers[i]), 1);
        }
      }
    };
    this.removeAllHandlers = function() {
      if (!containerId) {
        eventHandlers = [];
      } else {
        eventHandlers = _.filter(eventHandlers, function(e) {
          return e.containerId != containerId;
        });
      }
    };
    this.getChildAggregator = function(id) {
      return new eventsContainer(id);
    };
  }
  return new eventsContainer(null);
}]);
goog.provide("gridReport.services.MessageAggregatorFactory");
gridReport.Module.factory("gfMessageAggregatorFactory", function() {
  function messageAggregator(action, options) {
    var maxCapturedItemsCount = options.maxCapturedItemsCount || 5;
    var debounceDelay = options.delay || 1E3;
    var matchers = [];
    function execute(message, title) {
      var m = _.find(matchers, function(matcher) {
        if (matcher.regex) {
          var match = matcher.regex.exec(message);
          if (match) {
            matcher.matches.push(match[matcher.matchIndex]);
            return true;
          }
        } else {
          if (matcher.value) {
            return matcher.value === message;
          }
        }
        return false;
      });
      if (!m) {
        m = {value:message, format:message};
        addMatcher(m);
      }
      m.lazyAction(m.regex ? m.format.replace("$1", _.take(m.matches, maxCapturedItemsCount).join()) : m.format, title);
    }
    function addMatcher(matcher) {
      matcher.lazyAction = _.debounce(action, debounceDelay);
      matchers.push(matcher);
    }
    return{execute:execute, addMatcher:addMatcher};
  }
  return{create:function(action, options) {
    return new messageAggregator(action, options || {});
  }};
});
goog.provide("gridReport.model.InternalEvents");
gridReport.model.InternalEvents = {gridStateNotFound:"internalEvent_gridStateNotFound", changeCommand:"internalEvent_changeCommand", insertCommand:"internalEvent_insertCommand", addCommand:"internalEvent_addCommand", hidePicker:"internalEvent_hidePicker", groupingToolbarVisibilityChanged:"internalEvent_groupingToolbarVisibilityChanged", exclusionsToolbarVisibilityChanged:"internalEvent_exclusionsToolbarVisibilityChanged", columnAdded:"internalEvent_ColumnAdded"};
goog.provide("gridReport.services.NotificationService");
goog.require("gridReport.services.BaseEventsAggregatorService");
goog.require("gridReport.services.MessageAggregatorFactory");
goog.require("gridReport.model.InternalEvents");
gridReport.Module.factory("gfNotificationService", ["gfMessageAggregatorFactory", "$modal", "$translate", function(gfMessageAggregatorFactory, $modal, $translate) {
  function createErrorManager() {
    var errorAction = function(message) {
      var extendedTimeout = toastr.options.extendedTimeout;
      var timeOut = toastr.options.timeOut;
      try {
        toastr.options.extendedTimeout = 0;
        toastr.options.timeOut = 0;
        toastr.error(message);
      } finally {
        toastr.options.extendedTimeout = extendedTimeout;
        toastr.options.timeOut = timeOut;
      }
    };
    var aggregator = gfMessageAggregatorFactory.create(errorAction);
    aggregator.addMatcher({regex:/^Unable to collect data for the field '(.+)' and some specific identifier\(s\)\.$/, format:"Unable to collect data for the field '$1' and some specific identifier(s).", matches:[], matchIndex:1});
    aggregator.addMatcher({regex:/^jQuery[0-9_]+ was not called$/, format:"Authentication required.", matches:[], matchIndex:1});
    return aggregator;
  }
  var infoAggregator;
  var errorAggregator;
  var warningAggregator;
  var displayNotifications = true;
  var service = {};
  service.info = function(message, title) {
    if (!displayNotifications) {
      return;
    }
    infoAggregator = infoAggregator || gfMessageAggregatorFactory.create(toastr.info);
    infoAggregator.execute(message, title);
  };
  service.error = function(message, title) {
    if (!displayNotifications) {
      return;
    }
    errorAggregator = errorAggregator || createErrorManager();
    errorAggregator.execute(message, title);
  };
  service.warning = function(message, title) {
    if (!displayNotifications) {
      return;
    }
    warningAggregator = warningAggregator || gfMessageAggregatorFactory.create(toastr.warning);
    warningAggregator.execute(message, title);
  };
  service.clearMessages = function() {
    toastr.clear();
  };
  service.stopDisplayNotifications = function() {
    displayNotifications = false;
  };
  service.startDisplayNotifications = function() {
    displayNotifications = true;
  };
  service.confirm = function(message, okCallback, cancelCallback, title, showCheckbox, checkboxTitle, okBtnText, cancelBtnText) {
    var confirmSettings = {message:message, title:title ? title : $translate.instant("WARNING"), okCallback:okCallback, cancelCallback:cancelCallback, okText:okBtnText ? okBtnText : $translate.instant("OK"), cancelText:cancelBtnText ? cancelBtnText : $translate.instant("CANCEL"), checkboxTitle:checkboxTitle ? checkboxTitle : $translate.instant("DONT_ASK_AGAIN"), showCheckbox:showCheckbox};
    $modal.open({windowClass:"gf-notification gf-modal", keyboard:false, templateUrl:"scripts/templates/confirmation/confirm.html", controller:["$scope", "$modalInstance", "confirmSettings", "$document", function($scope, $modalInstance, confirmSettings, $document) {
      function keydownHandler(evt) {
        if (evt.which === 13) {
          $scope.ok();
        }
        if (evt.which === 27) {
          $scope.cancel();
        }
      }
      function execCallbackAndClose(callback) {
        if (callback) {
          callback($scope.confirmSettings.showCheckbox ? $scope.viewModel.doNotShowThisMessageAgain : undefined);
        }
        $modalInstance.close();
      }
      $scope.ok = _.partial(execCallbackAndClose, confirmSettings.okCallback);
      $scope.cancel = _.partial(execCallbackAndClose, confirmSettings.cancelCallback);
      $scope.confirmSettings = confirmSettings;
      $scope.viewModel = {doNotShowThisMessageAgain:false};
      $document.on("keydown", keydownHandler);
      $modalInstance.result.then(function() {
        $document.off("keydown", keydownHandler);
      }, function() {
        $document.off("keydown", keydownHandler);
      });
    }], resolve:{confirmSettings:function() {
      return confirmSettings;
    }}});
  };
  service.confirmSave = function(message, yesCallback, noCallback, cancelCallback) {
    var confirmSaveSettings = {message:message, yesCallback:yesCallback, noCallback:noCallback, cancelCallback:cancelCallback};
    $modal.open({keyboard:false, windowClass:"gf-notification gf-modal", templateUrl:"scripts/templates/confirmation/confirmSave.html", controller:["$scope", "$modalInstance", "confirmSaveSettings", "$document", function($scope, $modalInstance, confirmSaveSettings, $document) {
      function keydownHandler(evt) {
        if (evt.which === 13) {
          $scope.yes();
        }
        if (evt.which === 27) {
          $scope.cancel();
        }
      }
      function execCallbackAndClose(callback) {
        if (callback) {
          callback();
        }
        $modalInstance.close();
      }
      $scope.yes = _.partial(execCallbackAndClose, confirmSaveSettings.yesCallback);
      $scope.no = _.partial(execCallbackAndClose, confirmSaveSettings.noCallback);
      $scope.cancel = _.partial(execCallbackAndClose, confirmSaveSettings.cancelCallback);
      $scope.message = confirmSaveSettings.message;
      $document.on("keydown", keydownHandler);
      $modalInstance.result.then(function() {
        $document.off("keydown", keydownHandler);
      }, function() {
        $document.off("keydown", keydownHandler);
      });
    }], resolve:{confirmSaveSettings:function() {
      return confirmSaveSettings;
    }}});
  };
  service.infoDialog = function(options) {
    if (!options) {
      throw new Error("options should be provided");
    }
    return $modal.open({windowClass:"gf-notification gf-modal", templateUrl:"scripts/templates/confirmation/infoDialog.html", backdrop:true, controller:["$scope", "$modalInstance", function($scope, $modalInstance) {
      $scope.message = options.message;
      $scope.title = options.title;
      $scope.cancel = function() {
        $modalInstance.dismiss("cancel");
      };
    }]});
  };
  return service;
}]);
goog.provide("gridReport.model.Severity");
gridReport.model.Severity = {debug:"debug", information:"information", warning:"warning", high:"high", critical:"critical"};
goog.provide("gridReport.utils.LogManager");
goog.require("gridReport.services.NotificationService");
goog.require("gridReport.model.Severity");
gridReport.Module.factory("gfLogManager", ["gfEventsAggregator", "gfNotificationService", "$translate", "gfConfig", "$window", function(gfEventsAggregator, gfNotificationService, $translate, gfConfig, $window) {
  function getFormattedMessage(msg) {
    return "[GRID REPORT]: " + msg;
  }
  function getErrorMessage(error) {
    if (_.isString(error)) {
      return getFormattedMessage(error);
    } else {
      if (error && error.hasOwnProperty("message")) {
        if (error.hasOwnProperty("errorStack")) {
          var errorStack = _.chain(error.errorStack).filter(function(e) {
            return e != null && (e.ErrMessage != null && e.ErrMessage.Value != null);
          }).map(function(e) {
            return e.ErrMessage.Value;
          }).value().join("\n");
          return getFormattedMessage(error.message + "\n" + errorStack);
        } else {
          return getFormattedMessage(error.message);
        }
      }
    }
    return getFormattedMessage("Unknown error");
  }
  function log(severity, message) {
    switch(severity) {
      case gridReport.model.Severity.debug:
        $window.console.trace(message);
        break;
      case gridReport.model.Severity.warning:
        $window.console.warn(message);
        break;
      case gridReport.model.Severity.high:
      ;
      case gridReport.model.Severity.critical:
        $window.console.error(message);
        break;
      default:
        $window.console.info(message);
    }
  }
  function showNotification(notificationService, severity, message, title) {
    switch(severity) {
      case gridReport.model.Severity.warning:
        notificationService.warning(message, title || $translate.instant("WARNING"));
        break;
      case gridReport.model.Severity.high:
      ;
      case gridReport.model.Severity.critical:
        notificationService.error(message, title || $translate.instant("ERROR"));
        break;
      default:
        notificationService.info(message, title || $translate.instant("INFORMATION"));
    }
  }
  var service = {};
  service.error = function(error, suppressNotification) {
    if (JET && JET.Initialized) {
      try {
        JET.high(getErrorMessage(error));
      } catch (e) {
        $window.console.error(e.message + e.stack);
      }
    } else {
      $window.console.error(getErrorMessage(error));
    }
    if (!suppressNotification) {
      gfNotificationService.error(_.isString(error) ? error : error.notificationMessage || error.message, "Error");
    }
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.gridReportError, error);
  };
  service.log = function(item) {
    if (JET && JET.Initialized) {
      try {
        JET.log({messages:[{severity:item.severity, text:item.message}]});
      } catch (e) {
        $window.console.error(e.message + e.stack);
      }
    } else {
      log(item.severity, getErrorMessage(item));
    }
    if (item.showNotification) {
      showNotification(gfNotificationService, item.severity, item.notificationMessage || item.message);
    }
    if (item.raiseEvent) {
      gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.gridReportError, item);
    }
  };
  service.warning = function(warning) {
    if (JET && JET.Initialized) {
      try {
        JET.warning(getErrorMessage(warning));
      } catch (e) {
        $window.console.error(e.message + e.stack);
      }
    } else {
      $window.console.warn(getErrorMessage(warning));
    }
  };
  service.trace = function(msg) {
    if (gfConfig.trace) {
      if (_.isFunction(msg)) {
        $window.console.log(getFormattedMessage(msg()));
      } else {
        $window.console.log(getFormattedMessage(msg));
      }
    }
  };
  return service;
}]);
goog.provide("gridReport.model.BaseSortingModel");
goog.require("gridReport.utils.LogManager");
gridReport.model.BaseSortingModel = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
gridReport.model.BaseSortingModel.prototype.disableState = function() {
};
gridReport.model.BaseSortingModel.prototype.discard = function() {
};
gridReport.model.BaseSortingModel.prototype.gridElement = null;
gridReport.model.BaseSortingModel.prototype.refresh = function() {
};
gridReport.model.BaseSortingModel.prototype.state = null;
gridReport.model.BaseSortingModel.prototype._sortBy = function(column, direction, comparer, needRefresh) {
  this.gridElement.jqxGrid("sortby", column, direction, comparer, needRefresh);
};
goog.provide("gridReport.model.BaseSortingState");
goog.require("gridReport.model.BaseSortingModel");
gridReport.model.BaseSortingState = function() {
};
gridReport.model.BaseSortingState.prototype.equals = function(other) {
  return true;
};
gridReport.model.BaseSortingState.prototype._modelConstructor = gridReport.model.BaseSortingModel;
gridReport.model.BaseSortingState.prototype.createModel = function(gridElement) {
  return new this._modelConstructor({state:this, gridElement:gridElement});
};
goog.provide("gridReport.model.AdvancedSortingModel");
goog.require("gridReport.model.BaseSortingModel");
gridReport.model.AdvancedSortingModel = function(options) {
  goog.base(this, options);
};
goog.inherits(gridReport.model.AdvancedSortingModel, gridReport.model.BaseSortingModel);
gridReport.model.AdvancedSortingModel.prototype.disableState = function() {
  this.state.enabled = false;
};
gridReport.model.AdvancedSortingModel.prototype.discard = function() {
  this.state.enabled = false;
  this.state.criterias = null;
  this.gridElement.jqxGrid("removesort");
};
gridReport.model.AdvancedSortingModel.prototype.refresh = function() {
  goog.base(this, "refresh");
  this._sortBy("", true, angular.copy(this.state.criterias));
};
goog.provide("gridReport.model.AdvancedSortingCriteria");
gridReport.model.AdvancedSortingCriteria = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
gridReport.model.AdvancedSortingCriteria.prototype.asc = true;
gridReport.model.AdvancedSortingCriteria.prototype.dataField = null;
gridReport.model.AdvancedSortingCriteria.prototype.equals = function(otherCriteria) {
  return this.dataField == otherCriteria.dataField && this.asc == otherCriteria.asc;
};
goog.provide("gridReport.model.AdvancedSortingState");
goog.require("gridReport.model.AdvancedSortingCriteria");
goog.require("gridReport.model.BaseSortingState");
goog.require("gridReport.model.AdvancedSortingModel");
gridReport.model.AdvancedSortingState = function(options) {
  this.criterias = [];
  gridReport.jsUtils.mergeProperties(this, options);
};
goog.inherits(gridReport.model.AdvancedSortingState, gridReport.model.BaseSortingState);
gridReport.model.AdvancedSortingState.prototype.enabled = false;
gridReport.model.AdvancedSortingState.prototype.criterias = null;
gridReport.model.AdvancedSortingState.prototype._modelConstructor = gridReport.model.AdvancedSortingModel;
gridReport.model.AdvancedSortingState.prototype.equals = function(other) {
  try {
    if (this.enabled != other.enabled || this.criterias.length != other.criterias.length) {
      return false;
    }
    return _.every(this.criterias, function(c, i) {
      var otherCriteria = other.criterias[i];
      return c.dataField == otherCriteria.dataField && c.asc == otherCriteria.asc;
    });
  } catch (e) {
    return false;
  }
};
goog.provide("gridReport.directives.AdvancedSortingManagerController");
goog.require("gridReport.model.AdvancedSortingState");
gridReport.Module.controller("gfAdvancedSortingManagerController", ["$scope", "$modalInstance", "gfGridManagementService", "$translate", "gridInstanceId", "$timeout", "gfEventsAggregator", function($scope, $modalInstance, gfGridManagementService, $translate, gridInstanceId, $timeout, gfEventsAggregator) {
  var gridColumns;
  var sortingFullState;
  var selectors = {};
  selectors.modalElement = ".gf-advanced-sorting-modal_" + gridInstanceId;
  selectors.tableBody = selectors.modalElement + " .gf-block-table .body";
  function CriteriaModel(header, criteriaStateModel) {
    var that = this;
    this.header = header || $translate.instant("SELECT_FIELD");
    this.dataField = criteriaStateModel ? criteriaStateModel.dataField : "";
    this.order = !criteriaStateModel || criteriaStateModel.asc ? $translate.instant("ASCENDING") : $translate.instant("DESCENDING");
    this.toAdvancedSortingCriteria = function() {
      return new gridReport.model.AdvancedSortingCriteria({dataField:that.dataField, asc:that.order == $translate.instant("ASCENDING")});
    };
  }
  function getUnusedColumnsOptions(criteriaModel) {
    var res = [];
    if (criteriaModel) {
      res.push({id:criteriaModel.dataField, text:criteriaModel.header});
    }
    var unusedColumns = _.reject(gridColumns, function(column) {
      return _.any($scope.model.criterias, function(criteria) {
        return criteria.dataField == column.id;
      });
    });
    unusedColumns = filterColumns(unusedColumns);
    res = res.concat(_.map(unusedColumns, function(column) {
      return{id:column.id, text:column.header};
    }));
    return res;
  }
  function filterColumns(columns) {
    return _.filter(columns, function(column) {
      return!column.hidden && column.isSortable();
    });
  }
  function refreshMultisortingCheckboxState() {
    $scope.model.multiSortingEnabled = $scope.model.multiSortingEnabled && canEnableMultiSorting();
  }
  function deleteCriteria(index) {
    $scope.model.criterias.splice(index, 1);
    refreshMultisortingCheckboxState();
    refreshOptions();
  }
  function canEnableMultiSorting() {
    return!!($scope.model.criterias && $scope.model.criterias.length);
  }
  function ok() {
    $scope.closeDialog();
    $timeout(function() {
      saveState();
      if ($scope.model.multiSortingEnabled) {
        gfEventsAggregator.getChildAggregator(gridInstanceId).raiseEvent(gridReport.model.GridEvents.beginAdvancedSort);
      }
    });
  }
  function saveState() {
    var advancedSortingState = new gridReport.model.AdvancedSortingState({enabled:$scope.model.multiSortingEnabled, criterias:_.map($scope.model.criterias, function(c) {
      return c.toAdvancedSortingCriteria();
    })});
    sortingFullState.advancedSortingState = advancedSortingState;
    sortingFullState.isPrimaryRowFreezed = $scope.model.isPrimaryRowFreezed;
    gfGridManagementService.setSortingFullState(gridInstanceId, sortingFullState);
  }
  function closeDialog() {
    $modalInstance.close();
    $scope.$destroy();
  }
  function getCriteriaIndex(dataField) {
    return gridReport.jsUtils.findIndex($scope.model.criterias, "dataField", dataField);
  }
  function onSortableStop(event, ui) {
    var dataField = ui.item.data("datafield");
    var oldIndex = getCriteriaIndex(dataField);
    var newIndex = $(selectors.tableBody).children().index(ui.item);
    var criteria = $scope.model.criterias[oldIndex];
    deleteCriteria(oldIndex);
    $scope.model.criterias.splice(newIndex, 0, criteria);
    refreshOptions();
    $timeout(angular.noop);
  }
  function initSortable() {
    $(selectors.tableBody).sortable({axis:"y", cancel:".gf-icon, select", stop:onSortableStop});
  }
  function filterCriterias(criterias, columns) {
    return _.filter(criterias, function(c) {
      return _.any(columns, function(col) {
        return col.id == c.dataField && (!col.hidden && col.isSortable());
      });
    });
  }
  function init() {
    gridColumns = gfGridManagementService.getGridColumns(gridInstanceId);
    sortingFullState = gfGridManagementService.getSortingFullState(gridInstanceId);
    var advancedSortingState = sortingFullState.advancedSortingState;
    var isPrimaryRowFreezed = sortingFullState.isPrimaryRowFreezed;
    $scope.gridInstanceId = gridInstanceId;
    $scope.primaryRowFreezingCanBeEnabled = gfGridManagementService.getPrimaryRowKey(gridInstanceId) && gfGridManagementService.isPrimaryRowFreezingEnabled(gridInstanceId);
    var actualCriterias = filterCriterias(advancedSortingState.criterias, gridColumns);
    $scope.model = {isPrimaryRowFreezed:isPrimaryRowFreezed, multiSortingEnabled:advancedSortingState.enabled, criterias:_.map(actualCriterias, function(criteria) {
      var header = _.findWhere(gridColumns, {id:criteria.dataField}).header;
      return new CriteriaModel(header, criteria);
    })};
    refreshMultisortingCheckboxState();
    refreshOptions();
    $timeout(initSortable);
  }
  function isAddCriteriaEnabled() {
    return getUnusedColumnsOptions().length > 0;
  }
  function tryAddCriteria(opt) {
    if (opt) {
      $scope.model.criterias.push(new CriteriaModel(opt.text, {dataField:opt.id}));
      refreshOptions();
      $scope.model.multiSortingEnabled = true;
    }
  }
  function callbackToChangeCriteria(index) {
    return function(opt) {
      if (opt) {
        $scope.model.criterias[index] = new CriteriaModel(opt.text, {dataField:opt.id});
        refreshOptions();
      }
    };
  }
  function refreshOptions() {
    $scope.unusedColumnsOptions = getUnusedColumnsOptions();
    $scope.possibleOptions = [];
    for (var i = 0;i < $scope.model.criterias.length;i++) {
      $scope.possibleOptions.push(getUnusedColumnsOptions($scope.model.criterias[i]));
    }
  }
  function callbackToChangeCriteriaOrder(index) {
    return function(opt) {
      if (opt) {
        $scope.model.criterias[index].order = opt.id;
      }
    };
  }
  $scope.ok = ok;
  $scope.closeDialog = closeDialog;
  $scope.getUnusedColumnsOptions = getUnusedColumnsOptions;
  $scope.deleteCriteria = deleteCriteria;
  $scope.isAddCriteriaEnabled = isAddCriteriaEnabled;
  $scope.canEnableMultiSorting = canEnableMultiSorting;
  $scope.primaryRowFreezingCanBeEnabled = null;
  $scope.unusedColumnsOptions = [];
  $scope.tryAddCriteria = tryAddCriteria;
  $scope.callbackToChangeCriteria = callbackToChangeCriteria;
  $scope.callbackToChangeCriteriaOrder = callbackToChangeCriteriaOrder;
  $scope.possibleOptions = [];
  $scope.orderOptions = [{id:$translate.instant("ASCENDING"), text:$translate.instant("ASCENDING")}, {id:$translate.instant("DESCENDING"), text:$translate.instant("DESCENDING")}];
  init();
}]);
goog.provide("gridReport.directives.AdvancedSortingManagerService");
goog.require("gridReport.directives.AdvancedSortingManagerController");
gridReport.Module.service("gfAdvancedSortingManagerService", ["$modal", function($modal) {
  var service = {};
  service.openDialog = function(gridInstanceId, options) {
    return $modal.open({templateUrl:"scripts/directives/advancedSortingManager/AdvancedSortingManager.html", controller:"gfAdvancedSortingManagerController", windowClass:"gf-modal", resolve:{gridInstanceId:function() {
      return gridInstanceId;
    }, options:function() {
      return options;
    }}});
  };
  return service;
}]);
goog.provide("gridReport.model.GridEvents");
gridReport.model.GridEvents = {columnEditActivated:"columnEditActivated", columnInsertActivated:"columnInsertActivated", columnAdded:"columnAdded", columnRemoved:"columnRemoved", columnTimeseriesChartClicked:"columnTimeseriesChartClicked", columnParametersVisibilityChanged:"columnParametersVisibilityChanged", rowSelected:"rowSelected", rowUnselected:"rowUnselected", beforeColumnSort:"beforeColumnSort", sortChanged:"sortChanged", columnResized:"columnResized", columnReordered:"columnReordered", columnDataLoaded:"columnDataLoaded", 
createExpressionActivated:"createExpressionActivated", maxRowsCountExceeded:"maxRowsCountExceeded", gridReportError:"gridReportError", screenResolved:"screenResolved", identifiersExcluded:"identifiersExcluded", identifiersIncluded:"identifiersIncluded", formatSaved:"GridEvents_FormatSaved", resize:"GridEvents_resize", loadingStarted:"GridEvents_LoadingStarted", loadingEnded:"GridEvents_LoadingEnded", newStateApplied:"GridEvents_StateApplied", columnActionCanceled:"GridEvents_columnActionCanceled", 
stateChanged:"GridEvents_stateChanged", componentStateChanged:"GridEvents_ComponentStateChanged", templateLoadingStarted:"GridEvents_TemplateLoadingStarted", templateLoadingEnded:"GridEvents_TemplateLoadingEnded", templateCreated:"GridEvents_TemplateCreated", startLoadingRows:"GridEvents_StartLoadingRows", endLoadingRows:"GridEvents_EndLoadingRows", rowsAdded:"GridEvent_RowsAdded", rowsRemoved:"GridEvent_RowsRemoved", templateDeleted:"GridEvent_TemplateDeleted", templateRenamed:"GridEvent_TemplateDeleted", 
groupingApplied:"GridEvent_GroupingApplied", globalParametersApplied:"GridEvent_GlobalParametersApplied", groupingComponentRegistered:"GridEvent_GroupingComponentRegistered", templateSelectorComponentRegistered:"GridEvent_TemplateSelectorComponentRegistered", exclusionsComponentRegistered:"GridEvent_ExclusionsComponentRegistered", statisticsComponentRegistered:"GridEvent_StatisticsComponentRegistered", gridComponentRegistered:"GridEvent_GridComponentRegistered", primaryRowKeyChanged:"GridEvent_PrimaryRowKeyChanged", 
statisticsApplied:"GridEvent_StatisticsApplied", groupExpanded:"GridEvent_GroupExpanded", groupCollapsed:"GridEvent_GroupCollapsed", allGroupsExpanded:"GridEvent_AllGroupsExpanded", allGroupsCollapsed:"GridEvent_AllGroupsCollapsed", groupsStateRestored:"GridEvent_GroupsStateRestored", themeChanged:"GridEvent_ThemeChanged", showMoreSearchResultsSelected:"GridEvent_ShowMoreSearchResultsSelected", transposed:"GridEvent_Transposed", beginTranspose:"GridEvent_BeginTranspose", exportAllAsFormulaToExcel:"GridEvent_ExportAllAsFormulaToExcel", 
exportSelectedAsFormulaToExcel:"GridEvent_ExportSelectedAsFormulaToExcel", exportAllAsValuesToExcel:"GridEvent_ExportAllAsValuesToExcel", exportSelectedAsValuesToExcel:"GridEvent_ExportSelectedAsValuesToExcel", exportAllToQuoteObject:"GridEvent_ExportAllToQuoteObject", exportSelectedToQuoteObject:"GridEvent_ExportSelectedToQuoteObject", exportAllToList:"GridEvent_EportAllToList", exportSelectedToList:"GridEvent_ExportSelectedToList", exportAllToExistingList:"GridEvent_ExportAllToExistingList", exportSelectedToExistingList:"GridEvent_ExportSelectedToExistingList", 
columnInfoClicked:"GridEvent_ColumnInfoClicked", columnChartClicked:"GridEvent_ColumnChartClicked", excludeRows:"GridEvent_ExcludeRows", beginGroupApply:"GridEvent_GroupingEnabled", beginAdvancedSort:"GridEvent_AdvancedSortEnabled", mfrAdded:"GridEvent_MFR_Added", templateSelectorTemplateSelected:"GridEvent_TemplateSelectorTemplateSelected", templateManagerTemplateSelected:"GridEvent_TemplateManagerTemplateSelected", displayOptionsChanged:"GridEvent_DisplayOptionsChanged", heatMapChanged:"GridEvent_HeatMapChanged", 
templateSelectorComponentInitialized:"GridEvent_TemplateSelectorComponentInitialized", columnFilterResultsClicked:"GridEvent_ColumnFilterResultsClicked", columnFilterApplied:"GridEvent_ColumnFilterApplied", columnFiltersRemoved:"GridEvent_ColumnFiltersRemoved", highlightedRowKeyChanged:"GridEvent_HighlightedRowKeyChanged", templateImported:"GridEvent_TemplateImported", columnSelected:"GridEvent_ColumnSelected", groupRowRightClicked:"GridEvent_GroupRowRightClicked", printLandscape:"GridEvent_PrintLandscape", 
printPortrait:"GridEvent_PrintPortrait", exportToPdfLandscape:"GridEvent_ExportToPdfLandscape", exportToPdfPortrait:"GridEvent_ExportToPdfPortrait", qdipTextChanged:"GridEvent_QdipTextChanged"};
goog.provide("gridReport.services.StatisticsExclusions");
goog.require("gridReport.Module");
goog.require("gridReport.model.GridEvents");
gridReport.Module.factory("gfStatisticsExclusions", ["gfEventsAggregator", function(gfEventsAggregator) {
  function createService(id) {
    var exclusions = {};
    var excludedIdentifiers = [];
    function isExclusionsNotChanged(identifiers) {
      return excludedIdentifiers.length == identifiers.length && (_.difference(excludedIdentifiers, identifiers).length == 0 && _.difference(identifiers, excludedIdentifiers).length == 0);
    }
    var service = {};
    service.isHidden = function(identifier) {
      return!!exclusions[identifier];
    };
    service.setExclusions = function(identifiers) {
      if (isExclusionsNotChanged(identifiers)) {
        return;
      }
      excludedIdentifiers = identifiers;
      exclusions = _.reduce(identifiers, function(map, item) {
        map[item] = true;
        return map;
      }, {});
      gfEventsAggregator.getChildAggregator(id).raiseEvent(gridReport.model.GridEvents.identifiersExcluded, identifiers, gridReport.model.ExclusionsTypes.StatisticsExclusions);
    };
    service.getExcludedIdentifiers = function() {
      return excludedIdentifiers;
    };
    service.exclude = function(identifiers) {
      var addedToExclusion = _.difference(identifiers, excludedIdentifiers);
      if (addedToExclusion.length == 0) {
        return addedToExclusion;
      }
      service.setExclusions(_.union(excludedIdentifiers, addedToExclusion));
      return addedToExclusion;
    };
    service.removeFromExcluded = function(identifiers) {
      service.setExclusions(_.difference(excludedIdentifiers, identifiers));
    };
    service.filterExclusions = function(identifiers) {
      var currentExclusions = _.sortBy(excludedIdentifiers);
      var identifiersToExclude = _.sortBy(_.intersection(excludedIdentifiers, identifiers));
      if (_.isEqual(currentExclusions, identifiersToExclude)) {
        return;
      }
      service.setExclusions(_.intersection(excludedIdentifiers, identifiers));
    };
    return service;
  }
  var services = {};
  return{instance:function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService(gridInstanceId);
    }
    return services[gridInstanceId];
  }, clear:function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  }};
}]);
goog.provide("gridReport.services.ActionPostponingService");
gridReport.Module.factory("gfActionPostponingService", function() {
  function actionPostponingService() {
    var actionDictionary = {};
    function executeAction(key, action, timeout) {
      if (timeout == undefined) {
        timeout = 300;
      }
      if (actionDictionary[key] != undefined) {
        clearTimeout(actionDictionary[key].timeoutKey);
      }
      actionDictionary[key] = {action:action};
      actionDictionary[key].timeoutKey = setTimeout(function() {
        actionDictionary[key].action();
        delete actionDictionary[key];
      }, timeout);
    }
    return{execute:executeAction};
  }
  var services = {};
  return{get:function(id) {
    return services[id] || (services[id] = actionPostponingService());
  }};
});
goog.provide("gridReport.services.StateProvideService");
gridReport.services.StateProvideService.components = {grid:"Grid", templates:"Templates", exclusions:"Exclusions", grouping:"Grouping", statisticsExclusions:"StatisticsExclusions"};
gridReport.Module.factory("gfStateProviderService", ["$log", function($log) {
  var registry = {};
  var service = {};
  var gridStateToStateId = {};
  service.register = function(component, id, callbacks) {
    if (!registry.hasOwnProperty(component)) {
      registry[component] = {};
    }
    if (registry[component].hasOwnProperty(id)) {
      $log.warn("Overriding callbacks of already registered grid toolbar " + id);
    }
    registry[component][id] = {getState:callbacks.getStateCallback, setState:callbacks.setStateCallback};
  };
  service.unregister = function(component, id) {
    if (registry.hasOwnProperty(component)) {
      delete registry[component][id];
    }
  };
  service.getState = function(component, id, options) {
    if (registry.hasOwnProperty(component)) {
      return registry[component][id].getState(options);
    }
    return null;
  };
  service.setState = function(component, id, state, callback) {
    if (registry.hasOwnProperty(component)) {
      registry[component][id].setState(state, callback);
    }
  };
  service.getAllComponentsState = function(id) {
    var state = {};
    for (var c in gridReport.services.StateProvideService.components) {
      if (!gridReport.services.StateProvideService.components.hasOwnProperty(c)) {
        continue;
      }
      var component = gridReport.services.StateProvideService.components[c];
      if (!registry.hasOwnProperty(component) || !registry[component].hasOwnProperty(id)) {
        continue;
      }
      state[component] = registry[component][id].getState();
    }
    return state;
  };
  service.setAllComponentsState = function(id, state) {
    for (var c in gridReport.services.StateProvideService.components) {
      if (!gridReport.services.StateProvideService.components.hasOwnProperty(c)) {
        continue;
      }
      var component = gridReport.services.StateProvideService.components[c];
      if (!registry.hasOwnProperty(component) || !registry[component].hasOwnProperty(id)) {
        continue;
      }
      registry[component][id].setState(state == null || !state.hasOwnProperty(component) ? null : state[component]);
    }
  };
  service.setStateId = function(gridInstanceId, stateId) {
    gridStateToStateId[gridInstanceId] = stateId;
  };
  service.getStateId = function(gridInstanceId) {
    return gridStateToStateId[gridInstanceId];
  };
  return service;
}]);
goog.provide("gridReport.services.GridStateService");
goog.require("gridReport.services.StateProvideService");
gridReport.Module.factory("gfGridStateService", ["$log", "gfStateProviderService", function($log, gfStateProviderService) {
  var registry = {};
  var service = {};
  service.register = function(id, callbacks) {
    if (registry.hasOwnProperty(id)) {
      $log.warn("Overriding callbacks of already registered grid " + id);
    }
    gfStateProviderService.register(gridReport.services.StateProvideService.components.grid, id, callbacks);
    registry[id] = {getGridDescription:callbacks.getGridDescriptionCallback};
  };
  service.unregister = function(id) {
    gfStateProviderService.unregister(gridReport.services.StateProvideService.components.grid, id);
    delete registry[id];
  };
  service.getState = function(id, options) {
    return gfStateProviderService.getState(gridReport.services.StateProvideService.components.grid, id, options);
  };
  service.setState = function(id, state, callback) {
    gfStateProviderService.setState(gridReport.services.StateProvideService.components.grid, id, state, callback);
  };
  service.getGridDescription = function(id) {
    return registry[id].getGridDescription();
  };
  return service;
}]);
goog.provide("gridReport.model.ColumnContextMenuOptions");
gridReport.model.ColumnContextMenuOptions = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
gridReport.model.ColumnContextMenuOptions.prototype.canPin = true;
gridReport.model.ColumnContextMenuOptions.prototype.canAdd = true;
gridReport.model.ColumnContextMenuOptions.prototype.canDelete = true;
gridReport.model.ColumnContextMenuOptions.prototype.canEdit = true;
gridReport.model.ColumnContextMenuOptions.prototype.canRename = true;
gridReport.model.ColumnContextMenuOptions.prototype.canHideParameters = true;
gridReport.model.ColumnContextMenuOptions.prototype.canChangeValueFormatting = true;
gridReport.model.ColumnContextMenuOptions.prototype.canChangeStatistics = true;
gridReport.model.ColumnContextMenuOptions.prototype.canGroup = true;
gridReport.model.ColumnContextMenuOptions.prototype.canChangeSortingType = false;
gridReport.model.ColumnContextMenuOptions.prototype.canChangeCellsFormatting = true;
gridReport.model.ColumnContextMenuOptions.prototype.canAddRank = true;
gridReport.model.ColumnContextMenuOptions.prototype.canAddFormula = true;
goog.provide("gridReport.controllers.GridReportController");
goog.require("gridReport.model.ColumnContextMenuOptions");
gridReport.Module.controller("GridReportController", ["$scope", "$timeout", "gfMultiFactorRankConverter", "gfEventsAggregator", "gfColumnMathDialogService", "gfStatisticsExclusions", function($scope, $timeout, gfMultiFactorRankConverter, gfEventsAggregator, gfColumnMathDialogService, gfStatisticsExclusions) {
  this.columnContextMenuOptions = $scope.columnContextMenuOptions || new gridReport.model.ColumnContextMenuOptions;
  $scope.clickedColumn = {object:{}, model:{}};
  $scope.gridRowsCount = 0;
  this.theme = $scope.theme;
  this.isColumnContextMenuActive = function() {
    return $scope.gridReportSettings.isColumnContextMenuActive && ($scope.isGridEnabled && !$scope.getSelectionState());
  };
  this.isGridContextMenuActive = function() {
    return $scope.isGridEnabled;
  };
  this.getGroupable = function() {
    return $scope.gridReportSettings.groupable;
  };
  this.isExclusionsEnabled = function() {
    return $scope.gridReportSettings.enableExclusions && $scope.gridReportSettings.exclusionsType === gridReport.model.ExclusionsTypes.Exclusions;
  };
  this.canExlcuded = function(rowKey) {
    return this.isExclusionsEnabled() && (rowKey && (rowKey != "undefined" && !this.isRowEmpty(rowKey)));
  };
  this.getColumnById = function(id) {
    return _.findWhere($scope.gridReportSettings.columns, {id:id});
  };
  this.setColumnSortingType = function(columnId, sortingType, needRefreshSorting) {
    return $scope.setColumnSortingType(columnId, sortingType, needRefreshSorting);
  };
  this.updateClickedColumnById = function(id, subColId) {
    $scope.clickedColumn.model = _.findWhere($scope.gridReportSettings.columns, {id:id});
    if (subColId != null) {
      $scope.clickedColumn.subColModel = $scope.clickedColumn.model.gridColumns[subColId];
    } else {
      $scope.clickedColumn.subColModel = null;
    }
    $scope.clickedColumn.object = $scope.getColumn(id);
    return $scope.clickedColumn;
  };
  this.setTotalCalculation = function(calculation) {
    $timeout(function() {
      $scope.setTotalCalculation(calculation);
    });
  };
  this.applyCellsFormatting = function() {
    $timeout(function() {
      $scope.applyCellsFormatting();
    });
  };
  this.deleteColumn = function() {
    $timeout(function() {
      $scope.removeColumn($scope.clickedColumn.model.id);
    });
  };
  this.editColumn = function() {
    var column = $scope.clickedColumn.model;
    if (column) {
      if (column.command && column.command.isColumnMath()) {
        gfColumnMathDialogService.openDialog($scope.gridInstanceId, {column:column, mode:"edit"});
      } else {
        gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.CommandEvents.showPicker, {initialCommand:column.command, mode:"edit", universeContext:$scope.gridReportSettings.universeContext, gridInstanceId:$scope.gridInstanceId});
      }
    }
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.columnEditActivated, column);
    $scope.$apply();
  };
  this.getIsTransposed = function() {
    return $scope.isTransposed;
  };
  this.renameColumn = function() {
    $scope.startEditColumnHeader($scope.clickedColumn.subColModel || $scope.clickedColumn.model, $scope.clickedColumn.model);
  };
  this.expandAllGroups = function() {
    $scope.expandAllGroups();
  };
  this.excludeSelectedRows = function() {
    $scope.excludeSelectedRows();
  };
  this.excludeRow = function(rowKey) {
    $scope.excludeRow(rowKey);
  };
  this.collapseAllGroups = function() {
    $scope.collapseAllGroups();
  };
  this.insertColumn = function() {
    var col = $scope.clickedColumn.model;
    if (col) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.CommandEvents.showPicker, {initialCommand:col.command, mode:"insert", universeContext:$scope.gridReportSettings.universeContext, gridInstanceId:$scope.gridInstanceId});
    }
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.columnInsertActivated, col);
    $scope.$apply();
  };
  this.insertBlankRow = function(rowKey, insertPosition) {
    $scope.insertBlankRow(rowKey, insertPosition);
  };
  this.insertBlankColumn = function(columnId, insertPosition) {
    $scope.insertBlankColumn(columnId, insertPosition);
  };
  this.canChangeStatistics = function() {
    return $scope.getGrouping().length > 0 || $scope.gridReportSettings.showTotalsRow;
  };
  this.canSelectAll = function() {
    return $scope.gridReportSettings.selectionMode === gridReport.model.GridReportSelectionMode.MultipleRows || $scope.gridReportSettings.selectionMode === gridReport.model.GridReportSelectionMode.MultipleRowsExtended;
  };
  this.selectAllRows = function() {
    $scope.selectAllRows();
  };
  this.clearSelection = function() {
    $scope.clearSelection();
  };
  this.pinColumn = function() {
    $timeout(function() {
      $scope.pinColumn($scope.clickedColumn.model.id);
      $scope.clickedColumn.model.pinned = true;
    });
  };
  this.unpinColumn = function() {
    if (!$scope.clickedColumn.model.forcePinned) {
      $timeout(function() {
        $scope.unpinColumn($scope.clickedColumn.model.id);
        $scope.clickedColumn.model.pinned = false;
      });
    }
  };
  this.resetHeaderToDefault = function() {
    var colModel = $scope.clickedColumn.subColModel || $scope.clickedColumn.model;
    if (colModel) {
      $timeout(function() {
        colModel.resetHeaderToDefault();
        $scope.setColumnHeader($scope.clickedColumn.model.id, $scope.clickedColumn.model.header);
      });
    }
  };
  this.isGroupedBy = function() {
    return _.contains($scope.getGrouping(), $scope.clickedColumn.model.id);
  };
  this.showHiddenRows = function() {
    $scope.showHiddenRows();
  };
  this.getCurrentExpandCollapseState = function() {
    return $scope.getCurrentExpandCollapseState();
  };
  this.setColumnParametersVisibility = function(areParametersVisible) {
    var colModel = $scope.clickedColumn.subColModel || $scope.clickedColumn.model;
    colModel.areParametersVisible = areParametersVisible;
    $scope.columParametersVsibilityChanged();
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.columnParametersVisibilityChanged, $scope.clickedColumn.model);
  };
  this.addRankForColumn = function(gridColumn, methodology, previousColumn) {
    if (gridColumn && methodology) {
      $timeout(function() {
        gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.InternalEvents.insertCommand, {previousCommand:previousColumn ? previousColumn.command : gridColumn.command, newCommand:gfMultiFactorRankConverter.createMultiFactorRankCommand(gridColumn, {methodology:methodology, isBasedOnColumn:true}), isUserTriggered:true, columnParams:{canEdit:false}});
      });
    }
  };
  this.isExcludeFromStatisticsEnabled = function() {
    return $scope.gridReportSettings.enableExclusions && $scope.gridReportSettings.exclusionsType === gridReport.model.ExclusionsTypes.StatisticsExclusions;
  };
  this.excludeRowFromStatistics = function(rowKey) {
    $scope.excludeRowFromStatistics(rowKey);
  };
  this.excludeSelectedRowsFromStatistics = function() {
    $scope.excludeSelectedRowsFromStatistics();
  };
  this.removeFromExcludedFromStatistics = function(rowKey) {
    $scope.removeFromExcludedFromStatistics(rowKey);
  };
  this.isPrimaryRowKey = function(rowKey) {
    return!_.isEmpty($scope.primaryRowKey) && $scope.primaryRowKey == rowKey;
  };
  this.isRowEmpty = function(rowKey) {
    return $scope.isRowEmpty(rowKey);
  };
  this.canExcludedFromStatistics = function(rowKey) {
    return this.isExcludeFromStatisticsEnabled() && (!this.isPrimaryRowKey(rowKey) && (!this.isRowEmpty(rowKey) && !gfStatisticsExclusions.instance(this.getGridInstanceId()).isHidden(rowKey)));
  };
  this.getGridInstanceId = function() {
    return $scope.gridInstanceId;
  };
  this.canInsertBlankRow = function() {
    return $scope.gridReportSettings.enableEmptyRowInserting;
  };
}]);
goog.provide("gridReport.services.DataServiceFactory");
gridReport.Module.factory("gfDataServiceFactory", ["gfLogManager", function(gfLogManager) {
  function createInstance(gfDataProviderResolver) {
    return new gridReport.services.DataService(gfDataProviderResolver, gfLogManager);
  }
  return{createInstance:createInstance};
}]);
goog.provide("gridReport.model.ErrorCodes");
gridReport.model.ErrorCodes = {MAX_ROWS_COUNT_EXCEEDED:"MAX_ROWS_COUNT_EXCEEDED", GENERIC_ERROR:"GENERIC_ERROR", FAILED_TO_RESOLVE_UNIVERSE:"FAILED_TO_RESOLVE_UNIVERSE", THERE_ARE_NO_ITEMS_TO_DISPLAY:"THERE_ARE_NO_ITEMS_TO_DISPLAY", ADC_ERROR:"ADC_ERROR", FAILED_TO_LOAD_TEMPLATE:"FAILED_TO_LOAD_TEMPLATE"};
goog.provide("gridReport.adapters.GridDraggableRowsController");
gridReport.directives.GridDraggableRowsController = function(gridAdapter) {
  var rowsContainerSelector = ".jqx-grid-content > div:not(.jqx-grid-premium-discount-row-container):not(.jqx-grid-inline-chart-row-container)";
  var that = this;
  var fakeRow = null;
  function getDataItemIndexByRowKey(rowKey, gridData) {
    gridData = gridData || gridAdapter.getGridData();
    if (!gridData || !gridData.length) {
      return-1;
    }
    var indexes = $.map(gridData, function(item, index) {
      if (item.rowKey == rowKey) {
        return index;
      }
      return undefined;
    });
    return indexes.length ? indexes[0] : -1;
  }
  function getRowsContainer() {
    return gridAdapter._getGrid().find(rowsContainerSelector);
  }
  function tryTogglePrimaryRowsVisibility(visibility) {
    if (!isPrimaryRowVisible()) {
      return;
    }
    fakeRow = fakeRow || getRowElementByKey(gridAdapter.getPrimaryRow()).first().next();
    fakeRow = fakeRow.hasClass("ui-sortable-placeholder") ? fakeRow.next() : fakeRow;
    var detailsRow = gridAdapter._getGrid().find(".jqx-grid-premium-discount-row-container");
    if (visibility) {
      fakeRow.show();
      detailsRow.show();
      fakeRow = null;
    } else {
      fakeRow.hide();
      detailsRow.hide();
    }
  }
  function isPrimaryRowVisible() {
    var index = getDataItemIndexByRowKey(gridAdapter.getPrimaryRow());
    return gridAdapter.getPrimaryRow() && (index != -1 && (gridAdapter.getPremiumDiscountStatistics() && !gridAdapter.getGridData()[index].isRowHidden));
  }
  function getRowKey(rowItem) {
    var keyString = rowItem.find("[row-key]").attr("row-key");
    return keyString ? unescape(keyString) : keyString;
  }
  function getRowElementByKey(rowKey) {
    return getRowsContainer().children().has('[row-key="' + rowKey + '"]');
  }
  function getNewIndexForLocalStorage(rowItem, data) {
    var siblingKey = getRowKey(rowItem.nextAll(":visible").first());
    var k = 0;
    if (!siblingKey) {
      siblingKey = getRowKey(rowItem.prevAll(":visible").first());
      k = 1;
    }
    var siblingDataIndex = gridReport.jsUtils.findIndex(data, "rowKey", siblingKey);
    var index = siblingDataIndex + k;
    return index < 0 ? 0 : index;
  }
  function initSortable($gridContent) {
    var records = null;
    var oldIndex = null;
    var newIndex = null;
    $gridContent.sortable({items:'>:has("[row-key]:not(.freezed-row)")', axis:"y", handle:'[column-key="rowKey"],[column-key="TR.CommonName"],[column-key="columnName"]', zIndex:9E3, start:function(event, ui) {
      tryTogglePrimaryRowsVisibility(false);
      that.rowDragBegin && that.rowDragBegin();
      var draggableRowKey = getRowKey(ui.item);
      var dataView = gridAdapter._getDataView();
      if (dataView.sortdata) {
        records = _.pluck(dataView.sortdata, "value");
      } else {
        records = angular.copy(dataView.records);
      }
      oldIndex = gridReport.jsUtils.findIndex(records, "rowKey", draggableRowKey);
    }, stop:function() {
      try {
        $(this).sortable("cancel");
      } catch (e) {
        initSortable($gridContent);
      }
      tryTogglePrimaryRowsVisibility(true);
      var indexToScroll = newIndex + 1;
      if (isPrimaryRowVisible()) {
        gridAdapter.refreshPremiumDiscount();
        gridAdapter.scrollToRow(indexToScroll);
      }
      setTimeout(function() {
        if (that.rowDragEnd) {
          that.rowDragEnd(oldIndex, newIndex === null ? oldIndex : newIndex);
        }
      });
    }, update:function(event, ui) {
      var dataItem = records[oldIndex];
      records.splice(oldIndex, 1);
      newIndex = getNewIndexForLocalStorage(ui.item, records);
      records.splice(newIndex, 0, dataItem);
      gridAdapter._setRowsOrder(records);
    }});
  }
  this.hasDraggableRows = function() {
    return!!getRowsContainer().data("ui-sortable");
  };
  this.makeRowsDraggable = function() {
    var $gridContent = getRowsContainer();
    if (that.hasDraggableRows()) {
      try {
        $gridContent.sortable("refresh");
      } catch (e) {
        initSortable($gridContent);
      }
    } else {
      initSortable($gridContent);
    }
  };
  this.erase = function() {
    gridAdapter = null;
  };
};
goog.provide("gridReport.model.Error");
gridReport.model.Error = function(options) {
  if (options) {
    if (options.hasOwnProperty("displayMessage")) {
      this.displayMessage = options.displayMessage;
    }
    if (options.hasOwnProperty("errorDetails")) {
      this.errorDetails = options.errorDetails;
    }
    if (options.hasOwnProperty("errorStack")) {
      this.errorStack = options.errorStack;
    }
    if (options.hasOwnProperty("originalError")) {
      this.originalError = options.originalError;
    }
  }
  if (!this.errorStack) {
    this.errorStack = [];
  }
};
gridReport.model.Error.prototype.displayMessage = null;
gridReport.model.Error.prototype.errorDetails = null;
gridReport.model.Error.prototype.errorStack = null;
gridReport.model.Error.convert = function(error) {
  if (_.isString(error)) {
    return new gridReport.model.Error({displayMessage:error, originalError:error});
  }
  if (_.isObject(error)) {
    var converted = new gridReport.model.Error({originalError:error});
    if (error.hasOwnProperty("errorCode")) {
      converted.errorCode = error.errorCode;
    }
    if (error.hasOwnProperty("notificationMessage")) {
      converted.displayMessage = error.notificationMessage;
    }
    if (error.hasOwnProperty("message")) {
      converted.errorDetails = error.message;
    }
    if (error.hasOwnProperty("errorStack")) {
      converted.errorStack = error.errorStack;
    }
    return converted;
  }
  return new gridReport.model.Error;
};
goog.provide("gridReport.adapters.CellShading");
gridReport.adapters.CellShadingCalculationMode = {AllColumns:"CellShadingCalculationMode_AllColumns", PerColumn:"CellShadingCalculationMode_PerColumn"};
gridReport.adapters.CellShading = function(heatMapService, options) {
  if (!heatMapService) {
    throw new Error("heatMapService should be provided");
  }
  this.heatMapService = heatMapService;
  this.standardDeviations = {};
  if (options) {
    if (options.hasOwnProperty("isEnabled")) {
      this.isEnabled = options.isEnabled;
    }
    if (options.hasOwnProperty("mode")) {
      this.mode = options.mode;
    }
  }
};
gridReport.adapters.CellShading.prototype.mode = gridReport.adapters.CellShadingCalculationMode.PerColumn;
gridReport.adapters.CellShading.prototype.isEnabled = false;
gridReport.adapters.CellShading.prototype.heatMapService = null;
gridReport.adapters.CellShading.prototype.standardDeviations = null;
gridReport.adapters.CellShading.prototype.clear = function() {
  this.standardDeviations = {};
};
gridReport.adapters.CellShading.prototype.recalculate = function(gridColumns, data) {
  var columnIds, columnIndex, n, column, caclulatedStatisticsValue;
  this.clear();
  if (this.isEnabled) {
    if (this.mode == gridReport.adapters.CellShadingCalculationMode.AllColumns) {
      columnIds = [];
      for (columnIndex = 0, n = gridColumns.length;columnIndex < n;columnIndex++) {
        column = gridColumns[columnIndex];
        if (!column.isSummaryColumn && column.canHaveHeatMapping()) {
          columnIds.push(column.id);
        }
      }
      caclulatedStatisticsValue = this.getStatisticValues_(columnIds, data);
      for (columnIndex = 0, n = gridColumns.length;columnIndex < n;columnIndex++) {
        column = gridColumns[columnIndex];
        if (column.canHaveHeatMapping()) {
          this.standardDeviations[column.id] = caclulatedStatisticsValue;
        }
      }
    } else {
      for (columnIndex = 0, n = gridColumns.length;columnIndex < n;columnIndex++) {
        column = gridColumns[columnIndex];
        if (column.canHaveHeatMapping()) {
          this.standardDeviations[column.id] = this.getStatisticValues_([column.id], data);
        }
      }
    }
  }
};
gridReport.adapters.CellShading.prototype.getStatisticValues_ = function(columnIds, data) {
  var values = [], rowIndex, columnIndex, value, rowsCount, columnsIdsLength;
  for (rowIndex = 0, rowsCount = data.length;rowIndex < rowsCount;rowIndex++) {
    var row = data[rowIndex];
    for (columnIndex = 0, columnsIdsLength = columnIds.length;columnIndex < columnsIdsLength;columnIndex++) {
      value = row[columnIds[columnIndex]];
      if (_.isNumber(value) && !_.isNaN(value) || _.isArray(value)) {
        values.push(value);
      }
    }
  }
  return this.heatMapService.getStatisticValues(values);
};
goog.provide("gridReport.adapters.TransposedCellShading");
goog.require("gridReport.adapters.CellShading");
gridReport.adapters.TransposedCellShading = function(heatMapService, options) {
  goog.base(this, heatMapService, options);
};
goog.inherits(gridReport.adapters.TransposedCellShading, gridReport.adapters.CellShading);
gridReport.adapters.TransposedCellShading.prototype.getStatisticValues_ = function(columnIds, data) {
  var columnIndex, columnsIdsLength, values = [], columnData;
  for (columnIndex = 0, columnsIdsLength = columnIds.length;columnIndex < columnsIdsLength;columnIndex++) {
    columnData = _.findWhere(data, {id:columnIds[columnIndex]});
    if (columnData) {
      _.each(columnData.values, function(value) {
        if (_.isNumber(value) && !_.isNaN(value)) {
          values.push(value);
        }
      });
    }
  }
  return this.heatMapService.getStatisticValues(values);
};
goog.provide("gridReport.adapters.ColumnSelection");
(function() {
  gridReport.adapters.ColumnSelection = function(gridAdapter) {
    if (!gridAdapter) {
      throw new Error("gridAdapter should be provided");
    }
    this.gridAdapter = gridAdapter;
  };
  gridReport.adapters.ColumnSelection.prototype.gridAdapter = null;
  gridReport.adapters.ColumnSelection.prototype.enabled = false;
  gridReport.adapters.ColumnSelection.prototype.setEnabled = function(enabled) {
    this.enabled = enabled;
    this.gridAdapter._getGrid().jqxGrid("sorttogglestates", this.enabled ? 0 : 1);
    if (!this.enabled) {
      this.deselectAllColumns();
    }
  };
  gridReport.adapters.ColumnSelection.prototype.getEnabled = function() {
    return this.enabled;
  };
  gridReport.adapters.ColumnSelection.prototype.deselectColumn = function(columnId) {
    var gridColumn = this.gridAdapter.getGridColumn(columnId);
    if (gridColumn) {
      gridColumn.selectionColor = undefined;
      var element, grid = this.gridAdapter._getGrid();
      if (gridColumn.parentColumn) {
        element = grid.find("." + gridColumn.guid + ".gf-header-data-block-item");
      } else {
        element = grid.find("." + gridColumn.guid + " .columnHeader");
      }
      element.css({"border":"", "box-sizing":"", "margin-left":""});
    }
  };
  gridReport.adapters.ColumnSelection.prototype.selectColumn = function(columnId, color) {
    var gridColumn = this.gridAdapter.getGridColumn(columnId);
    if (gridColumn) {
      gridColumn.selectionColor = color;
      var element, grid = this.gridAdapter._getGrid();
      if (gridColumn.parentColumn) {
        element = grid.find("." + gridColumn.guid + ".gf-header-data-block-item");
      } else {
        element = grid.find("." + gridColumn.guid + " .columnHeader");
      }
      element.css({"border":"dotted 1px " + color, "box-sizing":"border-box", "margin-left":"1px"});
    }
  };
  gridReport.adapters.ColumnSelection.prototype.deselectAllColumns = function() {
    _.each(this.gridAdapter.getGridColumns(), function(column) {
      this.deselectColumn(column.id);
      _.each(column.gridColumns, function(subColumn) {
        this.deselectColumn(subColumn.id);
      }, this);
    }, this);
  };
})();
goog.provide("gridReport.adapters.TransposedColumnSelection");
goog.require("gridReport.adapters.ColumnSelection");
gridReport.adapters.TransposedColumnSelection = function(gridAdapter) {
  goog.base(this, gridAdapter);
};
goog.inherits(gridReport.adapters.TransposedColumnSelection, gridReport.adapters.ColumnSelection);
gridReport.adapters.TransposedColumnSelection.prototype.setEnabled = function(enabled) {
  this.enabled = enabled;
  if (!this.enabled) {
    this.deselectAllColumns();
  }
};
gridReport.adapters.TransposedColumnSelection.prototype.deselectColumn = function(columnId) {
  this.gridAdapter._getGrid().find('[row-key="' + columnId + '"][column-key="columnName"]').css({"border":"", "border-width":""});
};
gridReport.adapters.TransposedColumnSelection.prototype.selectColumn = function(columnId, color) {
  this.gridAdapter._getGrid().find('[row-key="' + columnId + '"][column-key="columnName"]').css({"border":"1px dotted " + color, "border-width":"1px !important"});
};
goog.provide("gridReport.model.SingleSortingModel");
goog.require("gridReport.model.BaseSortingModel");
gridReport.model.SingleSortingModel = function(options) {
  goog.base(this, options);
};
goog.inherits(gridReport.model.SingleSortingModel, gridReport.model.BaseSortingModel);
gridReport.model.SingleSortingModel.prototype.disableState = function() {
  this.state.column = null;
};
gridReport.model.SingleSortingModel.prototype.discard = function() {
  this.state.column = null;
  this.state.direction = null;
  var sortInformation = this.gridElement.jqxGrid("getsortinformation");
  if (sortInformation && (sortInformation.sortcolumn && sortInformation.sortdirection)) {
    this.gridElement.jqxGrid("removesort");
  }
};
gridReport.model.SingleSortingModel.prototype.refresh = function() {
  if (this.state.column && this.state.direction) {
    goog.base(this, "refresh");
  }
  this._sortBy(this.state.column, this.state.direction, true);
};
goog.provide("gridReport.adapters.GridSortController");
goog.require("gridReport.model.AdvancedSortingModel");
goog.require("gridReport.model.SingleSortingModel");
gridReport.directives.GridSortController = function(gridElement, onSortCallback) {
  var sortingFullState = new gridReport.model.SortingFullState;
  this._sortingModel = undefined;
  this.refreshSorting = function() {
    this._sortingModel && this._sortingModel.refresh();
  };
  this.disableState = function() {
    this._sortingModel && this._sortingModel.disableState();
  };
  this.discardSorting = function() {
    this._sortingModel && this._sortingModel.discard();
  };
  this._refreshModel = function() {
    var enabledState = sortingFullState.getEnabledState();
    if (this._sortingModel && this._sortingModel.state == enabledState) {
      return;
    }
    this._sortingModel = enabledState.createModel(gridElement);
  };
  this.setSortingState = function(fullState) {
    sortingFullState = fullState;
    this._refreshModel();
  };
  this.getSortingState = function() {
    return new gridReport.model.SortingFullState(sortingFullState);
  };
  gridElement.on("sort", function(event) {
    if (!event.args) {
      return;
    }
    onSortCallback(event);
  });
  this.erase = function() {
    gridElement.off("sort");
    sortingFullState = null;
    this._sortingModel = null;
    gridElement = null;
    onSortCallback = null;
  };
};
goog.provide("gridReport.model.GridReportExpandCollapseState");
gridReport.model.GridReportExpandCollapseState = {allExpanded:"allexpanded", allCollapsed:"allcollapsed", middle:"middle"};
goog.provide("gridReport.adapters.JqxTransposedGridAdapter");
goog.require("gridReport.model.GridReportExpandCollapseState");
goog.require("gridReport.model.ErrorCodes");
goog.require("gridReport.model.Error");
goog.require("gridReport.adapters.GridSortController");
goog.require("gridReport.adapters.GridDraggableRowsController");
goog.require("gridReport.adapters.TransposedCellShading");
goog.require("gridReport.adapters.TransposedColumnSelection");
gridReport.adapters.JqxTransposedGridAdapter = function($timeout, $translate, gfTotalsCalculation, gfAggregatesAlgorithms, element, settings, gfLogManager, gfActionPostponingService, gfColumnHeaderFormatterService, gfGridCellFormatter, eeExcelTransposedExporter, gfJqxTransposedGridDataExporter, gfStatisticsCalculation, addRowBuilder, gfConfig, gfJqxGridAutoWidthHelper, gfNativeCurrencyService, gfHeatMapService, gfSmoothColumnDraggingService, pePdfExporter, gfValueFormatting, gfUuidGenerator, gfSmartTooltipService) {
  var LABEL_NA = _.isString(gfConfig.notAvailableDataLabel) ? gfConfig.notAvailableDataLabel : "NA";
  var TITLE_NA = _.isString(gfConfig.notAvailableDataTitle) ? gfConfig.notAvailableDataTitle : $translate.instant("NOT_AVAILABLE");
  var advancedSortingState = new gridReport.model.AdvancedSortingState;
  var dataManager_ = new DataManager;
  var self_ = this;
  var chartRowStoredKey = null;
  var draggableRowsController = new gridReport.directives.GridDraggableRowsController(self_);
  var sortingFullState;
  var isPrimaryRowFreezed;
  var primaryRowKey_;
  var gridColumnsDictionary_ = {};
  var excludedFromStatisticsIdentifiers = {};
  var totalsColumnId = "TOTALS_COLUMN";
  var gridColumns_ = [];
  function DataManager() {
    var gridData_ = [];
    var columnsData_ = [];
    var calculationData_ = [];
    var isCalculationDataChanged_ = true;
    var rowsWaitingData_ = [];
    var statisticsWaitingData_ = [];
    var statisticsDataCache_ = [];
    var dataBlockRawData_ = [];
    var self_ = this;
    function fillData(data, sourceData, isKeyExcludedAction, isNeedFillProps) {
      angular.forEach(sourceData, function(dataItem) {
        if (dataItem.rowKey == "rowKey") {
          return;
        }
        var colData = {id:dataItem.rowKey, values:{}};
        var col = _.findWhere(columns_, {id:dataItem.rowKey});
        for (var key in dataItem) {
          if (!dataItem.hasOwnProperty(key) || (key == "rowKey" || (rows_.indexOf(key) == -1 || isKeyExcludedAction && isKeyExcludedAction(key)))) {
            continue;
          }
          if (isNeedFillProps) {
            colData.values[key] = {value:dataItem[key]};
            if (col) {
              colData.values[key].props = dataItem[key + col.getPropsId()];
            }
          } else {
            colData.values[key] = dataItem[key];
          }
        }
        data.push(colData);
      });
    }
    function removeFromWaitngRows(colIds) {
      angular.forEach(colIds, function(id) {
        if (rowsWaitingData_.indexOf(id) > -1) {
          rowsWaitingData_.splice(rowsWaitingData_.indexOf(id), 1);
        }
      });
    }
    function addToWaitingRows(colIds) {
      angular.forEach(colIds, function(id) {
        if (rowsWaitingData_.indexOf(id) === -1) {
          rowsWaitingData_.push(id);
        }
      });
    }
    function updateDataObj(data, items) {
      var oldData = data;
      data = [];
      for (var i = 0;i < items.length;i++) {
        var exitingDataItem = _.findWhere(oldData, {rowKey:items[i].id});
        if (exitingDataItem) {
          data.push(exitingDataItem);
          continue;
        }
        var addedItem = {rowKey:items[i].id, item:items[i]};
        addedItem[firstColumnId_] = items[i].header;
        data.push(addedItem);
      }
      return data;
    }
    this.generateRows = function(gridItems, columnsItems) {
      rowsWaitingData_ = rowsWaitingData_.concat(_.difference(_.map(_.filter(gridItems, function(c) {
        return c.canSubscribe();
      }), function(c) {
        return c.id;
      }), _.map(gridData_, function(d) {
        return d.rowKey;
      })));
      gridData_ = updateDataObj(gridData_, gridItems);
      columnsData_ = updateDataObj(columnsData_, columnsItems);
      isCalculationDataChanged_ = true;
    };
    this.fillData = function(data) {
      removeFromWaitngRows(_.map(data, function(colData) {
        return colData.id;
      }));
      function fillValues(dataItem, column, colInfo, valueCallback) {
        var propsId = "";
        if (column) {
          propsId = column.getPropsId();
        }
        angular.forEach(colInfo.values, function(val) {
          if (valueCallback) {
            valueCallback(val);
          }
          dataItem[val.rowKey] = val.value;
          if (propsId) {
            dataItem[val.rowKey + propsId] = val.properties;
          }
        });
      }
      function addDataBlockItems(dataBlock, data) {
        _.each(dataBlock.gridColumns, function(c) {
          if (!_.findWhere(gridData_, {rowKey:c.id})) {
            var colData = _.findWhere(data, {id:c.id});
            if (colData) {
              dataBlockRawData_.push(colData);
            }
          }
        });
      }
      angular.forEach(gridData_, function(dataItem) {
        var colInfo = _.findWhere(data, {id:dataItem.rowKey});
        if (!colInfo) {
          return;
        }
        if (dataItem.item.isMultiColumn()) {
          addDataBlockItems(dataItem.item, data);
        }
        fillValues(dataItem, dataItem.item, colInfo, function(val) {
          if (val.curn) {
            if (_.isString(val.curn)) {
              gfNativeCurrencyService.setCurrencyCode(colInfo.id, val.rowKey, val.curn);
            } else {
              _.each(val.curn, function(currency, columnId) {
                gfNativeCurrencyService.setCurrencyCode(columnId, val.rowKey, currency);
              });
            }
          }
        });
      });
      angular.forEach(columnsData_, function(dataItem) {
        var colInfo = _.findWhere(data, {id:dataItem.rowKey});
        if (!colInfo) {
          if (dataItem.rowKey === "rowKey") {
            var firstData = _.first(data);
            if (firstData) {
              angular.forEach(firstData.values, function(val) {
                dataItem[val.rowKey] = val.rowKey;
              });
            }
          }
          return;
        }
        fillValues(dataItem, dataItem.item, colInfo);
      });
      isCalculationDataChanged_ = true;
    };
    this.clearStatisticsCache = function() {
      statisticsDataCache_ = [];
    };
    this.setStatisticsValue = function(dataItem, statistic, value) {
      dataItem[statistic.name] = value;
      if (!statisticsDataCache_[statistic.name]) {
        statisticsDataCache_[statistic.name] = {};
      }
      statisticsDataCache_[statistic.name][dataItem.item.id] = value;
    };
    this.getStatistcsCachedValue = function(dataItem, statistic) {
      if (!statisticsDataCache_[statistic.name]) {
        return undefined;
      }
      return statisticsDataCache_[statistic.name][dataItem.item.id];
    };
    function hasStatisticsCachedValue(dataItem, statistic) {
      if (!statisticsDataCache_[statistic.name]) {
        return undefined;
      }
      return statisticsDataCache_[statistic.name].hasOwnProperty(dataItem.item.id);
    }
    this.fillStatisticsData = function(statistics, rows, callback) {
      var calcData = this.getCalculationData(rows);
      var calculateItemsCount = 0;
      var pdItemsCount = 0;
      angular.forEach(statistics, function(statistic) {
        angular.forEach(gridData_, function(dataItem) {
          if (!dataItem.item.canHaveStatistics()) {
            dataItem.pdStatValue = "";
            return;
          }
          var needLoadStatisticsData = true;
          if (hasStatisticsCachedValue(dataItem, statistic)) {
            dataItem[statistic.name] = self_.getStatistcsCachedValue(dataItem, statistic);
            needLoadStatisticsData = false;
          } else {
            var key = {statistics:statistic.name, colId:dataItem.item.id};
            statisticsWaitingData_.push(key);
            calculateItemsCount += 1;
            dataItem[statistic.name] = undefined;
          }
          var filteredCalcData = _.filter(calcData, function(item) {
            return item.rowKey != primaryRowKey_ && item.isRowKeyHidden != true;
          });
          if (primaryRowKey_ && statistic.isPremium) {
            pdItemsCount += 1;
            var focusRow = _.findWhere(calcData, {rowKey:primaryRowKey_});
            var focusRowValue = focusRow ? focusRow[dataItem.item.id] : null;
            dataItem.pdStatValue = undefined;
            gfStatisticsCalculation.calculatePremiumDiscount(dataItem.item, filteredCalcData, statistic, focusRowValue).promise.then(function(statisticsValue) {
              dataItem.pdStatValue = _.isNaN(statisticsValue) ? "" : statisticsValue;
              pdItemsCount -= 1;
              if (pdItemsCount == 0 && (calculateItemsCount == 0 && callback)) {
                callback();
              }
            });
          }
          if (!needLoadStatisticsData) {
            return;
          }
          gfStatisticsCalculation.calculateStatistics(dataItem.item.id, filteredCalcData, statistic).then(function(statisticValue) {
            self_.setStatisticsValue(dataItem, statistic, statisticValue);
            calculateItemsCount -= 1;
            statisticsWaitingData_.splice(_.indexOf(statisticsWaitingData_, key), 1);
            if (calculateItemsCount == 0 && callback) {
              statisticsWaitingData_ = [];
              callback();
            }
          }, function() {
            calculateItemsCount -= 1;
            if (calculateItemsCount == 0 && callback) {
              statisticsWaitingData_ = [];
              callback();
            }
          });
        });
      });
    };
    this.fillTotalsData = function(rows) {
      var sectorTotals = {data:{group:{group:"TOTALS_ROW", subItems:this.getCalculationData(rows)}}};
      angular.forEach(gridData_, function(dataItem) {
        var gridColumn = dataItem.item;
        if (gridColumn && (gridColumn.selectedTotalsCalculation && !gridColumn.selectedTotalsCalculation.isNone)) {
          dataItem[totalsColumnId] = gfTotalsCalculation.calculateTotals("TOTALS_ROW", gridColumn.id, sectorTotals, gridColumn.selectedTotalsCalculation, primaryRowKey_);
        } else {
          delete dataItem[totalsColumnId];
        }
      });
    };
    this.isStatisticsDataLoaded = function(statisticName, colId) {
      return _.findWhere(statisticsWaitingData_, {statistics:statisticName, colId:colId}) == null;
    };
    this.isRowDataLoaded = function(rowKey) {
      return rowsWaitingData_.indexOf(rowKey) == -1;
    };
    this.startRowDataLoading = function(rowKey) {
      addToWaitingRows([rowKey]);
    };
    this.removeColumns = function(removedItems) {
      for (var i = 0;i < removedItems.length;i++) {
        angular.forEach(gridData_, function(dataItem) {
          delete dataItem[removedItems[i]];
        });
      }
      isCalculationDataChanged_ = true;
    };
    this.calculationDataChanged = function() {
      isCalculationDataChanged_ = true;
    };
    this.removeRows = function(removedItems) {
      removeFromWaitngRows(removedItems);
      angular.forEach(removedItems, function(item) {
        var dataItem = _.findWhere(gridData_, {rowKey:item});
        if (dataItem) {
          gridData_.splice(gridData_.indexOf(dataItem), 1);
        }
      });
      isCalculationDataChanged_ = true;
    };
    this.getColumnsData = function() {
      return columnsData_;
    };
    this.getGridData = function() {
      return gridData_;
    };
    this.setGridData = function(data) {
      gridData_ = data;
    };
    this.getColumnData = function(gridCol) {
      if (!gridCol) {
        return{};
      }
      var colData = {rowKey:gridCol.datafield};
      angular.forEach(gridData_, function(dataItem) {
        colData[dataItem.rowKey] = dataItem[gridCol.datafield];
      });
      return colData;
    };
    this.getMinMaxData = function(columnId) {
      var minMax = {min:0, max:0, maxAbsoluteValue:0};
      var colData = _.findWhere(gridData_, {rowKey:columnId});
      _.each(colData, function(value, colKey) {
        if (gridColumnsDictionary_[colKey] == undefined || (excludedFromStatisticsIdentifiers[colKey] || colKey === totalsColumnId)) {
          return;
        }
        if (_.isNumber(value) && !_.isNaN(value)) {
          minMax.min = Math.min(minMax.min, value);
          minMax.max = Math.max(minMax.max, value);
        }
      });
      minMax.maxAbsoluteValue = Math.max(Math.abs(minMax.max), Math.abs(minMax.min));
      return minMax;
    };
    this.getCalculationData = function(rowsIds) {
      if (!isCalculationDataChanged_) {
        return calculationData_;
      }
      calculationData_ = [];
      var calcDataDictionary = {};
      function getCalcRow(rowId) {
        var row = calcDataDictionary[rowId];
        if (!row) {
          row = {rowKey:rowId};
          calcDataDictionary[rowId] = row;
          calculationData_.push(row);
        }
        return row;
      }
      function isExcluded(rowId) {
        return _.some(gridColumns_, function(column) {
          return column.datafield == rowId && column.hidden == true;
        });
      }
      angular.forEach(gridData_, function(dataItem) {
        var colId = dataItem.rowKey;
        angular.forEach(rowsIds, function(rId) {
          if (!dataItem.hasOwnProperty(rId) || (isExcluded(rId) || excludedFromStatisticsIdentifiers[rId])) {
            return;
          }
          var row = getCalcRow(rId);
          row[colId] = dataItem[rId];
        });
      });
      isCalculationDataChanged_ = false;
      return calculationData_;
    };
    this.getRawData = function() {
      var data = [];
      fillData(data, gridData_, false, true);
      fillData(data, columnsData_, false, true);
      data = data.concat(dataBlockRawData_);
      return data;
    };
    this.getFilteredRawData = function() {
      var data = [];
      var isKeyExcludedAction = function(key) {
        return excludedFromStatisticsIdentifiers[key];
      };
      fillData(data, gridData_, isKeyExcludedAction);
      fillData(data, columnsData_, isKeyExcludedAction);
      return data;
    };
    this.clear = function() {
      this.clearStatisticsCache();
      gridData_ = [];
      columnsData_ = [];
    };
  }
  draggableRowsController.rowDragEnd = function(oldIndex, newIndex) {
    grid.jqxGrid("changeChartRowVisibility", true);
    if (chartRowStoredKey) {
      var newChartRowIndex = gridReport.jsUtils.findIndex(grid.jqxGrid("getRows"), "rowKey", chartRowStoredKey);
      grid.jqxGrid("renderchartrow", newChartRowIndex);
    }
    var gridData = dataManager_.getGridData();
    gridData.splice(newIndex, 0, gridData.splice(oldIndex, 1)[0]);
    dataManager_.setGridData(gridData);
    var newIdx = newIndex + columnsInHeader_.length;
    var oldIdx = oldIndex + columnsInHeader_.length;
    columns_.splice(newIdx, 0, columns_.splice(oldIdx, 1)[0]);
    triggerEvent("columnreordered", {});
    bindRowsEventHandlers();
  };
  draggableRowsController.rowDragBegin = function() {
    var chartRowRecord = grid.jqxGrid("getChartRowRecord");
    chartRowStoredKey = chartRowRecord ? chartRowRecord.bounddata.rowKey : null;
    grid.jqxGrid("changeChartRowVisibility", false);
  };
  var highlightedRowKey = settings.highlightedRowKey;
  var firstColumnId_ = "columnName";
  var columns_;
  var columnsInHeader_;
  var rows_;
  var selectionMode_ = settings.selectionMode;
  var loadingRows_ = [];
  var selectedGridColumns_ = [];
  var gridWidth = "99.9%";
  var gridHeight = "99.9%";
  var defaultColumnMaxWidth_ = 100;
  var defaultColumnMinWidth_ = 80;
  var checkboxWidth_ = 25;
  var currentTheme_ = settings.theme;
  var minHeaderHeight_ = 25;
  var useHeightAutoresize_ = true;
  var selectedStatistics_ = [];
  var canDeleteColumns_ = settings.canDeleteColumns;
  var showRemoveRow_ = false;
  var isErrorViewVisible_ = false;
  this.globalParameters = [];
  var events = [];
  var minMaxColumnsValues = {};
  var cellShading = new gridReport.adapters.TransposedCellShading(gfHeatMapService, settings.heatMapState);
  this.columnSelection = new gridReport.adapters.TransposedColumnSelection(this);
  this.destroyed = false;
  this.isLoadingInColumnsEnabled = true;
  this.getGridData = function() {
    return dataManager_.getGridData();
  };
  this.changeTotalsCountVisibility = function() {
  };
  this.changeGroupCountVisibility = function() {
  };
  this.exportGridData = function() {
    var gridData = angular.copy(dataManager_.getGridData());
    var columnsData = angular.copy(dataManager_.getColumnsData());
    var primaryColumn = this.getPrimaryRow();
    var premiumDiscount = this.isPremiumDiscountApplied();
    return{rowsData:gridData, columnsData:columnsData, primaryColumn:primaryColumn, premiumDiscount:premiumDiscount};
  };
  this._setGridData = function(data) {
    dataManager_.setGridData(data);
    gridSource.localdata = dataManager_.getGridData();
  };
  function updateBoundData(param) {
    grid.jqxGrid("updatebounddata", param);
    bindRowsEventHandlers();
  }
  this._updateBoundData = updateBoundData;
  this.getRawGridData = function() {
    return dataManager_.getRawData();
  };
  this.addListener = function(eventName, callback) {
    if (_.isFunction(callback)) {
      events.push({event:eventName, callback:callback});
    }
  };
  function triggerEvent(eventName) {
    var listeners = _.where(events, {event:eventName});
    var agrsToPass = Array.prototype.slice.call(arguments);
    agrsToPass.splice(0, 1);
    for (var i = 0, n = listeners.length;i < n;i++) {
      listeners[i].callback.apply(this, agrsToPass);
    }
  }
  this.setStatistics = function(statistics) {
    selectedStatistics_ = statistics;
    resetStatisticsData();
    updateGridColumns();
  };
  function resetTotalsData() {
    if (settings.showTotalsRow) {
      dataManager_.fillTotalsData(rows_);
    }
  }
  function resetStatisticsData() {
    if (!selectedStatistics_ || selectedStatistics_.length == 0) {
      return;
    }
    var updateGridData = _.debounce(function() {
      gridSource.localdata = dataManager_.getGridData();
      updateBoundData("cells");
    }, 300);
    dataManager_.fillStatisticsData(selectedStatistics_, rows_, updateGridData);
  }
  this.getStatistics = function() {
    return selectedStatistics_;
  };
  this.isPremiumDiscountApplied = function() {
    return primaryRowKey_ && getPremiumDiscountStatistics(selectedStatistics_);
  };
  function getPremiumDiscountStatistics(statistics) {
    return _.findWhere(statistics, {isPremium:true});
  }
  this.setColumnIndex = function(colId, newIndex) {
  };
  this.reorderColumns = function(columns) {
  };
  this.updateStatistics = function() {
  };
  function hasStatistics(column) {
    return column && column.canHaveStatistics();
  }
  this.hasStatistics = hasStatistics;
  this.setColumns = function(columns) {
    columns_ = columns;
    columnsInHeader_ = _.filter(columns, function(c) {
      return c.showInHeaderAsTransposed;
    });
    var gridCols = _.filter(columns, function(c) {
      return!c.showInHeaderAsTransposed;
    });
    dataManager_.generateRows(gridCols, columnsInHeader_);
    gridSource.localdata = dataManager_.getGridData();
    updateBoundData("rows");
  };
  this.updateRows = function(addedRows, deletedRows, isHidden) {
    dataManager_.clearStatisticsCache();
    resetStatisticsData();
    resetTotalsData();
    rows_ = _.difference(rows_, deletedRows);
    rows_ = rows_.concat(addedRows);
    var result = generateColumns(addedRows, deletedRows, isHidden);
    autoWidthColumn(firstColumnId_);
    if (deletedRows.length > 0) {
      for (var id in minMaxColumnsValues) {
        if (minMaxColumnsValues[id]) {
          minMaxColumnsValues[id] = dataManager_.getMinMaxData(id);
        }
      }
      grid.jqxGrid("render");
    }
    if (addedRows.length === 1) {
      scrollToColumn(addedRows[0]);
    }
    return result;
  };
  function getFirstColumn() {
    return{id:firstColumnId_, header:$translate.instant("COMPANY_NAME"), pinned:true, hidden:false, groupable:false, align:"left", guid:gfUuidGenerator.get()};
  }
  function getTotalsColumn() {
    return{id:totalsColumnId, header:self_.getTotalsLabel(), pinned:true, hidden:false, groupable:false, align:"right", guid:gfUuidGenerator.get()};
  }
  function generateColumns(addedItems, removedItems, isHidden) {
    var i, col, guid;
    clearSortCache();
    if (!gridColumnsDictionary_[firstColumnId_]) {
      var firstCol = getFirstColumn();
      col = createColumnForGrid(firstCol);
      col.guid = firstCol.guid;
      gridColumns_.splice(0, 0, col);
      gridColumnsDictionary_[firstColumnId_] = col;
    }
    if (!gridColumnsDictionary_[totalsColumnId] && settings.showTotalsRow) {
      var totalsColumn = getTotalsColumn();
      col = createColumnForGrid(totalsColumn);
      col.guid = totalsColumn.guid;
      gridColumns_.splice(1, 0, col);
      gridColumnsDictionary_[totalsColumnId] = col;
    }
    for (i = 0;i < addedItems.length;i++) {
      guid = gfUuidGenerator.get();
      col = createColumnForGrid({header:addedItems[i], id:addedItems[i], pinned:false, hidden:isHidden(addedItems[i]), groupable:false, align:"right", guid:guid, canEdit:false, minwidth:40});
      col.guid = guid;
      gridColumns_.push(col);
      gridColumnsDictionary_[col.datafield] = col;
    }
    dataManager_.removeColumns(removedItems);
    for (i = 0;i < removedItems.length;i++) {
      col = _.findWhere(gridColumns_, {datafield:removedItems[i]});
      if (col) {
        gridColumns_.splice(gridColumns_.indexOf(col), 1);
      }
      delete gridColumnsDictionary_[removedItems[i]];
    }
    updateGridColumns();
    return dataManager_.getGridData().length;
  }
  this.setColumnsData = function(columnsData) {
    clearSortCache();
    angular.forEach(columnsData, function(colData) {
      gfStatisticsCalculation.clearColumnCache(colData.id);
    });
    gfTotalsCalculation.clearCache();
    dataManager_.fillData(columnsData);
    gridSource.localdata = dataManager_.getGridData();
    angular.forEach(columnsData, function(cData) {
      if (minMaxColumnsValues[cData.id]) {
        minMaxColumnsValues[cData.id] = dataManager_.getMinMaxData(cData.id);
      }
    });
    cellShading.recalculate(columns_, dataManager_.getFilteredRawData());
    resetStatisticsData();
    resetTotalsData();
    updateBoundData("rows");
    if (!_.isEmpty(_.intersection(_.pluck(columnsData, "id"), _.pluck(columnsInHeader_, "id")))) {
      grid.jqxGrid("render");
      autoresizeColumnHeaderHeight();
    }
  };
  this._getDataView = function() {
    return grid.jqxGrid("dataview");
  };
  this.setGroupping = function(groups) {
  };
  this.refreshPremiumDiscount = function() {
  };
  this._setRowsOrder = function(records) {
    if (!records || !records.length) {
      return;
    }
    var dataView = grid.jqxGrid("dataview");
    if (dataView.records.length != records.length) {
      throw new Error("incorrect records length");
    }
    grid.jqxGrid("removesort");
    var newSortData = _.map(records, function(value, index) {
      return{sortkey:value.toString(), value:value, index:index};
    });
    dataView.sortdata = newSortData;
    dataView.reload(dataView.records, dataView.rows, dataView.filters, dataView.updated, true);
    grid.jqxGrid("_updaterowsproperties");
    grid.jqxGrid("rendergridcontent", true);
  };
  this.setSortingFullState = function(fullState) {
    sortingFullState = fullState;
  };
  this.getSortingFullState = function() {
    return sortingFullState;
  };
  this.tryRestorePremiumDiscontRowState = function() {
  };
  this.getGroupping = function() {
  };
  this.setFailedLoadingColumns = function(columnIds, exception) {
  };
  this.columnDataLoadingStarted = function(colId) {
    dataManager_.startRowDataLoading(colId);
    updateBoundData("cells");
  };
  this.dataUpdated = function() {
  };
  this.beforeRowRemoved = function(rowKeys) {
  };
  this.afterDataKeysChanged = function(addedIdentifiers) {
  };
  this.scrollToTicker = function(rowKey) {
    scrollToColumn(rowKey);
  };
  this.scrollToGroup = function(path) {
  };
  this.resize = function() {
    if (this.isUpdating()) {
      return;
    }
    setTimeout(function() {
      if (self_ && !self_.destroyed) {
        grid.jqxGrid("render");
      }
    }, 5);
  };
  this.removeFilter = function(colId, apply) {
  };
  this.refreshFilters = function() {
  };
  this.setSingleSortingState = function(gridColumnId, sortDirection) {
  };
  this.clearFilters = function() {
  };
  this.premiumDiscoutAutoRestoringDisabled = function() {
  };
  this.hidePremiumDiscountRow = function() {
  };
  this.refreshSorting = function() {
  };
  this.setVisibleRows = function(isHidden) {
    angular.forEach(gridColumns_, function(col) {
      if (col.hidden == isHidden(col.datafield)) {
        return;
      }
      col.hidden = isHidden(col.datafield);
      if (col.hidden && selectedGridColumns_.indexOf(col) > -1) {
        selectedGridColumns_.splice(selectedGridColumns_.indexOf(col));
      }
      grid.jqxGrid("setcolumnproperty", col.datafield, "hidden", col.hidden);
    });
    dataManager_.calculationDataChanged();
    gfTotalsCalculation.clearCache();
    dataManager_.clearStatisticsCache();
    gfStatisticsCalculation.clearStatisticsCache();
    resetStatisticsData();
    resetTotalsData();
    setTimeout(function() {
      if (gridColumns_.length == 0) {
        return;
      }
      var checBoxEl = grid.find("." + gridColumnsDictionary_[firstColumnId_].guid).find(".jqx-header-checkbox-el");
      if (checBoxEl.length > 0) {
        checBoxEl.jqxCheckBox("_setState", getCheckboxState(gridColumnsDictionary_[firstColumnId_]));
      }
    });
    grid.jqxGrid("refreshInlineChart");
  };
  this.setAdvancedSortingState = function(state) {
    advancedSortingState = new gridReport.model.AdvancedSortingState(state);
  };
  this.getAdvancedSortingState = function() {
    return angular.copy(advancedSortingState);
  };
  this.getCurrentExpandCollapseState = function() {
  };
  this.getHiddenIdentifiers = function() {
    return _.pluck(_.findWhere(gridColumns_, {hidden:true}), "datafield");
  };
  this.getVisibleIdentifiers = function() {
    return _.pluck(_.filter(gridColumns_, function(col) {
      return!col.hidden && col.datafield != firstColumnId_;
    }), "datafield");
  };
  this.showHiddenRows = function() {
  };
  this.setColumnTotalsCalculation = function(column, calculation) {
  };
  this.applyCellsFormatting = function() {
    updateBoundData("cells");
  };
  this.clean = function() {
    dataManager_.clearStatisticsCache();
    cellShading.clear();
    minMaxColumnsValues = {};
  };
  this.removeColumn = function(colIds) {
    var column = _.first(_.find(columns_, function(c) {
      return c.isBarChartEnabled;
    }));
    if (column == undefined) {
      _.each(colIds, function(colId) {
        var colRowData = _.findWhere(dataManager_.getGridData(), {rowKey:colId});
        if (colRowData && colRowData.item.isBarChartEnabled) {
          self_.showHideColumnBarChart({id:colId});
        }
      });
    }
    dataManager_.removeRows(colIds);
    gridSource.localdata = dataManager_.getGridData();
    _.each(colIds, function(colId) {
      var col = _.findWhere(columns_, {id:colId});
      if (col) {
        columns_.splice(_.indexOf(columns_, col), 1);
      }
    });
    updateBoundData("cells");
  };
  this.getState = function() {
    var cols = {};
    angular.forEach(columns_, function(c) {
      cols[c.id] = $.extend(true, {}, c);
    });
    return{columns:cols, "expandCollapseState":{}, "selectedrowindex":-1, "selectedrowindexes":[]};
  };
  this.setState = function(state) {
  };
  this.clearState = function() {
    grid.jqxGrid("erasechartrow");
    dataManager_.clear();
    gridColumns_ = [];
    gridColumnsDictionary_ = {};
    clearSortCache();
    gridSource.localdata = dataManager_.getGridData();
    updateBoundData("cells");
    grid.jqxGrid({columns:[], groups:[]});
  };
  this.resetToNewTemplateState = function() {
    grid.jqxGrid("erasechartrow");
  };
  this.setBrowserSelection = function(isEnabled) {
  };
  this.setShowGroupsHeader = function(value) {
  };
  this.setColumnsResize = function(value) {
  };
  this.setColumnsReorder = function(value) {
  };
  this.setGroupable = function(value) {
  };
  this.setSortable = function(value) {
  };
  this.setScrollMode = function(value) {
  };
  this.setSelectionMode = function(value) {
    selectionMode_ = value;
  };
  this.getSelectionMode = function() {
    return selectionMode_;
  };
  this.enableTooltips = function(value) {
    grid.jqxGrid({"enabletooltips":value});
    grid.jqxGrid("render");
  };
  this.showTimeseriesChartButton = function(value) {
    var wasChanged = settings.showTimeseriesChartButton != value;
    settings.showTimeseriesChartButton = value;
    if (wasChanged) {
      grid.jqxGrid("render");
    }
  };
  this.enableRowsDragging = function(value) {
    var wasChanged = settings.enableRowsDragging != value;
    settings.enableRowsDragging = value;
    if (wasChanged) {
      grid.jqxGrid("render");
    }
  };
  this.enablePrimaryRowFreezing = function() {
  };
  this.freezePrimaryRow = function(value, posponeRendering) {
    isPrimaryRowFreezed = value;
  };
  this.isPrimaryRowFreezed = function() {
    return isPrimaryRowFreezed;
  };
  this.exportData = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return self_.getDataForExport(exportSettings.title, exportSettings.exportAll, {isExcel:true}).then(function(exportData) {
      return eeExcelTransposedExporter["export"](exportData, exportSettings.fileName);
    });
  };
  this.getDataForExport = function(title, exportAll, options) {
    return gfJqxTransposedGridDataExporter.getExportData(self_, grid, self_.exportGridData(), title, exportAll, options);
  };
  this.getSelectedRowIndexes = function() {
    return _.map(selectedGridColumns_, function(col) {
      return gridColumns_.indexOf(col);
    });
  };
  this.selectRowByKey = function(rowKey) {
  };
  this.getSelectedCells = function() {
  };
  this.getRowData = function(index) {
    var gridCol = gridColumns_[index];
    return dataManager_.getColumnData(gridCol);
  };
  this.getRowsCount = function() {
    return rows_.length;
  };
  this.selectAllRows = function() {
  };
  this.clearSelection = function() {
    selectedGridColumns_ = [];
  };
  this.pinColumn = function(columnId) {
  };
  this.unpinColumn = function(columnId) {
  };
  this.getColumn = function(columnId) {
  };
  this.setFilterRowDisplay = function(isDisplaying) {
  };
  function getColumnIndex(columnId) {
    var indexes = $.map(grid.jqxGrid("getrows"), function(r, index) {
      if (r.item.id == columnId) {
        return index;
      }
    });
    return indexes.length ? indexes[0] : -1;
  }
  this.startEditColumnHeader = function(column, parentColumn, callback) {
    grid.jqxGrid("setcolumnproperty", firstColumnId_, "editable", true);
    grid.jqxGrid("begincelledit", getColumnIndex(column.id), firstColumnId_);
    onEndCellEdit(callback);
  };
  this.expandAllGroups = function() {
  };
  this.collapseAllGroups = function() {
  };
  this.showHideColumn = function(colId, hide) {
  };
  this.setColumnHeader = function(columnId, headerText, rowIndex) {
    var row = grid.jqxGrid("getrows")[getColumnIndex(columnId)];
    var gridData = self_.getGridData();
    var column = row.item;
    var rowData = _.findWhere(gridData, {rowKey:row.rowKey});
    var isRestoreCell = true;
    if (headerText != null && headerText.trim() != "") {
      rowData[firstColumnId_] = headerText;
      column.header = headerText;
      isRestoreCell = false;
    }
    grid.jqxGrid("endcelledit", rowIndex, firstColumnId_, isRestoreCell);
    updateBoundData("cells");
  };
  this.getIdentifiers = function() {
    return rows_;
  };
  this.changeTotalsRowVisibility = function(isVisible) {
    settings.showTotalsRow = isVisible;
    if (settings.showTotalsRow) {
    } else {
    }
  };
  this.updateColumnHeaders = function() {
    grid.jqxGrid("render");
  };
  this.destroy = function() {
    this.destroyed = true;
    this.clearState();
    gfSmoothColumnDraggingService.unbind();
    grid.jqxGrid("destroy");
    grid.off();
    grid.unbind();
    events = [];
  };
  this.setGlobalParameters = function(globalParameters) {
    this.globalParameters = globalParameters;
  };
  this.getGlobalParameters = function() {
    return this.globalParameters;
  };
  this.dataLoadingStarted = function() {
  };
  this.scrollTo = function(left, top) {
  };
  this.scrollToColumn = function(columnId) {
    scrollToColumn(columnId);
  };
  function scrollToColumn(colId) {
    var left = 0, columns = grid.jqxGrid("columns"), isColIdFound = false;
    if (columns && columns.records) {
      for (var columnIndex = 0, n = columns.records.length;columnIndex < n;columnIndex++) {
        if (columns.records[columnIndex].datafield == colId) {
          isColIdFound = true;
          break;
        }
        if (columns.records[columnIndex].pinned) {
          continue;
        }
        left += columns.records[columnIndex].width;
      }
      if (isColIdFound) {
        grid.jqxGrid("scrollto", left, 0);
      }
    }
  }
  this.setTotalsLabel = function(newTotalsLabel) {
    if (newTotalsLabel) {
      settings.totalsLabel = newTotalsLabel;
      if (grid.jqxGrid("getcolumn", totalsColumnId)) {
        grid.jqxGrid("setcolumnproperty", totalsColumnId, "text", settings.totalsLabel);
      }
    }
  };
  this.getTotalsLabel = function() {
    return settings.totalsLabel;
  };
  this.showError = function(error) {
    this.error = error;
    isErrorViewVisible_ = true;
    grid.jqxGrid("showerror", error, $translate, function() {
      triggerEvent("copytoclipboard", error);
    });
  };
  this.hideError = function() {
    isErrorViewVisible_ = false;
    grid.jqxGrid("hideerror");
  };
  this.showLoading = function() {
  };
  this.hideLoading = function() {
  };
  this.enableGrid = function() {
  };
  this.disableGrid = function() {
  };
  this.enableGridHeader = function() {
  };
  this.disableGridHeader = function() {
  };
  this.enableGridRows = function() {
  };
  this.disableGridRows = function() {
  };
  this.setPrimaryRow = function(rowKey) {
    dataManager_.clearStatisticsCache();
    primaryRowKey_ = rowKey;
    gfTotalsCalculation.clearCache();
    gfStatisticsCalculation.clearStatisticsCache();
    resetStatisticsData();
    resetTotalsData();
    grid.jqxGrid("render");
  };
  this.getPrimaryRow = function() {
    return primaryRowKey_;
  };
  this.restoreExpandState = function() {
  };
  this.isCalculationDataLoaded = function(calcColumnId) {
  };
  this.getGridColumns = function() {
    return columns_;
  };
  this.getIsGroupExpanded = function() {
  };
  this.getFirstColumnId = function() {
    return firstColumnId_;
  };
  this.buildSectorLevelValues = function(columns, data, sector) {
  };
  this.getSettings = function() {
    return settings;
  };
  this.getShowTotalsRow = function() {
    return settings.showTotalsRow;
  };
  function isColumnDataLoaded(id) {
    return loadingRows_.indexOf(id) == -1;
  }
  this.addLoadingRows = function(rowKeys) {
    loadingRows_ = loadingRows_.concat(rowKeys);
    grid.jqxGrid("render");
  };
  this.removeLoadingRows = function(rowKeys) {
    loadingRows_ = _.difference(loadingRows_, rowKeys);
    grid.jqxGrid("render");
  };
  this._getGrid = function() {
    return grid;
  };
  this.setTheme = function(theme) {
    if (!theme) {
      throw new Error("theme should be provided");
    }
    currentTheme_ = theme;
    minHeaderHeight_ = theme.rowsHeight;
    this.beginUpdate();
    grid.jqxGrid({rowsheight:theme.rowsHeight});
    grid.jqxGrid({theme:theme.theme});
    grid.jqxGrid("endupdate");
    grid.jqxGrid("_fixcolumnheaderheight");
    this.endUpdate();
  };
  this.getTheme = function() {
    return currentTheme_;
  };
  this.beginUpdate = function() {
    grid.jqxGrid("suppressrendering", true);
  };
  this.endUpdate = function(postponeRendering) {
    grid.jqxGrid("suppressrendering", false);
    if (!postponeRendering) {
      grid.jqxGrid("render");
    }
  };
  this.isUpdating = function() {
    return!!grid.jqxGrid("isrenderingsuppressed");
  };
  this.showHideColumnBarChart = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    var gridData = dataManager_.getGridData();
    var colRowData = _.findWhere(gridData, {rowKey:column.id});
    if (!colRowData.item.isBarChartEnabled) {
      angular.forEach(gridData, function(dataItem) {
        dataItem.item.isBarChartEnabled = false;
      });
    }
    colRowData.item.isBarChartEnabled = !colRowData.item.isBarChartEnabled;
    minMaxColumnsValues[column.id] = dataManager_.getMinMaxData(column.id);
    var filters = grid.jqxGrid("getfilterinformation");
    var index = colRowData[filters.length > 0 ? "dataindex" : "boundindex"];
    if (index == undefined) {
      index = gridReport.jsUtils.findIndex(grid.jqxGrid("getrows"), "rowKey", column.id);
    }
    if (colRowData.item.isBarChartEnabled) {
      grid.jqxGrid("renderchartrow", index);
    } else {
      grid.jqxGrid("erasechartrow", index);
    }
    bindRowsEventHandlers();
  };
  this.hideColumnBarChart = function() {
  };
  this.discardSorting = function() {
  };
  this.showAddRemoveRows = function(value) {
    showRemoveRow_ = value;
    grid.jqxGrid("render");
  };
  this.getShowAddRemoveRows = function() {
  };
  this.autoWidthColumn = function(columnId) {
  };
  function autoWidthColumn(columnId) {
    var column = getColumn(columnId);
    if (!column) {
      return;
    }
    var options = {firstColumnId:firstColumnId_, dataManager:dataManager_, isLoadingInColumnsEnabled:self_.isLoadingInColumnsEnabled, globalParameters:self_.globalParameters, currentTheme:currentTheme_, loadingRows:loadingRows_, canDeleteColumns:canDeleteColumns_};
    var gridData = [];
    gridData = gridData.concat(dataManager_.getGridData(), dataManager_.getColumnsData());
    var maxCellValueString = "";
    for (var rowInd = 0;rowInd < gridData.length;rowInd++) {
      var cellText = gfGridCellFormatter.getCellText(gridData[rowInd][columnId], gridData[rowInd], column, {}, undefined, undefined, options, settings);
      if (cellText.length > maxCellValueString.length) {
        maxCellValueString = cellText;
      }
    }
    column.width = grid.jqxGrid("getCellTextWidth", columnId == firstColumnId_ ? maxCellValueString : maxCellValueString.substring(0, 40).trim());
    grid.jqxGrid("setcolumnproperty", columnId, "width", column.width);
  }
  function columnResizerDoubleClickCallback(args) {
    autoWidthColumn(args.column.datafield);
    bindRowsEventHandlers();
  }
  function getColumn(columnId) {
    if (gridColumnsDictionary_.hasOwnProperty(columnId)) {
      return gridColumnsDictionary_[columnId];
    }
    return null;
  }
  function clearSortCache() {
    var dataview = grid.jqxGrid("dataview");
    if (dataview) {
      dataview.clearsortdata();
    }
  }
  function createColumnForGrid(gridColumn) {
    var col = {text:gridColumn.header, datafield:gridColumn.id, classname:gridColumn.guid + (gridColumn.id != firstColumnId_ ? " jqx-column-id-" + encodeURI(gridColumn.id) : "") + " jqx-column-transposed-command-header", cellsalign:gridColumn.align, renderer:columnHeaderRenderer, pinned:gridColumn.pinned, hidden:gridColumn.hidden, editable:gridColumn.canEdit, groupable:false};
    if (gridColumn.minwidth) {
      col.minwidth = gridColumn.minwidth;
    }
    if (gridColumn.width) {
      col.width = gridColumn.width;
    } else {
      col.width = getDefaultColumnHeaderWidth(gridColumn);
    }
    col.cellsrenderer = cellsRenderer;
    return col;
  }
  function getDefaultColumnHeaderWidth(gridColumn) {
    var textWidth = grid.jqxGrid("getHeaderTextWidth", gridColumn.header) + checkboxWidth_;
    var cellsCount = 1;
    if (gridColumn.command != undefined && gridColumn.command.isVector()) {
      cellsCount = gfColumnHeaderFormatterService.getPeriods(gridColumn.command).length || 1;
    }
    if (textWidth < defaultColumnMinWidth_ * cellsCount) {
      return defaultColumnMinWidth_ * cellsCount;
    }
    if (textWidth > defaultColumnMaxWidth_ * cellsCount) {
      return defaultColumnMaxWidth_ * cellsCount;
    }
    return textWidth;
  }
  function autoresizeColumnHeaderHeight() {
    if (!useHeightAutoresize_) {
      return;
    }
    var maxColHeight = getMaxColumnHeaderHeignt();
    if (maxColHeight == grid.jqxGrid("columnsheight")) {
      return;
    }
    grid.jqxGrid({columnsheight:maxColHeight});
  }
  function getMaxColumnHeaderHeignt() {
    var columnHeaderHeight = 0;
    grid.find(".columnHeader").each(function() {
      var thisHeight = $(this).height();
      if (thisHeight > columnHeaderHeight) {
        columnHeaderHeight = thisHeight;
      }
    });
    columnHeaderHeight = columnHeaderHeight < minHeaderHeight_ ? minHeaderHeight_ : columnHeaderHeight;
    return columnHeaderHeight;
  }
  function updateGridColumns() {
    var statisticsColumns = [];
    angular.forEach(selectedStatistics_, function(statistics) {
      var statisticsGridCol = createColumnForGrid({id:statistics.name, header:"", pinned:true, align:"right"});
      statisticsColumns.push(statisticsGridCol);
    });
    var resultGridColumns = [];
    resultGridColumns = resultGridColumns.concat(gridColumns_, statisticsColumns);
    grid.jqxGrid({columns:resultGridColumns});
    gridSource.localdata = dataManager_.getGridData();
  }
  function columnHeaderRenderer(value, align) {
    var gridColumn = gridColumnsDictionary_[this.datafield];
    if (!gridColumn) {
      var statistics = _.findWhere(selectedStatistics_, {name:this.datafield});
      if (statistics) {
        return gfColumnHeaderFormatterService.getTransposedColumnStatisticsHeader(dataManager_.getStatistcsCachedValue({item:{id:"ST_NAME"}}, statistics), align, statistics, grid, function(value) {
          dataManager_.setStatisticsValue({item:{id:"ST_NAME"}}, statistics, value);
        });
      }
      return "";
    }
    if (this.datafield === totalsColumnId) {
      return gfColumnHeaderFormatterService.getTransposedColumnTotalsHeader(value, align);
    }
    var html = gfColumnHeaderFormatterService.getTransposedColumnHeader(value, align, gridColumn, firstColumnId_, columnsInHeader_, dataManager_, primaryRowKey_ == this.datafield, {getEmptyCellTitle:function() {
      if (!isColumnDataLoaded(gridColumn.datafield)) {
        return undefined;
      }
      return TITLE_NA;
    }, getEmptyCellValue:function() {
      return isColumnDataLoaded(gridColumn.datafield) ? LABEL_NA : getCellLoadingElement();
    }}, primaryRowKey_ && (value && primaryRowKey_ == value) ? getPremiumDiscountStatistics(selectedStatistics_) : undefined, selectionMode_ == gridReport.model.GridReportSelectionMode.Checkbox, showRemoveRow_ && primaryRowKey_ != gridColumn.datafield, grid, excludedFromStatisticsIdentifiers[this.datafield], highlightedRowKey && highlightedRowKey == gridColumn.datafield);
    var $html = $(html);
    setTimeout(function() {
      renderCheckBox(gridColumn, grid.find("." + gridColumn.guid).find(".gf-header-chekbox"));
      attachEvents(gridColumn, grid.find("." + gridColumn.guid));
    });
    return $html[0].outerHTML;
  }
  function getRowKeyAttr(el) {
    return decodeURI($(el).attr("row-key"));
  }
  function onHeaderCellClicked(e) {
    var column = _.findWhere(columns_, {id:getRowKeyAttr(e.currentTarget)});
    var rowKey = e.currentTarget.attributes["col-id"].value;
    if (e.button == 1 && (column && column.cellRightClickedAction != null)) {
      column.cellRightClickedAction({cellValue:event.args.value, rowKey:rowKey, colId:column.id, element:$(e.currentTarget)});
      return false;
    } else {
      if (e.button != 1 && column) {
        column.cellClickedAction({cellValue:event.args.value, rowKey:rowKey, colId:column.id, element:$(e.currentTarget)});
      }
    }
    return undefined;
  }
  function onHeaderCellMouseEnter(e) {
    var column = _.findWhere(columns_, {id:getRowKeyAttr(e.currentTarget)});
    var rowKey = e.currentTarget.attributes["col-id"].value;
    if (column && column.cellMouseEnterAction) {
      column.cellMouseEnterAction({rowKey:rowKey, colId:column.id, element:$(e.currentTarget), event:e, isAuditEnabled:settings.isAuditEnabled, universeContext:settings.universeContext});
    }
  }
  function onHeaderCellMouseLeave(e) {
    var column = _.findWhere(columns_, {id:getRowKeyAttr(e.currentTarget)});
    var rowKey = e.currentTarget.attributes["col-id"].value;
    if (column && column.cellMouseLeaveAction) {
      column.cellMouseLeaveAction({rowKey:rowKey, colId:column.id, element:$(e.currentTarget), event:e, isAuditEnabled:settings.isAuditEnabled, universeContext:settings.universeContext});
    }
  }
  function onHeaderDeleteElementClicked(event) {
    var rowCell = $(event.target).closest(".columnHeaderTitle").first();
    if (rowCell.length > 0) {
      var items = rowCell.attr("col-id");
      if (items != undefined && items.length > 0) {
        triggerEvent("rowdeleting", items);
      }
    }
  }
  function attachEvents(gridColumn, colEl) {
    var $el = $(colEl);
    $el.find(".deleteRowElement").off("click", onHeaderDeleteElementClicked).on("click", onHeaderDeleteElementClicked);
    $el.find(".gf-attach-cell-event").each(function(i) {
      this.setAttribute("col-id", gridColumn.datafield);
      var column = _.findWhere(columns_, {id:getRowKeyAttr(this)});
      if (column.cellClickedAction || column.cellRightClickedAction) {
        $el.find(".gf-attach-cell-event").unbind("click", onHeaderCellClicked);
        $el.find(".gf-attach-cell-event").bind("click", onHeaderCellClicked);
      }
      if (column.cellMouseEnterAction || column.cellMouseLeaveAction) {
        $el.find(".gf-attach-cell-event").unbind("mouseenter", onHeaderCellMouseEnter);
        $el.find(".gf-attach-cell-event").bind("mouseenter", onHeaderCellMouseEnter);
        $el.find(".gf-attach-cell-event").unbind("mouseleave", onHeaderCellMouseLeave);
        $el.find(".gf-attach-cell-event").bind("mouseleave", onHeaderCellMouseLeave);
      }
    });
  }
  function renderCheckBox(gridColumn, element) {
    var $el = $(element);
    if ($el.find(".jqx-header-checkbox-el").length == 0) {
      var checkBoxContainer = $('<div id="groupCheckbox-' + gfUuidGenerator.get() + '" ></div>');
      var groupCheckbox = $("<div ></div>");
      $el.html(checkBoxContainer);
      checkBoxContainer.html(groupCheckbox);
      var jqxCheckBox = groupCheckbox.jqxCheckBox({theme:currentTheme_.theme, hasThreeStates:false, animationShowDelay:0, animationHideDelay:0, checked:getCheckboxState(gridColumn)});
      element.groupcheckbox = jqxCheckBox;
      element.column = gridColumn;
      $el.find(".jqx-checkbox").addClass("jqx-header-checkbox-el").addClass("jqx-group-checkbox");
      $el.find(".jqx-checkbox").removeClass("jqx-checkbox");
      jqxCheckBox.on("change", function(event) {
        checkBoxChangedHandler(event, gridColumn);
      });
    }
  }
  function checkBoxChangedHandler(event, gridColumn) {
    var checked = event.args.checked;
    if (gridColumn.datafield == firstColumnId_) {
      grid.find("[role=columnheader]:not(." + gridColumn.guid + ")").find(".jqx-header-checkbox-el").jqxCheckBox("_setState", checked);
      if (checked) {
        selectedGridColumns_ = _.filter(gridColumns_, function(col) {
          return col.datafield != firstColumnId_;
        });
      } else {
        selectedGridColumns_ = [];
      }
    } else {
      if (checked) {
        selectedGridColumns_.push(gridColumnsDictionary_[gridColumn.datafield]);
      } else {
        selectedGridColumns_.splice(selectedGridColumns_.indexOf(gridColumnsDictionary_[gridColumn.datafield]), 1);
      }
      grid.find("." + gridColumnsDictionary_[firstColumnId_].guid).find(".jqx-header-checkbox-el").jqxCheckBox("_setState", getCheckboxState(gridColumnsDictionary_[firstColumnId_]));
    }
    if (checked) {
      triggerEvent("rowselect", event);
    } else {
      triggerEvent("rowunselect", event);
    }
  }
  function getCheckboxState(gridColumn) {
    if (gridColumn.datafield == firstColumnId_) {
      var gridCols = _.filter(gridColumns_, function(col) {
        return col.datafield != firstColumnId_ && !col.hidden;
      });
      if (selectedGridColumns_.length == 0) {
        return false;
      } else {
        if (selectedGridColumns_.length != gridCols.length) {
          return null;
        } else {
          return true;
        }
      }
    }
    return _.findWhere(selectedGridColumns_, {datafield:gridColumn.datafield}) == undefined ? false : true;
  }
  function getCellLoadingElement(addedClass) {
    addedClass = addedClass ? addedClass : "";
    return'<div class="' + toThemeProperty("throbber-mini", currentTheme_.theme) + " " + addedClass + '"></div>';
  }
  function toThemeProperty(className, themeName) {
    return className + " " + className + "-" + themeName;
  }
  function cellsRenderer(row, columnfield, value, defaulthtml, columnproperties, data, container, outParam) {
    var options = {firstColumnId:firstColumnId_, dataManager:dataManager_, isLoadingInColumnsEnabled:self_.isLoadingInColumnsEnabled, globalParameters:self_.globalParameters, currentTheme:currentTheme_, loadingRows:loadingRows_, canDeleteColumns:canDeleteColumns_, totalsColumnId:totalsColumnId};
    var column = gridColumnsDictionary_[columnfield];
    var isExcludedFromStatistics = !!columnfield && !!excludedFromStatisticsIdentifiers[columnfield];
    var conditionalFormatting = null;
    if (data && (data.item && (settings.enableConditionalValueFormatting && !cellShading.isEnabled))) {
      conditionalFormatting = data.item.conditionalValueFormatting;
    }
    return gfGridCellFormatter.renderTransposedCell(row, columnfield, value, columnproperties, data, column, outParam, options, selectedStatistics_, primaryRowKey_, self_.globalParameters, cellShading.standardDeviations, settings, isExcludedFromStatistics, highlightedRowKey, conditionalFormatting);
  }
  function columnInfoElementClicked(event) {
    var rowCell = $(event.target).closest(".jqx-grid-cell").first().children().first();
    if (rowCell.length > 0) {
      var items = getRowKeyAttr(rowCell);
      if (items != undefined && items.length > 0) {
        triggerEvent("columninfoclicked", items);
      }
    }
    event.stopPropagation();
  }
  function columnChartElementClicked() {
    var rowCell = $(event.target).closest(".jqx-grid-cell").first().children().first();
    if (rowCell.length > 0) {
      var items = getRowKeyAttr(rowCell);
      if (items != undefined && items.length > 0) {
        self_.showHideColumnBarChart({id:items});
      }
    }
    event.stopPropagation();
  }
  function columnTimesiriesChartElementClicked() {
    var rowCell = $(event.target).closest(".jqx-grid-cell").first().children().first();
    if (rowCell.length > 0) {
      var items = getRowKeyAttr(rowCell);
      if (items && items.length > 0) {
        triggerEvent("columntimeserieschartclicked", items);
      }
    }
    event.stopPropagation();
  }
  function deleteColumnElementClicked(event) {
    var rowCell = $(event.target).closest(".jqx-grid-cell").first().children().first();
    if (rowCell.length > 0) {
      var items = getRowKeyAttr(rowCell);
      if (items != undefined && items.length > 0) {
        triggerEvent("columndeleting", items);
      }
    }
  }
  var gridDebouncedRender = _.debounce(gridRendered, 300);
  function gridDebouncedRended(type) {
    if (gridDebouncedRender) {
      gridDebouncedRender(type);
    }
  }
  function gridRendered(type) {
    if (!self_) {
      return;
    }
    if (type == "full" || type == "rows") {
      if (settings.enableRowsDragging && draggableRowsController) {
        draggableRowsController.makeRowsDraggable();
      }
    }
    if (isErrorViewVisible_) {
      self_.showError(that.error);
    }
    bindRowsEventHandlers();
  }
  function bindRowsEventHandlers(target) {
    target = target || grid;
    target.find(".deleteColumnElement").off("click", deleteColumnElementClicked).on("click", deleteColumnElementClicked);
    target.find(".columnHeaderDescriptionElement").off("click", columnInfoElementClicked).on("click", columnInfoElementClicked);
    target.find(".columnHeaderBarChartElement").off("click", columnChartElementClicked).on("click", columnChartElementClicked);
    target.find(".columnHeaderTimeseriesChartElement").off("click", columnTimesiriesChartElementClicked).on("click", columnTimesiriesChartElementClicked);
    target.find("[title]").removeAttr("title");
    target.find("[data-smart-tooltip]").off("mouseenter", onCellElementHoverHandler).on("mouseenter", onCellElementHoverHandler);
  }
  function initGridSource() {
    function getTotalValue(datafield, item) {
      return undefined;
    }
    function getMinMaxColumnValues(datarecord) {
      if (!minMaxColumnsValues[datarecord.rowKey]) {
        minMaxColumnsValues[datarecord.rowKey] = dataManager_.getMinMaxData(datarecord.rowKey);
      }
      return $.extend(minMaxColumnsValues[datarecord.rowKey]);
    }
    function hasBarChart(colId, datarecord) {
      if (gridColumnsDictionary_[colId] != undefined && !excludedFromStatisticsIdentifiers[colId]) {
        if (colId === totalsColumnId && (datarecord.item.selectedTotalsCalculation == null || datarecord.item.selectedTotalsCalculation.name === "Sum")) {
          return false;
        }
        return true;
      }
      return false;
    }
    function isValuesForBarChart(colId) {
      return firstColumnId_ === colId;
    }
    function getBarChartFormattedValue(datarecord, value) {
      return gfValueFormatting.getFormattedValue(value, datarecord.item.cellsFormat);
    }
    return{localdata:dataManager_.getGridData(), datatype:"local", datafields:undefined, gettotals:getTotalValue, getMinMaxColumnValues:getMinMaxColumnValues, hasBarChart:hasBarChart, isValuesForBarChart:isValuesForBarChart, getBarChartFormattedValue:getBarChartFormattedValue, addrow:function(rowid, rowdata, position, commit) {
      commit(true);
    }, deleterow:function(rowid, commit) {
      commit(true);
    }};
  }
  var grid = $(element);
  var gridSource = initGridSource();
  grid.jqxGrid({width:gridWidth, height:gridHeight, sortable:false, sorttogglestates:1, editable:true, editmode:"programmatic", groupable:false, source:new $.jqx.dataAdapter(gridSource), columnsresize:true, columnsreorder:true, autoloadstate:false, autosavestate:false, columnsmenu:false, theme:settings.theme.theme, rowsheight:settings.theme.rowsHeight, showgroupsheader:false, filterable:false, showtotalsrow:false, showaggregates:false, showstatusbar:false, statusbarheight:0, enablepremiumdiscount:false, 
  enablehover:false, enableanimations:false, rendered:gridDebouncedRended, enablebrowserselection:settings.enableBrowserSelection, showemptyrow:false, columns:[], selectionmode:"none", cellmouseenter:cellMouseEnterCallback, cellmouseleave:cellMouseLeaveCallback, columnresizerdoubleclick:columnResizerDoubleClickCallback, enabletooltips:settings.enableTooltips, enableinlinechart:true, inlinechartheight:200, showdefaultloadelement:false});
  gfSmoothColumnDraggingService.bind(grid);
  grid.on("cellclick", function(event) {
    if (self_.columnSelection.enabled) {
      columnClicked(event);
      return;
    }
    event.currentTarget = $(event.args.originalEvent.toElement).closest('[role="gridcell"]');
    if (event.args.rightclick) {
      executeColumnAction(event, "cellRightClickedAction");
    } else {
      executeColumnAction(event, "cellClickedAction");
    }
  });
  function columnClicked(event) {
    triggerEvent("columnselected", event.args.row.bounddata.rowKey);
    event.stopPropagation();
  }
  function onEndCellEdit(callback) {
    grid.unbind("cellvaluechanged");
    grid.bind("cellvaluechanged", function(event) {
      var args = event.args;
      var columnDataField = args.datafield;
      if (columnDataField == firstColumnId_) {
        var rowIndex = args.rowindex;
        var cellValue = args.value;
        var column = grid.jqxGrid("getrows")[rowIndex].item;
        grid.jqxGrid("setcolumnproperty", firstColumnId_, "editable", false);
        self_.setColumnHeader(column.id, cellValue, rowIndex);
        (callback || angular.noop)();
      }
    });
  }
  grid.bind("cellbeginedit", function(event) {
    var args = event.args;
    var columnDataField = args.datafield;
    var rowIndex = args.rowindex;
    var cellValue = args.value;
  });
  grid.on("columnresized", function(event) {
    var column = gridColumnsDictionary_[event.args.datafield];
    if (column && column.width != event.args.newwidth) {
      column.isAutoresizable = false;
      column.width = event.args.newwidth;
      autoresizeColumnHeaderHeight();
    }
    bindRowsEventHandlers();
  });
  grid.on("columnreordered", function(event) {
    var args = event.args;
    var oldindex = args.oldindex - selectedStatistics_.length;
    var newindex = args.newindex - selectedStatistics_.length;
    if (oldindex === newindex || gridColumnsDictionary_[event.args.datafield] === undefined) {
      return;
    }
    var newIdx = newindex - (gridColumns_.length - rows_.length);
    var oldIdx = oldindex - (gridColumns_.length - rows_.length);
    rows_.splice(newIdx, 0, rows_.splice(oldIdx, 1)[0]);
    gridColumns_.splice(newindex, 0, gridColumns_.splice(oldindex, 1)[0]);
    grid.jqxGrid("refreshInlineChart");
  });
  function executeColumnAction(event, action) {
    var element = $(event.currentTarget);
    var innerElement = element.children().first();
    var args = {rowKey:innerElement.attr("column-key"), colId:getRowKeyAttr(innerElement), element:element, event:event, cellValue:event.args != null ? event.args.value : null, globalParameters:self_.globalParameters, isAuditEnabled:settings.isAuditEnabled, universeContext:settings.universeContext};
    var column = _.findWhere(columns_, {id:args.colId});
    if (column) {
      args.column = column;
      args.dataRow = {rowKey:args.rowKey};
      var gridData = dataManager_.getGridData();
      var gridDataRow = _.findWhere(gridData, {rowKey:args.colId});
      args.dataRow[args.colId + "_props"] = gridDataRow[args.rowKey + gridDataRow.item.getPropsId()];
      (column[action] || angular.noop)(args);
    }
  }
  function onCellElementHoverHandler(event) {
    var hideTimeout;
    var showTimeout;
    function removeShowTimeout() {
      if (showTimeout) {
        $timeout.cancel(showTimeout);
      }
    }
    function removeHideTimeout() {
      if (hideTimeout) {
        $timeout.cancel(hideTimeout);
      }
    }
    function onElementMouseLeave() {
      removeHideTimeout();
      removeShowTimeout();
      hideTimeout = $timeout(gfSmartTooltipService.hide, gfSmartTooltipService.TooltipHideTimeout);
    }
    function onElementClick() {
      removeHideTimeout();
      removeShowTimeout();
      gfSmartTooltipService.hide();
    }
    var tooltipElement = event.target.closest("[data-smart-tooltip]"), $element = $(tooltipElement).find(":not(:has(*))");
    if (tooltipElement && $element) {
      var value = tooltipElement.attributes["data-smart-tooltip"].value, innerText = $element[0].innerText;
      tooltipHtml = $("<div>").text(value).html();
      if (tooltipHtml && tooltipHtml !== "") {
        var hasEllipsis;
        if (isNaN(innerText.replace(/[,%]/g, ""))) {
          if ($(tooltipElement).attr("column-key") === "columnName") {
            hasEllipsis = true;
          } else {
            if ($element[0].tagName === "SPAN" || $element[0].tagName === "STRONG") {
              hasEllipsis = $element.parent().width() < $element.innerWidth();
            } else {
              hasEllipsis = $element.innerWidth() < $element[0].scrollWidth;
            }
          }
        } else {
          hasEllipsis = true;
        }
        if (hasEllipsis && !event.target.disabled) {
          removeHideTimeout();
          removeShowTimeout();
          showTimeout = $timeout(function() {
            gfSmartTooltipService.show({event:event, html:tooltipHtml});
          }, gfSmartTooltipService.TooltipShowTimeout);
        }
      }
    }
    $(event.target).off("mouseleave", onElementMouseLeave).on("mouseleave", onElementMouseLeave).off("click", onElementClick).on("click", onElementClick);
    event.preventDefault();
  }
  function cellMouseEnterCallback(event) {
    executeColumnAction(event, "cellMouseEnterAction");
    bindRowsEventHandlers($(event.currentTarget));
  }
  function cellMouseLeaveCallback() {
    executeColumnAction(event, "cellMouseLeaveAction");
  }
  function recalculateMinMaxValues() {
    var dataRow = _.find(dataManager_.getGridData(), function(gridDataRow) {
      return gridDataRow.item.isBarChartEnabled;
    });
    if (dataRow) {
      minMaxColumnsValues[dataRow.item.id] = dataManager_.getMinMaxData(dataRow.item.id);
    }
  }
  this.setHeatMapState = function(heatMapState) {
    cellShading.mode = heatMapState ? heatMapState.mode : gridReport.adapters.CellShadingCalculationMode.PerColumn;
    cellShading.isEnabled = heatMapState ? heatMapState.isEnabled : false;
    cellShading.recalculate(columns_, dataManager_.getFilteredRawData());
    updateBoundData("cells");
  };
  this.getIsHeatMapEnabled = function() {
    return cellShading.isEnabled;
  };
  this.getStatisticValues = function() {
    return cellShading.standardDeviations;
  };
  this.setExcludedFromStatisticsIdentifiers = function(identifiers) {
    excludedFromStatisticsIdentifiers = {};
    _.each(identifiers, function(identifier) {
      excludedFromStatisticsIdentifiers[identifier] = true;
    });
    gfTotalsCalculation.clearCache();
    dataManager_.clearStatisticsCache();
    dataManager_.calculationDataChanged();
    gfStatisticsCalculation.clearStatisticsCache();
    cellShading.recalculate(columns_, dataManager_.getFilteredRawData());
    recalculateMinMaxValues();
    resetStatisticsData();
    resetTotalsData();
    updateBoundData("cells");
    grid.jqxGrid("rendercolumnheaders");
    grid.jqxGrid("refreshchartrow");
  };
  this.enableInColumnFiltering = function() {
  };
  this.applyFilters = function() {
  };
  this.setHighlightedRow = function(rowKey) {
    if (rowKey != highlightedRowKey) {
      highlightedRowKey = rowKey;
      updateBoundData("cell");
    }
  };
  this.getHighlightedRow = function() {
    return highlightedRowKey;
  };
  this.erase = function() {
    cellShading = null;
    this.columnSelection = null;
    dataManager_ = null;
    draggableRowsController.erase();
    draggableRowsController = null;
    for (var k in this) {
      this[k] = null;
    }
    grid = null;
    self_ = null;
    gridDebouncedRended = null;
  };
  this.enableConditionalValueFormatting = function(enabled) {
    settings.enableConditionalValueFormatting = enabled;
    grid.jqxGrid("render");
  };
  this.enableAudit = function(isEnabled) {
    settings.isAuditEnabled = isEnabled;
    grid.jqxGrid("render");
  };
  this.exportToHtml = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return self_.getDataForExport(exportSettings.title, exportSettings.exportAll, {isHtml:true}).then(function(exportData) {
      return pePdfExporter.exportToHtml(exportData, exportSettings.printingOptions);
    });
  };
  this.exportToPdf = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return self_.getDataForExport(exportSettings.title, exportSettings.exportAll, {isHtml:true}).then(function(exportData) {
      return pePdfExporter.exportToPdf(exportData, exportSettings.printingOptions, exportSettings.fileName);
    });
  };
  this.print = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return self_.getDataForExport(exportSettings.title, exportSettings.exportAll, {isHtml:true}).then(function(exportData) {
      return pePdfExporter.print(exportData, exportSettings.printingOptions);
    });
  };
  this.setUniverseContext = function(universeContext) {
    settings.universeContext = universeContext;
  };
  this.addEmptyRow = function(rowKey, insertPosition) {
  };
  this.isRowEmpty = function(rowKey) {
    return false;
  };
};
goog.provide("gridReport.services.StatisticsCalculationService");
goog.require("gridReport.Module");
gridReport.Module.factory("gfStatisticsCalculation", ["$q", function($q) {
  var calculatedStatistics = {}, waitingResults = [];
  function calculatePremiumDiscountValue(statisticsValue, primaryRowValue, isPercentage) {
    if (statisticsValue == null || (primaryRowValue == null || statisticsValue == 0)) {
      return createEmptyValue(primaryRowValue);
    }
    if (isPercentage) {
      return primaryRowValue - statisticsValue;
    } else {
      return(primaryRowValue - statisticsValue) / statisticsValue;
    }
  }
  function createEmptyValue(value) {
    if (_.isArray(value)) {
      return _.map(value, function() {
        return null;
      });
    } else {
      return null;
    }
  }
  function calculatePremiumDiscount(column, data, statistics, primaryRowValue) {
    if (!statistics) {
      return{value:null};
    }
    var columns = column.isMultiColumn() ? _.toArray(column.gridColumns) : [column];
    var promises = [];
    _.each(columns, function(col) {
      var rowValue = primaryRowValue;
      if (column.isMultiColumn()) {
        rowValue = primaryRowValue ? primaryRowValue[col.id] : undefined;
      }
      if (!col.canHaveStatistics()) {
        var defer = $q.defer();
        defer.resolve({colId:col.id, value:createEmptyValue(rowValue)});
        promises.push(defer.promise);
      } else {
        promises.push(calculateStatistics(col.id, data, statistics).then(function(statisticsValue) {
          if (_.isArray(statisticsValue) && _.isArray(rowValue)) {
            var primaryDicountValues = [];
            for (var i = 0;i < statisticsValue.length;i++) {
              primaryDicountValues.push(calculatePremiumDiscountValue(statisticsValue[i], rowValue[i], col.isPercentage()));
            }
            return primaryDicountValues;
          } else {
            return calculatePremiumDiscountValue(statisticsValue, rowValue, col.isPercentage());
          }
        }).then(function(res) {
          return{colId:col.id, value:res};
        }));
      }
    });
    return{promise:$q.all(promises).then(function(values) {
      return column.isMultiColumn() ? _.reduce(values, function(memo, val) {
        memo[val.colId] = val.value;
        return memo;
      }, {}) : values[0].value;
    })};
  }
  function calculateStatistics(columnId, data, statistics) {
    var defered = $q.defer();
    if (statistics == null) {
      return returnResovedPromise(defered, null);
    }
    var cachedValue = getCachedStatisticsValue(columnId, statistics.name);
    if (cachedValue != null) {
      return returnResovedPromise(defered, cachedValue);
    }
    var correctedData = data;
    function execStatisticsCalc(defer) {
      waitingResults.push(defer);
      statistics.func(columnId, correctedData).then(function(calculatedValue) {
        var waitIndex = waitingResults.indexOf(defer);
        if (waitIndex < 0) {
          return;
        }
        waitingResults.splice(waitIndex, 1);
        setTotalValueToCache(columnId, statistics.name, calculatedValue);
        defer.resolve(calculatedValue);
      }, function() {
        defer.reject("failed");
      });
    }
    execStatisticsCalc(defered);
    return defered.promise;
  }
  function returnResovedPromise(defered, value) {
    defered.resolve(value);
    return defered.promise;
  }
  function getCachedStatisticsValue(columnId, calculationName) {
    var columnStatistics = calculatedStatistics[columnId];
    if (columnStatistics == null) {
      return null;
    }
    var statisticsValue = columnStatistics[calculationName];
    return statisticsValue != null ? statisticsValue : null;
  }
  function getSubColumn(column, index, valueIndexToColumnIdAssociation) {
    if (valueIndexToColumnIdAssociation == null || column.gridColumns == null) {
      return column.getSubColumnByVectorIndex(index);
    }
    return column.gridColumns[valueIndexToColumnIdAssociation[index]];
  }
  function setTotalValueToCache(columnId, calcName, value) {
    if (calculatedStatistics[columnId] == null) {
      calculatedStatistics[columnId] = {};
    }
    calculatedStatistics[columnId][calcName] = value;
  }
  function clearStatisticsCache() {
    _.each(waitingResults, function(defered) {
      defered.reject("cleared");
    });
    waitingResults = [];
    calculatedStatistics = {};
  }
  function clearColumnCache(colId) {
    calculatedStatistics[colId] = undefined;
  }
  var service = {};
  service.clearStatisticsCache = clearStatisticsCache;
  service.clearColumnCache = clearColumnCache;
  service.setTotalValueToCache = setTotalValueToCache;
  service.calculateStatistics = calculateStatistics;
  service.calculatePremiumDiscount = calculatePremiumDiscount;
  service.getCachedValue = function(statisticsName, columnId) {
    return getCachedStatisticsValue(columnId, statisticsName);
  };
  service.stopCalculations = function() {
    _.each(waitingResults, function(defered) {
      defered.reject("stopped");
    });
    waitingResults = [];
  };
  service.getPremiumDiscountCachedValue = function(column, statisticsName, primaryRowValue) {
    var statisticsValue = service.getCachedValue(statisticsName, column.id);
    if (_.isArray(statisticsValue) && _.isArray(primaryRowValue)) {
      var primaryDicountValues = [], subColumn;
      for (var i = 0;i < statisticsValue.length;i++) {
        subColumn = getSubColumn(column, i, statisticsValue.columns);
        primaryDicountValues.push(calculatePremiumDiscountValue(statisticsValue[i], primaryRowValue[i], subColumn.isPercentage()));
      }
      return primaryDicountValues;
    } else {
      return calculatePremiumDiscountValue(statisticsValue, primaryRowValue, column.isPercentage());
    }
  };
  return service;
}]);
goog.provide("gridReport.adapters.BarCharts");
gridReport.adapters.BarCharts = function() {
  this.minMaxColumnValues = {};
};
gridReport.adapters.BarCharts.prototype.minMaxColumnValues = null;
gridReport.adapters.BarCharts.prototype.clear = function() {
  this.minMaxColumnValues = {};
};
gridReport.adapters.BarCharts.prototype.recalculate = function(gridColumns, data, gridSource) {
  var columnIndex, columnsCount, column;
  this.clear();
  for (columnIndex = 0, columnsCount = gridColumns.length;columnIndex < columnsCount;columnIndex++) {
    column = gridColumns[columnIndex];
    if (column.isBarChartEnabled) {
      this.minMaxColumnValues[column.id] = this.getMinMaxColumnValue_(column, data, gridSource);
    }
  }
};
gridReport.adapters.BarCharts.prototype.calculate = function(gridColumn, data, gridSource) {
  this.minMaxColumnValues[gridColumn.id] = this.getMinMaxColumnValue_(gridColumn, data, gridSource);
};
gridReport.adapters.BarCharts.prototype.getMinMaxColumnValue_ = function(column, data, gridSource) {
  var minMax = {min:0, max:0, maxAbsoluteValue:0}, isSum = false;
  if (column.selectedTotalsCalculation != null) {
    isSum = column.selectedTotalsCalculation.name == "Sum";
  }
  for (var i = 0, n = data.length;i < n;i++) {
    var record = data[i], value;
    if (record.subGroups && !isSum) {
      value = gridSource.gettotals(column.id, record);
    } else {
      value = record[column.id];
    }
    if (_.isNumber(value) && !_.isNaN(value)) {
      minMax.min = Math.min(minMax.min, value);
      minMax.max = Math.max(minMax.max, value);
    }
  }
  minMax.maxAbsoluteValue = Math.max(Math.abs(minMax.max), Math.abs(minMax.min));
  return minMax;
};
goog.provide("gridReport.services.FormulaColumnsHelper");
gridReport.Module.factory("gfFormulaColumnsHelper", [function() {
  function fillDependantColumns(dependantColIds, colId, gridColumns) {
    for (var i = 0;i < gridColumns.length;i++) {
      if (gridColumns[i].command && gridColumns[i].command.isColumnMath()) {
        for (var k in gridColumns[i].command.formula.columnIds) {
          var formulaColId = gridColumns[i].command.formula.columnIds[k];
          if (formulaColId == colId) {
            dependantColIds.push(gridColumns[i].id);
            fillDependantColumns(dependantColIds, gridColumns[i].id, gridColumns);
          }
        }
      }
    }
  }
  return{getDependantColumnIds:function(gridColumns, colId) {
    var dependantColIds = [];
    fillDependantColumns(dependantColIds, colId, gridColumns);
    return dependantColIds;
  }};
}]);
goog.provide("gridReport.model.CellTypes");
gridReport.model.CellTypes = {PrimaryDiscountStatisticCell:"PRIMARY_DISCOUNT_STATISTICS_CELL", StatisticCell:"STATISTICS_CELL", TotalCell:"TOTAL_CELL", Cell:"CELL", GroupCell:"GROUP_CELL"};
goog.provide("gridReport.adapters.JqxGridAdapter");
goog.require("gridReport.model.GridReportExpandCollapseState");
goog.require("gridReport.model.ErrorCodes");
goog.require("gridReport.model.Error");
goog.require("gridReport.model.CellTypes");
goog.require("gridReport.adapters.GridSortController");
goog.require("gridReport.adapters.GridDraggableRowsController");
goog.require("gridReport.adapters.CellShading");
goog.require("gridReport.adapters.BarCharts");
goog.require("gridReport.adapters.ColumnSelection");
goog.require("gridReport.services.FormulaColumnsHelper");
gridReport.adapters.JqxGridAdapter = function($timeout, $translate, $filter, gfTotalsCalculation, gfAggregatesAlgorithms, element, settings, gfLogManager, gfActionPostponingService, gfColumnHeaderFormatterService, gfGridCellFormatter, eeExcelExporter, gfJqxGridDataExporter, gfStatisticsCalculation, addRowBuilder, gfConfig, gfJqxGridAutoWidthHelper, gfNativeCurrencyService, gfHeatMapService, $q, gfJqxGridStatisticsRenderer, gfSmoothColumnDraggingService, gfFormulaColumnsHelper, pePdfExporter, gfCellsFormattingFactory, 
gfConditionalValueFormattingService, gfUuidGenerator, gfSmartTooltipService) {
  var grid = $(element);
  var that = this;
  var LABEL_NA = _.isString(gfConfig.notAvailableDataLabel) ? gfConfig.notAvailableDataLabel : "NA";
  var TITLE_NA = _.isString(gfConfig.notAvailableDataTitle) ? gfConfig.notAvailableDataTitle : $translate.instant("NOT_AVAILABLE");
  var events = [];
  var gridGroups = [];
  var gridData = [];
  var gridTotals = [];
  var gridColumns = [];
  var selectedStatistics = [];
  var gridColumnsDictionary = {};
  var isGroupExpanded = {};
  var firstColumnId = {};
  var dataLoadingColumns = [];
  var dataLoadingRows = {};
  var loadingColumnsFinished = {};
  var showEmptyInsteadOfNA = {};
  var showTotalsRow = settings.showTotalsRow;
  var minHeaderHeight = 25;
  var isGridHeaderEnabled = true;
  var showAddRemoveRows = settings.showAddRemoveRows;
  var enableRowsDragging = settings.enableRowsDragging;
  var showTimeseriesChartButton = settings.showTimeseriesChartButton;
  var canDeleteColumns = settings.canDeleteColumns;
  var showGroupCount = settings.showGroupCount;
  var showTotalsCount = settings.showTotalsCount;
  var premiumDiscountAutoRestoringDisabled;
  var primaryRowKey;
  var enablePrimaryRowFreezing = settings.enablePrimaryRowFreezing;
  var highlightedRowKey = settings.highlightedRowKey;
  var sortingFullState = new gridReport.model.SortingFullState;
  var cellShading = new gridReport.adapters.CellShading(gfHeatMapService, settings.heatMapState);
  var barCharts = new gridReport.adapters.BarCharts;
  var excludedFromStatisticsIdentifiers = {};
  this.columnSelection = new gridReport.adapters.ColumnSelection(this);
  var isLoadingVisible = false;
  var gridWidth = "99.9%";
  var gridHeight = "99.9%";
  var GRID_RENDER_KEY = "GRID_RENDER";
  var GRID_CUSTOM_RENDER_KEY = "GRID_RENDER_CUSTOM";
  var UPDATE_BOUND_DATA_CELLS_AND_FIX_EXPAND_STATE = "UPDATE_BOUND_DATA_CELLS_AND_FIX_EXPAND_STATE";
  var defaultColumnMaxWidth = 100;
  var defaultColumnMinWidth = 60;
  var currentTheme = settings.theme;
  gfSmoothColumnDraggingService.bind(grid);
  this.globalParameters = [];
  this.destroyed = false;
  this.isLoadingInColumnsEnabled = true;
  var suspendExpandCollapseEvents = false;
  this.getGridData = function() {
    return angular.copy(gridData);
  };
  this._setGridData = function(data) {
    gridSource.localdata = gridData = data;
  };
  this.getRawGridData = function() {
    var data = [];
    if (!gridData[0]) {
      return data;
    }
    var cols = Object.keys(gridData[0]);
    if (cols.indexOf("rowKey") > -1) {
      cols.splice(cols.indexOf("rowKey"), 1);
    }
    angular.forEach(cols, function(colId) {
      if (!gridColumnsDictionary[colId] && !_.any(gridColumnsDictionary, function(c) {
        return c.gridColumns && c.gridColumns[colId] != undefined;
      })) {
        return;
      }
      var colValues = {id:colId};
      colValues.values = {};
      data.push(colValues);
    });
    angular.forEach(gridData, function(dataItem) {
      angular.forEach(data, function(colData) {
        colData.values[dataItem["rowKey"]] = {value:dataItem[colData.id]};
        if (gridColumnsDictionary[colData.id] && (dataItem[gridColumnsDictionary[colData.id].getPropsId()] && (colData.values[dataItem["rowKey"]] !== null && colData.values[dataItem["rowKey"]] !== undefined))) {
          colData.values[dataItem["rowKey"]].props = dataItem[gridColumnsDictionary[colData.id].getPropsId()];
        }
      });
    });
    return data;
  };
  this.addListener = function(eventName, callback) {
    if (_.isFunction(callback)) {
      events.push({event:eventName, callback:callback});
    }
  };
  function triggerEvent(eventName) {
    var listeners = _.where(events, {event:eventName});
    var agrsToPass = Array.prototype.slice.call(arguments);
    agrsToPass.splice(0, 1);
    for (var i = 0, n = listeners.length;i < n;i++) {
      listeners[i].callback.apply(this, agrsToPass);
    }
  }
  this.updateRows = function(addedRows, deletedRows, isHidden, additionalOptions) {
    var i, n, removeItem, removeItemInd;
    if (addedRows.length > 0 || deletedRows.length > 0) {
      statisticsRederer_.clearCache();
    }
    if (additionalOptions && additionalOptions.cleaned) {
      gridData = [];
    } else {
      for (i = 0, n = addedRows.length;i < n;i++) {
        gridData.push({rowKey:addedRows[i], isRowHidden:(isHidden || angular.noop)(addedRows[i]), isRowEmpty:false});
      }
      for (i = 0, n = deletedRows.length;i < n;i++) {
        removeItem = _.findWhere(gridData, {rowKey:deletedRows[i]});
        if (_.isNull(removeItem) || _.isUndefined(removeItem)) {
          continue;
        }
        removeItemInd = gridData.indexOf(removeItem);
        gridData.splice(removeItemInd, 1);
      }
    }
    that._setGridData(gridData);
    this.setTotalsLabel(settings.totalsLabel);
    return gridData.length;
  };
  var cellsRenderer = function(row, columnfield, value, defaulthtml, columnproperties, data, container, outParam, celltype, cellsFormat, conditionalFormatting) {
    var isExcludedFromStatistics = !!data && !!excludedFromStatisticsIdentifiers[data.rowKey];
    var showRemoveButton = columnfield === firstColumnId && (showAddRemoveRows && (data != undefined && primaryRowKey != data.rowKey)) || columnfield === firstColumnId && (data != undefined && data.isRowEmpty);
    var gridColumn = gridColumnsDictionary[columnfield];
    var freezedRowKey = getFreezedRowKey();
    if (!gridColumn) {
      return "";
    }
    if (!conditionalFormatting && (settings.enableConditionalValueFormatting && !cellShading.isEnabled)) {
      conditionalFormatting = gridColumn.conditionalValueFormatting;
    }
    return gfGridCellFormatter.renderedCell(conditionalFormatting, row, columnfield, value, columnproperties, data, gridColumn, loadingColumnsFinished, showEmptyInsteadOfNA, dataLoadingRows, currentTheme, barCharts.minMaxColumnValues, outParam, firstColumnId, primaryRowKey, that.globalParameters, cellsFormat, showRemoveButton, cellShading.standardDeviations, celltype, isExcludedFromStatistics, highlightedRowKey, freezedRowKey, settings.isAuditEnabled);
  };
  this.refreshSorting = function() {
    sortingConroller.refreshSorting();
  };
  this.setStatistics = function(statistics) {
    statisticsRederer_.clearCache();
    gfStatisticsCalculation.stopCalculations();
    selectedStatistics = statistics;
    grid.jqxGrid({statusbarheight:getToolbarHeight(currentTheme.rowsHeight)});
    this.refreshPremiumDiscount();
    grid.jqxGrid("renderaggregates");
  };
  this._getDataView = function() {
    return grid.jqxGrid("dataview");
  };
  this._setRowsOrder = function(records, postponeRendering) {
    if (!records || !records.length) {
      return;
    }
    var dataView = grid.jqxGrid("dataview");
    if (dataView.records.length != records.length) {
      throw new Error("incorrect records length");
    }
    this.discardSorting();
    var newSortData = _.map(records, function(value, index) {
      return{sortkey:value.toString(), value:value, index:index};
    });
    dataView.sortdata = newSortData;
    updateGridDataView();
    if (!postponeRendering) {
      grid.jqxGrid("rendergridcontent", true);
    }
  };
  this.getStatistics = function() {
    return selectedStatistics;
  };
  this.premiumDiscoutAutoRestoringDisabled = function(disabled) {
    premiumDiscountAutoRestoringDisabled = disabled;
  };
  this.isPremiumDiscountApplied = function() {
    return primaryRowKey && getPremiumDiscountStatistics(selectedStatistics);
  };
  this.getPremiumDiscountStatistics = function() {
    return getPremiumDiscountStatistics(selectedStatistics);
  };
  this.refreshPremiumDiscount = function() {
    setPremiumDiscount(getPremiumDiscountStatistics(selectedStatistics));
  };
  function getPremiumDiscountStatistics(statistics) {
    return _.findWhere(statistics, {isPremium:true});
  }
  this.hidePremiumDiscountRow = function() {
    invokeAndPreventPDRowRestoring(function() {
      grid.jqxGrid("hidepremiumdiscountrow");
    });
  };
  function setPremiumDiscount(premiumDiscountStatistics, boundIndex) {
    if (!primaryRowKey || !premiumDiscountStatistics) {
      that.hidePremiumDiscountRow();
      return;
    }
    if (boundIndex !== 0 && !boundIndex) {
      var primaryRowData = _.findWhere(grid.jqxGrid("_getrows"), {rowKey:primaryRowKey});
      if (!primaryRowData) {
        return;
      }
      boundIndex = getRowIndex(primaryRowData);
    }
    grid.jqxGrid("showpremiumdiscountrow", boundIndex);
  }
  function wrapGetStatisticsLineName(statistics) {
    var statisticsLineName = statistics.getStatisticsLineName();
    if (_.isString(statisticsLineName)) {
      return $q.when(statisticsLineName);
    } else {
      if (statisticsLineName != null && statisticsLineName.then != null) {
        return statisticsLineName;
      } else {
        return $q.when();
      }
    }
  }
  function getPremiumDiscountStatisticsName(statistics) {
    if (statistics) {
      return{promise:wrapGetStatisticsLineName(statistics).then(function(name) {
        return $translate.instant("PREMIUM_DISCOUNT_TITLE", {statisticsName:name});
      })};
    } else {
      return null;
    }
  }
  function getPremiumDiscountValue(datafield) {
    var column = gridColumnsDictionary[datafield];
    if (column == undefined || column.doNotShowPremiumDiscount) {
      return{value:createPremiumDiscountValue(datafield, undefined)};
    }
    var statistics = getPremiumDiscountStatistics(selectedStatistics);
    var result;
    if (datafield == firstColumnId) {
      result = getPremiumDiscountStatisticsName(statistics);
      $timeout(angular.noop);
      return result;
    }
    if (column.canHaveStatistics()) {
      var primaryRow = _.findWhere(gridData, {rowKey:primaryRowKey});
      var primaryRowValue = primaryRow ? primaryRow[column.id] : null;
      result = gfStatisticsCalculation.calculatePremiumDiscount(column, getFilteredGridData(), statistics, primaryRowValue);
      $timeout(angular.noop);
      return result;
    }
    return{value:createPremiumDiscountValue(datafield, null)};
  }
  function createPremiumDiscountValue(datafield, value) {
    var filteredData = _.first(gridData);
    if (filteredData && _.isArray(filteredData[datafield])) {
      return _.map(filteredData[datafield], function() {
        return value;
      });
    } else {
      return value;
    }
  }
  this.setColumnIndex = function(colId, newIndex) {
    var minIndex = grid.jqxGrid("_pinnedColumnsLength");
    if (newIndex < minIndex) {
      throw{message:"Index out of range. Minimum column index is " + minIndex};
    }
    var jqxColumns = grid.jqxGrid("columns").records;
    var maxIndex = jqxColumns.length - _.where(jqxColumns, {hidden:true}).length;
    if (newIndex >= maxIndex) {
      throw{message:"Index out of range. Maximum column index is " + (maxIndex - 1)};
    }
    grid.jqxGrid("setcolumnindex", colId, newIndex, true);
  };
  this.reorderColumns = function(columns) {
    this.beginUpdate();
    var minIndex = grid.jqxGrid("_pinnedColumnsLength");
    var jqxColumns = grid.jqxGrid("columns").records;
    var filteredColumns = _.filter(columns, function(c) {
      return _.find(jqxColumns, function(jqxCol) {
        return jqxCol.datafield == c.id && (jqxCol.hidden == true || jqxCol.pinned == true);
      }) == undefined;
    });
    for (var i = 0;i < filteredColumns.length;i++) {
      this.setColumnIndex(filteredColumns[i].id, minIndex + i);
    }
    this.endUpdate();
  };
  this.updateStatistics = function() {
    statisticsRederer_.clearCache();
    grid.jqxGrid("renderaggregates");
  };
  function hasStatistics(column) {
    return column && column.canHaveStatistics();
  }
  this.hasStatistics = hasStatistics;
  function getFilteredGridData() {
    return _.filter(gridData, function(row) {
      return row && (row.rowKey != primaryRowKey && (row.isRowEmpty != true && (row.isRowHidden != true && !excludedFromStatisticsIdentifiers[row.rowKey])));
    });
  }
  function getFilteredRecords() {
    return _.filter(grid.jqxGrid("dataview").loadedrecords, function(record) {
      return record && !excludedFromStatisticsIdentifiers[record.rowKey];
    });
  }
  var statisticsRederer_ = new gfJqxGridStatisticsRenderer({grid:grid, getFirstColumnId:function() {
    return firstColumnId;
  }, toThemeProperty:function(classStr) {
    return toThemeProperty(classStr, currentTheme.theme);
  }, hasStatistics:function(colId) {
    return hasStatistics(gridColumnsDictionary[colId]);
  }, getColumn:function(datafield) {
    return gridColumnsDictionary[datafield];
  }, getIsLoadingVisible:function() {
    return isLoadingVisible;
  }, hasData:function() {
    return gridData.length > 0;
  }, hasColumnData:function(colId) {
    return gridData.length > 0 && gridData[0].hasOwnProperty(colId);
  }, getFilteredGridData:getFilteredGridData});
  function columnAggregatesRenderer(aggr, col, element) {
    return statisticsRederer_.render(this.owner, selectedStatistics, isLoadingVisible || col.datafield == null, showAddRemoveRows, addRowBuilder, col, element);
  }
  grid.on("aggregatesrendered", function(event) {
    if (!showAddRemoveRows) {
      return;
    }
    var element = event.args.rowelement.find('[data-statistics-column="' + firstColumnId + '"]').find(".jqx-add-row-ctrl-cell");
    if (element[0]) {
      element.html(addRowBuilder.getHtml());
      addRowBuilder.compile(element);
      $timeout(angular.noop);
    }
  });
  function setSorting(sortColumn, vectorIndex) {
    var singleSortingState = sortingFullState.singleSortingState, direction;
    if (singleSortingState.column === sortColumn.id && (vectorIndex == undefined || sortColumn.vectorIndex === vectorIndex)) {
      direction = singleSortingState.isAsc() ? "desc" : "asc";
    } else {
      direction = "asc";
    }
    sortColumn.vectorIndex = vectorIndex;
    that.setSingleSortingState(sortColumn.id, direction);
    sortingConroller.refreshSorting();
  }
  grid.on("columnclick", function(event) {
    var $delegateTarget = $(event.args.originalEvent.delegateTarget), $target = $(event.args.originalEvent.target), vectorIndex, dataBlockElement, column = _.findWhere(gridColumns, {id:event.args.datafield});
    if (column.isMultiColumn()) {
      dataBlockElement = $target.closest(".jqx-header-data-block-item");
      var dataBlockItemId = dataBlockElement.attr("class") ? dataBlockElement.attr("class").match(/jqx-column-id-(\S+)/)[1] : undefined;
      if (!dataBlockItemId) {
        return;
      }
      dataBlockItemId = decodeURI(dataBlockItemId);
      if (column.gridColumns[dataBlockItemId].command.isVector() || (column.gridColumns[dataBlockItemId].command.isFactorRank() || column.gridColumns[dataBlockItemId].command.isMultiSelect())) {
        column = column.gridColumns[dataBlockItemId];
      } else {
        if (that.columnSelection.getEnabled()) {
          columnClicked(event, column.gridColumns[dataBlockItemId]);
        } else {
          setSorting(column.gridColumns[dataBlockItemId]);
        }
        return;
      }
    }
    if (that.columnSelection.getEnabled()) {
      columnClicked(event, column);
    } else {
      if (!$target.hasClass("gf-grid-sub-column-sortable")) {
        var vectorItemEl = $target.closest(".gf-grid-sub-column-sortable");
        if (vectorItemEl.length == 0) {
          return;
        }
        $target = vectorItemEl.first();
      }
      vectorIndex = (dataBlockElement || $delegateTarget).find(".gf-grid-sub-column-sortable").index($target);
      if (vectorIndex > -1) {
        if (!column) {
          return;
        }
        setSorting(column, vectorIndex);
      }
    }
  });
  function getRowLastColumnId(rowUniqueId) {
    function getLastColumnId() {
      var i = gridColumns.length;
      while (--i >= 0) {
        if (!gridColumns[i].hidden) {
          return gridColumns[i].id;
        }
      }
      return undefined;
    }
    if (!getRowLastColumnId.cache || !getRowLastColumnId.cache.hasOwnProperty(rowUniqueId)) {
      getRowLastColumnId.cache = {};
      getRowLastColumnId.cache[rowUniqueId] = getLastColumnId();
    }
    return getRowLastColumnId.cache[rowUniqueId];
  }
  function getCellClassName(row, columnfield, value, rowObj) {
    if (columnfield == getRowLastColumnId(rowObj.uniqueid)) {
      return "jqx-grid-last-cell";
    }
    return undefined;
  }
  function createColumnForGrid(gridColumn) {
    var col = {text:gridColumn.header, datafield:gridColumn.id, classname:gridColumn.guid + " jqx-column-id-" + encodeURI(gridColumn.id) + " jqx-column-command-header " + "jqx-column-sorting-type-" + gridColumn.sortingType, cellsalign:gridColumn.getCellAlign(), cellclassname:getCellClassName, renderer:columnHeaderRenderer, pinned:gridColumn.pinned, hidden:gridColumn.hidden, filtertype:getFilterType(gridColumn.getReturnType()), groupable:gridColumn.groupable, aggregatesrenderer:columnAggregatesRenderer, 
    aggregates:[{"Empty":function(aggregatedValue, currentValue, column, record) {
      return 0;
    }}], cellsrenderer:cellsRenderer, sortable:gridColumn.isSortable()};
    if (gridColumn.width) {
      col.width = gridColumn.width;
    } else {
      col.width = getDefaultColumnHeaderWidth(gridColumn);
      if (gridColumn && gridColumn.isMultiColumn()) {
        gridColumn.isAutoresizable = false;
        gridColumn.width = col.width;
      }
    }
    if (!_.isNull(settings.cellsFormatGetter) && !_.isUndefined(settings.cellsFormatGetter)) {
      var cellFormat = settings.cellsFormatGetter(gridColumn);
      if (cellFormat) {
        col.cellsformat = cellFormat;
      }
    }
    return col;
  }
  function getPremiumDiscountDescription() {
    return{cellsrenderer:function(row, columnfield, value, defaulthtml, columnproperties, data, container, outParam) {
      var gridColumn = gridColumnsDictionary[columnfield];
      var conditionalFormatting = gfConditionalValueFormattingService.createPremiumDiscount(gridColumn);
      var cellsFormat = gfCellsFormattingFactory.createPremiumDiscount(gridColumn ? gridColumn.cellsFormat : undefined);
      return cellsRenderer(row, columnfield, value, defaulthtml, columnproperties, data, container, outParam, gridReport.model.CellTypes.PrimaryDiscountStatisticCell, cellsFormat, conditionalFormatting);
    }, isDataColumn:function(datafield) {
      return gridColumnsDictionary[datafield] != undefined;
    }};
  }
  function getDefaultColumnHeaderWidth(gridColumn) {
    var textWidth = grid.jqxGrid("getHeaderTextWidth", gridColumn.header), cellsCount = 0, subColumns, columnIndex, columnsCount, subColumn;
    subColumns = gridColumn.gridColumns ? _.toArray(gridColumn.gridColumns) : [gridColumn];
    for (columnIndex = 0, columnsCount = subColumns.length;columnIndex < columnsCount;columnIndex++) {
      subColumn = subColumns[columnIndex];
      if (subColumn.command != undefined && (subColumn.command.isVector() || subColumn.command.isFactorRank())) {
        cellsCount += gfColumnHeaderFormatterService.getSubColumns(subColumn).length || 1;
      } else {
        cellsCount += 1;
      }
    }
    if (cellsCount == 0) {
      cellsCount = 1;
    }
    if (textWidth < defaultColumnMinWidth * cellsCount) {
      return defaultColumnMinWidth * cellsCount;
    }
    if (textWidth > defaultColumnMaxWidth * cellsCount) {
      return defaultColumnMaxWidth * cellsCount;
    }
    return textWidth;
  }
  this.setColumns = function(columns, groups) {
    groups = groups || that.getGroupping();
    clearSortCache();
    gridColumnsDictionary = {};
    _.each(gridColumns, function(column) {
      if (column.isFilterApplied()) {
        grid.jqxGrid("removefilter", column.id, false);
      }
    });
    gridColumns = columns;
    var resultColumns = [];
    var i;
    if (gridColumns.length > 0) {
      firstColumnId = gridColumns[0].id;
    }
    var isDataUpdated = false;
    for (i = 0;i < gridColumns.length;i++) {
      var gridColumn = gridColumns[i];
      gridColumnsDictionary[gridColumn.id] = gridColumn;
      if (gridColumn.guid === undefined) {
        gridColumn.guid = gfUuidGenerator.get();
      }
      _.each(gridColumn.gridColumns, function(column) {
        if (column.guid === undefined) {
          column.guid = gfUuidGenerator.get();
        }
      });
      if (gridColumn.isNumber()) {
        gridColumn.cellsTooltipFormat = "F6";
      } else {
        _.each(gridColumn.gridColumns, function(column) {
          if (column.isNumber()) {
            column.cellsTooltipFormat = "F6";
          }
        });
      }
      resultColumns.push(createColumnForGrid(gridColumn));
      if (updateDataForNewDataBlock(gridColumn)) {
        isDataUpdated = true;
      }
    }
    if (!_.isNull(groups) && !_.isUndefined(groups)) {
      for (i = 0;i < groups.length;i++) {
        if (_.findWhere(resultColumns, {datafield:groups[i]}) == null) {
          resultColumns.push({datafield:groups[i], hidden:true});
        }
      }
    }
    resultColumns.push({datafield:"isRowHidden", hidden:true});
    invokeAndPreventPDRowRestoring(function() {
      var updateParams = {columns:resultColumns};
      grid.jqxGrid(updateParams);
      if (isDataUpdated) {
        updateBoundData("cells");
      }
    });
    setTimeout(function() {
      _.each(columns, function(column) {
        if (column.isFilterApplied()) {
          grid.jqxGrid("addfilter", column.id, column.filter.convertToJqxFilter());
        }
      });
    });
  };
  function updateDataForNewDataBlock(column) {
    if (!column.isMultiColumn()) {
      return false;
    }
    var result = false;
    _.each(column.gridColumns, function(c) {
      _.each(gridData, function(dataItem) {
        if (dataItem[c.id] !== undefined) {
          if (!dataItem[column.id]) {
            dataItem[column.id] = {};
            result = true;
          }
          dataItem[column.id][c.id] = dataItem[c.id];
        }
      });
    });
    return result;
  }
  this.setGroupping = function(groups) {
    if (!groups) {
      return;
    }
    var newGroups = angular.copy(groups);
    this.beginUpdate();
    grid.jqxGrid({groups:newGroups});
    gridGroups = newGroups;
    sortingConroller.refreshSorting();
    this.endUpdate();
    grid.jqxGrid("rendercolumnheaders");
  };
  function clearSortCache() {
    var dataview = grid.jqxGrid("dataview");
    if (dataview) {
      dataview.clearsortdata();
    }
  }
  this.getGroupping = function() {
    return gridGroups;
  };
  this.setFailedLoadingColumns = function(columnIds, exception) {
    var i, indexOfLoadedColumn;
    for (i = 0;i < columnIds.length;i++) {
      loadingColumnsFinished[columnIds[i]] = true;
      indexOfLoadedColumn = dataLoadingColumns.indexOf(columnIds[i]);
      if (indexOfLoadedColumn != -1) {
        var column = getColumn(columnIds[i]);
        if (column) {
          var jqxColumn = $("." + column.guid);
          if (jqxColumn) {
            jqxColumn.find(".throbber-mini").hide();
          }
        }
        dataLoadingColumns.splice(indexOfLoadedColumn, 1);
      }
      if (exception.errorCode === gridReport.model.ErrorCodes.MAX_ROWS_COUNT_EXCEEDED) {
        showEmptyInsteadOfNA[columnIds[i]] = true;
      }
    }
    updateBoundData("cells");
  };
  function getColumn(columnId) {
    if (gridColumnsDictionary.hasOwnProperty(columnId)) {
      return gridColumnsDictionary[columnId];
    }
    for (var column in gridColumnsDictionary) {
      if (gridColumnsDictionary.hasOwnProperty(column) && gridColumnsDictionary[column].hasSubColumns()) {
        var underlyingColumns = gridColumnsDictionary[column].gridColumns;
        for (var underlyingColumnId in underlyingColumns) {
          if (underlyingColumns.hasOwnProperty(underlyingColumnId)) {
            if (underlyingColumnId === columnId) {
              return gridColumnsDictionary[column];
            }
          }
        }
      }
    }
    return null;
  }
  function getColumnOrSubColumn(columnId) {
    if (gridColumnsDictionary.hasOwnProperty(columnId)) {
      return gridColumnsDictionary[columnId];
    }
    for (var column in gridColumnsDictionary) {
      if (gridColumnsDictionary.hasOwnProperty(column) && gridColumnsDictionary[column].hasSubColumns()) {
        var underlyingColumns = gridColumnsDictionary[column].gridColumns;
        for (var underlyingColumnId in underlyingColumns) {
          if (underlyingColumns.hasOwnProperty(underlyingColumnId)) {
            if (underlyingColumnId === columnId) {
              return underlyingColumns[underlyingColumnId];
            }
          }
        }
      }
    }
    return null;
  }
  function removeColumnFromLoadingQueue(colId) {
    loadingColumnsFinished[colId] = true;
    var indexOfLoadedColumn = dataLoadingColumns.indexOf(colId);
    if (indexOfLoadedColumn != -1) {
      dataLoadingColumns.splice(indexOfLoadedColumn, 1);
    }
  }
  this.setColumnsData = function(columnsData) {
    clearSortCache();
    var indexOfRowKey = dataLoadingColumns.indexOf("rowKey");
    if (indexOfRowKey != -1) {
      dataLoadingColumns.splice(indexOfRowKey, 1);
    }
    var groupsValuesAdded = false, colData, totals, colId, depColumns, column;
    for (var i = 0;i < columnsData.length;i++) {
      colData = columnsData[i].values;
      totals = columnsData[i].sectorLevelValues;
      colId = columnsData[i].id;
      statisticsRederer_.clearColumnCache(columnsData[i].id);
      depColumns = gfFormulaColumnsHelper.getDependantColumnIds(gridColumns, columnsData[i].id);
      _.forEach(depColumns, function(id) {
        statisticsRederer_.clearColumnCache(id);
      });
      _.each(gridColumns, function(gridColumn) {
        if (gridColumn.isMultiColumn()) {
          if (_.any(gridColumn.gridColumns, function(subColumn) {
            return subColumn.id === colId;
          })) {
            statisticsRederer_.clearColumnCache(gridColumn.id);
          }
        }
      });
      column = getColumnOrSubColumn(colId);
      if (column && (column.isMultiColumn() && column.id != colId)) {
        column = column.gridColumns[colId];
      }
      removeColumnFromLoadingQueue(colId);
      _.each(_.filter(gridColumns, function(c) {
        return c.gridColumns && c.gridColumns[colId] != undefined;
      }), function(dataBlock) {
        if (_.all(dataBlock.gridColumns, function(c) {
          return dataLoadingColumns.indexOf(c.id) == -1;
        })) {
          removeColumnFromLoadingQueue(dataBlock.id);
        }
      });
      var dataBlocks = _.filter(gridColumns, function(c) {
        return c.gridColumns && c.gridColumns[colId] != undefined;
      });
      var isArray = false;
      _.each(gridData, function(item) {
        var data = colData[item.rowKey];
        if (!data) {
          return;
        }
        if (_.isArray(data.value)) {
          isArray = true;
        }
        if (data.curn) {
          if (_.isString(data.curn)) {
            gfNativeCurrencyService.setCurrencyCode(colId, item.rowKey, data.curn);
          } else {
            _.each(data.curn, function(currency, columnId) {
              gfNativeCurrencyService.setCurrencyCode(columnId, item.rowKey, currency);
            });
          }
        }
        item[colId] = data.value;
        _.each(dataBlocks, function(db) {
          if (!item[db.id]) {
            item[db.id] = {};
          }
          item[db.id][colId] = data.value;
        });
        if (column) {
          item[column.getPropsId()] = data.properties;
        }
        if (data.sectors && data.sectors.length > 0) {
          groupsValuesAdded = true;
          for (var j = 0;j < data.sectors.length;j++) {
            item[data.sectors[j].classificationId] = data.sectors[j].sectorId;
          }
        }
      });
      updateTotalsArray(colId, totals);
      gfTotalsCalculation.updateItemsValues(colId, colData);
    }
    cellShading.recalculate(getColumnsWithDataBlockSubColumns(), gridSource.localdata);
    updateBoundData("cells");
    return groupsValuesAdded;
  };
  this.columnDataLoadingStarted = function(colId) {
    if (dataLoadingColumns.indexOf(colId) === -1) {
      dataLoadingColumns.push(colId);
      loadingColumnsFinished[colId] = false;
    }
  };
  this.dataLoadingStarted = function() {
    grid.jqxGrid("rendercolumnheaders");
  };
  this.dataUpdated = function() {
    gfActionPostponingService.execute(UPDATE_BOUND_DATA_CELLS_AND_FIX_EXPAND_STATE, updateBoundDataCellsAndFixExpandState, 400);
  };
  function updateBoundDataCellsAndFixExpandState() {
    if (that && !that.destroyed) {
      updateBoundData("cells");
      sortingConroller.refreshSorting();
      gfTotalsCalculation.clearCache();
      grid.jqxGrid("_updatetotalsrow");
      grid.jqxGrid("rendercolumnheaders");
      that.updateColumnHeaders();
    }
  }
  this.beforeRowRemoved = function(rowKeys) {
    if (!rowKeys) {
      throw new Error("rowKeys should be provided");
    }
    var boundRows = grid.jqxGrid("getboundrows");
    var boundRowsForRemoving = _.filter(boundRows, function(r) {
      return rowKeys.indexOf(r.rowKey) >= 0;
    });
    var rowsForRemoving = _.map(boundRowsForRemoving, function(r) {
      return grid.jqxGrid("getrowdatabyid", r.uid);
    });
    var removedRowsIndexes = getRowsIndexes(rowsForRemoving);
    var restSelectedRowsIndexes = _.difference(this.getSelectedRowIndexes(), removedRowsIndexes);
    for (var i = 0;i < restSelectedRowsIndexes.length;i++) {
      var rowInd = restSelectedRowsIndexes[i];
      for (var j = 0;j < removedRowsIndexes.length;j++) {
        if (rowInd > removedRowsIndexes[j]) {
          restSelectedRowsIndexes[i] = restSelectedRowsIndexes[i] - 1;
        }
      }
    }
    grid.jqxGrid({selectedrowindexes:restSelectedRowsIndexes});
  };
  this.afterDataKeysChanged = function(addedIdentifiers) {
    if (!addedIdentifiers || !addedIdentifiers.length) {
      gfStatisticsCalculation.clearStatisticsCache();
      statisticsRederer_.clearCache();
      cellShading.recalculate(getColumnsWithDataBlockSubColumns(), gridSource.localdata);
      updateBoundData("cells");
      refreshTotalsRow();
    } else {
      that.discardSorting();
      updateBoundData("cells");
      if (gridGroups && gridGroups.length) {
        grid.jqxGrid({groups:gridGroups});
      } else {
        scrollToLastVisibleRow();
      }
      gfTotalsCalculation.clearCache();
      gfStatisticsCalculation.clearStatisticsCache();
      statisticsRederer_.clearCache();
    }
  };
  this.scrollToRow = function(index) {
    grid.jqxGrid("scrollToRow", index);
  };
  this.scrollToTicker = function(rowKey) {
    grid.jqxGrid("scrollToTicker", rowKey, gridGroups, isGroupExpanded);
  };
  this.scrollToGroup = function(path, rowKey) {
    grid.jqxGrid("scrollToGroup", path, rowKey, isGroupExpanded);
  };
  this.resize = function() {
    if (this.isUpdating()) {
      return;
    }
    setTimeout(function() {
      if (that && !that.destroyed) {
        grid.jqxGrid("render");
      }
    }, 5);
  };
  this.refreshFilters = function() {
    var filters = grid.jqxGrid("getfilterinformation");
    if (filters.length > 0) {
      grid.jqxGrid("clearfilters", false);
      _.forEach(filters, function(currentFilterGroup) {
        var filterGroup = new $.jqx.filter;
        _.forEach(currentFilterGroup.filter.getfilters(), function(filter) {
          filterGroup.addfilter(filter.operator, filterGroup.createfilter(filter.type, filter.value, filter.condition));
        });
        grid.jqxGrid("addfilter", currentFilterGroup.filtercolumn, filterGroup, false);
      });
      grid.jqxGrid("refreshfilterrow");
      grid.jqxGrid("applyfilters");
      gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
    }
  };
  function invokeAndPreventPDRowRestoring(func) {
    var prevState = premiumDiscountAutoRestoringDisabled;
    premiumDiscountAutoRestoringDisabled = true;
    func();
    premiumDiscountAutoRestoringDisabled = prevState;
  }
  this.setSortingFullState = function(fullState) {
    fullState.advancedSortingState.criterias = _.filter(fullState.advancedSortingState.criterias, function(c) {
      return gridColumnsDictionary[c.dataField];
    });
    sortingFullState = new gridReport.model.SortingFullState(fullState);
    sortingConroller.setSortingState(sortingFullState);
    sortingConroller.refreshSorting();
  };
  this.getSortingFullState = function() {
    return sortingConroller.getSortingState();
  };
  this.setAdvancedSortingState = function(sortingState) {
    var fullState = sortingConroller.getSortingState();
    fullState.advancedSortingState = sortingState;
    this.setSortingFullState(fullState);
  };
  this.getAdvancedSortingState = function() {
    return sortingConroller.getSortingState().advancedSortingState;
  };
  this.setSingleSortingState = function(gridColumnId, sortDirection) {
    var fullState = sortingConroller.getSortingState();
    if (fullState.advancedSortingState) {
      fullState.advancedSortingState.enabled = false;
    }
    fullState.singleSortingState = new gridReport.model.SingleSortingState({column:gridColumnId, direction:sortDirection});
    this.setSortingFullState(fullState);
  };
  this.discardSorting = function() {
    sortingConroller.discardSorting();
  };
  this.clearFilters = function() {
    grid.jqxGrid("clearfilters");
    ensureRowHideFilterExists();
  };
  function ensureRowHideFilterExists() {
    var currentFilters = grid.jqxGrid("getfilterinformation");
    var isRowHiddenFilter = _.findWhere(currentFilters, {filtercolumn:"isRowHidden"});
    if (!isRowHiddenFilter) {
      isRowHiddenFilter = new $.jqx.filter;
      isRowHiddenFilter.addfilter(0, isRowHiddenFilter.createfilter("booleanfilter", false, "equal"));
      grid.jqxGrid("addfilter", "isRowHidden", isRowHiddenFilter, true);
    }
  }
  function scrollToLastVisibleRow() {
    var lastItem = _.chain(gridData).where({isRowHidden:false}).last().value();
    that.scrollToTicker(lastItem.rowKey);
  }
  this._updateBoundData = updateBoundData;
  function updateBoundData(param) {
    grid.jqxGrid("updatebounddata", param);
    if (param == "cells" && (gridGroups && gridGroups.length)) {
      grid.jqxGrid("dataview").update();
    }
    bindRowsEventHandlers();
  }
  function updateBoundDataPreservingState(func) {
    var scrollPos = grid.jqxGrid("scrollposition");
    ensureRowHideFilterExists();
    func();
    updateBoundData("cells");
    gfTotalsCalculation.clearCache();
    refreshTotalsRow();
    that.setTotalsLabel();
    sortingConroller.refreshSorting();
    grid.jqxGrid("scrollTo", scrollPos.left, scrollPos.top);
  }
  this.setVisibleRows = function(isHidden) {
    updateBoundDataPreservingState(function() {
      gfStatisticsCalculation.clearStatisticsCache();
      statisticsRederer_.clearCache();
      _.forEach(gridData, function(gridRow) {
        gridRow.isRowHidden = isHidden(gridRow.rowKey);
      });
      if (that.isPremiumDiscountApplied()) {
        that.hidePremiumDiscountRow();
      }
    });
  };
  this.getCurrentExpandCollapseState = function() {
    var groups = getAllGroups(), groupsInfo = getGroupsExpandInformation(groups);
    if (groupsInfo.expanded == 0) {
      return gridReport.model.GridReportExpandCollapseState.allCollapsed;
    } else {
      if (groupsInfo.expanded == groupsInfo.total) {
        return gridReport.model.GridReportExpandCollapseState.allExpanded;
      } else {
        return gridReport.model.GridReportExpandCollapseState.middle;
      }
    }
  };
  function getAllGroups() {
    var rootLevelGroupsCount = grid.jqxGrid("getrootgroupscount");
    var rootLevelArray = [];
    _.times(rootLevelGroupsCount, function(index) {
      rootLevelArray.push(grid.jqxGrid("getgroup", index));
    });
    return rootLevelArray;
  }
  function getGroupsExpandInformation(subgroups) {
    var groupsInfo = {total:0, expanded:0};
    _.forEach(subgroups, function(item) {
      groupsInfo.total++;
      if (item.expanded) {
        groupsInfo.expanded++;
      }
      if (item.expanded && item.subgroups) {
        var subGroupsInfo = getGroupsExpandInformation(item.subgroups);
        groupsInfo.total += subGroupsInfo.total;
        groupsInfo.expanded += subGroupsInfo.expanded;
      }
    });
    return groupsInfo;
  }
  this.getHiddenIdentifiers = function() {
    var hiddenRows = _.where(gridData, {isRowHidden:true});
    return _.pluck(hiddenRows, "rowKey");
  };
  this.getVisibleIdentifiers = function() {
    var rows = _.where(grid.jqxGrid("_getrows"), {isRowHidden:false});
    return _.pluck(rows, "rowKey");
  };
  this.showHiddenRows = function() {
    _.forEach(gridData, function(item) {
      item.isRowHidden = false;
    });
    updateBoundData("cells");
    sortingConroller.refreshSorting();
  };
  function updateTotalsArray(colId, totals) {
    if (_.isNull(totals) || _.isUndefined(totals)) {
      return;
    }
    var columnTotals = _.findWhere(gridTotals, {colId:colId});
    if (_.isNull(columnTotals) || _.isUndefined(columnTotals)) {
      columnTotals = {colId:colId};
      gridTotals.push(columnTotals);
    }
    columnTotals.totals = totals;
  }
  function refreshTotalsRow() {
    gfTotalsCalculation.clearCache();
    if (showTotalsRow) {
      grid.jqxGrid("_updatetotalsrow");
    }
  }
  this.setColumnTotalsCalculation = function(column, calculation) {
    if (!column) {
      throw new Error("column should be defined");
    }
    column.selectedTotalsCalculation = calculation;
    barCharts.calculate(column, getFilteredRecords(), gridSource);
    grid.jqxGrid("rendercolumnheaders");
    grid.jqxGrid("clearcellscache");
    grid.jqxGrid("_updatetotalsrow");
    clearSortCache();
    sortingConroller.refreshSorting();
    updateBoundData("cells");
  };
  this.applyCellsFormatting = function() {
    statisticsRederer_.clearCache();
    grid.jqxGrid("render");
  };
  this.clean = function() {
    cellShading.clear();
    barCharts.clear();
    gridData = [];
    statisticsRederer_.clearCache();
    gfTotalsCalculation.clearCache();
    clearSortCache();
    that._setGridData(gridData);
    showEmptyInsteadOfNA = {};
    grid.jqxGrid("clearPremiumDiscount");
    if (dataLoadingColumns.length > 0) {
      dataLoadingColumns = [];
      updateBoundData("cells");
      grid.jqxGrid("render");
    } else {
      updateBoundData("cells");
    }
    loadingColumnsFinished = {};
  };
  this.removeColumn = function(colIds) {
    saferender(function() {
      grid.jqxGrid("_initializeColumns");
      _.each(colIds, function(colId) {
        gridTotals.splice(gridTotals.indexOf(_.findWhere(gridTotals, {colId:colId})), 1);
        grid.jqxGrid("hidecolumn", colId);
        if (gridColumnsDictionary[colId] && gridColumnsDictionary[colId].isFilterApplied()) {
          grid.jqxGrid("removefilter", colId);
        }
        var columnIndex = _.indexOf(gridColumns, _.findWhere(gridColumns, {id:colId}));
        if (columnIndex >= 0) {
          gridColumns.splice(columnIndex, 1);
        }
        var keepData = _.any(gridColumns, function(column) {
          return _.any(column.gridColumns, function(clmn) {
            return clmn.id === colId;
          });
        });
        if (keepData == false) {
          _.each(gridData, function(dataitem) {
            delete dataitem[colId];
          });
        }
        delete gridColumnsDictionary[colId];
      });
      updateBoundData("cells");
    }, true);
  };
  this.getState = function() {
    return _.extend(grid.jqxGrid("getstate"), {"expandCollapseState":angular.copy(isGroupExpanded), "selectedrowindex":-1, "selectedrowindexes":[], "advancedSortingState":that.getAdvancedSortingState()});
  };
  this.setState = function(state) {
    if (state.expandCollapseState) {
      isGroupExpanded = state.expandCollapseState;
      delete state.expandCollapseState;
    }
    if (state) {
      state.selectedrowindex = -1;
      state.selectedrowindexes = [];
    }
    gfLogManager.trace(function() {
      return'GR: "loadstate" called, state: ' + JSON.stringify(state);
    });
    grid.jqxGrid("loadstate", state);
    grid.jqxGrid({width:gridWidth, height:gridHeight});
  };
  this.clearState = function() {
    _.each(gridColumns, function(column) {
      if (column.isFilterApplied()) {
        grid.jqxGrid("removefilter", column.id, false);
      }
    });
    gridData = [];
    grid.find(".jqx-grid-total-nova").empty();
    gridTotals = [];
    gridColumns = [];
    gridGroups = [];
    dataLoadingColumns = [];
    dataLoadingRows = {};
    loadingColumnsFinished = {};
    showEmptyInsteadOfNA = {};
    gridColumnsDictionary = {};
    clearSortCache();
    that._setGridData(gridData);
    updateBoundData("cells");
    grid.jqxGrid({columns:[], groups:[]});
    this.setSortingFullState(getSortingStateForCleanState());
  };
  function getSortingStateForCleanState() {
    return new gridReport.model.SortingFullState({isPrimaryRowFreezed:sortingFullState.isPrimaryRowFreezed});
  }
  this.resetToNewTemplateState = function() {
    _.each(gridColumns, function(column) {
      if (column.isFilterApplied()) {
        grid.jqxGrid("removefilter", column.id, false);
      }
    });
    this.setSortingFullState(getSortingStateForCleanState());
  };
  this.setBrowserSelection = function(isEnabled) {
    grid.jqxGrid({enablebrowserselection:isEnabled});
  };
  this.setShowGroupsHeader = function(value) {
    grid.jqxGrid({"showgroupsheader":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.setColumnsResize = function(value) {
    grid.jqxGrid({"columnsresize":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.setColumnsReorder = function(value) {
    grid.jqxGrid({"columnsreorder":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.setGroupable = function(value) {
    grid.jqxGrid({"groupable":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.setSortable = function(value) {
    grid.jqxGrid({"sortable":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.setScrollMode = function(value) {
    grid.jqxGrid({"scrollmode":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.getSelectionMode = function() {
    return grid.jqxGrid("selectionmode");
  };
  this.enablePrimaryRowFreezing = function(value) {
    enablePrimaryRowFreezing = value;
  };
  this.setSelectionMode = function(value) {
    grid.jqxGrid({"selectionmode":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.enableTooltips = function(value) {
    grid.jqxGrid({"enabletooltips":value});
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.enableRowsDragging = function(value) {
    enableRowsDragging = value;
    gfActionPostponingService.execute(GRID_RENDER_KEY, renderAndFixExpandState);
  };
  this.exportData = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return that.getDataForExport(exportSettings.title, exportSettings.exportAll, {isExcel:true}).then(function(exportData) {
      return eeExcelExporter["export"](exportData, exportSettings.fileName);
    });
  };
  this.exportToHtml = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return that.getDataForExport(exportSettings.title, exportSettings.exportAll, {isHtml:true}).then(function(exportData) {
      return pePdfExporter.exportToHtml(exportData, exportSettings.printingOptions);
    });
  };
  this.exportToPdf = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return that.getDataForExport(exportSettings.title, exportSettings.exportAll, {isHtml:true}).then(function(exportData) {
      return pePdfExporter.exportToPdf(exportData, exportSettings.printingOptions, exportSettings.fileName);
    });
  };
  this.print = function(exportSettings) {
    if (!exportSettings) {
      throw new Error("exportSettings should be provided");
    }
    return that.getDataForExport(exportSettings.title, exportSettings.exportAll, {isHtml:true}).then(function(exportData) {
      return pePdfExporter.print(exportData, exportSettings.printingOptions);
    });
  };
  this.getDataForExport = function(title, exportAll, options) {
    gridData.serverTotals = {};
    angular.forEach(gridTotals, function(col) {
      var totalsRow = _.findWhere(col.totals, {sectorId:"TOTALS_ROW"});
      if (!_.isUndefined(totalsRow) && (!_.isNull(totalsRow) && (!_.isUndefined(totalsRow.value) && !_.isNull(totalsRow.value)))) {
        gridData.serverTotals[col.colId] = totalsRow.value;
      }
    });
    return gfJqxGridDataExporter.getExportData(that, grid, gridData, title, exportAll, options);
  };
  this.getSelectedRowIndexes = function() {
    return grid.jqxGrid("getselectedrowindexes");
  };
  this.selectRowByKey = function(rowKey) {
    var rowsData = gridData;
    var index = -1;
    for (var i = 0;i < rowsData.length;i++) {
      if (rowsData[i].rowKey == rowKey) {
        index = i;
        break;
      }
    }
    if (index == -1) {
      return false;
    }
    selectRow(index);
    return true;
  };
  function selectRow(rowIndex) {
    grid.jqxGrid("selectrow", rowIndex);
  }
  this.getSelectedCells = function() {
    return grid.jqxGrid("getselectedcells");
  };
  this.getRowData = function(index) {
    return grid.jqxGrid("getrowdata", index);
  };
  this.getRowsCount = function() {
    return grid.jqxGrid("getrowscount");
  };
  this.getRows = function() {
    return grid.jqxGrid("getrows");
  };
  this.selectAllRows = function() {
    grid.jqxGrid("selectallrows");
  };
  this.clearSelection = function() {
    grid.jqxGrid("clearselection");
  };
  this.pinColumn = function(columnId) {
    var lastPinnedColIndex = grid.jqxGrid("_getlastpinnedcolumnindex");
    grid.jqxGrid("setcolumnindex", columnId, lastPinnedColIndex + 1, false);
    setTimeout(function() {
      grid.jqxGrid("pincolumn", columnId);
    });
  };
  this.unpinColumn = function(columnId) {
    grid.jqxGrid("unpincolumn", columnId);
  };
  this.getColumn = function(columnId) {
    return grid.jqxGrid("getcolumn", columnId);
  };
  this.setFilterRowDisplay = function(isDisplaying) {
    grid.jqxGrid({showfilterrow:isDisplaying});
  };
  this.startEditColumnHeader = function(column, parentColumn, callback) {
    var jqxColumn = grid.find("." + column.guid);
    if (jqxColumn) {
      this.scrollToColumn(parentColumn ? parentColumn.id : column.id);
      setTimeout(function() {
        var headerTitleEditor = jqxColumn.find(".columnHeaderTitleEditor").first();
        var columnHeaderTitle = jqxColumn.find(".columnHeaderTitle").first();
        var deleteColumnElement = jqxColumn.find(".deleteColumnElement");
        var iconsContainerElement = jqxColumn.find(".iconscontainer");
        var columnAdditionalControlsElement = jqxColumn.find(".columnAdditionalControls");
        if (headerTitleEditor && columnHeaderTitle) {
          headerTitleEditor.show();
          columnHeaderTitle.hide();
          deleteColumnElement.hide();
          iconsContainerElement.hide();
          columnAdditionalControlsElement.hide();
          headerTitleEditor.val(htmlDecode(column.header));
          headerTitleEditor.focus();
          headerTitleEditor.focusout(function() {
            applyChanges(columnHeaderTitle, headerTitleEditor, deleteColumnElement, iconsContainerElement, columnAdditionalControlsElement, column, callback);
          });
          headerTitleEditor.keyup(function(event) {
            var keycode = event.keyCode ? event.keyCode : event.which;
            if (keycode == "13") {
              applyChanges(columnHeaderTitle, headerTitleEditor, deleteColumnElement, iconsContainerElement, columnAdditionalControlsElement, column, callback);
            }
            if (keycode == "27") {
              discardChanges(columnHeaderTitle, headerTitleEditor, deleteColumnElement, iconsContainerElement, columnAdditionalControlsElement);
            }
          });
          headerTitleEditor.click(function(e) {
            e.stopPropagation();
          });
          headerTitleEditor.mousedown(function(e) {
            e.stopPropagation();
          });
        }
      });
    }
  };
  function htmlEncode(value) {
    return $("<div/>").text(value).html();
  }
  function htmlDecode(value) {
    return $("<div/>").html(value).text();
  }
  function applyChanges(columnHeaderTitle, headerTitleEditor, deleteColumnElement, iconsContainerElement, columnAdditionalControlsElement, column, callback) {
    var changedTitle = htmlEncode(headerTitleEditor.val());
    if (changedTitle != "") {
      column.setHeader(changedTitle);
      columnHeaderTitle.text(changedTitle);
    }
    columnHeaderTitle.show();
    deleteColumnElement.show();
    iconsContainerElement.show();
    columnAdditionalControlsElement.show();
    headerTitleEditor.hide();
    headerTitleEditor.unbind();
    that.setColumnHeader(column.id, column.header);
    (callback || angular.noop)({guid:column.guid, header:changedTitle});
  }
  function discardChanges(columnHeaderTitle, headerTitleEditor, deleteColumnElement, iconsContainerElement, columnAdditionalControlsElement) {
    columnHeaderTitle.show();
    deleteColumnElement.show();
    iconsContainerElement.show();
    columnAdditionalControlsElement.show();
    headerTitleEditor.hide();
    headerTitleEditor.unbind();
  }
  this.expandAllGroups = function() {
    expandAll();
    grid.jqxGrid("suspendgroupevents", true);
    try {
      restoreExpandState();
    } finally {
      grid.jqxGrid("suspendgroupevents", false);
    }
  };
  this.collapseAllGroups = function() {
    collapseAll();
    return grid.jqxGrid("collapseallgroups");
  };
  this.showHideColumn = function(colId, hide) {
    grid.jqxGrid(hide ? "hidecolumn" : "showcolumn", colId);
  };
  this.setColumnHeader = function(columnId, headerText) {
    saferender(function() {
      grid.jqxGrid("setcolumnproperty", columnId, "text", headerText);
    });
  };
  this.getIdentifiers = function() {
    return _.pluck(gridData, "rowKey");
  };
  this.changeTotalsRowVisibility = function(isVisible) {
    showTotalsRow = isVisible;
    grid.jqxGrid({showtotalsrow:showTotalsRow});
  };
  this.changeTotalsCountVisibility = function(isVisible) {
    showTotalsCount = isVisible;
    this.setTotalsLabel(settings.totalsLabel);
  };
  this.changeGroupCountVisibility = function(isVisible) {
    showGroupCount = isVisible;
    grid.jqxGrid("render");
  };
  this.updateColumnHeaders = function() {
    if (grid.jqxGrid("columnsheight") != grid.jqxGrid("getMaxColumnHeaderHeight")) {
      grid.jqxGrid("render");
    } else {
      grid.jqxGrid("rendercolumnheaders");
    }
  };
  this.destroy = function() {
    this.destroyed = true;
    grid.find(".deleteRowElement").off("click", deleteRowElementClicked);
    grid.off("rendered");
    gfSmoothColumnDraggingService.unbind();
    grid.jqxGrid("destroy");
    grid.off();
    grid.unbind();
    statisticsRederer_.clearCache();
    statisticsRederer_ = null;
    events = [];
  };
  this.setGlobalParameters = function(globalParameters) {
    statisticsRederer_.clearCache();
    this.globalParameters = globalParameters;
  };
  this.showTimeseriesChartButton = function(value) {
    var wasChanged = showTimeseriesChartButton != value;
    showTimeseriesChartButton = value;
    if (wasChanged) {
      grid.jqxGrid("render");
    }
  };
  this.getGlobalParameters = function() {
    return this.globalParameters;
  };
  this.scrollTo = function(left, top) {
    grid.jqxGrid("scrollto", left, top);
  };
  this.scrollToColumn = function(columnId) {
    grid.jqxGrid("scrollToColumn", columnId);
  };
  function columnHeaderRenderer(value, align) {
    return gfColumnHeaderFormatterService.getColumnHeader({value:value, align:align, dataLoadingColumns:dataLoadingColumns, gridColumn:gridColumnsDictionary[this.datafield], isLoadingInColumnsEnabled:that.isLoadingInColumnsEnabled, gridGroups:gridGroups, globalParameters:that.globalParameters, sortingFullState:sortingFullState, showTotalsRow:showTotalsRow, canDeleteColumns:canDeleteColumns, settings:settings, showTimeseriesChartButton:showTimeseriesChartButton});
  }
  function groupsRendered(gridElement, sector, groupElement) {
    var cells = $(groupElement.parentElement.children);
    cells.addClass(toThemeProperty("jqx-grid-groups-row", currentTheme.theme));
    if (sector && (sector.sectorId && sector.sectorId == highlightedRowKey)) {
      cells.addClass("highlighted-row");
    }
    if (areAllGroupsDataLoaded()) {
      var i, jqxColumns = grid.jqxGrid("columns");
      for (i = 0;i < jqxColumns.records.length;i++) {
        if (jqxColumns.records[i].checkboxcolumn) {
          drawCheckbox(cells[i], sector.sectorTotals.data, gridElement);
          continue;
        }
        var column = gridColumnsDictionary[jqxColumns.records[i].datafield];
        if (column === undefined || column === null) {
          continue;
        }
        if (column.columnSpan > 0) {
          var width = 0;
          for (var columnIndex = i;columnIndex <= i + column.columnSpan;columnIndex++) {
            width += jqxColumns.records[columnIndex].width;
          }
          $(cells[i]).width(width);
        }
        var index = i;
        var value;
        var columnRecord;
        if (column.id === firstColumnId) {
          value = sector.sectorTotals.sectorName;
          columnRecord = sector.sectorTotals.data.group.groupcolumn;
        } else {
          if (column.selectedTotalsCalculation && (!column.selectedTotalsCalculation.isNone && isCalculationDataLoaded(column.id))) {
            value = gridSource.gettotals(column.id, sector.sectorTotals.data.group);
            columnRecord = jqxColumns.records[index];
          } else {
            continue;
          }
        }
        if (columnRecord == null) {
          continue;
        }
        var boundvalue = {};
        boundvalue[column.id] = value;
        boundvalue[columnRecord.datafield] = value;
        boundvalue.rowKey = sector.sectorId;
        grid.jqxGrid("customRenderCell", gridElement, columnRecord, {uniqueid:buildSectorId(sector.data), bounddata:boundvalue === null ? undefined : boundvalue}, value, cells[index], undefined, gridReport.model.CellTypes.GroupCell);
        if (column.id === firstColumnId) {
          $(cells[index]).children().addClass("key-cell");
        }
        if (column.id === firstColumnId && value === LABEL_NA) {
          cells[index].title = TITLE_NA;
        }
        var groupCellElement = cells[index];
        (function(groupCell, groupColumn, sectorGroup) {
          groupCell.off("mousedown").on("mousedown", function(event) {
            if ($(this).closest('div[role="gridcell"]').hasClass("jqx-grid-groups-row")) {
              var groupCellClickEvent = $.extend({}, event, {type:"groupcellclick"});
              var groupRowClickEvent = $.extend({}, event, {type:"grouprowclick"});
              groupColumn.datafield = groupColumn.id;
              var data = {column:groupColumn, value:{sectorId:sectorGroup.sectorId, groupColumnId:sectorGroup.data.groupcolumn.datafield}};
              $(grid).trigger(groupRowClickEvent, data);
              $(grid).trigger(groupCellClickEvent, data);
            }
          });
          groupCell.off("mouseenter.groupcellenter").on("mouseenter.groupcellenter", function(event) {
            if ($(this).closest('div[role="gridcell"]').hasClass("jqx-grid-groups-row")) {
              var groupCellEnterEvent = $.extend({}, event, {type:"groupcellenter"});
              groupColumn.datafield = groupColumn.id;
              var data = {column:groupColumn, value:{sectorId:sectorGroup.sectorId, groupColumnId:sectorGroup.data.groupcolumn.datafield}};
              $(grid).trigger(groupCellEnterEvent, data);
            }
          });
          groupCell.off("mouseleave.groupcellleave").on("mouseleave.groupcellleave", function(event) {
            if ($(this).closest('div[role="gridcell"]').hasClass("jqx-grid-groups-row")) {
              var groupCellLeaveEvent = $.extend({}, event, {type:"groupcellleave"});
              groupColumn.datafield = groupColumn.id;
              var data = {column:groupColumn, value:{sectorId:sectorGroup.sectorId, groupColumnId:sectorGroup.data.groupcolumn.datafield}};
              $(grid).trigger(groupCellLeaveEvent, data);
            }
          });
        })($(groupCellElement), column, sector);
      }
    }
  }
  function drawCheckbox(tablecell, sectorData) {
    var $tablecell = $(tablecell);
    if ($tablecell.find(".jqx-group-checkbox").length == 0) {
      var checkBoxContainer = $('<div id="groupCheckbox-' + gfUuidGenerator.get() + '" ></div>');
      var groupCheckbox = $("<div ></div>");
      $tablecell.html(checkBoxContainer);
      checkBoxContainer.html(groupCheckbox);
      var jqxCheckBox = groupCheckbox.jqxCheckBox({theme:currentTheme.theme, hasThreeStates:false, animationShowDelay:0, animationHideDelay:0, checked:getCheckboxState(sectorData)});
      tablecell.groupcheckbox = jqxCheckBox;
      tablecell.sectorData = sectorData;
      $tablecell.find(".jqx-checkbox").addClass("jqx-group-checkbox");
      $tablecell.find(".jqx-checkbox").removeClass("jqx-checkbox");
      jqxCheckBox.on("change", function(event) {
        checkBoxChangedHandler(event, tablecell);
      });
    } else {
      tablecell.sectorData = sectorData;
      tablecell.groupcheckbox.jqxCheckBox("_setState", getCheckboxState(sectorData));
    }
  }
  function checkBoxChangedHandler(event, tablecell) {
    var checked = event.args.checked;
    var selectedInd = grid.jqxGrid("selectedrowindexes");
    var groupItems = gfTotalsCalculation.getGroupItems(tablecell.sectorData.group);
    var dataInd = getRowsIndexes(groupItems);
    if (checked === true) {
      var selectedIdx = _.difference(dataInd, selectedInd);
      grid.jqxGrid({selectedrowindexes:selectedInd.concat(selectedIdx)});
      angular.forEach(selectedIdx, function(ind) {
        grid.jqxGrid("_raiseEvent", 2, {rowindex:ind, row:grid.jqxGrid("getrowdata", ind)});
      });
    } else {
      if (checked === false) {
        var unselectedIdx = dataInd;
        grid.jqxGrid({selectedrowindexes:_.difference(selectedInd, dataInd)});
        angular.forEach(unselectedIdx, function(ind) {
          grid.jqxGrid("_raiseEvent", 3, {rowindex:ind, row:grid.jqxGrid("getrowdata", ind)});
        });
      }
    }
    grid.jqxGrid("prerenderrequired", true);
    var visInfo = grid.jqxGrid("virtualsizeinfo");
    grid.jqxGrid("_prerenderrows", visInfo);
    grid.jqxGrid("_renderrows", visInfo);
    grid.jqxGrid("_updatecheckboxselection");
  }
  function getFilters() {
    var filters;
    try {
      filters = grid.jqxGrid("getfilterinformation");
    } catch (e) {
      filters = [];
    }
    return filters;
  }
  function getCheckboxState(sectorData) {
    var gridSelection = grid.jqxGrid("selectedrowindexes");
    var groupItems = gfTotalsCalculation.getGroupItems(sectorData.group);
    var dataIndexes = getRowsIndexes(groupItems);
    var difInSelection = _.difference(dataIndexes, gridSelection);
    if (difInSelection.length == 0) {
      return true;
    } else {
      if (_.intersection(dataIndexes, gridSelection).length > 0) {
        return null;
      } else {
        return false;
      }
    }
  }
  function buildSectorId(group) {
    var parent = group.parent != null ? group.parent : group.parentItem;
    if (parent == null) {
      return group.group;
    } else {
      return group.group + "|" + buildSectorId(parent);
    }
  }
  function fillSectorValues(serverTotals, columns, sector) {
    var column;
    for (var i = 0, n = columns.length;i < n;i++) {
      column = columns[i];
      if (column.selectedTotalsCalculation != null && column.selectedTotalsCalculation.isServerSide) {
        var colTotals = _.findWhere(gridTotals, {colId:column.id});
        if (!_.isNull(colTotals) && !_.isUndefined(colTotals)) {
          var sectorLevelVal = _.findWhere(colTotals.totals, {sectorId:sector});
          if (!_.isNull(sectorLevelVal) && !_.isUndefined(sectorLevelVal)) {
            serverTotals[column.id] = sectorLevelVal.value;
          }
        }
      }
    }
  }
  function buildSectorLevelValues(columns, data, sector) {
    var result = {data:{}, serverTotals:[]};
    result.data.group = data;
    fillSectorValues(result.serverTotals, columns, sector);
    if (_.isUndefined(result.sectorName)) {
      result.sectorName = sector;
    }
    function dataItemsSum(data, currentSum) {
      if (data.subGroups.length > 0) {
        for (var i = 0;i < data.subGroups.length;i++) {
          currentSum = dataItemsSum(data.subGroups[i], currentSum);
        }
        return currentSum;
      } else {
        return currentSum + data.subItems.length;
      }
    }
    var sectorName = result.sectorName;
    if (showGroupCount) {
      sectorName += " (" + dataItemsSum(data, 0) + ")";
    }
    result.sectorName = sectorName;
    return result;
  }
  function groupsrenderer(text, group, expanded, data) {
    var gridElement = this;
    var sectorTotals = buildSectorLevelValues(gridColumns, data, group === "" ? LABEL_NA : group);
    groupsRendered(gridElement, {sectorId:group, sectorTotals:sectorTotals, data:data}, data.parentElement);
  }
  function getFilterType(returnType) {
    switch(returnType) {
      case "Text":
      ;
      case "String":
      ;
      case "Currency":
      ;
      case undefined:
      ;
      case null:
        return "textbox";
      default:
        return "number";
    }
  }
  var onAllSelectedRowsClicked = function(event) {
    if (event.args.checked) {
      setTimeout(function() {
        triggerEvent("allRowsSelected");
      }, 10);
    } else {
      if (!event.args.checked) {
        setTimeout(function() {
          triggerEvent("allRowsUnselected");
        }, 10);
      }
    }
  };
  function getRowKeyAttr(el) {
    return decodeURI($(el).attr("row-key"));
  }
  function bindRowsEventHandlers() {
    if (showAddRemoveRows || _.any(gridData, function(r) {
      return r.isRowEmpty === true;
    })) {
      grid.find(".deleteRowElement").off("click", deleteRowElementClicked).on("click", deleteRowElementClicked);
    }
    grid.find("[title]").removeAttr("title");
    grid.find("[data-smart-tooltip]").off("mouseenter", onCellElementHoverHandler).on("mouseenter", onCellElementHoverHandler);
  }
  function deleteRowElementClicked(event) {
    var rowCell;
    if (gridGroups && gridGroups.length > 0) {
      rowCell = $(event.target).closest(".jqx-grid-group-cell").first().children().first();
    } else {
      rowCell = $(event.target).closest(".jqx-grid-cell").first().children().first();
    }
    if (rowCell.length > 0) {
      var items = getRowKeyAttr(rowCell);
      if (items != undefined && items.length > 0) {
        triggerEvent("rowdeleting", decodeURI(items));
      }
    }
  }
  function deleteColumnElementClicked(event) {
    var columnHeader = $(event.target).closest(".jqx-grid-column-header").first();
    if (columnHeader.length > 0) {
      var items = columnHeader.attr("class").match(/jqx-column-id-(\S+)/);
      if (items != undefined && items.length > 1) {
        triggerEvent("columndeleting", decodeURI(items[1]));
      }
    }
  }
  function columnInfoElementClicked(event) {
    var columnHeader = $(event.target).closest(".jqx-column-command-header").first();
    if (columnHeader.length > 0) {
      var items = columnHeader.attr("class").match(/jqx-column-id-(\S+)/);
      if (items != undefined && items.length > 1) {
        triggerEvent("columninfoclicked", decodeURI(items[1]));
      }
    }
    event.stopPropagation();
  }
  function columnTimesiriesChartElementClicked(event) {
    var columnHeader = $(event.target).closest(".jqx-column-command-header").first();
    if (columnHeader.length > 0) {
      var items = columnHeader.attr("class").match(/jqx-column-id-(\S+)/);
      if (items && items.length > 1) {
        triggerEvent("columntimeserieschartclicked", items[1]);
      }
    }
    event.stopPropagation();
  }
  function columnBarChartElementClicked(event) {
    var columnHeader = $(event.target).closest(".jqx-column-command-header").first();
    if (columnHeader.length > 0) {
      var items = columnHeader.attr("class").match(/jqx-column-id-(\S+)/);
      if (items != undefined && items.length > 1) {
        var attrs = {parentId:null, columnId:decodeURI(items[1])};
        if (columnHeader.hasClass("gf-header-data-block-item")) {
          var parsedIdClass = columnHeader.closest(".jqx-grid-column-header").first().attr("class").match(/jqx-column-id-(\S+)/);
          attrs.parentId = parsedIdClass != undefined && parsedIdClass.length > 1 ? decodeURI(parsedIdClass[1]) : null;
        }
        triggerEvent("columnbarchartclicked", attrs);
      }
    }
    event.stopPropagation();
  }
  function filterResultsElementClicked(event) {
    var $target = $(event.target), columnHeader = $target.closest(".jqx-grid-column-header").first(), subColumnHeader = $target.closest(".jqx-column-command-header").first();
    if (columnHeader.length > 0) {
      var items = columnHeader.attr("class").match(/jqx-column-id-(\S+)/), $vectorItem = $target.closest(".gf-grid-sub-column-sortable"), vectorIndex = (subColumnHeader.length > 0 ? subColumnHeader : columnHeader).find(".gf-grid-sub-column-sortable").index($vectorItem);
      if (items != undefined && items.length > 1) {
        triggerEvent("columnfilterresultsclickedclicked", decodeURI(items[1]), decodeURI(subColumnHeader.attr("class").match(/jqx-column-id-(\S+)/)[1]), vectorIndex > -1 ? vectorIndex : null);
      }
    }
    event.stopPropagation();
  }
  function columnClicked(event, column, vectorIndex) {
    triggerEvent("columnselected", {columnId:column.id, vectorIndex:vectorIndex});
    event.stopPropagation();
  }
  function gridRendered(type) {
    gfLogManager.trace("grid rendered " + type);
    if (isGridHeaderEnabled) {
      grid.jqxGrid("enableheader");
    } else {
      grid.jqxGrid("disableheader");
    }
    var gridInstance = this;
    gfActionPostponingService.execute(GRID_CUSTOM_RENDER_KEY, function() {
      if (!that || that.destroyed) {
        return;
      }
      if (enableRowsDragging && !(gridGroups && gridGroups.length)) {
        draggableRowsController.makeRowsDraggable();
      }
      grid.find(".deleteColumnElement").each(function(index, deleteColumnElement) {
        $(deleteColumnElement).unbind("click", deleteColumnElementClicked);
        $(deleteColumnElement).bind("click", deleteColumnElementClicked);
      });
      grid.find(".columnHeaderDescriptionElement").each(function(index, columnDescriptionElement) {
        $(columnDescriptionElement).unbind("click", columnInfoElementClicked);
        $(columnDescriptionElement).bind("click", columnInfoElementClicked);
      });
      grid.find(".columnHeaderTimeseriesChartElement").each(function(index, el) {
        $(el).unbind("click", columnTimesiriesChartElementClicked);
        $(el).bind("click", columnTimesiriesChartElementClicked);
      });
      grid.find(".columnHeaderBarChartElement").each(function(index, barChartIconElement) {
        $(barChartIconElement).unbind("click", columnBarChartElementClicked);
        $(barChartIconElement).bind("click", columnBarChartElementClicked);
      });
      grid.find(".columnHeaderFilterResultsElement").each(function(index, filterResultsElement) {
        $(filterResultsElement).unbind("click", filterResultsElementClicked);
        $(filterResultsElement).bind("click", filterResultsElementClicked);
      });
      gfLogManager.trace("postponed grid rendered");
      if (gridInstance.columns) {
        var foundElement = $(gridInstance.element).find(".jqx-grid-header").find('[role="checkbox"]');
        if (foundElement.length > 0) {
          var checkBox = foundElement.jqxCheckBox();
          checkBox.unbind("change", onAllSelectedRowsClicked);
          checkBox.bind("change", onAllSelectedRowsClicked);
        }
      }
      bindRowsEventHandlers();
    }, 100);
  }
  this.setTotalsLabel = function(newTotalsLabel) {
    if (newTotalsLabel) {
      settings.totalsLabel = newTotalsLabel;
    }
    var totalsRowLabel = settings.totalsLabel;
    if (showTotalsCount) {
      totalsRowLabel += " (" + _.where(gridData, {isRowHidden:false, isRowEmpty:false}).length + ")";
    }
    grid.jqxGrid("totalsrowlabel", totalsRowLabel);
  };
  this.getTotalsLabel = function() {
    return grid.jqxGrid("totalsrowlabel");
  };
  this.showError = function(error) {
    grid.jqxGrid("showerror", error, $translate, function() {
      triggerEvent("copytoclipboard", error);
    });
  };
  this.hideError = function() {
    grid.jqxGrid("hideerror");
  };
  this.showLoading = function() {
    isLoadingVisible = true;
    this.isLoadingInColumnsEnabled = false;
    grid.jqxGrid("showloading");
  };
  this.hideLoading = function() {
    isLoadingVisible = false;
    this.isLoadingInColumnsEnabled = true;
    grid.jqxGrid("hideloading");
  };
  this.enableGrid = function() {
    grid.jqxGrid({disabled:false});
  };
  this.disableGrid = function() {
    grid.jqxGrid({disabled:true});
  };
  this.enableGridHeader = function() {
    isGridHeaderEnabled = true;
    grid.jqxGrid("enableheader");
  };
  this.disableGridHeader = function() {
    isGridHeaderEnabled = false;
    grid.jqxGrid("disableheader");
  };
  this.enableGridRows = function() {
    grid.jqxGrid("enablerows");
  };
  this.disableGridRows = function() {
    grid.jqxGrid("disablerows");
  };
  this.setPrimaryRow = function(rowKey) {
    primaryRowKey = rowKey;
    statisticsRederer_.clearCache();
    gfTotalsCalculation.clearCache();
    gfStatisticsCalculation.clearStatisticsCache();
    sortingConroller.refreshSorting();
    grid.jqxGrid("render");
  };
  this.setHighlightedRow = function(rowKey) {
    if (rowKey != highlightedRowKey) {
      highlightedRowKey = rowKey;
      grid.jqxGrid("render");
    }
  };
  this.getHighlightedRow = function() {
    return highlightedRowKey;
  };
  this.getPrimaryRow = function() {
    return primaryRowKey;
  };
  function getFreezedRowKey() {
    if (sortingFullState.isPrimaryRowFreezed && enablePrimaryRowFreezing) {
      return primaryRowKey;
    }
    return undefined;
  }
  this.isPrimaryRowFreezed = function() {
    return sortingFullState.isPrimaryRowFreezed;
  };
  function sortBySingleColumn(datafield, sortdirection) {
    sortingConroller.disableState();
    var state = sortingConroller.getSortingState();
    state.singleSortingState.column = datafield;
    state.singleSortingState.direction = sortdirection ? "asc" : "desc";
    var sortInformation = grid.jqxGrid("getsortinformation");
    var prevSingleState = new gridReport.model.SingleSortingState({column:sortInformation.sortcolumn, direction:sortInformation.sortdirection && sortInformation.sortdirection.ascending ? "asc" : "desc"});
    var eventArgs = {previousSingleSortingState:prevSingleState, currentSingleSortingState:state.singleSortingState};
    triggerEvent("beforecolumnsort", eventArgs);
    that.setSortingFullState(state);
  }
  function initGridSource() {
    function getTotalValue(datafield, item) {
      var column = gridColumnsDictionary[datafield];
      if (column === undefined || column === null) {
        return undefined;
      }
      var value = undefined;
      if (column.id === firstColumnId) {
        value = item.group || undefined;
      } else {
        if (column.selectedTotalsCalculation && (!column.selectedTotalsCalculation.isNone && isCalculationDataLoaded(column.id))) {
          var serverTotals = {};
          fillSectorValues(serverTotals, gridColumns, item.group);
          value = gfTotalsCalculation.calculateTotals(item.group, column.id, {data:{group:item}, serverTotals:serverTotals}, column.selectedTotalsCalculation, primaryRowKey);
        }
      }
      return value;
    }
    return{localdata:gridData, datatype:"local", datafields:undefined, gettotals:getTotalValue, getfreezedrowkey:getFreezedRowKey, getcolumnsdictionary:function() {
      return gridColumnsDictionary;
    }, getpremiumdiscount:getPremiumDiscountValue, addrow:function(rowid, rowdata, position, commit) {
      commit(true);
    }, sortbysinglecolumn:sortBySingleColumn, deleterow:function(rowid, commit) {
      commit(true);
    }};
  }
  function getEventArgs(event) {
    var element = $(event.currentTarget), innerElement = element.children().first(), rk = innerElement.attr("row-key"), dataRow = _.findWhere(gridData, {rowKey:rk});
    return{rowKey:innerElement.attr("row-key"), colId:innerElement.attr("column-key"), rawValue:innerElement.attr("raw-value"), element:element, event:event, dataRow:dataRow, globalParameters:that.globalParameters, isAuditEnabled:settings.isAuditEnabled, universeContext:settings.universeContext};
  }
  function cellMouseEnterCallback(event) {
    var eventArg = getEventArgs(event);
    if (!eventArg) {
      return;
    }
    onCellElementHoverHandler(event);
    var column = gridColumnsDictionary[eventArg.colId];
    if (!column) {
      return;
    }
    eventArg.column = column;
    eventArg.isDataBlock = column.isMultiColumn();
    (column.cellMouseEnterAction || angular.noop)(eventArg);
  }
  function onCellElementHoverHandler(event) {
    var hideTimeout;
    var showTimeout;
    function removeShowTimeout() {
      if (showTimeout) {
        $timeout.cancel(showTimeout);
      }
    }
    function removeHideTimeout() {
      if (hideTimeout) {
        $timeout.cancel(hideTimeout);
      }
    }
    function onElementMouseLeave() {
      removeHideTimeout();
      removeShowTimeout();
      hideTimeout = $timeout(gfSmartTooltipService.hide, gfSmartTooltipService.TooltipHideTimeout);
    }
    function onElementClick() {
      removeHideTimeout();
      removeShowTimeout();
      gfSmartTooltipService.hide();
    }
    var tooltipElement = event.target.closest("[data-smart-tooltip]"), $element = $(tooltipElement).find(":not(:has(*))");
    if (tooltipElement && $element) {
      var value = tooltipElement.attributes["data-smart-tooltip"].value, innerText = $element[0] ? $element[0].innerText : value;
      tooltipHtml = $("<div>").text(value).html();
      if (tooltipHtml && tooltipHtml !== "") {
        var hasEllipsis;
        if (isNaN(innerText.replace(/[,%]/g, ""))) {
          if ($(tooltipElement).hasClass("columnHeaderTitle")) {
            hasEllipsis = true;
          } else {
            if ($element[0].tagName === "SPAN" || $element[0].tagName === "STRONG") {
              hasEllipsis = $element.parent().width() < $element.innerWidth();
            } else {
              hasEllipsis = $element.innerWidth() < $element[0].scrollWidth;
            }
          }
        } else {
          hasEllipsis = true;
        }
        if (hasEllipsis && !event.target.disabled) {
          removeHideTimeout();
          removeShowTimeout();
          showTimeout = $timeout(function() {
            gfSmartTooltipService.show({event:event, html:tooltipHtml});
          }, gfSmartTooltipService.TooltipShowTimeout);
        }
      }
    }
    $(event.target).off("mouseleave", onElementMouseLeave).on("mouseleave", onElementMouseLeave).off("click", onElementClick).on("click", onElementClick);
    event.preventDefault();
  }
  function cellMouseLeaveCallback(event) {
    var eventArg = getEventArgs(event);
    if (!eventArg) {
      return;
    }
    var column = gridColumnsDictionary[eventArg.colId];
    if (!column) {
      return;
    }
    eventArg.column = column;
    eventArg.isDataBlock = column.isMultiColumn();
    (column.cellMouseLeaveAction || angular.noop)(eventArg);
  }
  var gridSource = initGridSource();
  grid.jqxGrid({width:gridWidth, height:gridHeight, sortable:true, sorttogglestates:1, groupable:true, source:new $.jqx.dataAdapter(gridSource), columnsresize:true, columnsreorder:true, autoloadstate:false, autosavestate:false, columnsmenu:false, theme:settings.theme.theme, rowsheight:settings.theme.rowsHeight, showgroupsheader:false, filterable:true, showtotalsrow:showTotalsRow, showaggregates:true, showstatusbar:true, customaggregatesrendering:true, serviceColumnAggregatesRenderer:columnAggregatesRenderer, 
  statusbarheight:getToolbarHeight(settings.theme.rowsHeight), enablepremiumdiscount:true, premiumDiscountDesciption:getPremiumDiscountDescription(), enablehover:false, enableanimations:false, groupsrenderer:groupsrenderer, customgroupsrendering:true, rendered:gridRendered, enablebrowserselection:settings.enableBrowserSelection, showemptyrow:true, columns:[], cellmouseenter:cellMouseEnterCallback, cellmouseleave:cellMouseLeaveCallback, columnresizerdoubleclick:columnResizerDoubleClickCallback, selectionmode:settings.selectionMode || 
  "none", enabletooltips:settings.enableTooltips, showdefaultloadelement:false, autoshowloadelement:false, usecustomfiltericon:true, rowschangecallback:function() {
    barCharts.recalculate(getColumnsWithDataBlockSubColumns(), getFilteredRecords(), gridSource);
  }});
  grid.jqxGrid("localizestrings", {selectallcheckboxtooltip:$translate.instant("SELECT_ALL"), deselectallcheckboxtooltip:$translate.instant("DESELECT_ALL")});
  bindNativeEvents("rowselect", "rowunselect");
  function bindNativeEvents() {
    _.each(arguments, function(evenetName) {
      grid.on(evenetName, function(e) {
        triggerEvent(evenetName, e);
      });
    });
  }
  var draggableRowsController = new gridReport.directives.GridDraggableRowsController(that, grid);
  var sortingConroller = new gridReport.directives.GridSortController(grid, function(event) {
    grid.jqxGrid("rendercolumnheaders");
    triggerEvent("sort", event, sortingFullState);
  });
  grid.on("rendered", function(event) {
    if (event.args.mode == "rendervisualrows") {
      bindRowsEventHandlers();
      tryRestorePremiumDiscontRowState();
    }
  });
  this.tryRestorePremiumDiscontRowState = tryRestorePremiumDiscontRowState;
  function tryRestorePremiumDiscontRowState() {
    var premiumDiscountStatistics = getPremiumDiscountStatistics(selectedStatistics);
    if (!primaryRowKey || (!premiumDiscountStatistics || premiumDiscountAutoRestoringDisabled)) {
      return;
    }
    var rows = grid.jqxGrid("_getrows");
    var primaryRowData = _.findWhere(rows, {rowKey:primaryRowKey});
    if (!primaryRowData) {
      return;
    }
    var primaryRowBoundIndex = getRowIndex(primaryRowData);
    var visibleIndex = grid.jqxGrid("getrowvisibleindex", primaryRowBoundIndex);
    if (visibleIndex < 0) {
      return;
    }
    var rowsRecords = grid.jqxGrid("rows").records;
    var rowDetails = grid.jqxGrid("details");
    if (!rowsRecords[visibleIndex] || (rowsRecords[visibleIndex].bounddata.rowKey != primaryRowKey || rowDetails[visibleIndex] && !rowDetails[visibleIndex].rowdetailshidden)) {
      return;
    }
    setPremiumDiscount(premiumDiscountStatistics, primaryRowBoundIndex);
  }
  grid.on("columnresized", function(event) {
    var column = gridColumnsDictionary[event.args.datafield];
    if (column) {
      column.isAutoresizable = false;
      column.width = event.args.newwidth;
    }
    bindRowsEventHandlers();
    triggerEvent("columnresized", event);
    if (grid.jqxGrid("columnsheight") != grid.jqxGrid("getMaxColumnHeaderHeight")) {
      grid.jqxGrid("render");
    }
  });
  grid.on("columnreordered", function(event) {
    var args = event.args;
    var oldindex = args.oldindex;
    var newindex = args.newindex;
    if (oldindex === newindex || gridColumnsDictionary[event.args.datafield] === undefined) {
      return;
    }
    var jqxCols = grid.jqxGrid("_columns");
    var reduceIndex = _.filter(jqxCols, function(jqxCol) {
      var ind = _.indexOf(jqxCols, jqxCol);
      if (jqxCol.hidden && (ind !== -1 && ind <= args.oldindex)) {
        return true;
      }
      return false;
    }).length;
    gridColumns.splice(newindex, 0, gridColumns.splice(oldindex - reduceIndex, 1)[0]);
    triggerEvent("columnreordered", event);
  });
  grid.on("groupexpand", function(event) {
    var args = event.args;
    var uniqueid = grid.jqxGrid("getUniqueId", {group:args.group, level:args.level, visibleindex:args.visibleindex});
    isGroupExpanded[uniqueid] = true;
    if (!suspendExpandCollapseEvents) {
      triggerEvent("groupexpand", event);
    }
  });
  grid.on("groupcollapse", function(event) {
    if (_.isEmpty(isGroupExpanded)) {
      return;
    }
    var args = event.args;
    var uniqueid = grid.jqxGrid("getUniqueId", {group:args.group, level:args.level, visibleindex:args.visibleindex});
    delete isGroupExpanded[uniqueid];
    if (!suspendExpandCollapseEvents) {
      triggerEvent("groupcollapse", event);
    }
  });
  grid.on("groupschanged", function(event) {
    isGroupExpanded = {};
    var groups = [];
    angular.forEach(event.args.groups, function(value) {
      groups.push(value.toString());
    });
    event.args.groups = groups;
    triggerEvent("groupschanged", event);
  });
  function getRowsIndexes(rowDataItems) {
    var filters = getFilters();
    return _.map(rowDataItems, function(item) {
      return getRowIndex(item, filters);
    });
  }
  function getRowIndex(rowDataItem, filters) {
    filters = filters || getFilters();
    var index = rowDataItem[filters.length > 0 ? "dataindex" : "boundindex"];
    if (_.isUndefined(index)) {
      index = rowDataItem["uid"];
    }
    return index;
  }
  grid.on("cellclick", function(event) {
    var column = gridColumnsDictionary[event.args.column.datafield];
    if (!_.isUndefined(column) && (column.cellClickedAction != null || column.cellRightClickedAction != null)) {
      var rowData = event.args.row.bounddata;
      if (!_.isUndefined(rowData)) {
        if (event.args.rightclick && column.cellRightClickedAction != null) {
          column.cellRightClickedAction({cellValue:rowData[event.args.column.datafield], rowKey:rowData["rowKey"], rowData:rowData, colId:event.args.column.datafield, element:event.args.originalEvent.target});
          return false;
        } else {
          column.cellClickedAction({cellValue:rowData[event.args.column.datafield], rowData:rowData, rowKey:rowData["rowKey"], colId:event.args.column.datafield, element:event.args.originalEvent.target, rightClick:event.args.rightclick});
        }
      }
    }
    return undefined;
  });
  function handleCellClick(column, rowKey, cellValue) {
    if (!_.isUndefined(column) && (column.cellClickedAction != null || column.cellRightClickedAction != null)) {
      if (!_.isUndefined(cellValue)) {
        if (event.which === 3 && column.cellRightClickedAction != null) {
          column.cellRightClickedAction({cellValue:cellValue, rowKey:rowKey, colId:column.id, element:event.target});
          return false;
        } else {
          if (column.cellClickedAction) {
            column.cellClickedAction({cellValue:cellValue, rowKey:rowKey, colId:column.id, element:event.target});
          }
        }
      }
    }
    return false;
  }
  function handleMouseEnter(column, rowKey, cellValue) {
    if (!_.isUndefined(column) && column.cellMouseEnterAction != null) {
      if (!_.isUndefined(cellValue)) {
        column.cellMouseEnterAction({cellValue:cellValue, rowKey:rowKey, colId:column.id, element:$(event.target), column:column, dataRow:_.findWhere(gridData, {rowKey:rowKey}), event:event});
        return false;
      }
    }
    return false;
  }
  function handleMouseLeave(column, rowKey, cellValue) {
    if (!_.isUndefined(column) && column.cellMouseLeaveAction != null) {
      if (!_.isUndefined(cellValue)) {
        column.cellMouseLeaveAction({cellValue:cellValue, rowKey:rowKey, colId:column.id, element:$(event.target), column:column, dataRow:_.findWhere(gridData, {rowKey:rowKey}), event:event});
        return false;
      }
    }
    return false;
  }
  grid.on("groupsrendered", function() {
    restoreExpandState();
  });
  grid.on("totalsclick", function(event, data) {
    var column = gridColumnsDictionary[data.column.datafield];
    return handleCellClick(column, "TOTALS_ROW", data.value);
  });
  grid.on("totalsmouseenter", function(event, data) {
    var column = gridColumnsDictionary[data.column.datafield];
    return handleMouseEnter(column, "TOTALS_ROW", data.value);
  });
  grid.on("totalsmouseleave", function(event, data) {
    var column = gridColumnsDictionary[data.column.datafield];
    return handleMouseLeave(column, "TOTALS_ROW", data.value);
  });
  grid.on("groupcellclick", function(event, data) {
    var column = gridColumnsDictionary[data.column.datafield];
    return handleCellClick(column, "GROUP_ROW", data.value);
  });
  grid.on("groupcellenter", function(event, data) {
    var column = gridColumnsDictionary[data.column.datafield];
    return handleMouseEnter(column, "GROUP_ROW", data.value);
  });
  grid.on("groupcellleave", function(event, data) {
    var column = gridColumnsDictionary[data.column.datafield];
    return handleMouseLeave(column, "GROUP_ROW", data.value);
  });
  grid.on("grouprowclick", function(event, data) {
    event.args = data;
    if (event.which === 3) {
      triggerEvent("grouprowrightclick", event);
    }
  });
  function restoreExpandState() {
    if (_.isEmpty(gridGroups)) {
      return;
    }
    suspendExpandCollapseEvents = true;
    try {
      var dataview = grid.jqxGrid("dataview");
      var needUpdate = restoreExpandStateForSubgroups(dataview.loadedrootgroups);
      if (needUpdate) {
        grid.jqxGrid("_updateaftersetgroupstate");
        triggerEvent("groupsstaterestored");
      }
    } finally {
      suspendExpandCollapseEvents = false;
    }
  }
  this.restoreExpandState = function() {
    restoreExpandState();
  };
  function restoreExpandStateForSubgroups(subgroups, needUpdate) {
    var newNeedUpdate = false;
    if (subgroups) {
      angular.forEach(subgroups, function(item) {
        var uniqueid = generateUniqueId(item);
        if (!_.has(isGroupExpanded, uniqueid)) {
          isGroupExpanded[uniqueid] = false;
          newNeedUpdate = true;
          return;
        }
        if (isGroupExpanded[uniqueid]) {
          grid.jqxGrid("_setgroupstate", item, true, false, false);
          restoreExpandStateForSubgroups(item.subGroups, true);
          newNeedUpdate = true;
        }
      });
    }
    return needUpdate || newNeedUpdate;
  }
  function toThemeProperty(className, themeName) {
    return className + " " + className + "-" + themeName;
  }
  function generateUniqueId(item) {
    var result = item.group;
    while (item.parentItem) {
      result = item.parentItem.group + "#" + result;
      item = item.parentItem;
    }
    return result;
  }
  function collapseAll() {
    isGroupExpanded = {};
    $timeout(function() {
      triggerEvent("allgroupscollapsed", {});
    });
  }
  function expandAll() {
    var dataview = grid.jqxGrid("dataview");
    expandAllSubgroups(dataview.loadedrootgroups);
    $timeout(function() {
      triggerEvent("allgroupsexpanded", {});
    });
  }
  function expandAllSubgroups(subgroups) {
    if (subgroups) {
      angular.forEach(subgroups, function(item) {
        var uniqueid = generateUniqueId(item);
        isGroupExpanded[uniqueid] = true;
        expandAllSubgroups(item.subGroups);
      });
    }
  }
  function renderAndFixExpandState() {
    if (that && !that.destroyed) {
      grid.jqxGrid("render");
    }
  }
  function areAllGroupsDataLoaded() {
    if (!gridData || gridData.length === 0) {
      return false;
    }
    for (var index = 0;index < gridGroups.length;index++) {
      if (!loadingColumnsFinished[gridGroups[index]]) {
        return false;
      }
    }
    return true;
  }
  function isCalculationDataLoaded(calcColumnId) {
    var gridColumn = _.findWhere(gridColumns, {id:calcColumnId});
    if (gridColumn) {
      if (gridColumn.isMultiColumn()) {
        return _.all(gridColumn.gridColumns, function(subColumn) {
          return loadingColumnsFinished[subColumn.id] === true;
        });
      } else {
        return loadingColumnsFinished[gridColumn.id] === true;
      }
    } else {
      return loadingColumnsFinished[calcColumnId] === true;
    }
  }
  this.isCalculationDataLoaded = function(calcColumnId) {
    return isCalculationDataLoaded(calcColumnId);
  };
  this.getGridColumns = function() {
    var orderedGridColumns = [];
    _.each(grid.jqxGrid("columns").records, function(jqxColumn) {
      var column = _.findWhere(gridColumns, {id:jqxColumn.datafield});
      if (column && !column.isColumnEmpty) {
        orderedGridColumns.push(column);
      }
    });
    return orderedGridColumns;
  };
  this.getIsGroupExpanded = function() {
    return isGroupExpanded;
  };
  this.getFirstColumnId = function() {
    return firstColumnId;
  };
  this.buildSectorLevelValues = function(columns, data, sector) {
    return buildSectorLevelValues(columns, data, sector);
  };
  this.getSettings = function() {
    return settings;
  };
  this.getShowTotalsRow = function() {
    return showTotalsRow;
  };
  this.addLoadingRows = function(rowKeys) {
    if (_.isEmpty(rowKeys) || gridGroups.length > 0) {
      return;
    }
    if (rowKeys.lenght > 1) {
      grid.jqxGrid("beginupdate");
    }
    _.each(rowKeys, function(rowKey) {
      dataLoadingRows[rowKey] = true;
      grid.jqxGrid("addrow", null, createNewDataRow(rowKey));
    });
    if (rowKeys.lenght > 1) {
      grid.jqxGrid("endupdate");
    }
  };
  function createNewDataRow(rowKey) {
    var rowData = {};
    rowData[firstColumnId] = rowKey;
    return rowData;
  }
  this.removeLoadingRows = function(rowKeys) {
    _.each(rowKeys, function(rowKey) {
      delete dataLoadingRows[rowKey];
    });
    grid.jqxGrid("_renderrows", grid.jqxGrid("virtualsizeinfo"));
  };
  this._getGrid = function() {
    return grid;
  };
  this.setTheme = function(theme) {
    if (!theme) {
      throw new Error("theme should be provided");
    }
    statisticsRederer_.clearCache();
    currentTheme = theme;
    minHeaderHeight = theme.rowsHeight;
    this.beginUpdate();
    grid.jqxGrid("scrollTo", 0, 0);
    grid.jqxGrid({rowsheight:theme.rowsHeight});
    grid.jqxGrid({totalsrowheight:theme.rowsHeight});
    grid.jqxGrid({statusbarheight:getToolbarHeight(currentTheme.rowsHeight)});
    grid.jqxGrid({theme:theme.theme});
    grid.jqxGrid("refreshrowdetailsheight");
    this.endUpdate();
  };
  this.getTheme = function() {
    return currentTheme;
  };
  this.beginUpdate = function() {
    grid.jqxGrid("suppressrendering", true);
  };
  this.endUpdate = function(postponeRendering) {
    grid.jqxGrid("suppressrendering", false);
    if (!postponeRendering) {
      grid.jqxGrid("render");
    }
  };
  this.isUpdating = function() {
    return!!grid.jqxGrid("isrenderingsuppressed");
  };
  this.showAddRemoveRows = function(value) {
    if (showAddRemoveRows == value) {
      return;
    }
    showAddRemoveRows = value;
    statisticsRederer_.clearCache();
    grid.jqxGrid({statusbarheight:getToolbarHeight(currentTheme.rowsHeight)});
    grid.jqxGrid("renderaggregates");
    setTimeout(function() {
      bindRowsEventHandlers();
    }, 100);
  };
  this.getShowAddRemoveRows = function() {
    return showAddRemoveRows;
  };
  function getToolbarHeight(rowsHeight) {
    return(rowsHeight + 1) * selectedStatistics.length + (showAddRemoveRows ? 27 : 0);
  }
  this.autoWidthColumn = function(columnId) {
    var column = getColumn(columnId);
    if (!column) {
      return defaultColumnMinWidth;
    }
    var width = Math.max(gfJqxGridAutoWidthHelper.getColumnWidth(grid, column, this.globalParameters, gridSource.localdata), getDefaultColumnHeaderWidth(column));
    if (column.isBarChartEnabled) {
      width = width * 2;
    }
    column.width = width;
    grid.jqxGrid("setcolumnproperty", columnId, "width", width);
    return width;
  };
  function columnResizerDoubleClickCallback(args) {
    that.autoWidthColumn(args.column.datafield);
    if (grid.jqxGrid("columnsheight") != grid.jqxGrid("getMaxColumnHeaderHeight")) {
      grid.jqxGrid("render");
    }
  }
  function saferender(action, updateStatistics) {
    grid.jqxGrid("suppressrendering", true);
    action();
    grid.jqxGrid("suppressrendering", false);
    grid.jqxGrid("render");
    if (updateStatistics) {
      that.updateStatistics();
    }
    bindRowsEventHandlers();
  }
  this.showColumnBarChart = function(column, isDataBlock) {
    if (!column) {
      throw new Error("column should be provided");
    }
    statisticsRederer_.clearCache();
    barCharts.calculate(column, getFilteredRecords(), gridSource);
    if (!isDataBlock) {
      var width = Math.max(gfJqxGridAutoWidthHelper.getColumnWidth(grid, column, this.globalParameters, gridSource.localdata), getDefaultColumnHeaderWidth(column)) * 2;
      if (width > column.width) {
        this.beginUpdate();
        column.width = width;
        grid.jqxGrid("setcolumnproperty", column.id, "width", width);
        this.endUpdate(true);
      }
    }
    grid.jqxGrid("render");
    bindRowsEventHandlers();
  };
  this.hideColumnBarChart = function(column, isDataBlock) {
    if (!column) {
      throw new Error("column should be provided");
    }
    statisticsRederer_.clearCache();
    if (!isDataBlock) {
      this.beginUpdate();
      column.width = Math.max(gfJqxGridAutoWidthHelper.getColumnWidth(grid, column, this.globalParameters, gridSource.localdata), getDefaultColumnHeaderWidth(column));
      grid.jqxGrid("setcolumnproperty", column.id, "width", column.width);
      this.endUpdate(true);
    }
    grid.jqxGrid("render");
    bindRowsEventHandlers();
  };
  function getColumnsWithDataBlockSubColumns() {
    return _.chain(gridColumns).map(function(c) {
      return c.isMultiColumn() ? _.toArray(c.gridColumns) : [c];
    }).reduce(function(m, c) {
      return m.concat(c);
    }, []).value();
  }
  this.setHeatMapState = function(heatMapState) {
    cellShading.mode = heatMapState ? heatMapState.mode : gridReport.adapters.CellShadingCalculationMode.PerColumn;
    cellShading.isEnabled = heatMapState ? heatMapState.isEnabled : false;
    cellShading.recalculate(getColumnsWithDataBlockSubColumns(), gridSource.localdata);
    grid.jqxGrid("render");
    if (settings.enableConditionalValueFormatting) {
      statisticsRederer_.clearCache();
      grid.jqxGrid("renderaggregates");
    }
  };
  this.getStatisticValues = function() {
    return cellShading.standardDeviations;
  };
  this.getIsHeatMapEnabled = function() {
    return cellShading.isEnabled;
  };
  this.setExcludedFromStatisticsIdentifiers = function(identifiers) {
    excludedFromStatisticsIdentifiers = {};
    _.each(identifiers, function(identifier) {
      excludedFromStatisticsIdentifiers[identifier] = true;
    });
    statisticsRederer_.clearCache();
    gfTotalsCalculation.clearCache();
    gfStatisticsCalculation.clearStatisticsCache();
    barCharts.recalculate(getColumnsWithDataBlockSubColumns(), getFilteredRecords(), gridSource);
    cellShading.recalculate(getColumnsWithDataBlockSubColumns(), gridSource.localdata);
    updateGridDataView();
    grid.jqxGrid("_updatetotalsrow");
    this.refreshPremiumDiscount();
    grid.jqxGrid("renderaggregates");
    grid.jqxGrid("render");
  };
  function updateGridDataView() {
    var dataView = that._getDataView();
    dataView.reload(dataView.records, dataView.rows, dataView.filters, dataView.updated, true);
    grid.jqxGrid("_updaterowsproperties");
  }
  this.applyFilters = function() {
    _.each(gridColumns, function(gridColumn) {
      if (gridColumn.isFilterApplied()) {
        grid.jqxGrid("addfilter", gridColumn.id, gridColumn.filter.convertToJqxFilter(), false);
      } else {
        grid.jqxGrid("removefilter", gridColumn.id, false);
      }
    });
    this.beginUpdate();
    var scrollPos = grid.jqxGrid("scrollposition");
    grid.jqxGrid("scrollto", scrollPos.left, 0);
    grid.jqxGrid("applyfilters");
    sortingConroller.refreshSorting();
    this.endUpdate();
  };
  this.enableInColumnFiltering = function(enabled) {
    settings.enableInColumnFiltering = enabled;
    grid.jqxGrid("rendercolumnheaders");
  };
  this.getGridColumn = function(columnId) {
    return getColumnOrSubColumn(columnId);
  };
  this.erase = function() {
    barCharts = null;
    cellShading = null;
    sortingFullState = null;
    this.columnSelection = null;
    sortingConroller.erase();
    sortingConroller = null;
    draggableRowsController.erase();
    draggableRowsController = null;
    for (var k in this) {
      this[k] = null;
    }
    grid = null;
    that = null;
  };
  this.removeFilter = function(gridColumnId, apply) {
    grid.jqxGrid("removefilter", gridColumnId, apply);
  };
  this.enableConditionalValueFormatting = function(enabled) {
    settings.enableConditionalValueFormatting = enabled;
    grid.jqxGrid("render");
    statisticsRederer_.clearCache();
    grid.jqxGrid("renderaggregates");
  };
  this.enableAudit = function(isEnabled) {
    settings.isAuditEnabled = isEnabled;
    grid.jqxGrid("render");
  };
  this.getMinMaxColumnsValues = function() {
    return barCharts.minMaxColumnValues;
  };
  this.setUniverseContext = function(universeContext) {
    settings.universeContext = universeContext;
  };
  function getIndex(items, rowKey, insertPosition) {
    var insertIndex = _.findIndex(items, function(rowData) {
      return rowData.rowKey === rowKey;
    });
    return insertIndex != -1 ? insertPosition === "after" ? insertIndex + 1 : insertIndex : _.size(items);
  }
  this.addEmptyRow = function(rowKey, insertPosition) {
    var records, dataView = this._getDataView(), emptyRow = {rowKey:gfUuidGenerator.get(), isRowHidden:false, isRowEmpty:true};
    if (dataView.sortdata) {
      records = _.pluck(dataView.sortdata, "value");
    } else {
      records = angular.copy(dataView.records);
    }
    this.discardSorting();
    records.splice(getIndex(records, rowKey, insertPosition), 0, emptyRow);
    dataView.sortdata = _.map(records, function(value, index) {
      return{sortkey:value.toString(), value:value, index:index};
    });
    dataView.addrow(undefined, emptyRow, getIndex(dataView.records, rowKey, insertPosition));
    dataView.reload(dataView.records, dataView.rows, dataView.filters, dataView.updated, true);
    gridData.splice(getIndex(gridData, rowKey, insertPosition), 0, emptyRow);
    grid.jqxGrid("_updaterowsproperties");
    grid.jqxGrid("render");
  };
  this.isRowEmpty = function(rowKey) {
    return _.any(gridData, {rowKey:rowKey, isRowEmpty:true});
  };
};
goog.provide("gridReport.model.ColumnHeaderDescription");
gridReport.model.ColumnHeaderDescription = function() {
  this.aggregate = {functionName:null, groupBySelectionName:null, universeSelectioName:null};
  this.mfr = {type:null, order:null, rankAgainst:null, partitionBy:null};
};
gridReport.model.ColumnHeaderDescription.prototype.aggregateFunctionLevel = "";
gridReport.model.ColumnHeaderDescription.prototype.aggregateFunctionName = "";
gridReport.model.ColumnHeaderDescription.prototype.trendFunctionName = "";
gridReport.model.ColumnHeaderDescription.prototype.percentChangeString = "";
gridReport.model.ColumnHeaderDescription.prototype.fieldName = "";
gridReport.model.ColumnHeaderDescription.prototype.headerReferenceText = "";
gridReport.model.ColumnHeaderDescription.prototype.parameters = "";
gridReport.model.ColumnHeaderDescription.prototype.timeSeries = "";
gridReport.model.ColumnHeaderDescription.prototype.isAbsolute = "";
gridReport.model.ColumnHeaderDescription.prototype.netChangeString = "";
gridReport.model.ColumnHeaderDescription.prototype.aggregate = null;
gridReport.model.ColumnHeaderDescription.prototype.outputColumnName = "";
goog.provide("gridReport.services.QuickFunctionsService");
gridReport.Module.factory("gfQuickFunctionsService", ["gfAggregateRestrictions", function(gfAggregateRestrictions) {
  var aggregatesLookup = [{text:"Median", id:"GMEDIAN"}, {text:"Average", id:"GAVG"}, {text:"Mkt Cap Wtd Avg", id:"GWAVG"}, {text:"Rank", id:"Rank"}, {text:"Percentile", id:"Percentile"}];
  var getMatchingAggScope = function(scopes, id) {
    if (scopes && (_.isArray(scopes) && scopes.length > 0)) {
      for (var i = 0;i < scopes.length;i++) {
        if (scopes[i].hasOwnProperty("items")) {
          var scope = getMatchingAggScope(scopes[i].items, id);
          if (scope) {
            return scope;
          }
        } else {
          if (scopes[i].name == id) {
            return scopes[i];
          }
        }
      }
    }
    return null;
  };
  var service = {};
  service.getTrendFunctionName = function(trendFunctionId) {
    var trendFuncs = scr.QuickFunctionsView.prototype.trendFunctions_;
    for (var i = 0;i < trendFuncs.length;i++) {
      if (trendFuncs[i].id == trendFunctionId) {
        return trendFuncs[i].text;
      }
    }
    return "";
  };
  service.getAggregateFunctionLevel = function(universe) {
    var item = getMatchingAggScope(scr.QuickFunctionsView.aggScopes_, universe);
    return item != null ? item.text : "";
  };
  service.getAggregateFunctionName = function(aggregateFunctionName) {
    var item = _.findWhere(aggregatesLookup, {id:aggregateFunctionName});
    return item != undefined ? item.text : "";
  };
  service.getAggregateRestrictionName = function(aggregateRestriction) {
    var item = _.findWhere(gfAggregateRestrictions, {id:aggregateRestriction});
    return item != undefined ? item.text : null;
  };
  return service;
}]);
goog.provide("gridReport.constants.ScaleDisplayValues");
gridReport.Module.constant("gfScaleDisplayValues", {12:"Trillions", 9:"Billions", 8:"Hundred Million", 7:"Ten Million", 6:"Millions", 5:"Hundred Thousand", 4:"Ten Thousand", 3:"Thousands", 2:"Hundreds"});
goog.provide("gridReport.services.ColumnHeaderDescriptionService");
goog.require("gridReport.model.ColumnHeaderDescription");
goog.require("gridReport.services.QuickFunctionsService");
goog.require("gridReport.constants.ScaleDisplayValues");
gridReport.Module.factory("gfColumnHeaderDescriptionService", ["gfQuickFunctionsService", "gfScaleDisplayValues", function(gfQuickFunctionsService, gfScaleDisplayValues) {
  var ABSOLUTE_VALUE = "AbsVal";
  var PERCENT_CHANGE = "PcntChange";
  var TREND_FUNCTION = "Trend";
  var AGGREGATE = "Aggregate";
  var NET_CHANGE = "NetChange";
  function hasParameters(gridColumn) {
    return gridColumn.command != undefined && (gridColumn.command.parameters != undefined && gridColumn.command.parameters.length > 0);
  }
  function getParameterValue(parameter, globalParameters) {
    var value = getDisplayValue(parameter);
    if (value == "" || value == undefined && globalParameters != undefined) {
      var globalParameter = _.find(globalParameters, function(p) {
        return p.name.toLowerCase() == parameter.id.toLowerCase();
      });
      if (globalParameter != undefined && (globalParameter.value != undefined && globalParameter.value != "")) {
        return globalParameter.value;
      }
    }
    return value;
  }
  function getScaleDisplayValue(parameterValue) {
    return gfScaleDisplayValues[parameterValue] || "";
  }
  function getDisplayValue(parameter) {
    if (parameter.id == scr.output.ParameterIds.Period || parameter.id == scr.output.ParameterIds.ChgPeriod) {
      return parameter.getValueOrDefault();
    }
    if (parameter.id == scr.output.ParameterIds.Scale) {
      return getScaleDisplayValue(parameter.value);
    }
    if (parameter.value !== parameter.defaultValue) {
      return parameter.value;
    } else {
      return undefined;
    }
  }
  function getParametersArray(parameters, globalParameters, isTimeSeries, isIdentifierTimeSeries) {
    var strings = [];
    if (isTimeSeries && isIdentifierTimeSeries) {
      var sDateParam = _.findWhere(parameters, {id:scr.output.ParameterIds.SDate});
      var eDateParam = _.findWhere(parameters, {id:scr.output.ParameterIds.EDate});
      var sDate = getParameterValue(sDateParam, globalParameters);
      var eDate = getParameterValue(eDateParam, globalParameters);
      strings.push(sDate + ":" + eDate);
    }
    return strings.concat(_.chain(parameters).filter(function(parameter) {
      return!(isTimeSeries && (parameter.id == scr.output.ParameterIds.Period || (parameter.id == scr.output.ParameterIds.SDate || (parameter.id == scr.output.ParameterIds.EDate || parameter.id == scr.output.ParameterIds.Frq))));
    }).map(function(parameter) {
      return getParameterValue(parameter, globalParameters);
    }).filter(function(value) {
      return value != "" && value != undefined;
    }).value());
  }
  function createParametersElement(parameters, globalParameters, isTimeSeries, isIdentifierTimeSeries) {
    var params = getParametersArray(parameters, globalParameters, isTimeSeries, isIdentifierTimeSeries);
    return params.length > 0 ? params.join(", ") : "";
  }
  function getTransforms(transforms) {
    var tr = {};
    _.each(transforms, function(transform) {
      switch(transform.type) {
        case ABSOLUTE_VALUE:
          tr.absolute = {};
          break;
        case PERCENT_CHANGE:
          tr.percentChange = {interval:transform.interval, wSize:transform.wSize};
          break;
        case TREND_FUNCTION:
          tr.trend = {id:transform.stat, name:gfQuickFunctionsService.getTrendFunctionName(transform.stat)};
          break;
        case AGGREGATE:
          var groupBySelectionName = null;
          if (transform.universe != scr.ParameterOptions.AllAggregateUniverses.None) {
            groupBySelectionName = gfQuickFunctionsService.getAggregateFunctionLevel(transform.universe);
          }
          var universeSelectionName;
          if (transform.restrictMetadata != null && (transform.restrict == "PWHEADER" || (transform.restrict == "SCREEN" || transform.restrict == null))) {
            universeSelectionName = transform.restrictMetadata.name || "";
          } else {
            universeSelectionName = gfQuickFunctionsService.getAggregateRestrictionName(transform.restrict) || "";
          }
          tr.aggregate = {functionName:gfQuickFunctionsService.getAggregateFunctionName(transform.stat), groupBySelectionName:groupBySelectionName, universeSelectionName:universeSelectionName};
          break;
        case NET_CHANGE:
          tr.netChange = {interval:transform.interval, wSize:transform.wSize};
          break;
        default:
          break;
      }
    });
    return tr;
  }
  function getPercentChange(parameters, percentChangeTransform) {
    var periodParam = _.findWhere(parameters, {id:scr.output.ParameterIds.Period});
    var isPeriodSet = periodParam != undefined && (periodParam.value != undefined && periodParam.value != "");
    var chgWindow;
    if (isPeriodSet) {
      var frqParam = _.findWhere(parameters, {id:scr.output.ParameterIds.Frq});
      chgWindow = percentChangeTransform.interval + getWindow(frqParam, periodParam, true);
    } else {
      chgWindow = percentChangeTransform.interval + (percentChangeTransform.wSize || "D");
    }
    if (isPeriodSet) {
      switch(chgWindow.toUpperCase()) {
        case "1FY":
        ;
        case "4FQ":
        ;
        case "2FS":
          return "YoY % Chg in";
        case "1FQ":
          return "QoQ % Chg in";
        default:
          return "PoP % Chg (" + chgWindow + ") in";
      }
    } else {
      return "% Chg (" + chgWindow + ") in";
    }
  }
  function getNetChange(parameters, netChangeTransform) {
    var periodParam = _.findWhere(parameters, {id:scr.output.ParameterIds.Period});
    var isPeriodSet = periodParam != undefined && (periodParam.value != undefined && periodParam.value != "");
    var chgWindow;
    if (isPeriodSet) {
      var frqParam = _.findWhere(parameters, {id:scr.output.ParameterIds.Frq});
      chgWindow = netChangeTransform.interval + getWindow(frqParam, periodParam, true);
    } else {
      chgWindow = netChangeTransform.interval + (netChangeTransform.wSize || "D");
    }
    if (isPeriodSet) {
      switch(chgWindow.toUpperCase()) {
        case "1FY":
        ;
        case "4FQ":
        ;
        case "2FS":
          return "YoY Net Chg in";
        case "1FQ":
          return "QoQ Net Chg in";
        default:
          return "PoP Net Chg (" + chgWindow + ") in";
      }
    } else {
      return "Net Chg (" + chgWindow + ") in";
    }
  }
  function getWindow(frqParam, periodParam, isPeriodSet) {
    var fv = "D";
    if (frqParam != null) {
      fv = frqParam.getValueOrDefault();
      if (!fv) {
        fv = "D";
      }
    }
    if (isPeriodSet) {
      fv = periodParam.value;
    }
    if (!fv || fv == "Default") {
      fv = "FY";
    }
    if (fv.length > 2 && (fv != "NTM" && fv != "LTM")) {
      fv = fv.substr(0, 2);
    }
    return fv;
  }
  function getTimeSeriesString(command) {
    if (command.isCustom()) {
      return "";
    }
    var timeSeriesString = command.isVector() ? "In" : "Over";
    var eDate = null;
    var eDateParam = _.findWhere(command.parameters || [], {id:scr.output.ParameterIds.EDate});
    if (eDateParam != undefined) {
      eDate = eDateParam.getValue();
    }
    timeSeriesString += " the " + (eDate > 0 ? "next " : "last ") + (Math.abs(eDate) + 1);
    var frqParam = _.findWhere(command.parameters || [], {id:scr.output.ParameterIds.Frq});
    if (frqParam != undefined) {
      timeSeriesString += " " + frqParam.getValueOrDefault();
    }
    return timeSeriesString;
  }
  var service = {};
  service.getColumnHeaderDescription = function(column, globalParameters) {
    if (!column) {
      throw new Error("column should be provided");
    }
    var description = new gridReport.model.ColumnHeaderDescription;
    description.fieldName = column.header || "";
    description.headerReferenceText = column.headerReferenceText || "";
    var isTimeSeries = column.command != undefined && column.command.isTimeSeries();
    var isIdentifierTimeSeries = column.command != undefined && column.command.isIdentifierTimeSeries();
    if (hasParameters(column)) {
      if (column.command.outputColumn && (!_.isArray(column.command.outputColumn) && !column.command.outputColumn.isValueOutputColumn())) {
        globalParameters = _.filter(globalParameters, function(item) {
          return item.name !== "curn";
        });
      }
      var params = createParametersElement(column.command.parameters, globalParameters, isTimeSeries, isIdentifierTimeSeries);
      if (params != undefined && params != "") {
        description.parameters = params;
      }
    }
    if (column.command != undefined && (column.command.metadata != undefined && column.command.metadata.transforms != undefined)) {
      var transforms = getTransforms(column.command.metadata.transforms);
      if (transforms.aggregate != undefined) {
        description.aggregate.functionName = transforms.aggregate.functionName;
        description.aggregate.groupBySelectionName = transforms.aggregate.groupBySelectionName;
        description.aggregate.universeSelectionName = transforms.aggregate.universeSelectionName;
      }
      if (transforms.trend != undefined) {
        description.trendFunctionName = transforms.trend.name;
      }
      if (transforms.percentChange != undefined) {
        description.percentChangeString = getPercentChange(column.command.parameters || [], transforms.percentChange);
      }
      if (transforms.netChange != undefined) {
        description.netChangeString = getNetChange(column.command.parameters || [], transforms.netChange);
      }
      description.isAbsolute = transforms.absolute != undefined;
    }
    if (column.command != undefined && (column.command.outputColumn != undefined && (!_.isArray(column.command.outputColumn) && !column.command.outputColumn.isValueOutputColumn()))) {
      description.outputColumnName = column.command.outputColumn.name;
    }
    if (column.command != undefined && column.command.metadata != undefined) {
      if (column.command.metadata.methodology && column.command.metadata.methodology != "NScroing") {
        description.mfr.type = scr.mfr.MFMethodologyText[column.command.metadata.methodology];
      }
      if (column.command.metadata.nTileOrder) {
        if (column.command.metadata.methodology == "PercentileScoring") {
          if (column.command.metadata.nTileOrder == "Ascending") {
            description.mfr.order = "1(best)-100(worst)";
          } else {
            if (column.command.metadata.nTileOrder == "Descending" || column.command.metadata.nTileOrder == "Decending") {
              description.mfr.order = "100(best)-1(worst)";
            }
          }
        } else {
          if (column.command.metadata.methodology == "OuartileScoring") {
            if (column.command.metadata.nTileOrder == "Ascending") {
              description.mfr.order = "1(best)-4(worst)";
            } else {
              if (column.command.metadata.nTileOrder == "Descending" || column.command.metadata.nTileOrder == "Decending") {
                description.mfr.order = "4(best)-1(worst)";
              }
            }
          } else {
            if (column.command.metadata.methodology == "QuintileScoring") {
              if (column.command.metadata.nTileOrder == "Ascending") {
                description.mfr.order = "1(best)-5(worst)";
              } else {
                if (column.command.metadata.nTileOrder == "Descending" || column.command.metadata.nTileOrder == "Decending") {
                  description.mfr.order = "5(best)-1(worst)";
                }
              }
            } else {
              if (column.command.metadata.methodology == "DecileScoring" || column.command.metadata.nTileOrder == "Decending") {
                if (column.command.metadata.nTileOrder == "Ascending") {
                  description.mfr.order = "1(best)-10(worst)";
                } else {
                  if (column.command.metadata.nTileOrder == "Descending" || column.command.metadata.nTileOrder == "Decending") {
                    description.mfr.order = "10(best)-1(worst)";
                  }
                }
              }
            }
          }
        }
      }
      if (column.command.metadata.universe && column.command.metadata.universe != "CurrentUniverse") {
        if (column.command.metadata.universe != "ListPortfolioIndex") {
          description.mfr.rankAgainst = "Against " + scr.mfr.RankAgainstText[column.command.metadata.universe];
        } else {
          description.mfr.rankAgainst = "Against " + column.command.metadata.universeMetadata.name;
        }
      }
      if (column.command.metadata.partitionBy && column.command.metadata.partitionBy != "None") {
        description.mfr.partitionBy = "within each " + column.command.metadata.partitionBy;
      }
    }
    if (isTimeSeries && !isIdentifierTimeSeries) {
      description.timeSeries = getTimeSeriesString(column.command);
    }
    if (!column.isMultiColumn() && column.canHaveStatistics()) {
      if (column.selectedTotalsCalculation) {
        description.statistics = column.selectedTotalsCalculation.getShortName();
      } else {
        description.statistics = "None";
      }
    }
    return description;
  };
  return service;
}]);
goog.provide("gridReport.services.ColumnHeaderFormatterService");
goog.require("gridReport.services.ColumnHeaderDescriptionService");
gridReport.Module.factory("gfColumnHeaderFormatterService", ["gfColumnHeaderDescriptionService", "$translate", "$q", function(gfColumnHeaderDescriptionService, $translate, $q) {
  function isSubColumnItemSorted(column, vectorItemIndex) {
    return column.vectorIndex === vectorItemIndex;
  }
  function isSubColumnFilterApplied(column, vectorItemIndex) {
    if (!hasSubItems(column)) {
      return column.isFilterApplied();
    }
    return column.isFilterApplied() && _.some(column.filter.getAll(), function(filter) {
      return filter.vectorIndex === vectorItemIndex;
    });
  }
  var service = {};
  service.getSubColumns = function(column) {
    var subColumns;
    if (column.command.isFactorRank()) {
      return _.map(column.getFactors(), function(v) {
        v = $translate.instant(v);
        return'<div class="jqx-param-name" data-smart-tooltip="' + v + '">' + v + "</div>";
      });
    } else {
      if (column.command.isMultiSelect()) {
        subColumns = _.map(column.getMultiSelections(), function(v) {
          return'<div class="jqx-param-name" data-smart-tooltip="' + v + '">' + v + "</div>";
        });
      } else {
        subColumns = column.getPeriods();
      }
    }
    return subColumns;
  };
  service.getPeriodsString = function(column, sortDirection, enableInColumnFiltering) {
    var subColumns = service.getSubColumns(column);
    if (subColumns.length == 0) {
      return "";
    }
    var subColumnsString = '<div class="jqx-header-vector-container"><div class="jqx-header-vector">';
    var widthPerColumn = 100 / subColumns.length;
    _.each(subColumns, function(subCol, index) {
      var sortIconString = "", filterResultsButton = "";
      if (isSubColumnItemSorted(column, index) && sortDirection) {
        sortIconString = getSingleSortIndicator(sortDirection);
      }
      if (enableInColumnFiltering) {
        filterResultsButton = '<div class="vectorColumnFilterContainer"><div class="columnHeaderFilterResultsElement columnHeaderVectorOnHoverButton icon-filter' + (isSubColumnFilterApplied(column, index) ? " active" : "") + '" data-smart-tooltip="' + $translate.instant("FILTER_RESULTS") + '"></div></div>';
      }
      subColumnsString += '<div class="jqx-header-vector-item gf-grid-sub-column-sortable" style="width:' + widthPerColumn + '%"><table class="jqx-header-vector-item-container" cellpadding=0 cellspacing=0><tr><td class="jqx-vector-item-title">' + subCol + '</td><td class="jqx-icons-container">' + filterResultsButton + sortIconString + "</td></tr></table>" + "</div>";
    });
    return subColumnsString + "</div></div>";
  };
  function getSingleSortIndicator(sortDirection) {
    return'<div class="jqx-grid-column-sort' + sortDirection + "button jqx-grid-column-sort" + sortDirection + 'button-solar-medium" style="right: 0;"></div>';
  }
  service.getFormattedHeader = function(column, globalParameters, options) {
    if (_.isString(column)) {
      return'<div class="column-header-field-line"><strong>' + column + "</strong></div>";
    }
    var description = gfColumnHeaderDescriptionService.getColumnHeaderDescription(column, globalParameters);
    var aggregateLine = "";
    var aggregateAdditionalLine = "";
    if (description.aggregate && description.aggregate.functionName) {
      if (description.aggregate.groupBySelectionName) {
        var ofOrBy = description.aggregate.functionName == "Rank" || description.aggregate.functionName == "Percentile" ? "by" : "of";
        aggregateLine += "<strong>" + description.aggregate.functionName + "</strong>" + " " + ofOrBy + " " + description.aggregate.groupBySelectionName;
        aggregateAdditionalLine += "Over " + description.aggregate.universeSelectionName;
      } else {
        aggregateLine += "<strong>" + description.aggregate.functionName + "</strong>" + " over " + description.aggregate.universeSelectionName;
      }
    }
    var trendFunctionLine = "";
    if (description.trendFunctionName != "") {
      trendFunctionLine += description.trendFunctionName + " of";
    }
    if (description.percentChangeString != "") {
      if (description.trendFunctionName != "") {
        trendFunctionLine += " ";
      }
      trendFunctionLine += description.percentChangeString;
    }
    if (description.netChangeString != "") {
      if (description.trendFunctionName != "") {
        trendFunctionLine += " ";
      }
      trendFunctionLine += description.netChangeString;
    }
    var headerReferenceText = "";
    if (description.headerReferenceText != "") {
      headerReferenceText = "<sup>" + description.headerReferenceText + "</sup>";
    }
    var fieldNameLine;
    if (description.isAbsolute) {
      fieldNameLine = "<strong>|" + description.fieldName + headerReferenceText + "|</strong>";
    } else {
      fieldNameLine = "<strong>" + description.fieldName + headerReferenceText + "</strong>";
    }
    var parametersLine = "";
    if (column.command && !column.command.isMultiOutput() && (column.areParametersVisible && description.parameters != "")) {
      parametersLine = "(" + description.parameters + ")";
    }
    var timeSeriesLine = "";
    if (description.timeSeries.length > 0) {
      timeSeriesLine = description.timeSeries;
    }
    var rankOrderLine = "", rankTypeLine = "", rankAgainstLine = "", rankPartitionByLine = "";
    if (description.mfr) {
      rankTypeLine = description.mfr.type || "";
      rankOrderLine = description.mfr.order || "";
      rankAgainstLine = description.mfr.rankAgainst || "";
      rankPartitionByLine = description.mfr.partitionBy || "";
    }
    var statisticsLine = (options && options.showStatistics || !options) && description.statistics ? "(" + $translate.instant("SUM_SYMBOL") + "=" + description.statistics + ")" : "";
    var outputColumnLine = "";
    if (description.outputColumnName) {
      outputColumnLine = "(" + description.outputColumnName + ")";
    }
    return(trendFunctionLine.length > 0 ? '<div class="column-header-trend-line">' + trendFunctionLine + "</div>" : "") + (fieldNameLine.length > 0 ? '<div class="column-header-field-line">' + fieldNameLine + "</div>" : "") + (outputColumnLine.length > 0 ? '<div class="column-header-output-column-line">' + outputColumnLine + "</div>" : "") + (parametersLine.length > 0 ? '<div class="column-header-parameters-line">' + parametersLine + "</div>" : "") + (timeSeriesLine.length > 0 ? '<div class="column-header-timeseries-line">' + 
    timeSeriesLine + "</div>" : "") + (aggregateLine.length > 0 ? '<div class="column-header-aggregate-line">' + aggregateLine + "</div>" : "") + (rankOrderLine.length > 0 ? '<div class="column-header-rank-order-line">' + rankOrderLine + "</div>" : "") + (rankTypeLine.length > 0 ? '<div class="column-header-rank-type-line">' + rankTypeLine + "</div>" : "") + (rankAgainstLine.length > 0 ? '<div class="column-header-rank-against-line">' + rankAgainstLine + "</div>" : "") + (rankPartitionByLine.length > 
    0 ? '<div class="column-header-rank-partition-by-line">' + rankPartitionByLine + "</div>" : "") + (aggregateAdditionalLine.length > 0 ? '<div class="column-header-aggregate-additional-line">' + aggregateAdditionalLine + "</div>" : "") + (statisticsLine.length > 0 ? '<div class="column-header-statistics-line">' + statisticsLine + "</div>" : "");
  };
  service.getExportHeader = function(column, globalParameters, options) {
    return service.getColumnHeaderTooltip(column, globalParameters, options);
  };
  service.getColumnHeaderTooltip = function(column, globalParameters, options) {
    if (_.isString(column)) {
      return column;
    }
    var description = gfColumnHeaderDescriptionService.getColumnHeaderDescription(column, globalParameters);
    var aggregateLine = "";
    var aggregateAdditionalLine = "";
    if (description.aggregate && description.aggregate.functionName) {
      if (description.aggregate.groupBySelectionName) {
        aggregateLine += description.aggregate.functionName + " of " + description.aggregate.groupBySelectionName;
        aggregateAdditionalLine += "Over " + description.aggregate.universeSelectionName;
      } else {
        aggregateLine += description.aggregate.functionName + " over " + description.aggregate.universeSelectionName;
      }
    }
    var trendLine = "";
    if (description.trendFunctionName != "") {
      trendLine += description.trendFunctionName + " of";
    }
    if (description.percentChangeString != "") {
      if (description.trendFunctionName != "") {
        trendLine += " ";
      }
      trendLine += description.percentChangeString;
    }
    if (description.netChangeString != "") {
      if (description.netChangeString != "") {
        trendLine += " ";
      }
      trendLine += description.netChangeString;
    }
    var fieldName;
    if (description.isAbsolute) {
      fieldName = "|" + description.fieldName + "|";
    } else {
      fieldName = description.fieldName;
    }
    var parametersLine = "";
    if (column.command && (!column.command.isMultiOutput() && description.parameters != "")) {
      parametersLine = "(" + description.parameters + ")";
    }
    var timeSeriesLine = "";
    if (description.timeSeries.length > 0) {
      timeSeriesLine = description.timeSeries;
    }
    var formulaLine = "";
    if (column != undefined && (column.command != undefined && (column.command.isCustom() && (column.command.expression != undefined && column.command.expression != "")))) {
      formulaLine = "Expression:\n" + column.command.expression.replace(/\/\*.*?\*\//g, "").replace(/\"/g, "&#147");
    }
    var rankOrderLine = "", rankTypeLine = "", rankAgainstLine = "", rankPartitionByLine = "";
    if (description.mfr) {
      rankTypeLine = description.mfr.type || "";
      rankOrderLine = description.mfr.order || "";
      rankAgainstLine = description.mfr.rankAgainst || "";
      rankPartitionByLine = description.mfr.partitionBy || "";
    }
    var statisticsLine = (options && options.showStatistics || !options) && (description.statistics && (!column.selectedTotalsCalculation || !column.selectedTotalsCalculation.isServerSide)) ? "(" + $translate.instant("SUM_SYMBOL") + "=" + description.statistics + ")" : "";
    var outputColumnLine = "";
    if (description.outputColumnName) {
      outputColumnLine = "(" + description.outputColumnName + ")";
    }
    return(trendLine.length > 0 ? trendLine + "\n" : "") + (fieldName.length > 0 ? fieldName + "\n" : "") + (outputColumnLine.length > 0 ? outputColumnLine + "\n" : "") + (parametersLine.length > 0 ? parametersLine + "\n" : "") + (formulaLine.length > 0 ? formulaLine + "\n" : "") + (timeSeriesLine.length > 0 ? timeSeriesLine + "\n" : "") + (aggregateLine.length > 0 ? aggregateLine + "\n" : "") + (rankOrderLine.length > 0 ? rankOrderLine + "\n" : "") + (rankTypeLine.length > 0 ? rankTypeLine + "\n" : 
    "") + (rankAgainstLine.length > 0 ? rankAgainstLine + "\n" : "") + (rankPartitionByLine.length > 0 ? rankPartitionByLine + "\n" : "") + (aggregateAdditionalLine.length > 0 ? aggregateAdditionalLine : "") + (statisticsLine.length > 0 ? statisticsLine : "");
  };
  service.getTransposedColumnStatisticsHeader = function(value, align, statistics, grid, valueUpdatedCallback) {
    var html = '<div class="columnHeader statistic-row" style="z-index:1;width:100%;height:100%">', $headerRow = grid.find(".jqx-grid-header");
    if (value != undefined) {
      html += '<div class="columnHeaderTitle gf-column-header-title-transposed" data-statistics-name="' + statistics.name + '" style="text-align:' + align + '" data-smart-tooltip="' + value + '"><div class="gf-column-header-transposed-statistics" data-statistics-text>' + value + "</div></div>";
    } else {
      html += '<div class="columnHeaderTitle gf-column-header-title-transposed" data-statistics-name="' + statistics.name + '" style="text-align:' + align + '" ><div class="gf-column-header-transposed-statistics" data-statistics-text></div></div>';
      insertStatisticsHeaderText(value, statistics, $headerRow, valueUpdatedCallback);
    }
    return html + "</div>";
  };
  service.getTransposedColumnTotalsHeader = function(totalsName, align) {
    var html = '<div class="columnHeader totals-row" style="z-index:1;width:100%;height:100%">';
    html += '<div class="columnHeaderTitle gf-column-header-title-transposed" style="text-align:' + align + '" data-smart-tooltip="' + totalsName + '">';
    html += '<div class="gf-column-header-transposed-totals">' + totalsName + "</div>";
    html += "</div>";
    return html + "</div>";
  };
  service.getTransposedColumnHeader = function(value, align, gridColumn, firstColumnId, columnsInHeader, dataManager, isPrimaryKey, emptyHeaderCellValueGetter, pdStatistics, showCheckBox, showRemoveElement, grid, isExcludedFromStatistics, isHighlighted) {
    var html = '<div class="columnHeader' + (isPrimaryKey ? " primary-row" : "") + (isHighlighted ? " highlighted-row" : "") + '" style="z-index:1">';
    var getValue = function(val) {
      return val == null ? emptyHeaderCellValueGetter.getEmptyCellValue() : val;
    };
    var getTitle = function(val) {
      return val == null ? emptyHeaderCellValueGetter.getEmptyCellTitle() : val;
    };
    var defaultRender = function(v) {
      var title = getTitle(v);
      var value = getValue(v);
      if (gridColumn.datafield == firstColumnId) {
        html += '<div class="columnHeaderTitle gf-column-header-title-transposed gf-column-header-row-key" data-smart-tooltip="' + title + '" style="text-align:' + align + '">' + (showCheckBox ? '<div class="gf-header-chekbox"></div>' : "&nbsp;") + "</div>";
      } else {
        html += '<div class="columnHeaderTitle gf-column-header-title-transposed gf-column-header-row-key' + (isExcludedFromStatistics ? " gf-column-header-row-excluded-stat" : "") + '" data-smart-tooltip="' + title + '" style="text-align:' + align + '" col-id="' + gridColumn.datafield + '">' + (showCheckBox ? '<div class="gf-header-chekbox" style="display:inline-block"></div>' + '<span class="checkbox gf-first-row-item ' + getCellClass(columnsInHeader[0]) + getAttachEventClass(columnsInHeader[0]) + 
        '" row-key="' + encodeURI(columnsInHeader[0] ? columnsInHeader[0].id : "") + '">' + '<span class="checkbox jqx-grid-cell-text gf-column-header-checkbox-text">' + value + "</span>" + "</span>" : value) + (showRemoveElement ? '<div class="deleteRowElement" data-smart-tooltip="' + $translate.instant("REMOVE_ROW") + '" ></div>' : "") + "</div>";
      }
    };
    if (columnsInHeader.length == 0) {
      defaultRender();
    } else {
      for (var i = 0;i < columnsInHeader.length;i++) {
        if (i == 0) {
          var data = _.findWhere(dataManager.getColumnsData(), {rowKey:columnsInHeader[i].id});
          if (data) {
            defaultRender(data[value]);
          } else {
            defaultRender(value);
          }
        } else {
          if (gridColumn.datafield == firstColumnId) {
            html += '<div class="columnHeaderTitle" data-smart-tooltip="' + columnsInHeader[i].header + '">' + columnsInHeader[i].header + "</div>";
          } else {
            var v = _.findWhere(dataManager.getColumnsData(), {rowKey:columnsInHeader[i].id})[value];
            html += '<div class="columnHeaderTitle" data-smart-tooltip="' + columnsInHeader[i].header + '">';
            if (pdStatistics) {
              html += '<div class="jqx-column-header-pd-transposed">';
              html += '<div class="jqx-pd-title" data-smart-tooltip="' + getTitle(v) + '"><div>' + getValue(v) + "</div></div>";
              html += '<div class="jqx-pd-statistics jqx-pd-statistics-' + pdStatistics.name + '" data-smart-tooltip=""><div></div></div>';
              html += "</div>";
              wrapGetStatisticsLineName(pdStatistics).then(function(headerText) {
                var $headerRow = grid.find(".jqx-grid-header");
                var statisticsTitle = $translate.instant("PREMIUM_DISCOUNT_TITLE", {statisticsName:headerText});
                var $headerCell = $headerRow.find(".jqx-pd-statistics-" + pdStatistics.name);
                $headerCell.attr("data-smart-tooltip", statisticsTitle);
                $headerCell.text(statisticsTitle);
              });
            } else {
              html += '<div class="columnHeaderTitle gf-column-header-title-transposed gf-column-header-company-name ' + (isExcludedFromStatistics ? " gf-column-header-row-excluded-stat" : "") + " " + getAttachEventClass(columnsInHeader[i]) + '" row-key="' + encodeURI(columnsInHeader[i].id) + '" style="position:relative;" data-smart-tooltip="' + getTitle(v) + '">' + '<div class="gf-column-header-title-transposed jqx-grid-cell-text ' + getCellClass(columnsInHeader[i]) + '">' + getValue(v) + "</div>" + 
              "</div>";
            }
            html += "</div>";
          }
        }
      }
    }
    return html + "</div>";
  };
  function getHeaderFormatterOptions(options) {
    var gridColumn = options.gridColumn, gridGroups = options.gridGroups, showTotalsRow = options.showTotalsRow;
    var isServerSideColumn = gridColumn && (gridColumn.selectedTotalsCalculation && gridColumn.selectedTotalsCalculation.isServerSide);
    return{showStatistics:!isServerSideColumn && (showTotalsRow || !_.isEmpty(gridGroups))};
  }
  function getColumnHeader(gridColumn, options, headerFormatterOptions) {
    return gridColumn != undefined ? service.getFormattedHeader(gridColumn, options.globalParameters, headerFormatterOptions) : service.getFormattedHeader(options.value);
  }
  function getColumnHeaderTooltip(gridColumn, options, headerFormatterOptions) {
    return gridColumn != undefined ? service.getColumnHeaderTooltip(gridColumn, options.globalParameters, headerFormatterOptions) : service.getColumnHeaderTooltip(options.value);
  }
  function isDataLoading(gridColumn, options) {
    var dataLoadingColumns = options.dataLoadingColumns;
    return gridColumn && dataLoadingColumns.lastIndexOf(gridColumn.id) !== -1 || gridColumn && (gridColumn.hasSubColumns() && _.any(gridColumn.gridColumns, function(column) {
      return dataLoadingColumns.lastIndexOf(column.id) !== -1;
    }));
  }
  function getDeleteColumnElement(gridColumn, options) {
    var canDeleteColumns = options.canDeleteColumns;
    return gridColumn != undefined && (gridColumn.canDelete && canDeleteColumns) ? '<div class="deleteColumnElement" data-smart-tooltip="' + $translate.instant("REMOVE_COLUMN") + '" />' : "";
  }
  function getSortDirection(gridColumn, options) {
    var sortingFullState = options.sortingFullState;
    var singleSortingState = sortingFullState.singleSortingState;
    var isSingleSorting = sortingFullState.getEnabledState() === singleSortingState;
    var sortColumn = gridColumn;
    return sortColumn && (sortColumn.command && ((hasSubItems(sortColumn) || options.isDataBlockItem) && (sortColumn.id === singleSortingState.column && isSingleSorting))) ? singleSortingState.direction : null;
  }
  function hasSubItems(gridColumn) {
    return gridColumn.command.isVector() || (gridColumn.command.isFactorRank() || gridColumn.command.isMultiSelect());
  }
  function getSubColumnsElement(gridColumn, options) {
    var sortDirection = getSortDirection(gridColumn, options);
    var settings = options.settings;
    return gridColumn && (gridColumn.command && hasSubItems(gridColumn)) ? service.getPeriodsString(gridColumn, sortDirection, settings.enableInColumnFiltering) : "";
  }
  function getAdvancedSortingElement(gridColumn, sortingFullState) {
    var advancedSortingState = sortingFullState.advancedSortingState;
    var advancedSortingIndicator = "";
    if (advancedSortingState.enabled && (advancedSortingState.criterias.length && (gridColumn && gridColumn.id))) {
      var criteriaIndex = gridReport.jsUtils.findIndex(advancedSortingState.criterias, "dataField", gridColumn.id);
      if (criteriaIndex >= 0) {
        var criteria = advancedSortingState.criterias[criteriaIndex];
        var directionIconClass = criteria.asc ? "icon-expand-arrow-up" : "icon-expand-arrow-down";
        directionIconClass += " direcrionIcon";
        var criteriaOrder = criteriaIndex + 1;
        var iconEl = $("<span>").addClass(directionIconClass);
        var orderEl = $("<span>").html(criteriaOrder).addClass("criteria-order");
        var el = $("<div>").addClass("advancedSortingIndicator").append($("<div>").append(orderEl).append(iconEl));
        if (advancedSortingState.criterias.length == 1) {
          el.addClass("single-criteria");
        }
        advancedSortingIndicator = $("<div>").append(el).html();
      }
    }
    return advancedSortingIndicator;
  }
  function getDataBlockSortingElement(column, options) {
    if (!options.isDataBlockItem || hasSubItems(column)) {
      return "";
    }
    var direction = getSortDirection(column, options);
    if (direction && (column.command.isVector() || (column.command.isFactorRank() || column.command.isMultiSelect()) ? false : column.id === options.sortingFullState.singleSortingState.column)) {
      return getSingleSortIndicator(direction);
    }
    return "";
  }
  service.getColumnHeader = function(options) {
    if (!options) {
      throw new Error("options should be provided");
    }
    if (options.gridColumn && options.gridColumn.isMultiColumn()) {
      return getDataBlockHeader(options);
    }
    var gridColumn = options.gridColumn, isLoadingInColumnsEnabled = options.isLoadingInColumnsEnabled, sortingFullState = options.sortingFullState, align = options.align, showTimeseriesChartButton = options.showTimeseriesChartButton, settings = options.settings;
    var loadingElement = isDataLoading(gridColumn, options) && isLoadingInColumnsEnabled ? '<div class="throbber-mini" />' : "";
    var columnHeader = getColumnHeader(gridColumn, options, getHeaderFormatterOptions(options));
    var columnHeaderTooltip = getColumnHeaderTooltip(gridColumn, options, getHeaderFormatterOptions(options));
    var deleteColumnElement = getDeleteColumnElement(gridColumn, options);
    var periodsString = getSubColumnsElement(gridColumn, options);
    var advancedSortingIndicator = getAdvancedSortingElement(gridColumn, sortingFullState);
    var vectorColumnClass = gridColumn && (gridColumn.command && hasSubItems(gridColumn)) ? " vectorcolumn" : "";
    var dataBlockItemColumnClass = options.subColumnClass ? " " + options.subColumnClass : "";
    var dataBlockItemSortElement = getDataBlockSortingElement(gridColumn, options);
    var style = ["height:100%"];
    if (gridColumn && gridColumn.selectionColor) {
      style.push("border:dotted 1px " + gridColumn.selectionColor);
      style.push("box-sizing:border-box");
      style.push("margin-left:1px");
    }
    return'<div class="columnHeader gf-column-header' + vectorColumnClass + dataBlockItemColumnClass + '" style="' + style.join(";") + '"><div class="jqx-columnHeader-text-container">' + '<div class="columnHeaderTitle" data-smart-tooltip="' + columnHeaderTooltip + '" style="text-align:' + align + '" >' + columnHeader + "</div>" + '<input type="text" class="columnHeaderTitleEditor" />' + loadingElement + deleteColumnElement + getAdditionalColumnControlsString(gridColumn, settings.enableInColumnFiltering, 
    showTimeseriesChartButton, options.isBarChartDisabled) + getDisplayFactorRankString(gridColumn) + "</div>" + periodsString + "</div>" + advancedSortingIndicator + dataBlockItemSortElement;
  };
  function getDataBlockHeader(options) {
    var gridColumn = options.gridColumn, align = options.align;
    var loadingElement = "";
    var columnHeader = getColumnHeader(gridColumn.header, options, getHeaderFormatterOptions(options));
    var columnHeaderTooltip = getColumnHeaderTooltip(gridColumn.header, options, getHeaderFormatterOptions(options));
    var deleteColumnElement = getDeleteColumnElement(gridColumn, options);
    var subColumnsElement = '<div class="jqx-header-data-block-container">';
    var allColumnsNumber = _.chain(gridColumn.gridColumns).map(function(c) {
      return c.getRepresentedColumnsCount();
    }).reduce(function(memo, num) {
      return memo + num;
    }, 0).value();
    _.each(gridColumn.gridColumns, function(column) {
      var columnWidthPercent = column.getRepresentedColumnsCount() / allColumnsNumber * 100;
      var subColumnOptions = _.clone(options);
      subColumnOptions.width = options.width * columnWidthPercent / 100;
      subColumnOptions.gridColumn = column;
      subColumnOptions.canDeleteColumns = false;
      subColumnOptions.subColumnClass = "";
      subColumnOptions.isDataBlockItem = true;
      subColumnOptions.dataBlockColumn = gridColumn;
      subColumnsElement += '<div class="jqx-header-data-block-item gf-header-data-block-item jqx-column-command-header jqx-column-id-' + encodeURI(column.id) + " " + column.guid + '" style="width:' + columnWidthPercent + '%">' + service.getColumnHeader(subColumnOptions) + "</div>";
    });
    subColumnsElement += "</div>";
    return'<div class="columnHeader gf-data-block-header" style="height:100%"><div class="jqx-columnHeader-text-container jqx-data-block-title">' + '<div class="columnHeaderTitle gf-data-block-header-title" data-smart-tooltip="' + columnHeaderTooltip + '" style="text-align:' + align + '" >' + columnHeader + "</div>" + '<input type="text" class="columnHeaderTitleEditor" />' + loadingElement + deleteColumnElement + "</div>" + subColumnsElement + "</div>";
  }
  function getAdditionalColumnControlsString(gridColumn, enableInColumnFiltering, showTimeseriesChartButton, isBarChartDisabled) {
    var switchBarChartButton = "", columnInfoButton = "", timeseriesChartButton = "", filterResultsButton = "";
    if (gridColumn) {
      if (gridColumn.isTimeSeriesable() && showTimeseriesChartButton) {
        timeseriesChartButton = '<div class="columnHeaderTimeseriesChartElement columnHeaderOnHoverButton icon-chart-line-bar" title="' + $translate.instant("TIME_SERIES_CHART") + '"></div>';
      }
      if (gridColumn.command && gridColumn.command.id) {
        columnInfoButton = '<div class="columnHeaderDescriptionElement columnHeaderOnHoverButton icon-support" data-smart-tooltip="' + $translate.instant("FIELD_DEFINITION") + '"></div>';
      }
      if (!isBarChartDisabled && gridColumn.canHaveBarChart()) {
        switchBarChartButton = '<div class="columnHeaderBarChartElement columnHeaderOnHoverButton" data-smart-tooltip="' + $translate.instant("TORNADO_CHART") + '"></div>';
      }
      if (enableInColumnFiltering && gridColumn.canBeFiltered()) {
        filterResultsButton = '<div class="columnHeaderFilterResultsElement columnHeaderOnHoverButton icon-filter' + (isSubColumnFilterApplied(gridColumn, 0) ? " active" : "") + '" data-smart-tooltip="' + $translate.instant("FILTER_RESULTS") + '"></div>';
      }
    }
    if (timeseriesChartButton || (switchBarChartButton || (columnInfoButton || filterResultsButton))) {
      return'<div class="columnAdditionalControls">' + filterResultsButton + timeseriesChartButton + columnInfoButton + switchBarChartButton + "</div>";
    } else {
      return "";
    }
  }
  function getDisplayFactorRankString(gridColumn) {
    if (gridColumn && (gridColumn.command && gridColumn.command.isFactorRank())) {
      return'<div class="gf-factor-ranks-line">' + $translate.instant("DISPLAYING_FACTOR_RANKS") + " (" + (gridColumn.command.metadata.weight * 100).toFixed(2) + "%)</div>";
    } else {
      return "";
    }
  }
  function getAttachEventClass(column) {
    if (!column) {
      return "";
    }
    if (column.cellClickedAction || (column.cellRightClickedAction || (column.cellMouseEnterAction || column.cellMouseLeaveAction))) {
      return " gf-attach-cell-event ";
    }
    return "";
  }
  function getCellClass(column) {
    return column && column.cellClass ? " " + column.cellClass + " " : "";
  }
  function wrapGetStatisticsLineName(statistics) {
    var statisticsLineName = statistics.getStatisticsLineName();
    if (_.isString(statisticsLineName)) {
      return $q.when(statisticsLineName);
    } else {
      if (statisticsLineName != null && statisticsLineName.then != null) {
        return statisticsLineName;
      } else {
        return $q.when();
      }
    }
  }
  function insertStatisticsHeaderText(header, statistics, $headerRow, valueUpdatedCallback) {
    var setHeaderText = function(headerText) {
      var $headerCell = $headerRow.find('.columnHeaderTitle[data-statistics-name="' + statistics.name + '"]');
      $headerCell.attr("data-smart-tooltip", headerText);
      $headerCell.find("[data-statistics-text]").text(headerText);
    };
    wrapGetStatisticsLineName(statistics).then(function(headerText) {
      setHeaderText(headerText);
      if (valueUpdatedCallback) {
        valueUpdatedCallback(headerText);
      }
    });
  }
  return service;
}]);
goog.provide("gridReport.model.BaseConditionalValueFormatting");
gridReport.model.BaseConditionalValueFormatting = function() {
};
gridReport.model.BaseConditionalValueFormatting.prototype.compare = function(value, options) {
  throw new Error("Not implemented");
};
goog.provide("gridReport.model.ConditionalValueFormatting");
goog.require("gridReport.model.BaseConditionalValueFormatting");
gridReport.model.ConditionalValueFormatting = function(options) {
  if (options) {
    if (options.hasOwnProperty("upStyle")) {
      this.upStyle = options.upStyle;
    }
    if (options.hasOwnProperty("downStyle")) {
      this.downStyle = options.downStyle;
    }
    if (options.hasOwnProperty("upFontColor")) {
      this.upFontColor = options.upFontColor;
    }
    if (options.hasOwnProperty("downFontColor")) {
      this.downFontColor = options.downFontColor;
    }
    if (options.hasOwnProperty("threshold")) {
      this.threshold = options.threshold;
    }
    if (options.hasOwnProperty("compare")) {
      this.compare = options.compare;
    }
  }
};
goog.inherits(gridReport.model.ConditionalValueFormatting, gridReport.model.BaseConditionalValueFormatting);
gridReport.model.ConditionalValueFormatting.prototype.upStyle = "upStyle";
gridReport.model.ConditionalValueFormatting.prototype.downStyle = "downStyle";
gridReport.model.ConditionalValueFormatting.prototype.threshold = 0;
gridReport.model.ConditionalValueFormatting.prototype.upFontColor = "FF39C46E";
gridReport.model.ConditionalValueFormatting.prototype.downFontColor = "FFF5475B";
gridReport.model.ConditionalValueFormatting.colors = {downColor:"downColor", upColor:"upColor"};
gridReport.model.ConditionalValueFormatting.htmlLikeStyles = {downColor:"downStyle", upColor:"upStyle"};
gridReport.model.ConditionalValueFormatting.htmlLikeColors = {downColor:"#F5475B", upColor:"#39C46E"};
gridReport.model.ConditionalValueFormatting.excelLikeColors = {downColor:"FFF5475B", upColor:"FF39C46E"};
gridReport.model.ConditionalValueFormatting.prototype.getColorStorage_ = function(options) {
  var isExcel = !!options && !!options.isExcel;
  var isHtml = !!options && !!options.isHtml;
  if (isExcel) {
    return gridReport.model.ConditionalValueFormatting.excelLikeColors;
  }
  if (isHtml) {
    return gridReport.model.ConditionalValueFormatting.htmlLikeColors;
  }
  return gridReport.model.ConditionalValueFormatting.htmlLikeStyles;
};
gridReport.model.ConditionalValueFormatting.prototype.compare = function(value, options) {
  var colorStorage = this.getColorStorage_(options);
  if (_.isNumber(value)) {
    if (value > this.threshold) {
      return colorStorage[gridReport.model.ConditionalValueFormatting.colors.upColor];
    }
    if (value < this.threshold) {
      return colorStorage[gridReport.model.ConditionalValueFormatting.colors.downColor];
    }
  }
  return "";
};
goog.provide("gridReport.services.HeatMapLevels");
gridReport.services.HeatMapLevels = {Positive:"HeatMapLevels_Positive", MidPositive:"HeatMapLevels_MidPositive", Neutral:"HeatMapLevels_Neutral", MidNegative:"HeatMapLevels_MidNegative", Negative:"HeatMapLevels_Negative"};
goog.provide("gridReport.services.HeatMapService");
goog.require("gridReport.services.HeatMapLevels");
gridReport.Module.service("gfHeatMapService", [function() {
  var service = {};
  service.getHeatMapLevel = function(value, average, standardDeviation) {
    if (value > average + 1.25 * standardDeviation) {
      return gridReport.services.HeatMapLevels.Positive;
    }
    if (average + 1.25 * standardDeviation >= value && value > average + 0.5 * standardDeviation) {
      return gridReport.services.HeatMapLevels.MidPositive;
    }
    if (average + 0.5 * standardDeviation >= value && value > average - 0.5 * standardDeviation) {
      return gridReport.services.HeatMapLevels.Neutral;
    }
    if (average - 0.5 * standardDeviation >= value && value > average - 1.25 * standardDeviation) {
      return gridReport.services.HeatMapLevels.MidNegative;
    }
    if (value <= average - 1.25 * standardDeviation) {
      return gridReport.services.HeatMapLevels.Negative;
    }
    throw new Error("Unknow Heat Map level.");
  };
  service.getStandardDeviation = function(values) {
    var sum = 0;
    var mean = service.getAritmeticMean(values);
    for (var i = 0, n = values.length;i < n;i++) {
      sum += Math.pow(values[i] - mean, 2);
    }
    return Math.sqrt(sum / (n - 1));
  };
  service.getAritmeticMean = function(values) {
    var sum = 0;
    for (var i = 0, n = values.length;i < n;i++) {
      sum += values[i];
    }
    return sum / n;
  };
  function getMinMax(values) {
    var i = 0, n = values.length, min, max;
    if (n == 0) {
      return null;
    }
    max = min = values[0];
    for (;i < n;i++) {
      max = Math.max(max, values[i]);
      min = Math.min(min, values[i]);
    }
    return{min:min, max:max};
  }
  service.getStatisticValuesV1 = function(values) {
    var minMax = getMinMax(values);
    if (minMax == null || minMax.min == minMax.max) {
      return null;
    }
    var average = service.getAritmeticMean(values);
    var standardDeviation = service.getStandardDeviation(values);
    var max = average + 2 * standardDeviation;
    var min = average - 2 * standardDeviation;
    var limitedValues = [];
    for (var i = 0, n = values.length;i < n;i++) {
      if (values[i] >= min && values[i] <= max) {
        limitedValues.push(values[i]);
      }
    }
    average = service.getAritmeticMean(limitedValues);
    standardDeviation = service.getStandardDeviation(limitedValues);
    if (_.isNumber(average) && (!_.isNaN(average) && (_.isNumber(standardDeviation) && !_.isNaN(standardDeviation)))) {
      return{average:average, standardDeviation:standardDeviation};
    } else {
      return null;
    }
  };
  service.getStatisticValues = function(values) {
    var firstItem = _.first(values);
    if (_.isArray(firstItem)) {
      var statisticValues = [];
      for (var i = 0, n = firstItem.length;i < n;i++) {
        var subColumnValues = [];
        for (var j = 0, m = values.length;j < m;j++) {
          var value = values[j][i];
          if (_.isNumber(value) && !_.isNaN(value)) {
            subColumnValues.push(value);
          }
        }
        statisticValues.push(service.getStatisticValuesV1(subColumnValues));
      }
      return statisticValues;
    } else {
      return service.getStatisticValuesV1(values);
    }
  };
  return service;
}]);
goog.provide("gridReport.services.HeatMapColors");
goog.require("gridReport.services.HeatMapLevels");
goog.require("gridReport.services.HeatMapService");
gridReport.Module.factory("gfHeatMapColors", ["gfHeatMapService", function(gfHeatMapService) {
  var colors = {positive:"positive", midPositive:"midPositive", neutral:"neutral", midNegative:"midNegative", negative:"negative"};
  var htmlLikeStyles = {positive:"gf-positive-cs", midPositive:"gf-mid-positive-cs", neutral:"gf-neutral-cs", midNegative:"gf-mid-negative-cs", negative:"gf-negative-cs"};
  var excelLikeColors = {positive:"FF288A4D", midPositive:"FF144527", neutral:null, midNegative:"FF571920", negative:"FFAB3240"};
  var htmlLikeColors = {positive:"#288A4D", midPositive:"#144527", neutral:null, midNegative:"#571920", negative:"#AB3240"};
  function getHigherIsBetter(defaultOrder) {
    return defaultOrder == undefined || defaultOrder == scr.mfr.Order.HigherIsBetter;
  }
  function getColorStorage(options) {
    var isExcel = !!options && !!options.isExcel;
    var isHtml = !!options && !!options.isHtml;
    if (isExcel) {
      return excelLikeColors;
    }
    if (isHtml) {
      return htmlLikeColors;
    }
    return htmlLikeStyles;
  }
  var service = {};
  service.getHeatMapStyle = function(value, average, standardDeviation, defaultOrder) {
    return service.getHeatMapColor(value, average, standardDeviation, defaultOrder, {});
  };
  service.getHeatMapColor = function(value, average, standardDeviation, defaultOrder, options) {
    options = options || {isExcel:true};
    var colorStorage = getColorStorage(options);
    var higherIsBetter = getHigherIsBetter(defaultOrder);
    switch(gfHeatMapService.getHeatMapLevel(value, average, standardDeviation)) {
      case gridReport.services.HeatMapLevels.Positive:
        return higherIsBetter ? colorStorage[colors.positive] : colorStorage[colors.negative];
      case gridReport.services.HeatMapLevels.MidPositive:
        return higherIsBetter ? colorStorage[colors.midPositive] : colorStorage[colors.midNegative];
      case gridReport.services.HeatMapLevels.Neutral:
        return colorStorage[colors.neutral];
      case gridReport.services.HeatMapLevels.MidNegative:
        return higherIsBetter ? colorStorage[colors.midNegative] : colorStorage[colors.midPositive];
      case gridReport.services.HeatMapLevels.Negative:
        return higherIsBetter ? colorStorage[colors.negative] : colorStorage[colors.positive];
      default:
        return undefined;
    }
  };
  return service;
}]);
goog.provide("gridReport.services.ColumnTooltipFormatterService");
gridReport.Module.factory("gfColumnTooltipFormatterService", ["$interpolate", "$log", function($interpolate, $log) {
  var service = {};
  function escapeDotCharacters(obj) {
    var escaped = {};
    for (var prop in obj) {
      var dotIndex = prop.indexOf(".");
      if (dotIndex !== -1) {
        var leftPart = prop.substring(0, dotIndex), rightPart = prop.substring(dotIndex + 1);
        escaped[leftPart] = escaped[leftPart] || {};
        escaped[leftPart][rightPart] = obj[prop];
      } else {
        escaped[prop] = obj[prop];
      }
    }
    return escaped;
  }
  service.formatTitle = function(template, rowData) {
    var title = "";
    try {
      title = $interpolate(template)(escapeDotCharacters(rowData));
    } catch (e) {
      $log.error(e.name + ":" + e.message);
    }
    return title;
  };
  return service;
}]);
goog.provide("gridReport.services.TransposedGridCellFormatter");
goog.require("gridReport.services.HeatMapColors");
goog.require("gridReport.services.ColumnTooltipFormatterService");
goog.require("gridReport.model.ConditionalValueFormatting");
gridReport.Module.factory("gfTransposedGridCellFormatter", ["$translate", "gfColumnHeaderFormatterService", "gfNativeCurrencyService", "gfConfig", "gfHeatMapColors", "gfValueFormatting", "gfCellsFormattingFactory", "gfConditionalValueFormattingService", function($translate, gfColumnHeaderFormatterService, gfNativeCurrencyService, gfConfig, gfHeatMapColors, gfValueFormatting, gfCellsFormattingFactory, gfConditionalValueFormattingService) {
  var LABEL_NA = _.isString(gfConfig.notAvailableDataLabel) ? gfConfig.notAvailableDataLabel : "NA";
  var TITLE_NA = _.isString(gfConfig.notAvailableDataTitle) ? gfConfig.notAvailableDataTitle : $translate.instant("NOT_AVAILABLE");
  var LABEL_ERR = "ERR";
  var service = {};
  function getCellLoadingElement(addedClass, themeName) {
    return'<div class="' + toThemeProperty("throbber-mini", themeName) + " " + (addedClass || "") + '"></div>';
  }
  function fixHeaderFormatting(formattedValue) {
    var elements = [];
    $(formattedValue).each(function(el) {
      this.style["display"] = "inline-block";
      elements.push(this.outerHTML);
    });
    return elements.join(" ");
  }
  function toThemeProperty(className, themeName) {
    return className + " " + className + "-" + themeName;
  }
  function isAuditable(value, dataRow, column, propsId) {
    if (!dataRow) {
      return false;
    }
    var props = dataRow[propsId];
    if (!props || (!props[value] || !column.command.isAuditable())) {
      return false;
    }
    return props[value]["CTFlg"] == 1;
  }
  function cellsStatisticsRenderer(row, columnfield, value, cellsalign, data, outParam, statistics, options, settings, conditionalFormatting) {
    var rowKey = "", smartTooltip = "", appliedCssClasses = ["statistic-row"], statisticsName = "", formattedValue;
    if (conditionalFormatting != undefined) {
      appliedCssClasses.push(conditionalFormatting.compare(value));
    }
    if (data != undefined) {
      rowKey = ' row-key="' + encodeURI(data.rowKey) + '"';
      statisticsName = ' statistics="' + statistics.name + '"';
    }
    if (data == undefined || !data.item.canHaveStatistics()) {
      formattedValue = "";
    } else {
      if (_.isArray(value)) {
        formattedValue = service.getCellText(undefined, data, data.item, outParam, columnfield, undefined, options, settings);
        outParam.title = $translate.instant("VECTOR_NOT_SUPPORTED");
      } else {
        formattedValue = service.getCellText(value, data, data.item, outParam, columnfield, undefined, options, settings);
      }
    }
    smartTooltip = ' data-smart-tooltip = "' + (outParam.title || service.getCellText(undefined, data, data.item, outParam, columnfield, undefined, options, settings)) + '"';
    return "<div " + rowKey + statisticsName + ' class="' + appliedCssClasses.join(" ") + '"' + smartTooltip + ">" + getCellHtml(formattedValue, cellsalign, []) + "</div>";
  }
  function cellsTotalsRenderer(row, columnfield, value, cellsalign, data, outParam, statistics, options, settings, conditionalFormatting, statisticValues) {
    var rowKey = "", smartTooltip = "", appliedCssClasses = [], formattedValue;
    if (conditionalFormatting != undefined) {
      appliedCssClasses.push(conditionalFormatting.compare(value));
    }
    if (data != undefined && (data.item != undefined && (statisticValues != undefined && (statisticValues[data.item.id] != undefined && (_.isNumber(value) && !_.isNaN(value)))))) {
      appliedCssClasses.push(gfHeatMapColors.getHeatMapStyle(value, statisticValues[data.item.id].average, statisticValues[data.item.id].standardDeviation, data.item.command ? data.item.command.defaultOrder : undefined));
    }
    if (data == undefined) {
      formattedValue = "";
    } else {
      if (_.isArray(value)) {
        rowKey = ' row-key="' + encodeURI(data.rowKey) + '"';
        formattedValue = service.getCellText(undefined, data, data.item, outParam, columnfield, undefined, options, settings);
        outParam.title = $translate.instant("VECTOR_NOT_SUPPORTED");
      } else {
        if (_.isNumber(value)) {
          formattedValue = service.getCellText(value, data, data.item, outParam, columnfield, undefined, options, settings);
        } else {
          formattedValue = "";
        }
      }
    }
    smartTooltip = ' data-smart-tooltip = "' + (outParam.title || service.getCellText(undefined, data, data.item, outParam, columnfield, undefined, options, settings)) + '"';
    return "<div " + rowKey + ' class="' + appliedCssClasses.join(" ") + '"' + smartTooltip + ">" + getCellHtml(formattedValue, cellsalign, []) + "</div>";
  }
  function getPremiumDiscountStatistics(statistics) {
    return _.findWhere(statistics, {isPremium:true});
  }
  function getCellHtml(formattedValue, cellsalign, classes) {
    classes.push(cellsalign === "right" ? "jqx-cell-right-align" : "jqx-cell-left-align");
    var css = classes.length > 0 ? ' class="' + classes.join(" ") + '"' : "";
    return "<div" + css + ">" + formattedValue + "</div>";
  }
  service.getCellText = function(value, dataRow, column, outParam, columnfield, currencySymbol, options, settings) {
    var gridColumn = dataRow.item, formattedValue;
    if (column.datafield === options.firstColumnId) {
      var loadingElement = !options.dataManager.isRowDataLoaded(dataRow.rowKey) && options.isLoadingInColumnsEnabled ? getCellLoadingElement("gf-column-title-cell-loading", options.currentTheme.theme) : "";
      var headerFormatterOptions = {showStatistics:false};
      formattedValue = gridColumn != undefined ? gfColumnHeaderFormatterService.getFormattedHeader(gridColumn, options.globalParameters, headerFormatterOptions) : gfColumnHeaderFormatterService.getFormattedHeader(value);
      formattedValue = fixHeaderFormatting(formattedValue);
      outParam.title = gfColumnHeaderFormatterService.getColumnHeaderTooltip(gridColumn, options.globalParameters, headerFormatterOptions);
      var columnInfoButton = "", timeseriesChartButton = "", switchBarChartButton = "", additionalButtons = "", deleteColumnElement = "";
      if (gridColumn && (gridColumn.canDelete && options.canDeleteColumns)) {
        deleteColumnElement = '<div class="deleteColumnElement" data-smart-tooltip="' + $translate.instant("REMOVE_COLUMN") + '"></div>';
      }
      if (gridColumn && (gridColumn.command && (gridColumn.command.id != undefined && !gridColumn.command.isDataBlock()))) {
        columnInfoButton = '<div class="columnHeaderDescriptionElement columnHeaderOnHoverButton icon-support" data-smart-tooltip="' + $translate.instant("FIELD_DEFINITION") + '"></div>';
      }
      if (gridColumn && (gridColumn.canHaveBarChart() && settings.barChartEnabled)) {
        switchBarChartButton = '<div class="columnHeaderBarChartElement columnHeaderOnHoverButton" data-smart-tooltip="' + $translate.instant("TORNADO_CHART") + '"></div>';
      }
      if (gridColumn && (gridColumn.isTimeSeriesable() && settings.showTimeseriesChartButton)) {
        timeseriesChartButton = '<div class="columnHeaderTimeseriesChartElement columnHeaderOnHoverButton icon-chart-line-bar" data-smart-tooltip="' + $translate.instant("TIME_SERIES_CHART") + '"></div>';
      }
      if (columnInfoButton || switchBarChartButton) {
        additionalButtons = '<div class="row-column-name-additional-controls">' + timeseriesChartButton + columnInfoButton + switchBarChartButton + "</div>";
      }
      formattedValue = formattedValue + deleteColumnElement + additionalButtons + loadingElement;
    } else {
      formattedValue = gfValueFormatting.getFormattedValue(value, gridColumn.cellsFormat, currencySymbol);
      if (outParam && gridColumn) {
        if (LABEL_NA == formattedValue) {
          outParam.title = TITLE_NA;
        } else {
          if (gridColumn.cellsTooltipFormat && $.jqx.dataFormat.isNumber(value)) {
            outParam.title = $.jqx.dataFormat.formatnumber(value, gridColumn.cellsTooltipFormat);
          }
          if (gridColumn.tooltipField) {
            var fields = gridColumn.tooltipField.split(";");
            if (fields.length > 1) {
              outParam.title = _.map(fields, function(f) {
                return _.findWhere(options.getGridData(), {rowKey:f})[column.datafield];
              }).join(" - ");
            } else {
              outParam.title = _.findWhere(options.dataManager.getGridData(), {rowKey:gridColumn.tooltipField})[column.datafield];
            }
          }
        }
      }
      if (!options.dataManager.isRowDataLoaded(dataRow.rowKey) && LABEL_NA == formattedValue) {
        outParam.title = undefined;
        formattedValue = "";
      }
      if (!options.dataManager.isStatisticsDataLoaded(columnfield, dataRow.rowKey) || !(options.loadingRows.indexOf(columnfield) == -1)) {
        outParam.title = undefined;
        formattedValue = getCellLoadingElement(undefined, options.currentTheme.theme);
      }
    }
    return formattedValue;
  };
  service.renderTransposedPremiumDiscountCell = function(value, statisticValue, cellsFormat, cellsTooltipFormat, currencySymbol, isMfr, themeName, pdConditionalValueFormatting, rawValue) {
    rawValue = rawValue != undefined ? rawValue : "";
    var str = '<div class="jqx-cell-vector" style="text-align:right">', formattedTooltip, formattedValue;
    if (_.isNumber(value)) {
      formattedTooltip = gfValueFormatting.getFormattedValue(value, cellsTooltipFormat);
      formattedValue = gfValueFormatting.getFormattedValue(value, cellsFormat, currencySymbol);
      str += '<div class="jqx-cell-vector-item jqx-grid-cell-text" data-smart-tooltip="' + formattedTooltip + '" style="width:50%"' + rawValue + "><div>" + formattedValue + "</div></div>";
    } else {
      if (value == null || value === "") {
        str += '<div class="jqx-cell-vector-item jqx-grid-cell-text" data-smart-tooltip="' + TITLE_NA + '" style="width:50%"' + rawValue + "><div>" + LABEL_NA + "</div></div>";
      } else {
        formattedTooltip = gfValueFormatting.getFormattedValue(value, cellsTooltipFormat);
        formattedValue = gfValueFormatting.getFormattedValue(value, cellsFormat, currencySymbol);
        str += '<div class="jqx-cell-vector-item jqx-grid-cell-text" data-smart-tooltip="' + formattedTooltip + '" style="width:50%"' + rawValue + "><div>" + formattedValue + "</div></div>";
      }
    }
    if (isMfr || value != null && (value != "" && !_.isNumber(value))) {
      str += '<div class="jqx-cell-vector-item jqx-cell-vector-item-na" data-smart-tooltip="" style="width:50%"><div></div></div>';
    } else {
      if (_.isNumber(statisticValue)) {
        formattedTooltip = gfValueFormatting.getFormattedValue(statisticValue, cellsTooltipFormat);
        formattedValue = gfValueFormatting.getFormattedValue(statisticValue, gfCellsFormattingFactory.createPremiumDiscount(cellsFormat));
        str += '<div class="jqx-cell-vector-item jqx-pd-statistics-item ' + pdConditionalValueFormatting.compare(statisticValue) + '" data-smart-tooltip="' + formattedTooltip + '" style="width:50%"><div>' + formattedValue + "</div></div>";
      } else {
        if (statisticValue === undefined) {
          str += '<div style="width:50%; display:inline-block"><div class="' + toThemeProperty("throbber-mini", themeName) + '"></div></div>';
        } else {
          str += '<div class="jqx-cell-vector-item jqx-cell-vector-item-na" data-smart-tooltip="' + TITLE_NA + '" style="width:50%"><div>' + LABEL_NA + "</div></div>";
        }
      }
    }
    return str + "</div>";
  };
  service.renderTransposedCell = function(row, columnfield, value, columnproperties, data, column, outParam, options, selectedStatistcs, primaryRowKey, globalParameters, statisticValues, settings, isExcludedFromStatistics, highlightedRowKey, conditionalFormatting) {
    var rowKey = "", columnKey = "", smartTooltip = "", appliedCssClasses = [], currencySymbol, html, formattedValue, rawValue = "";
    if (columnfield != options.firstColumnId && (data && (data.item && !data.item.isValid()))) {
      value = null;
      formattedValue = outParam.title = LABEL_ERR;
    } else {
      var statistics = _.findWhere(selectedStatistcs, {name:columnfield});
      if (primaryRowKey && (data && primaryRowKey == columnfield)) {
        appliedCssClasses.push("primary-row");
      }
      if (highlightedRowKey && (data && highlightedRowKey == columnfield)) {
        appliedCssClasses.push("highlighted-row");
      }
      if (isExcludedFromStatistics) {
        appliedCssClasses.push("jqx-grid-cell-excluded-stat");
      }
      if (columnfield != options.firstColumnId && (data && (data.item && data.item.isColumnEmpty))) {
        value = null;
        formattedValue = outParam.title = "";
        if (statistics) {
          appliedCssClasses.push("statistic-row");
        }
      } else {
        if (statistics) {
          return cellsStatisticsRenderer(row, columnfield, value, columnproperties.cellsalign, data, outParam, statistics, options, settings, conditionalFormatting);
        }
        if (columnfield === options.totalsColumnId) {
          return cellsTotalsRenderer(row, columnfield, value, columnproperties.cellsalign, data, outParam, statistics, options, settings, conditionalFormatting, statisticValues);
        }
        if (settings.isAuditEnabled && isAuditable(value, data, data.item, columnfield + data.item.getPropsId())) {
          appliedCssClasses.push("gf-clickable-value");
          if (data) {
            rawValue = ' raw-value="' + data[columnfield] + '"';
          }
        }
        if (conditionalFormatting != undefined) {
          appliedCssClasses.push(conditionalFormatting.compare(value));
        }
        if (!isExcludedFromStatistics && (data != undefined && (data.item != undefined && (statisticValues != undefined && (statisticValues[data.item.id] != undefined && (_.isNumber(value) && !_.isNaN(value))))))) {
          appliedCssClasses.push(gfHeatMapColors.getHeatMapStyle(value, statisticValues[data.item.id].average, statisticValues[data.item.id].standardDeviation, data.item.command ? data.item.command.defaultOrder : undefined));
        }
        if (data != undefined) {
          rowKey = 'row-key="' + encodeURI(data.rowKey) + '"';
          columnKey = 'column-key="' + columnfield + '"';
          if (data.item.cellClass) {
            appliedCssClasses.push(column.cellClass);
          }
        }
        if (_.isArray(value) || (data.item.command.isDataBlock() || data.item.command.subCommands)) {
          formattedValue = service.getCellText(undefined, data, column, outParam, columnfield, undefined, options, settings);
          outParam.title = $translate.instant("VECTOR_NOT_SUPPORTED");
        } else {
          if (gfConfig.showCurrencySymbol !== false && (data && (data.item && (data.item.command && gfNativeCurrencyService.isNativeCurrencyUsed(data.item.command, globalParameters))))) {
            currencySymbol = gfNativeCurrencyService.getCurrencySymbol(data ? data.rowKey : undefined, columnfield);
          }
          if (primaryRowKey && (data && (primaryRowKey === columnfield && getPremiumDiscountStatistics(selectedStatistcs) != undefined))) {
            html = service.renderTransposedPremiumDiscountCell(value, data.pdStatValue, data.item.cellsFormat, gfCellsFormattingFactory.parse(data.item.cellsTooltipFormat), currencySymbol, data.item.command.isMultiFactorRank(), options.currentTheme.theme, gfConditionalValueFormattingService.createPremiumDiscount(data.item), rawValue);
            appliedCssClasses.push("jqx-grid-vector-row");
            outParam.hideCellTooltip = true;
          } else {
            formattedValue = service.getCellText(value, data, column, outParam, columnfield, currencySymbol, options, settings);
            if (data.item && (data.item.hasSubColumns() || (data.item.cellMouseEnterAction != undefined || data.item.cellMouseLeaveAction != undefined))) {
              formattedValue = '<span class="jqx-grid-cell-text"' + rawValue + ">" + formattedValue + "</span>";
            }
          }
        }
      }
    }
    var cssClasses = "";
    if (appliedCssClasses.length > 0) {
      cssClasses = 'class="' + appliedCssClasses.join(" ") + '"';
    }
    smartTooltip = ' data-smart-tooltip = "' + (outParam.title || service.getCellText(undefined, data, data.item, outParam, columnfield, undefined, options, settings)) + '"';
    return "<div " + rowKey + " " + columnKey + " " + cssClasses + smartTooltip + ">" + (html || getCellHtml(formattedValue, columnproperties.cellsalign, [])) + "</div>";
  };
  return service;
}]);
goog.provide("gridReport.model.ReportTemplate");
(function() {
  gridReport.model.ReportTemplate = function(options) {
    if (options) {
      gridReport.jsUtils.mergeProperties(this, options);
      if (options.hasOwnProperty("path")) {
        this.path = options.path;
        if (options.path != null) {
          var index = options.path.lastIndexOf("/");
          this.group = options.path.substr(index + 1);
        }
      }
      if (options.hasOwnProperty("creationDate")) {
        this.creationDate = new Date(options.creationDate);
      }
      if (options.hasOwnProperty("modificationDate")) {
        this.modificationDate = new Date(options.modificationDate);
      }
    }
  };
  gridReport.model.ReportTemplate.types = {global:"global", personal:"personal", newTemplate:"new", custom:"custom", shared:"shared"};
  gridReport.model.ReportTemplate.prototype.accessDate = null;
  gridReport.model.ReportTemplate.prototype.creationDate = null;
  gridReport.model.ReportTemplate.prototype.description = "";
  gridReport.model.ReportTemplate.prototype.author = null;
  gridReport.model.ReportTemplate.prototype.group = null;
  gridReport.model.ReportTemplate.prototype.name = "";
  gridReport.model.ReportTemplate.prototype.modificationDate = null;
  gridReport.model.ReportTemplate.prototype.type = gridReport.model.ReportTemplate.types.personal;
  gridReport.model.ReportTemplate.prototype.localizedName = null;
  gridReport.model.ReportTemplate.prototype.isGroupShared = false;
  gridReport.model.ReportTemplate.prototype.productMetadata = null;
  gridReport.model.ReportTemplate.prototype.getColumnsList = function() {
    var columns = [];
    try {
      var description = JSON.parse(this.getProductMetadataValue("description") || this.description);
      if (description && description.columns) {
        columns = _.pluck(description.columns, "header");
      }
    } catch (e) {
      if (this.description) {
        columns = this.description.split(", ");
      }
    }
    return columns;
  };
  gridReport.model.ReportTemplate.prototype.getIsObsolete = function() {
    var isObsolete = false;
    try {
      var description = JSON.parse(this.getProductMetadataValue("description") || this.description);
      if (!description || !description.columns) {
        isObsolete = true;
      }
    } catch (e) {
      isObsolete = true;
    }
    return isObsolete;
  };
  gridReport.model.ReportTemplate.prototype.getUniverseContext = function() {
    try {
      var description = JSON.parse(this.getProductMetadataValue("description") || this.description);
      if (description && description.universeContext) {
        return description.universeContext;
      }
    } catch (e) {
    }
    return scr.UniverseType.Public;
  };
  gridReport.model.ReportTemplate.prototype.isGlobal = function() {
    return this.type === gridReport.model.ReportTemplate.types.global;
  };
  gridReport.model.ReportTemplate.prototype.isPersonal = function() {
    return this.type === gridReport.model.ReportTemplate.types.personal;
  };
  gridReport.model.ReportTemplate.prototype.isShared = function() {
    return this.type === gridReport.model.ReportTemplate.types.shared;
  };
  gridReport.model.ReportTemplate.prototype.getProductMetadataValue = function(key) {
    var foundItem = _.find(this.productMetadata, function(item) {
      return item.Key === key;
    });
    return foundItem ? foundItem.Value : undefined;
  };
})();
goog.provide("gridReport.utils.ErrorHandler");
gridReport.Module.factory("gfErrorHandler", ["$translate", function($translate) {
  var service = {};
  service.getErrorMessage = function(data) {
    if (!_.isString(data) || data.substring(0, 14).toLowerCase() === "<!doctype html") {
      return $translate.instant("SERVICE_UNAVAILABLE");
    }
    return data;
  };
  service.handleErrorResponse = function(data, status, defaultMessage, failCallback) {
    if (failCallback) {
      failCallback({message:defaultMessage + " " + service.getErrorMessage(data), statusCode:status, data:data});
    }
  };
  return service;
}]);
goog.provide("gridReport.services.DapsService");
goog.require("gridReport.utils.ErrorHandler");
gridReport.Module.service("gfDapsService", ["$http", "gfConfig", "$translate", "gfErrorHandler", function($http, gfConfig, $translate, gfErrorHandler) {
  var invalidCharacters = gfConfig.templateNameInvalidCharacters || "{}/\\[];:$+#*?<>&%.";
  var templateNameMaxLength = gfConfig.reportTemplateNameMaxLength || 64;
  var service = {};
  service.REPORT_TEMPLATE_NAME_MAX_LENGTH = templateNameMaxLength;
  service.REPORT_TEMPLATE_NAME_MAX_INVALID_CHARACTERS = invalidCharacters;
  service.loadFile = function(request, successCallback, failCallback) {
    $http.get(gfConfig.host + "State/" + encodeURIComponent(request.folderName) + "/" + encodeURIComponent(request.fileName)).success(function(response) {
      if (response.Status && response.Status.Level == "ERROR") {
        (failCallback || angular.noop)({message:response.Status.Message});
        return;
      }
      (successCallback || angular.noop)(angular.fromJson(response.Content));
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_LOAD_TEMPLATE"), failCallback);
    });
  };
  service.loadFileSync = function(request) {
    var errorMsg = "";
    var response = null;
    $.ajax({url:gfConfig.host + "State/" + encodeURIComponent(request.folderName) + "/" + encodeURIComponent(request.fileName), success:function(result) {
      if (result.isOk == false) {
        errorMsg = $translate.instant("UNABLE_TO_LOAD_TEMPLATE");
        return;
      }
      if (result.Status && result.Status.Level == "ERROR") {
        errorMsg = result.Status.Message;
      }
      response = angular.fromJson(result.Content);
    }, async:false});
    if (errorMsg != "" || response == null) {
      throw errorMsg;
    }
    return response;
  };
  service.saveFile = function(request, successCallback, failCallback) {
    if (!request) {
      throw new Error("request should be provided.");
    }
    var url = gfConfig.host + "State/" + encodeURIComponent(request.folderName) + "/" + encodeURIComponent(request.fileName);
    var content = {Content:angular.toJson(request.state), Description:request.description || ""};
    if (!_.isEmpty(request.description)) {
      content.Metadata = [{Key:"description", Value:request.description}];
    }
    $http.post(url, content).success(function(response) {
      if (response && response.ErrorCode != 0) {
        gfErrorHandler.handleErrorResponse(response.Message, response.ErrorCode, $translate.instant("UNABLE_TO_SAVE_TEMPLATE"), failCallback);
      } else {
        (successCallback || angular.noop)(response);
      }
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_SAVE_TEMPLATE"), failCallback);
    });
  };
  service.listFiles = function(folderName, successCallback, failCallback) {
    $http.get(gfConfig.host + "Directory/" + encodeURIComponent(folderName)).success(function(response) {
      if (_.isString(response)) {
        gfErrorHandler.handleErrorResponse(response, undefined, $translate.instant("UNABLE_TO_LOAD_PERSONAL_TEMPLATES"), failCallback);
      } else {
        if (response.Files) {
          _.each(response.Files, function(file) {
            if (file.modificationDate) {
              file.modificationDate = new Date(file.modificationDate);
            }
            if (file.creationDate) {
              file.creationDate = new Date(file.creationDate);
            }
            if (file.accessDate) {
              file.accessDate = new Date(file.accessDate);
            }
          });
        }
        (successCallback || angular.noop)(response);
      }
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_LOAD_PERSONAL_TEMPLATES"), failCallback);
    });
  };
  service.deleteFile = function(request, successCallback, failCallback) {
    $http.post(gfConfig.host + "State/Delete/" + encodeURIComponent(request.folderName) + "/" + encodeURIComponent(request.fileName)).success(function(response) {
      (successCallback || angular.noop)(response);
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_DELETE_TEMPLATE"), failCallback);
    });
  };
  service.renameFile = function(request, successCallback, failCallback) {
    var body = {From:request.folderName + "/" + request.oldFileName, To:request.newFileName, Description:request.description};
    $http.post(gfConfig.host + "State/Rename", body).success(function(response) {
      (successCallback || angular.noop)(response);
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_RENAME_TEMPLATE"), failCallback);
    });
  };
  service.duplicateFile = function(request, successCallback, failCallback) {
    var from = encodeURIComponent(request.folderName) + "/" + encodeURIComponent(request.oldFileName);
    var to = encodeURIComponent(request.folderName) + "/" + encodeURIComponent(request.newFileName);
    $http.post(gfConfig.host + "State/Copy?from=" + from + "&to=" + to).success(function(response) {
      (successCallback || angular.noop)(response);
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_COPY_TEMPLATE"), failCallback);
    });
  };
  service.getNameValidationMessage = function(name) {
    if (!name || typeof name != "string") {
      return $translate.instant("NAME_IS_REQUIRED");
    } else {
      if (name.length > templateNameMaxLength) {
        return $translate.instant("MAX_LENGTH_EXCEEDED");
      }
    }
    var badChar = [];
    for (var i = 0;i < name.length;++i) {
      var ic = name.charAt(i);
      if (invalidCharacters.indexOf(ic) >= 0 && badChar.indexOf(ic) == -1) {
        badChar.push(ic);
      }
    }
    if (badChar.length == 0) {
      return "";
    }
    var r = $translate.instant("INVALID_CHARACTER");
    switch(badChar.length) {
      case 0:
        return "";
      case 1:
        break;
      default:
        r = r + "s";
        break;
    }
    return r + ": " + badChar.join(" ");
  };
  return service;
}]);
goog.provide("gridReport.services.SharedFormatsService");
goog.require("gridReport.utils.ErrorHandler");
gridReport.Module.service("gfSharedFormatsService", ["$http", "gfConfig", "gfErrorHandler", "$translate", function($http, gfConfig, gfErrorHandler, $translate) {
  var service = {};
  service.loadFile = function(request, successCallback, failCallback) {
    if (!request) {
      throw new Error("request should be provided");
    }
    $http.post(gfConfig.host + "State/Shared/" + encodeURI(request.fileName), {Path:request.path}).success(function(response) {
      if (response && response.Status) {
        if (response.Status.ErrorCode === 0) {
          (successCallback || angular.noop)(JSON.parse(response.Content));
        } else {
          gfErrorHandler.handleErrorResponse(response.Status.Message, response.Status.ErrorCode, $translate.instant("UNABLE_TO_LOAD_TEMPLATE"), failCallback);
        }
      } else {
        gfErrorHandler.handleErrorResponse(undefined, undefined, $translate.instant("UNABLE_TO_LOAD_TEMPLATE"), failCallback);
      }
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_LOAD_TEMPLATE"), failCallback);
    });
  };
  service.listFiles = function(folderName, successCallback, failCallback) {
    $http.get(gfConfig.host + "SharesDirectory").success(function(data) {
      if (_.isString(data)) {
        gfErrorHandler.handleErrorResponse(data, undefined, $translate.instant("UNABLE_TO_LOAD_SHARED_TEMPLATES"), failCallback);
      } else {
        (successCallback || angular.noop)({Files:data.Files});
      }
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_LOAD_SHARED_TEMPLATES"), failCallback);
    });
  };
  return service;
}]);
goog.provide("gridReport.services.GlobalFormatsService");
goog.require("gridReport.utils.ErrorHandler");
gridReport.Module.service("gfGlobalFormatsService", ["$http", "gfConfig", "$translate", "gfErrorHandler", function($http, gfConfig, $translate, gfErrorHandler) {
  var service = {};
  service.loadFile = function(request, successCallback, failCallback) {
    $http.get(gfConfig.host + "Shared/" + encodeURI(request.fileName)).success(function(response) {
      if (successCallback) {
        successCallback(response);
      }
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_LOAD_TEMPLATE"), failCallback);
    });
  };
  service.listFiles = function(folderName, successCallback, failCallback) {
    $http.get(gfConfig.host + "Shared").success(function(data) {
      if (_.isString(data)) {
        gfErrorHandler.handleErrorResponse(data, undefined, $translate.instant("UNABLE_TO_LOAD_GLOBAL_TEMPLATES"), failCallback);
      } else {
        if (successCallback) {
          successCallback({Files:data});
        }
      }
    }).error(function(data, status) {
      gfErrorHandler.handleErrorResponse(data, status, $translate.instant("UNABLE_TO_LOAD_GLOBAL_TEMPLATES"), failCallback);
    });
  };
  return service;
}]);
goog.provide("gridReport.services.FormatsService");
goog.require("gridReport.services.DapsService");
goog.require("gridReport.services.GlobalFormatsService");
goog.require("gridReport.services.SharedFormatsService");
goog.require("gridReport.model.ReportTemplate");
goog.require("gridReport.model.ErrorCodes");
gridReport.Module.service("gfFormatsService", ["$q", "gfGlobalFormatsService", "gfDapsService", "gfLogManager", "gfNotificationService", "gfEventsAggregator", "$translate", "gfSharedFormatsService", function($q, gfGlobalFormatsService, gfDapsService, gfLogManager, gfNotificationService, gfEventsAggregator, $translate, gfSharedFormatsService) {
  var GRID_TEMPLATES_FOLDER = "GridReportFormats";
  var service = {};
  service.loadFormats = function(callback) {
    var countOfRequestLeft = 3;
    var fails = [];
    var formats = {globalFormats:[], personalFormats:[], sharedFormats:[]};
    var handleResponse = function() {
      countOfRequestLeft--;
      if (countOfRequestLeft <= 0 && callback) {
        callback({formats:formats, fails:fails});
      }
    };
    var request = [{service:gfGlobalFormatsService, containerFunc:function(items) {
      formats.globalFormats = parseListOfFormats(items, gridReport.model.ReportTemplate.types.global);
    }, folderName:""}, {service:gfDapsService, containerFunc:function(items) {
      formats.personalFormats = parseListOfFormats(items, gridReport.model.ReportTemplate.types.personal);
    }, folderName:GRID_TEMPLATES_FOLDER}, {service:gfSharedFormatsService, containerFunc:function(items) {
      formats.sharedFormats = parseListOfFormats(items, gridReport.model.ReportTemplate.types.shared);
    }, folderName:""}];
    _.each(request, function(value) {
      value.service.listFiles(value.folderName, function(success) {
        value.containerFunc(success.Files);
        handleResponse();
      }, function(fail) {
        fails.push(fail);
        handleResponse();
      });
    });
  };
  service.deleteFormat = function(formatName) {
    var deffered = $q.defer();
    gfDapsService.deleteFile({folderName:GRID_TEMPLATES_FOLDER, fileName:formatName}, deffered.resolve, deffered.reject);
    return deffered.promise;
  };
  service.getPersonalFormats = function() {
    var deffered = $q.defer();
    gfDapsService.listFiles(GRID_TEMPLATES_FOLDER, function(success) {
      var successResponse = {files:parseListOfFormats(success.Files, gridReport.model.ReportTemplate.types.personal)};
      deffered.resolve(successResponse);
    }, deffered.reject);
    return deffered.promise;
  };
  service.renameFormat = function(name, newName, description) {
    var deffered = $q.defer();
    gfDapsService.renameFile({folderName:GRID_TEMPLATES_FOLDER, oldFileName:name, newFileName:newName, description:description}, deffered.resolve, deffered.reject);
    return deffered.promise;
  };
  service.loadTemplate = function(template) {
    if (!template) {
      throw new Error("template should be provided");
    }
    var deffered = $q.defer();
    var serviceDescription = getServiceDescription(template);
    serviceDescription.service.loadFile({folderName:serviceDescription.folder, fileName:template.name, path:template.path}, function(response) {
      deffered.resolve(response);
    }, function(fail) {
      gfLogManager.error(_.extend(fail, {errorCode:gridReport.model.ErrorCodes.FAILED_TO_LOAD_TEMPLATE}));
      deffered.reject(fail);
    });
    return deffered.promise;
  };
  service.saveTemplate = function(templateName, state, description) {
    var deffered = $q.defer();
    gfDapsService.saveFile({folderName:GRID_TEMPLATES_FOLDER, fileName:templateName, state:state, description:description}, function() {
      gfNotificationService.info($translate.instant("REPORT_TEMPLATE_SUCCESSFULLY_SAVED_INFO_MSG"));
      gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.formatSaved);
      gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
      deffered.resolve();
    }, function(fail) {
      gfLogManager.error(fail);
      deffered.reject(fail);
    });
    return deffered.promise;
  };
  function getServiceDescription(template) {
    switch(template.type) {
      case gridReport.model.ReportTemplate.types.global:
        return{service:gfGlobalFormatsService, folder:""};
      case gridReport.model.ReportTemplate.types.personal:
        return{service:gfDapsService, folder:GRID_TEMPLATES_FOLDER};
      case gridReport.model.ReportTemplate.types.shared:
        return{service:gfSharedFormatsService, folder:""};
      default:
        throw new Error("Unsupported template type: " + template.type);;
    }
  }
  function parseListOfFormats(list, templateType) {
    var result = [];
    _.each(list, function(l) {
      var parsedTemplate = new gridReport.model.ReportTemplate(l);
      var duplicate = _.find(result, function(item) {
        return parsedTemplate.name === item.name && (parsedTemplate.author.firstName === item.author.firstName && (parsedTemplate.author.lastName === item.author.lastName && parsedTemplate.creationDate.valueOf() === item.creationDate.valueOf()));
      });
      if (duplicate) {
        if (_.isArray(duplicate.path)) {
          duplicate.path.push(parsedTemplate.path);
          duplicate.group.push(parsedTemplate.group);
        } else {
          duplicate.path = [duplicate.path, parsedTemplate.path];
          duplicate.group = [duplicate.group, parsedTemplate.group];
        }
      } else {
        parsedTemplate.type = templateType;
        result.push(parsedTemplate);
      }
    });
    return result;
  }
  function getTemplateDescription(templateState) {
    var columns = [];
    if (templateState.gridState && templateState.gridState.columns) {
      for (var columnName in templateState.gridState.columns) {
        columns.push({header:templateState.gridState.columns[columnName].text});
      }
    }
    return JSON.stringify({columns:columns});
  }
  service.fixTemplate = function(template) {
    if (!template) {
      throw new Error("template should be provided");
    }
    var deffered = $q.defer();
    service.loadTemplate(template).then(function(templateState) {
      service.saveTemplate(template.name, templateState, getTemplateDescription(templateState)).then(function() {
        deffered.resolve();
      }, function(fail) {
        deffered.reject(fail);
      });
    }, function(fail) {
      deffered.reject(fail);
    });
    return deffered.promise;
  };
  return service;
}]);
goog.provide("gridReport.services.GridManagementService");
goog.require("gridReport.services.FormatsService");
goog.require("gridReport.services.StateProvideService");
gridReport.Module.factory("gfGridManagementService", ["gfGridStateService", "gfStateProviderService", "gfFormatsService", function(gfGridStateService, gfStateProviderService, gfFormatsService) {
  var callbacks = {};
  var service = {};
  service.toggleAllGroups = function(gridId, needExpand) {
    callCallbacks(gridId, service.toggleAllGroups, needExpand);
  };
  service.totalsRowVisible = function(gridId, needShow) {
    return callCallbackWithResults(gridId, service.totalsRowVisible, needShow);
  };
  service.getMaxRowsCount = function(gridId) {
    return callCallbackWithResults(gridId, service.getMaxRowsCount);
  };
  service.getPrimaryRowKey = function(gridId) {
    return callCallbackWithResults(gridId, service.getPrimaryRowKey);
  };
  service.getRowsCount = function(gridId) {
    return callCallbackWithResults(gridId, service.getRowsCount);
  };
  service.getRows = function(gridId) {
    return callCallbackWithResults(gridId, service.getRows);
  };
  service.getGridSourceData = function(gridId) {
    return callCallbackWithResults(gridId, service.getGridSourceData);
  };
  service.getVisibleIdentifiers = function(gridId) {
    return callCallbackWithResults(gridId, service.getVisibleIdentifiers);
  };
  service.applyColumnFilter = function(gridId, columnId, parentColumnId, columnFilter, vectorIndex) {
    return callCallbackWithResults(gridId, service.applyColumnFilter, columnId, parentColumnId, columnFilter, vectorIndex);
  };
  service.isTransposed = function(gridId) {
    return callCallbackWithResults(gridId, service.isTransposed);
  };
  service.isPrimaryRowFreezingEnabled = function(gridId) {
    return callCallbackWithResults(gridId, service.isPrimaryRowFreezingEnabled);
  };
  service.isPrimaryRowFreezed = function(gridId) {
    return callCallbackWithResults(gridId, service.isPrimaryRowFreezed);
  };
  service.freezePrimaryRow = function(gridId, value) {
    return callCallbackWithResults(gridId, service.freezePrimaryRow, value);
  };
  service.getRawData = function(geridId) {
    return callCallbackWithResults(geridId, service.getRawData);
  };
  service.getExpandCollapseState = function(gridId) {
    return callCallbackWithResults(gridId, service.getExpandCollapseState);
  };
  service.loadData = function(gridId, needReload) {
    callCallbacks(gridId, service.loadData, needReload);
  };
  service.abortDataLoading = function(gridId) {
    callCallbacks(gridId, service.abortDataLoading);
  };
  service.setUniverse = function(gridId, universe, universeType, universeContext) {
    callCallbacks(gridId, service.setUniverse, universe, universeType, universeContext);
  };
  service.getUniverse = function(gridId) {
    return callCallbackWithResults(gridId, service.getUniverse);
  };
  service.addIdentifiers = function(gridId, identifiers) {
    callCallbacks(gridId, service.addIdentifiers, identifiers);
  };
  service.removeIdentifiers = function(gridId, identifiers) {
    callCallbacks(gridId, service.removeIdentifiers, identifiers);
  };
  service.setGlobalParameters = function(gridId, globalParameters) {
    callCallbacks(gridId, service.setGlobalParameters, globalParameters);
  };
  service.getGlobalParameters = function(gridId) {
    return callCallbackWithResults(gridId, service.getGlobalParameters);
  };
  service.setCommands = function(gridId, commands) {
    callCallbacks(gridId, service.setCommands, commands);
  };
  service.setDefaultCommands = function(gridId) {
    callCallbacks(gridId, service.setDefaultCommands);
  };
  service.addCommand = function(gridId, command) {
    callCallbacks(gridId, service.addCommand, command);
  };
  service.addColumn = function(gridId, column, stateChangesCause) {
    callCallbacks(gridId, service.addColumn, column, stateChangesCause);
  };
  service.removeColumn = function(gridId, columnId, stateChangesCause) {
    callCallbacks(gridId, service.removeCommand, columnId, stateChangesCause);
  };
  service.setColumns = function(gridId, columns) {
    callCallbacks(gridId, service.setColumns, columns);
  };
  service.getColumns = function(gridId) {
    return callCallbackWithResults(gridId, service.getColumns);
  };
  service.getColumnById = function(gridId, columnId) {
    return callCallbackWithResults(gridId, service.getColumnById, columnId);
  };
  service.changeColumn = function(gridId, previousColumn, newColumn, stateChangesCause) {
    if (!gridId) {
      throw new Error("gridId should be provided");
    }
    if (!previousColumn) {
      throw new Error("previousColumn should be provided");
    }
    if (!newColumn) {
      throw new Error("newColumn should be provided");
    }
    callCallbacks(gridId, service.changeColumn, previousColumn, newColumn, stateChangesCause);
  };
  service.setGrouping = function(gridId, groups, isUserAction) {
    var groupingComands = _.map(groups, function(expression) {
      return new gridReport.model.Command({dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, expression:expression, name:expression, parameters:{isVisible:false}});
    });
    callCallbacks(gridId, service.setGroupingByCommands, groupingComands, isUserAction);
  };
  service.getGrouping = function(gridId) {
    return callCallbackWithResults(gridId, service.getGrouping);
  };
  service.setGroupingByCommands = function(gridId, groupingCommands, isUserAction) {
    callCallbacks(gridId, service.setGroupingByCommands, groupingCommands, isUserAction);
  };
  service.addByUserCommand = function(gridId, command) {
    callCallbacks(gridId, service.addByUserCommand, command);
  };
  service.removeCommand = function(gridId, commandExpression) {
    callCallbacks(gridId, service.removeCommand, commandExpression);
  };
  service.changeCommand = function(gridId, previousCommand, newCommand) {
    callCallbacks(gridId, service.changeCommand, previousCommand, newCommand);
  };
  service.insertCommand = function(gridId, afterCommand, newCommand, columnParams) {
    callCallbacks(gridId, service.insertCommand, afterCommand, newCommand, columnParams);
  };
  service.reorderColumns = function(gridId, columns) {
    callCallbacks(gridId, service.reorderColumns, columns);
  };
  service.restoreState = function(gridId, stateId) {
    gfStateProviderService.setStateId(gridId, stateId);
    callCallbacks(gridId, service.restoreState, stateId);
  };
  service.createNew = function(gridId, newStateId) {
    callCallbacks(gridId, service.createNew, newStateId);
  };
  service.showError = function(gridId, error, placement) {
    callCallbacks(gridId, service.showError, error, placement);
  };
  service.hideError = function(gridId) {
    callCallbacks(gridId, service.hideError);
  };
  service.startLoading = function(gridId, placement, reason) {
    callCallbacks(gridId, service.startLoading, placement, reason);
  };
  service.endLoading = function(gridId, placement, reason) {
    callCallbacks(gridId, service.endLoading, placement, reason);
  };
  service.enableGrid = function(gridId) {
    callCallbacks(gridId, service.enableGrid);
  };
  service.disableGrid = function(gridId) {
    callCallbacks(gridId, service.disableGrid);
  };
  service.enableGridHeader = function(gridId) {
    callCallbacks(gridId, service.enableGridHeader);
  };
  service.disableGridHeader = function(gridId) {
    callCallbacks(gridId, service.disableGridHeader);
  };
  service.enableGridRows = function(gridId) {
    callCallbacks(gridId, service.enableGridRows);
  };
  service.disableGridRows = function(gridId) {
    callCallbacks(gridId, service.disableGridRows);
  };
  service.recalculateStatistics = function(gridId) {
    callCallbacks(gridId, service.recalculateStatistics);
  };
  service.transpose = function(gridId) {
    callCallbacks(gridId, service.transpose);
  };
  service.setStateFromDAPS = function(gridId, stateType, stateName) {
    gfFormatsService.loadTemplate(new gridReport.model.ReportTemplate({name:stateName, type:stateType})).then(function(response) {
      setTimeout(function() {
        gfGridStateService.setState(gridId, response);
      });
    }, function() {
    });
  };
  service.getSelectedTemplate = function(gridId) {
    return callCallbackWithResults(gridId, service.getSelectedTemplate);
  };
  service.setSelectedTemplate = function(gridId, template) {
    callCallbacks(gridId, service.setSelectedTemplate, template);
  };
  service.setSelectedTemplateByName = function(gridId, templateName, templateType) {
    templateType = templateType || gridReport.model.ReportTemplate.types.personal;
    callCallbackWithResults(gridId, service.setSelectedTemplateByName, templateName, templateType);
  };
  service.setSelectedNewTemplate = function(gridId, needLoadData) {
    callCallbacks(gridId, service.setSelectedNewTemplate, needLoadData);
  };
  service.setSelectedCustomItem = function(gridId, item) {
    callCallbacks(gridId, service.setSelectedCustomItem, item);
  };
  service.setStatistics = function(gridId, statistics) {
    callCallbacks(gridId, service.setStatistics, statistics);
  };
  service.setTemplateManagerDialogClass = function(gridId, customClass) {
    callCallbacks(gridId, service.setTemplateManagerDialogClass, customClass);
  };
  service.getStatistics = function(gridId) {
    return callCallbackWithResults(gridId, service.getStatistics);
  };
  service.getIsTemplateExists = function(gridId, templateName, templateTpye) {
    return callCallbackWithResults(gridId, service.getIsTemplateExists, templateName, templateTpye);
  };
  service.getIsTemplateSaved = function(gridId) {
    return callCallbackWithResults(gridId, service.getIsTemplateSaved);
  };
  service.getIsTemplateChanged = function(gridId) {
    return callCallbackWithResults(gridId, service.getIsTemplateChanged);
  };
  service.getGridState = function(gridId) {
    return gfGridStateService.getState(gridId);
  };
  service.getGridDescription = function(gridId) {
    return gfGridStateService.getGridDescription(gridId);
  };
  service.getGridColumns = function(gridId) {
    return callCallbackWithResults(gridId, service.getGridColumns);
  };
  service.getAdvancedSortingState = function(gridInstanceId) {
    return callCallbackWithResults(gridInstanceId, service.getAdvancedSortingState);
  };
  service.getSortingFullState = function(gridInstanceId) {
    return callCallbackWithResults(gridInstanceId, service.getSortingFullState);
  };
  service.setSortingFullState = function(gridInstanceId, state) {
    return callCallbackWithResults(gridInstanceId, service.setSortingFullState, state);
  };
  service.setAdvancedSortingState = function(gridInstanceId, state) {
    return callCallbackWithResults(gridInstanceId, service.setAdvancedSortingState, state);
  };
  service.setGridState = function(gridId, state, callback) {
    gfGridStateService.setState(gridId, state, callback);
  };
  service.getComponentsState = function(gridId) {
    return gfStateProviderService.getAllComponentsState(gridId);
  };
  service.setComponentsState = function(gridId, state) {
    return gfStateProviderService.setAllComponentsState(gridId, state);
  };
  service.exportSelectedTemplate = function(gridId) {
    var selectedTemplate = service.getSelectedTemplate(gridId);
    if (!selectedTemplate) {
      return null;
    }
    return{name:selectedTemplate.name, description:service.getGridDescription(gridId), state:service.getGridState(gridId)};
  };
  service.importTemplate = function(gridId, templateData) {
    return callCallbackWithResults(gridId, service.importTemplate, templateData);
  };
  service.getGroupState = function(gridId) {
    return gfStateProviderService.getState(gridReport.services.StateProvideService.components.grouping, gridId);
  };
  service.setGroupState = function(gridId, state) {
    gfStateProviderService.setState(gridReport.services.StateProvideService.components.grouping, gridId, state);
  };
  service.getExclusionsState = function(gridId) {
    return gfStateProviderService.getState(gridReport.services.StateProvideService.components.exclusions, gridId);
  };
  service.setExclusionsState = function(gridId, state) {
    gfStateProviderService.setState(gridReport.services.StateProvideService.components.exclusions, gridId, state);
  };
  service.exportData = function(gridId) {
    return callCallbackWithResults(gridId, service.exportData);
  };
  service.getDataForExport = function(gridId, title, exportAll) {
    return callCallbackWithResults(gridId, service.getDataForExport, title, exportAll);
  };
  service.getLastError = function(gridId) {
    return callCallbackWithResults(gridId, service.getLastError);
  };
  service.scrollToColumn = function(gridId, gridColumnId) {
    callCallbacks(gridId, service.scrollToColumn, gridColumnId);
  };
  service.saveTemplate = function(gridId, templateName, successCallback, failCallback) {
    callCallbacks(gridId, service.saveTemplate, templateName, successCallback, failCallback);
  };
  service.saveTemplateAs = function(gridId, templateName, successCallback, failCallback) {
    callCallbacks(gridId, service.saveTemplateAs, templateName, successCallback, failCallback);
  };
  service.setTheme = function(gridId, theme) {
    callCallbacks(gridId, service.setTheme, theme);
  };
  service.getTheme = function(gridId) {
    return callCallbackWithResults(gridId, service.getTheme);
  };
  service.setSortDirection = function(gridId, gridColumnId, sortDirection) {
    callCallbacks(gridId, service.setSortDirection, gridColumnId, sortDirection);
  };
  service.heatMapState = function(gridId, heatMapState) {
    return callCallbackWithResults(gridId, service.heatMapState, heatMapState);
  };
  service.columnSelectionState = function(gridId, enabled) {
    return callCallbackWithResults(gridId, service.columnSelectionState, enabled);
  };
  service.exportToExcel = function(gridId, exportSettings) {
    callCallbacks(gridId, service.exportToExcel, exportSettings);
  };
  service.exportToExcelAsFormula = function(gridId, exportSettings) {
    callCallbacks(gridId, service.exportToExcelAsFormula, exportSettings);
  };
  service.beginUpdate = function(gridId) {
    callCallbacks(gridId, service.beginUpdate);
  };
  service.endUpdate = function(gridId, postponeRendering) {
    callCallbacks(gridId, service.endUpdate, postponeRendering);
  };
  service.scrollToTicker = function(gridId, rowKey) {
    callCallbacks(gridId, service.scrollToTicker, rowKey);
  };
  service.scrollToGroup = function(gridId, path) {
    callCallbacks(gridId, service.scrollToGroup, path);
  };
  service.removeAllFilters = function(gridId) {
    callCallbacks(gridId, service.removeAllFilters);
  };
  service.selectColumn = function(gridId, columnId, color) {
    callCallbacks(gridId, service.selectColumn, columnId, color);
  };
  service.print = function(gridId, exportSettings) {
    return callCallbackWithResults(gridId, service.print, exportSettings);
  };
  service.exportToHtml = function(gridId, exportSettings) {
    return callCallbackWithResults(gridId, service.exportToHtml, exportSettings);
  };
  service.exportToPdf = function(gridId, exportSettings) {
    return callCallbackWithResults(gridId, service.exportToPdf, exportSettings);
  };
  service.hasMfrColumn = function(gridId) {
    return callCallbackWithResults(gridId, service.hasMfrColumn);
  };
  service.getExcelAsFormulaExportData = function(gridId, exportSettings) {
    return callCallbackWithResults(gridId, service.getExcelAsFormulaExportData, exportSettings);
  };
  service.registerCallback = function(gridId, serviceAction, callback) {
    if (!callbacks.hasOwnProperty(gridId)) {
      callbacks[gridId] = {};
    }
    var actionKey = serviceAction.toString();
    var callbackKey = callback.toString();
    if (!callbacks[gridId].hasOwnProperty(actionKey)) {
      callbacks[gridId][actionKey] = {};
    }
    callbacks[gridId][actionKey][callbackKey] = callback;
  };
  service.registerCallbacks = function(gridId, callbacksArray) {
    _.each(callbacksArray, function(pair) {
      service.registerCallback(gridId, pair[0], pair[1]);
    });
  };
  service.unregisterCallbacks = function(gridId, callbacksArray) {
    _.each(callbacksArray, function(pair) {
      service.unregisterCallback(gridId, pair[0], pair[1]);
    });
  };
  service.unregisterCallback = function(gridId, serviceAction, callback) {
    var actionKey = serviceAction.toString();
    if (!callbacks.hasOwnProperty(gridId) || !callbacks[gridId].hasOwnProperty(actionKey)) {
      return;
    }
    var callbackKey = callback.toString();
    delete callbacks[gridId][actionKey][callbackKey];
  };
  function callCallbacks(gridId, serviceAction) {
    var actionKey = serviceAction.toString();
    if (!callbacks.hasOwnProperty(gridId) || !callbacks[gridId].hasOwnProperty(actionKey)) {
      return;
    }
    var agrsToPass = Array.prototype.slice.call(arguments);
    agrsToPass.splice(0, 2);
    for (var callbackKey in callbacks[gridId][actionKey]) {
      if (!callbacks[gridId][actionKey].hasOwnProperty(callbackKey)) {
        continue;
      }
      callbacks[gridId][actionKey][callbackKey].apply(this, agrsToPass);
    }
  }
  function callCallbackWithResults(gridId, serviceAction) {
    var actionKey = serviceAction.toString();
    if (!callbacks.hasOwnProperty(gridId) || !callbacks[gridId].hasOwnProperty(actionKey)) {
      return undefined;
    }
    var agrsToPass = Array.prototype.slice.call(arguments);
    agrsToPass.splice(0, 2);
    var actionCallbacks = _.values(callbacks[gridId][actionKey]);
    if (actionCallbacks.length > 1) {
      throw new Error("There cannot be more than 1 callback for actions with result");
    }
    if (actionCallbacks.length > 0) {
      return actionCallbacks[0].apply(this, agrsToPass);
    }
    return undefined;
  }
  return service;
}]);
goog.provide("gridReport.services.TotalsCalculationService");
goog.require("gridReport.services.GridManagementService");
gridReport.Module.factory("gfTotalsCalculation", ["gfStatisticsExclusions", function(gfStatisticsExclusions) {
  function createService(gridInstanceId) {
    var calculatedTotals = {};
    function buildGroupSubItems(group) {
      var result = [];
      if (group.subItems != undefined && group.subItems.length > 0) {
        var visibleRows = _.filter(group.subItems, function(row) {
          return row.isRowHidden != true;
        });
        result = result.concat(visibleRows);
      } else {
        if (group.subGroups != undefined) {
          for (var i = 0;i < group.subGroups.length;i++) {
            result = result.concat(buildGroupSubItems(group.subGroups[i]));
          }
        }
      }
      return result;
    }
    function getFilteredSubitems(subItems, primaryRowKey) {
      return _.filter(subItems, function(row) {
        return row && (row.rowKey != primaryRowKey && (row.isRowHidden != true && !gfStatisticsExclusions.instance(gridInstanceId).isHidden(row.rowKey)));
      });
    }
    function internalCalcSectorTotal(sectorId, columnId, sectorTotals, calculation, primaryRowKey) {
      if (calculation.isServerSide) {
        if (!_.isNull(sectorTotals.serverTotals) && (!_.isUndefined(sectorTotals.serverTotals) && sectorTotals.serverTotals.hasOwnProperty(columnId))) {
          return sectorTotals.serverTotals[columnId];
        }
        return null;
      } else {
        var group = sectorTotals.group || sectorTotals.data.group, subItems = getGroupItems(group, sectorId);
        return(calculation.func || angular.noop)(columnId, getFilteredSubitems(subItems, primaryRowKey));
      }
    }
    function calculateTotals(sectorId, columnId, sectorTotals, calculation, primaryRowKey) {
      if (_.isUndefined(calculation) || _.isNull(calculation)) {
        return null;
      }
      var group = sectorTotals.group || sectorTotals.data.group;
      var aggregatedSectorId = buildSectorId(group);
      var totalValue = getTotals(aggregatedSectorId, columnId, calculation.name);
      if (totalValue != null) {
        return totalValue;
      }
      totalValue = internalCalcSectorTotal(aggregatedSectorId, columnId, sectorTotals, calculation, primaryRowKey);
      setTotalValueToCache(aggregatedSectorId, columnId, calculation.name, totalValue);
      return totalValue;
    }
    function getGroupItems(group, sectorId) {
      if (sectorId === undefined) {
        sectorId = buildSectorId(group);
      }
      var subItems = getSectorItems(sectorId);
      if (subItems === null) {
        subItems = buildGroupSubItems(group);
        setSectorItems(sectorId, subItems);
      }
      return subItems;
    }
    function buildSectorId(group) {
      var parent = group.parent != null ? group.parent : group.parentItem;
      if (parent == null) {
        return group.group;
      } else {
        return group.group + "|" + buildSectorId(parent);
      }
    }
    function setTotalValueToCache(sectorId, columnId, calcName, value) {
      if (_.isUndefined(calculatedTotals[sectorId])) {
        calculatedTotals[sectorId] = {};
      }
      if (_.isUndefined(calculatedTotals[sectorId][columnId])) {
        calculatedTotals[sectorId][columnId] = {};
      }
      calculatedTotals[sectorId][columnId][calcName] = value;
    }
    function clearTotalCache() {
      calculatedTotals = {};
    }
    function getSectorItems(sectorId) {
      var sectorTotals = calculatedTotals[sectorId];
      if (_.isUndefined(sectorTotals)) {
        return null;
      }
      return sectorTotals.items;
    }
    function setSectorItems(sectorId, items) {
      if (calculatedTotals[sectorId] == undefined) {
        calculatedTotals[sectorId] = {};
      }
      calculatedTotals[sectorId].items = items;
    }
    function getTotals(sectorId, columnId, calculationName) {
      var sectorTotals = calculatedTotals[sectorId];
      if (_.isUndefined(sectorTotals)) {
        return null;
      }
      var sectoColumnTotals = sectorTotals[columnId];
      if (_.isUndefined(sectoColumnTotals)) {
        return null;
      }
      var calculationTotals = sectoColumnTotals[calculationName];
      if (_.isUndefined(calculationTotals)) {
        return null;
      }
      return calculationTotals;
    }
    function updateItemsValues(colId, colData) {
      for (var sectorId in calculatedTotals) {
        if (calculatedTotals[sectorId].items === undefined || calculatedTotals[sectorId].items.length === 0) {
          continue;
        }
        calculatedTotals[sectorId][colId] = undefined;
        for (var i = 0;i < calculatedTotals[sectorId].items.length;i++) {
          var row = colData[calculatedTotals[sectorId].items[i].rowKey];
          if (row) {
            calculatedTotals[sectorId].items[i][colId] = row.value;
          }
        }
      }
    }
    var service = {};
    service.clearCache = clearTotalCache;
    service.clearColumnCache = function(colId) {
      for (var sectorId in calculatedTotals) {
        calculatedTotals[sectorId][colId] = undefined;
      }
    };
    service.calculateTotals = calculateTotals;
    service.getGroupItems = getGroupItems;
    service.updateItemsValues = updateItemsValues;
    return service;
  }
  var services = {};
  return{instance:function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService(gridInstanceId);
    }
    return services[gridInstanceId];
  }, clear:function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  }};
}]);
goog.provide("gridReport.services.NativeCurrencyService");
gridReport.Module.factory("gfNativeCurrencyService", ["gfConfig", "gfCurrencySymbols", function(gfConfig, gfCurrencySymbols) {
  var cache = {}, service = {};
  service.setCurrencyCode = function(columnId, identifier, currencyCode) {
    cache[columnId] = cache[columnId] || {};
    cache[columnId][identifier] = currencyCode;
  };
  service.getCurrencyCode = function(columnId, identifier) {
    return cache[columnId] != null ? cache[columnId][identifier] : undefined;
  };
  service.getCurrencySymbol = function(columnId, identifier) {
    var currencyCode = service.getCurrencyCode(columnId, identifier);
    return gfCurrencySymbols[currencyCode] || currencyCode;
  };
  service.isNativeCurrencyUsed = function(command, globalParameters) {
    if (command.returnType != scr.DataTypes.Money) {
      return false;
    }
    var curnParam = _.findWhere(command.parameters, {id:scr.output.ParameterIds.Curn});
    if (curnParam && curnParam.value === "Native") {
      return true;
    } else {
      if (curnParam && curnParam.value) {
        return false;
      } else {
        var globalCurnParam = _.findWhere(globalParameters, {name:"curn"});
        if (!globalCurnParam || globalCurnParam.value === "Native") {
          return true;
        }
      }
    }
    return false;
  };
  service.getIdentifierCurrencyCode = function(command, identifier, globalParameters) {
    if (service.isNativeCurrencyUsed(command, globalParameters)) {
      return service.getCurrencyCode(command.expression, identifier);
    }
    var curnParam = _.findWhere(command.parameters, {id:scr.output.ParameterIds.Curn});
    if (curnParam && curnParam.value) {
      return curnParam.value;
    }
    var globalCurnParam = _.findWhere(globalParameters, {name:"curn"});
    if (globalCurnParam) {
      return globalCurnParam.value;
    }
    return "";
  };
  return service;
}]);
goog.provide("gridReport.services.ValueFormattingService");
goog.require("gridReport.model.NegativeNumberFormats");
gridReport.Module.factory("gfValueFormatting", ["gfConfig", function(gfConfig) {
  var LABEL_NA = _.isString(gfConfig.notAvailableDataLabel) ? gfConfig.notAvailableDataLabel : "NA";
  function applyNegativeNumberFormat(formattedValue, negativeNumberFormat, hasMinusSymbol) {
    switch(negativeNumberFormat) {
      case gridReport.model.NegativeNumberFormats.Default:
      ;
      case gridReport.model.NegativeNumberFormats.ColoredDefault:
        return hasMinusSymbol ? "-" + formattedValue : formattedValue;
      case gridReport.model.NegativeNumberFormats.Colored:
        return formattedValue;
      case gridReport.model.NegativeNumberFormats.Brackets:
      ;
      case gridReport.model.NegativeNumberFormats.ColoredBrackets:
        return "(" + formattedValue + ")";
      default:
        throw "Bad negative number format specifier: " + negativeNumberFormat;;
    }
  }
  var service = {};
  service.formatNumber = function(value, cellsFormat, currencySymbol) {
    var suffix, prefix;
    if (!cellsFormat) {
      return value;
    }
    if (!_.isNumber(value) || (_.isNaN(value) || !_.isFinite(value))) {
      return LABEL_NA;
    }
    if (cellsFormat.percentage) {
      value = value * 100;
      suffix = cellsFormat.percentSymbol;
    }
    if (currencySymbol) {
      prefix = currencySymbol + " ";
    }
    if (_.isNumber(value)) {
      var negative = value < 0;
      var output = value + "";
      var decimalseparator = cellsFormat.decimalSeparator ? cellsFormat.decimalSeparator : ".";
      var decimalindex;
      var decimalDigits = cellsFormat.decimalDigits >= 0 ? cellsFormat.decimalDigits : 0;
      if (_.isNumber(decimalDigits)) {
        var decimalplaces = decimalDigits;
        var decimal = Math.pow(10, decimalplaces);
        output = (value * decimal).toFixed(0) / decimal + "";
        decimalindex = output.lastIndexOf(".");
        if (decimalplaces > 0) {
          if (decimalindex < 0) {
            output += decimalseparator;
            decimalindex = output.length - 1;
          } else {
            if (decimalseparator !== ".") {
              output = output.replace(".", decimalseparator);
            }
          }
          while (output.length - 1 - decimalindex < decimalplaces) {
            output += "0";
          }
        }
      }
      if (cellsFormat.thousandsSeparator) {
        var groupseparator = cellsFormat.thousandsSeparator;
        decimalindex = output.lastIndexOf(decimalseparator);
        decimalindex = decimalindex > -1 ? decimalindex : output.length;
        var newoutput = output.substring(decimalindex);
        var nCount = -1;
        for (var i = decimalindex;i > 0;i--) {
          nCount++;
          if (nCount % 3 === 0 && (i !== decimalindex && (!negative || i > 1))) {
            newoutput = groupseparator + newoutput;
          }
          newoutput = output.charAt(i - 1) + newoutput;
        }
        output = newoutput;
      }
      var hasMinusSymbol = false;
      if (output.charAt(0) === "-") {
        hasMinusSymbol = true;
        output = output.substring(1);
      }
      output = prefix ? prefix + output : output;
      output = suffix ? output + suffix : output;
      if (negative) {
        output = applyNegativeNumberFormat(output, cellsFormat.negativeNumberFormat || gridReport.model.NegativeNumberFormats.Default, hasMinusSymbol);
      }
      return output;
    } else {
      return LABEL_NA;
    }
  };
  service.formatDate = function(value, cellsFormat) {
    if (_.isDate(value)) {
      return value.toString(cellsFormat.dateFormat);
    } else {
      return LABEL_NA;
    }
  };
  service.getFormattedValue = function(value, cellsFormat, currencySymbol) {
    if (cellsFormat) {
      if (_.isNumber(value)) {
        return service.formatNumber(value, cellsFormat, currencySymbol);
      } else {
        if (_.isDate(value)) {
          return service.formatDate(value, cellsFormat);
        }
      }
    }
    return!_.isUndefined(value) && (!_.isNull(value) && value !== "") ? value.toString() : LABEL_NA;
  };
  service.getDefaultDigitCount = function(returnType) {
    switch(returnType) {
      case scr.DataTypes.Score:
      ;
      case scr.DataTypes.Integer:
        return 0;
      case scr.DataTypes.Percentage:
        return 1;
      case scr.DataTypes.Money:
      ;
      case scr.DataTypes.Float:
        return 2;
      default:
        return-1;
    }
  };
  return service;
}]);
goog.provide("gridReport.adapters.JqxGridAutoWidthHelper");
goog.require("gridReport.services.ValueFormattingService");
goog.require("gridReport.services.NativeCurrencyService");
gridReport.Module.factory("gfJqxGridAutoWidthHelper", ["$window", "$translate", "gfConfig", "gfValueFormatting", "gfNativeCurrencyService", function($window, $translate, gfConfig, gfValueFormatting, gfNativeCurrencyService) {
  var service = {};
  function getCellsCount(subColumns, rows) {
    var firstRow = _.first(rows), cellsCount = 0;
    _.each(subColumns, function(subColumn) {
      if (firstRow && (firstRow[subColumn.id] && _.isArray(firstRow[subColumn.id]))) {
        var isTimeSeries = subColumn.command && subColumn.command.isTimeSeries();
        if (!isTimeSeries && firstRow[subColumn.id].length > gfConfig.MaxColumnsPerVector) {
          cellsCount++;
        } else {
          cellsCount += firstRow[subColumn.id].length;
        }
      } else {
        cellsCount++;
      }
    });
    return cellsCount;
  }
  service.getColumnWidth = function(grid, column, globalParameters, rows) {
    if (!grid) {
      throw new Error("grid should be provided");
    }
    if (!column) {
      throw new Error("column should be provided");
    }
    var maxCellValueString = "", maxArrayLenght, formattedValue, subColumnIndex, subColumnsCount, currencySymbol, showCurrency, subColumn, rowIndex, rowsCount, cellValue, row, rowKey, subColumns, isTimeSeries, vectorIndex, vectorsCount;
    subColumns = column.gridColumns ? _.toArray(column.gridColumns) : [column];
    maxArrayLenght = getCellsCount(subColumns, rows);
    for (subColumnIndex = 0, subColumnsCount = subColumns.length;subColumnIndex < subColumnsCount;subColumnIndex++) {
      subColumn = subColumns[subColumnIndex];
      showCurrency = gfConfig.showCurrencySymbol !== false && (subColumn.command && gfNativeCurrencyService.isNativeCurrencyUsed(subColumn.command, globalParameters));
      isTimeSeries = subColumn.command && subColumn.command.isTimeSeries();
      for (rowIndex = 0, rowsCount = rows.length;rowIndex < rowsCount;rowIndex++) {
        row = rows[rowIndex];
        cellValue = row[subColumn.id];
        rowKey = row.rowKey;
        if (row.isRowEmpty) {
          continue;
        }
        currencySymbol = showCurrency ? gfNativeCurrencyService.getCurrencySymbol(subColumn.id, rowKey) : undefined;
        if (_.isArray(cellValue)) {
          if (!isTimeSeries && cellValue.length > gfConfig.MaxColumnsPerVector) {
            maxCellValueString = $translate.instant("MULTIPLE_VALUES");
          } else {
            for (vectorIndex = 0, vectorsCount = cellValue.length;vectorIndex < vectorsCount;vectorIndex++) {
              formattedValue = gfValueFormatting.getFormattedValue(cellValue[subColumnIndex], subColumn.cellsFormat, currencySymbol);
              if (maxCellValueString.length < formattedValue.length) {
                maxCellValueString = formattedValue;
              }
            }
          }
        } else {
          formattedValue = gfValueFormatting.getFormattedValue(cellValue, subColumn.cellsFormat, currencySymbol);
          if (maxCellValueString.length < formattedValue.length) {
            maxCellValueString = formattedValue;
          }
        }
      }
    }
    return grid.jqxGrid("getCellTextWidth", maxCellValueString.substring(0, 40).trim()) * maxArrayLenght;
  };
  return service;
}]);
goog.provide("gridReport.adapters.JqxTransposedGridDataExporter");
goog.require("gridReport.services.HeatMapColors");
goog.require("gridReport.model.CellsFormat");
gridReport.Module.factory("gfJqxTransposedGridDataExporter", ["$translate", "gfNativeCurrencyService", "gfHeatMapColors", "gfColumnHeaderFormatterService", "gfStatisticsExclusions", "$q", "gfConfig", "gfCellsFormattingFactory", "gfConditionalValueFormattingService", function($translate, gfNativeCurrencyService, gfHeatMapColors, gfColumnHeaderFormatterService, gfStatisticsExclusions, $q, gfConfig, gfCellsFormattingFactory, gfConditionalValueFormattingService) {
  function createService(gridInstanceId) {
    function createColumn(statistics, statisticsLineName, columns, sortIndexCounter) {
      var column = {id:statistics.name, isStatisticsColumn:true, rows:[{text:""}, {text:statisticsLineName}], sortIndex:sortIndexCounter, width:80};
      columns.push(column);
    }
    var service = {};
    service.getExportData = function(jqxGridAdapter, grid, exportData, title, exportAll, options) {
      var columns = [], sortIndexCounter = 0, mainColumn = {id:"mainColumn", width:grid.jqxGrid("getcolumn", jqxGridAdapter.getFirstColumnId()).width, rows:[{text:""}], sortIndex:sortIndexCounter++}, selectedIndexes = !exportAll ? jqxGridAdapter.getSelectedRowIndexes() : undefined, primaryColumn = exportData.primaryColumn, premiumDiscount = exportData.premiumDiscount, globalParameters = jqxGridAdapter.getGlobalParameters(), gridColumns = jqxGridAdapter.getGridColumns(), premiumDiscountColumn, statisticValues = 
      jqxGridAdapter.getStatisticValues(), gridSettings = jqxGridAdapter.getSettings(), isHeatMapEnabled = jqxGridAdapter.getIsHeatMapEnabled();
      for (var i = 1, length = exportData.columnsData.length;i < length;i++) {
        mainColumn.rows.push({text:gridColumns[i].header});
      }
      columns.push(mainColumn);
      if (jqxGridAdapter.getShowTotalsRow()) {
        columns.push({id:"TOTALS_COLUMN", isTotalsColumn:true, rows:[{text:""}, {text:jqxGridAdapter.getTotalsLabel()}], width:80, sortIndex:sortIndexCounter++});
      }
      var promises = [];
      angular.forEach(jqxGridAdapter.getStatistics(), function(item) {
        var statisticsLineName = item.getStatisticsLineName();
        if (_.isString(statisticsLineName)) {
          createColumn(item, statisticsLineName, columns, sortIndexCounter);
        } else {
          if (_.isObject(statisticsLineName) && statisticsLineName.then) {
            (function(sortIndexCounter) {
              var promise = statisticsLineName.then(function(statisticsName) {
                createColumn(item, statisticsName, columns, sortIndexCounter);
              });
              promises.push(promise);
            })(sortIndexCounter);
          }
        }
        sortIndexCounter++;
      });
      return $q.all(promises).then(function() {
        angular.forEach(jqxGridAdapter.getIdentifiers(), function(value, index) {
          var currentColumn;
          if (exportAll || _.contains(selectedIndexes, index + 1)) {
            currentColumn = {id:value, width:grid.jqxGrid("getcolumn", value).width, rowKey:value, rows:[], sortIndex:sortIndexCounter, useCellShading:true, transposed:true, isExcludedFromStatistics:gfStatisticsExclusions.instance(gridInstanceId).isHidden(value)};
            sortIndexCounter += 1;
            angular.forEach(exportData.columnsData, function(columnRow) {
              currentColumn.rows.push({text:columnRow[value]});
            });
            columns.push(currentColumn);
          }
        });
        if (premiumDiscount) {
          premiumDiscountColumn = _.find(columns, {id:primaryColumn});
          if (premiumDiscountColumn) {
            var pdText = $translate.instant("PREMIUM_DISCOUNT_TITLE", {statisticsName:premiumDiscount.displayText});
            premiumDiscountColumn.premiumDiscount = {id:"pdStatValue", name:premiumDiscount.name, text:pdText, rows:[{text:""}, {text:pdText}]};
          }
        }
        angular.forEach(exportData.rowsData, function(row) {
          var column = row.item;
          row.mainColumn = gfColumnHeaderFormatterService.getExportHeader(column, globalParameters, {showStatistics:false});
          row.valid = column.isValid();
          row.valueFormatting = {cellsFormat:column.cellsFormat, isDate:column.isDate(), isNumber:column.isNumber()};
          if (premiumDiscountColumn) {
            var cellsFormat = gfCellsFormattingFactory.createPremiumDiscount(column.cellsFormat);
            var conditionalValueFormatting = gfConditionalValueFormattingService.createPremiumDiscount(column);
            row.pdValueFormatting = {cellsFormat:cellsFormat, isDate:column.isDate(), isNumber:column.isNumber()};
            row.pdGetFontColor = function(value) {
              return conditionalValueFormatting.compare(value, options);
            };
          }
          if (column.command && column.command.isMultiFactorRank()) {
            row.pdStatValue = undefined;
          }
          if (gfConfig.showCurrencySymbol !== false && (column.isValid() && gfNativeCurrencyService.isNativeCurrencyUsed(column.command, globalParameters))) {
            row.getCurrencySymbol = function(rowKey) {
              return gfNativeCurrencyService.getCurrencySymbol(column.id, rowKey);
            };
          }
          if (statisticValues && (statisticValues[column.id] && column.isValid())) {
            row.getCellShadingColor = function(value) {
              if (_.isNumber(value)) {
                return gfHeatMapColors.getHeatMapColor(value, statisticValues[column.id].average, statisticValues[column.id].standardDeviation, column.command ? column.command.defaultOrder : undefined, options);
              } else {
                return undefined;
              }
            };
          }
          if (column.conditionalValueFormatting && (gridSettings.enableConditionalValueFormatting && (!isHeatMapEnabled && column.isValid()))) {
            row.getFontColor = function(value) {
              return column.conditionalValueFormatting.compare(value, options);
            };
          }
          row.getIsExcludedFromStatistics = function(rowKey) {
            return gfStatisticsExclusions.instance(gridInstanceId).isHidden(rowKey);
          };
        });
        var primaryColumnParams = undefined;
        if (primaryColumn) {
          primaryColumnParams = {primaryColumnKey:primaryColumn};
        }
        return $q.when({transposed:true, columns:columns, rows:exportData.rowsData, title:title, headerRowsCount:exportData.columnsData.length, primaryColumnParams:primaryColumnParams});
      });
    };
    return service;
  }
  var services = {};
  return{instance:function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService(gridInstanceId);
    }
    return services[gridInstanceId];
  }, clear:function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  }};
}]);
goog.provide("gridReport.adapters.JqxGridStatisticsRenderer");
gridReport.Module.factory("gfJqxGridStatisticsRenderer", ["$timeout", "gfStatisticsCalculation", "$q", function($timeout, gfStatisticsCalculation, $q) {
  function statistcsRenderer(params) {
    var cachedHtml_ = {};
    var grid = params.grid;
    function getFirstColumnId() {
      return params.getFirstColumnId();
    }
    function getColumn(id) {
      return params.getColumn(id);
    }
    function hasStatistics(colId) {
      return params.hasStatistics(colId);
    }
    function hasData() {
      return params.hasData();
    }
    function hasColumnData(colId) {
      return params.hasColumnData(colId);
    }
    function getFilteredGridData() {
      return params.getFilteredGridData();
    }
    function toThemeProperty(cellClass) {
      return params.toThemeProperty(cellClass);
    }
    function getIsLoadingVisible() {
      return params.getIsLoadingVisible();
    }
    function wrapGetStatisticsLineName(statistics) {
      var statisticsLineName = statistics.getStatisticsLineName();
      if (_.isString(statisticsLineName)) {
        return $q.when(statisticsLineName);
      } else {
        if (statisticsLineName != null && statisticsLineName.then != null) {
          return statisticsLineName;
        } else {
          return $q.when();
        }
      }
    }
    function wrapValue(value) {
      return $q.when(value);
    }
    function getStatisticsValue(datafield, statistics) {
      var column = getColumn(datafield);
      if (column === undefined || column === null) {
        return{value:undefined};
      }
      var result = {};
      if (column.id === getFirstColumnId()) {
        result.promise = wrapGetStatisticsLineName(statistics);
      } else {
        if (hasStatistics(column.id) && hasData()) {
          if (column.isMultiColumn()) {
            var data = _.map(getFilteredGridData(), function(dataRow) {
              return dataRow[column.id];
            });
            var promises = [];
            _.each(column.gridColumns, function(c) {
              promises.push((c.canHaveStatistics() ? gfStatisticsCalculation.calculateStatistics(c.id, data, statistics) : wrapValue(null)).then(function(value) {
                return{colId:c.id, value:value};
              }));
            });
            result.promise = $q.all(promises).then(function(values) {
              return _.reduce(values, function(memo, val) {
                memo[val.colId] = val.value;
                return memo;
              }, {});
            });
          } else {
            result.promise = gfStatisticsCalculation.calculateStatistics(column.id, getFilteredGridData(), statistics);
          }
        }
      }
      return result;
    }
    function getFirstRowCell(col, showAddRowControl) {
      var cell = "";
      if (showAddRowControl) {
        cell = '<div class="' + toThemeProperty("jqx-add-row-cell") + (col.datafield == getFirstColumnId() ? " " + toThemeProperty("jqx-add-row-ctrl-cell") : "") + '">';
        cell += "</div>";
      }
      return cell;
    }
    function getBoundData(value, colId) {
      if (value === null) {
        var boundvalue = {};
        boundvalue[colId] = null;
        return boundvalue;
      }
      return undefined;
    }
    function renderCell(column, value, index, statisticName, renderNull, element, gridElement) {
      if (!value && !renderNull) {
        return;
      }
      var jqxColumns = grid.jqxGrid("columns");
      if (jqxColumns == undefined) {
        return;
      }
      var colRecord = _.findWhere(jqxColumns.records, {datafield:column.datafield});
      if (colRecord == undefined) {
        return;
      }
      var statisticsCellElement = element.find(".jqx-statistic-" + index);
      if (statisticsCellElement.length == 0) {
        return;
      }
      statisticsCellElement.html("");
      grid.jqxGrid("customRenderCell", gridElement, colRecord, {uniqueid:statisticName, bounddata:getBoundData(value, column.datafield)}, value == null ? "" : value, statisticsCellElement[0], undefined, gridReport.model.CellTypes.StatisticCell);
    }
    function renderEmptyAggregates(element, col, showAddRowControl, selectedStatistics) {
      var statisticsTheme = toThemeProperty("jqx-statistic-cell");
      var htmlStr = '<div class="jqx-widget-content jqx-widget-content-nova" style="float: left; width: 100%; height: 100%;">' + (showAddRowControl ? '<div class="jqx-add-row-cell"></div>' : "");
      var defaultHtmlStr = '<div class="' + statisticsTheme + '"></div>';
      for (var i = 0, n = selectedStatistics.length;i < n;i++) {
        htmlStr += defaultHtmlStr;
      }
      return htmlStr + "</div>";
    }
    this.render = function(gridElement, selectedStatistics, isStatisticsEmpty, showAddRowControl, addRowBuilder, col, element) {
      element.attr("data-statistics-column", col.datafield);
      if (cachedHtml_[col.datafield]) {
        return cachedHtml_[col.datafield];
      }
      if (isStatisticsEmpty || (!hasData() || !hasColumnData(col.datafield))) {
        return renderEmptyAggregates(element, col, showAddRowControl, selectedStatistics);
      }
      var i;
      var cellsHtmlStr = getFirstRowCell(col, showAddRowControl, addRowBuilder);
      for (i = 0;i < selectedStatistics.length;i++) {
        var cellContent = hasStatistics(col.datafield) ? '<div class="' + toThemeProperty("throbber-mini") + '"></div>' : "";
        cellsHtmlStr = cellsHtmlStr + ('<div class="jqx-statistic-' + i + " " + toThemeProperty("jqx-statistic-cell") + '" >' + cellContent + "</div>");
      }
      var elementHtml = '<div class="jqx-widget-content jqx-widget-content-nova" style="float: left; width: 100%; height: 100%;">' + cellsHtmlStr + "</div>";
      element.html(elementHtml);
      for (i = 0;i < selectedStatistics.length;i++) {
        var calcResult = getStatisticsValue(col.datafield, selectedStatistics[i]);
        if (calcResult.value) {
          renderCell(col, calcResult.value, i, selectedStatistics[i].name, false, element, gridElement);
        }
        if (!getIsLoadingVisible() && calcResult.promise) {
          var execPromise = function(statisticIndex) {
            calcResult.promise.then(function(value) {
              var element = $(gridElement.element).find('[data-statistics-column="' + col.datafield + '"]');
              renderCell(col, value, statisticIndex, selectedStatistics[statisticIndex].name, true, element, gridElement);
              cachedHtml_[col.datafield] = element.html();
            }, function(reason) {
              if (reason != "failed") {
                return;
              }
              var element = $(gridElement.element).find('[data-statistics-column="' + col.datafield + '"]');
              renderCell(col, null, statisticIndex, selectedStatistics[statisticIndex].name, true, element, gridElement);
              cachedHtml_[col.datafield] = element.html();
            });
          };
          execPromise(i);
        }
      }
      if (selectedStatistics.length > 0) {
        $timeout(angular.noop);
      }
      return elementHtml;
    };
    this.clearCache = function() {
      cachedHtml_ = {};
    };
    this.clearColumnCache = function(colId) {
      cachedHtml_[colId] = undefined;
      gfStatisticsCalculation.clearColumnCache(colId);
    };
  }
  return statistcsRenderer;
}]);
goog.provide("gridReport.services.SmoothColumnDraggingService");
gridReport.Module.factory("gfSmoothColumnDraggingService", ["$timeout", "$window", function($timeout, $window) {
  function createService() {
    var grid, clientPosition = {}, setTimeoutPromise, columnDragging_ = false;
    function onMouseDown() {
      if (grid.jqxGrid("dragmousedown")) {
        columnDragging_ = true;
      }
    }
    var delta_ = 100, defaultScrollValue_ = 10;
    function onMouseMove(event) {
      var dragCoord, xOffset, yOffset;
      if (!columnDragging_) {
        return;
      }
      dragCoord = grid.jqxGrid("dragmousedown");
      if (dragCoord) {
        xOffset = Math.abs(event.clientX - (dragCoord.left - $($window).scrollLeft()));
        yOffset = Math.abs(event.clientY - (dragCoord.top - $($window).scrollTop()));
        if (!setTimeoutPromise && (xOffset > 3 || yOffset > 3)) {
          setTimeoutPromise = $timeout(calc, 50);
        }
      }
      clientPosition.clientX = event.clientX;
      clientPosition.clientY = event.clientY;
    }
    function calc() {
      if (!columnDragging_) {
        return;
      }
      var pinnedColsWidth = 0, scrollValue, gridWidth = grid.width(), windowWidth = $($window).width(), windowOffset = $($window).scrollLeft(), gridCoord = grid.coord(), columns = grid.jqxGrid("columns").records, position = grid.jqxGrid("scrollposition"), hScrollMax = 0;
      _.each(columns, function(col) {
        if (col.pinned) {
          pinnedColsWidth += col.width;
        }
      });
      _.each(columns, function(col) {
        if (!col.hidden) {
          hScrollMax += col.width;
        }
      });
      if (Math.abs(windowWidth - clientPosition.clientX) < delta_ && position.left + gridWidth < hScrollMax) {
        scrollValue = hScrollMax - position.left - gridWidth < defaultScrollValue_ ? hScrollMax - position.left - gridWidth : defaultScrollValue_;
        grid.jqxGrid("scrolloffset", position.top, position.left + scrollValue);
        _.each(grid.jqxGrid("columnsbounds"), function(column) {
          column.left -= scrollValue;
        });
        if (grid.jqxGrid("columnsdropline")) {
          grid.jqxGrid("_handlereordercolumnsdroplines", clientPosition.clientX + windowOffset);
        }
      } else {
        if (windowOffset + clientPosition.clientX - pinnedColsWidth - gridCoord.left < delta_ && position.left > 0) {
          scrollValue = position.left < defaultScrollValue_ ? position.left : defaultScrollValue_;
          grid.jqxGrid("scrolloffset", position.top, position.left - scrollValue);
          _.each(grid.jqxGrid("columnsbounds"), function(column) {
            column.left += scrollValue;
          });
          if (grid.jqxGrid("columnsdropline")) {
            grid.jqxGrid("_handlereordercolumnsdroplines", clientPosition.clientX + windowOffset);
          }
        }
      }
      setTimeoutPromise = $timeout(calc, 50);
    }
    function onMouseUp() {
      columnDragging_ = false;
      $timeout.cancel(setTimeoutPromise);
      setTimeoutPromise = null;
    }
    var service = {};
    service.bind = function(gridElement) {
      if (!gridElement || !angular.isElement(gridElement)) {
        return;
      }
      service.unbind();
      grid = gridElement;
      grid.on("mousedown.drag", onMouseDown);
      $(document).on("mousemove.drag", onMouseMove);
      $(document).on("mouseup", onMouseUp);
    };
    service.unbind = function() {
      if (grid) {
        grid.off("mousedown.drag", onMouseDown);
        $(document).off("mousemove.drag", onMouseMove);
        $(document).off("mouseup", onMouseUp);
      }
    };
    return service;
  }
  var services = {};
  return{instance:function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService();
    }
    return services[gridInstanceId];
  }, clear:function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  }};
}]);
goog.provide("gridReport.adapters.JqxGridDataExporter");
goog.require("gridReport.services.HeatMapColors");
goog.require("gridReport.model.CellsFormat");
gridReport.Module.factory("gfJqxGridDataExporter", ["gfTotalsCalculation", "gfStatisticsCalculation", "gfColumnHeaderFormatterService", "$translate", "gfNativeCurrencyService", "gfHeatMapColors", "gfStatisticsExclusions", "$q", "gfConfig", "gfCellsFormattingFactory", "gfConditionalValueFormattingService", function(gfTotalsCalculation, gfStatisticsCalculation, gfColumnHeaderFormatterService, $translate, gfNativeCurrencyService, gfHeatMapColors, gfStatisticsExclusions, $q, gfConfig, gfCellsFormattingFactory, 
gfConditionalValueFormattingService) {
  function createService(gridInstanceId) {
    function getFilterData(data) {
      return{group:{group:data.group.group, parent:data.group.parentItem, subItems:data.group.subItems, subGroups:data.group.subGroups}, serverTotals:data.serverTotals};
    }
    function fillRowColumnValues(jqxGridAdapter, title, data, row, gridColumns) {
      var setTotalValue = function(column) {
        if (column.selectedTotalsCalculation && (!column.selectedTotalsCalculation.isNone && jqxGridAdapter.isCalculationDataLoaded(column.id))) {
          row[column.id] = gfTotalsCalculation.instance(gridInstanceId).calculateTotals(title, column.id, getFilterData(data), column.selectedTotalsCalculation, jqxGridAdapter.getPrimaryRow());
        }
      };
      _.forEach(gridColumns, function(column) {
        if (column.isMultiColumn()) {
          _.each(column.gridColumns, setTotalValue);
        } else {
          setTotalValue(column);
        }
      });
    }
    function isRowOrSubrowSelected(internalRow, selectedIndexes, isFiltersApplied) {
      if (internalRow.subItems && internalRow.subItems.length != 0) {
        return _.any(internalRow.subItems, function(subItem) {
          return isRowOrSubrowSelected(subItem, selectedIndexes, isFiltersApplied);
        });
      } else {
        if (internalRow.subGroups && internalRow.subGroups.length != 0) {
          return _.any(internalRow.subGroups, function(subGroup) {
            return isRowOrSubrowSelected(subGroup, selectedIndexes, isFiltersApplied);
          });
        } else {
          return _.contains(selectedIndexes, isFiltersApplied ? internalRow.dataindex : internalRow.boundindex);
        }
      }
    }
    function checkRowVisibility(jqxGridAdapter, row) {
      var isGroupExpanded = jqxGridAdapter.getIsGroupExpanded();
      while (row != undefined) {
        if (!isGroupExpanded[generateUniqueId(row)]) {
          return false;
        }
        row = row.parentItem;
      }
      return true;
    }
    function generateUniqueId(item) {
      var result = item.group;
      while (item.parentItem) {
        result = item.parentItem.group + "#" + result;
        item = item.parentItem;
      }
      return result;
    }
    function processInternalRow(jqxGridAdapter, internalRow, rows, indexesToExport, isFiltersApplied, gridColumns) {
      if (indexesToExport != undefined && !isRowOrSubrowSelected(internalRow, indexesToExport, isFiltersApplied)) {
        return;
      }
      var row;
      if (internalRow.subItems) {
        var isGroupExpanded = jqxGridAdapter.getIsGroupExpanded();
        row = {level:internalRow.level, hasSubItems:true, isGroupExpanded:isGroupExpanded[generateUniqueId(internalRow)] || false, isRowVisible:checkRowVisibility(jqxGridAdapter, internalRow.parentItem), useCellShading:true, useBarChart:true, isGroupRow:true};
        var sectorTotals = jqxGridAdapter.buildSectorLevelValues(jqxGridAdapter.getGridColumns(), internalRow, internalRow.group || "NA");
        row[jqxGridAdapter.getFirstColumnId()] = sectorTotals.sectorName;
        sectorTotals.data.serverTotals = sectorTotals.serverTotals;
        fillRowColumnValues(jqxGridAdapter, sectorTotals.sectorName, sectorTotals.data, row, gridColumns);
        rows.push(row);
      } else {
        row = _.extend(internalRow, {isRowVisible:checkRowVisibility(jqxGridAdapter, internalRow.parentItem), useCellShading:true, useBarChart:true});
        rows.push(row);
      }
    }
    function processStatistics(jqxGridAdapter, statistics, rows) {
      var promises = [];
      _.forEach(statistics, function(s) {
        var statisticsRow = {hasSubItems:false, isRowVisible:true, useCellShading:false, useBarChart:false, isStatisticsRow:true}, statisticsLineName = s.getStatisticsLineName();
        if (_.isString(statisticsLineName)) {
          fillStatisticsRow(jqxGridAdapter, statisticsRow, s, statisticsLineName, rows);
        } else {
          if (_.isObject(statisticsLineName) && statisticsLineName.then) {
            var promise = statisticsLineName.then(function(statisticsLineName) {
              fillStatisticsRow(jqxGridAdapter, statisticsRow, s, statisticsLineName, rows);
            });
            promises.push(promise);
          }
        }
      });
      return $q.all(promises);
    }
    function fillStatisticsRow(jqxGridAdapter, statisticsRow, s, statisticsLineName, rows) {
      statisticsRow[jqxGridAdapter.getFirstColumnId()] = statisticsLineName;
      _.forEach(jqxGridAdapter.getGridColumns(), function(column) {
        if (jqxGridAdapter.hasStatistics(column)) {
          statisticsRow[column.id] = gfStatisticsCalculation.getCachedValue(s.name, column.id);
          if (column.isMultiColumn()) {
            _.each(column.gridColumns, function(subColumn) {
              statisticsRow[subColumn.id] = gfStatisticsCalculation.getCachedValue(s.name, subColumn.id);
            });
          }
        }
      });
      rows.push(statisticsRow);
    }
    function getPremiumDiscountStatisticValue(column, primaryRow, statisticsName) {
      var primaryRowValue = primaryRow ? primaryRow[column.id] : null;
      var value = gfStatisticsCalculation.getPremiumDiscountCachedValue(column, statisticsName, primaryRowValue);
      if (column.command && (column.command.isMultiFactorRank() || column.command.isFactorRank())) {
        if (_.isArray(value)) {
          value = value.length > 0 ? [value[0], undefined] : value;
        } else {
          value = undefined;
        }
      }
      return value;
    }
    function fillSubColumns(params, column, globalParameters, headerFormatterOptions, rows) {
      if (column.command == undefined) {
        return;
      }
      if (column.command.isVector()) {
        params.subColumns = column.getPeriods();
        params.showSubColumnsRow = true;
      } else {
        var headers, headerIndex = 0;
        if (column.command.isFactorRank()) {
          params.subColumns = [];
          params.showSubColumnsRow = true;
          headers = _.map(column.getFactors(), function(h) {
            return $translate.instant(h);
          });
          _.each(column.gridColumns, function(subColumn) {
            params.subColumns.push({header:headers[headerIndex++], valueFormatting:{cellsFormat:subColumn.cellsFormat, isDate:subColumn.isDate(), isNumber:subColumn.isNumber()}});
          });
        } else {
          if (column.command.isMultiSelect()) {
            params.subColumns = [];
            params.showSubColumnsRow = true;
            headers = _.map(column.getMultiSelections(), function(text) {
              return text;
            });
            _.each(column.gridColumns, function(subColumn) {
              params.subColumns.push({header:headers[headerIndex++], valueFormatting:{cellsFormat:subColumn.cellsFormat, isDate:subColumn.isDate(), isNumber:subColumn.isNumber()}});
            });
          } else {
            if (rows.length > 0) {
              var row = _.find(rows, function(r) {
                return r.hasSubItems != true;
              });
              if (row != undefined) {
                var value = row[column.id];
                if (value != undefined && (_.isArray(value) && !_.isEmpty(value))) {
                  params.subColumns = [];
                  for (var i = 0;i < value.length;i++) {
                    params.subColumns.push("");
                  }
                }
              }
            }
          }
        }
      }
    }
    function getColumnParams(column, headerFormatterOptions, globalParameters, statisticValues, minMaxColumnsValues, rows, gridSettings, isHeatMapEnabled, options) {
      var getCurrencySymbolAction = null;
      if (gfConfig.showCurrencySymbol !== false && gfNativeCurrencyService.isNativeCurrencyUsed(column.command, globalParameters)) {
        getCurrencySymbolAction = function(rowKey) {
          return gfNativeCurrencyService.getCurrencySymbol(column.id, rowKey);
        };
      }
      var getCellShadingColorAction = null;
      if (statisticValues && (statisticValues[column.id] && (column.isValid() && !column.isBarChartEnabled))) {
        getCellShadingColorAction = function(val, index) {
          if (_.isNumber(val)) {
            return gfHeatMapColors.getHeatMapColor(val, statisticValues[column.id].average, statisticValues[column.id].standardDeviation, column.command ? column.command.defaultOrder : undefined, options);
          }
          if (_.isArray(val) && _.isNumber(val[index])) {
            var defaultOrder, subColumn;
            if (column.isComposeToVector === true && !_.isEmpty(column.gridColumns)) {
              subColumn = _.values(column.gridColumns)[index];
              defaultOrder = subColumn.command ? subColumn.command.defaultOrder : undefined;
            } else {
              defaultOrder = column.command ? column.command.defaultOrder : undefined;
            }
            return gfHeatMapColors.getHeatMapColor(val[index], statisticValues[column.id][index].average, statisticValues[column.id][index].standardDeviation, defaultOrder, options);
          } else {
            return undefined;
          }
        };
      }
      var getFontColorAction = null;
      if (column.conditionalValueFormatting && (gridSettings.enableConditionalValueFormatting && (!isHeatMapEnabled && column.isValid()))) {
        getFontColorAction = function(val) {
          return column.conditionalValueFormatting.compare(val, options);
        };
      }
      var getExcludedFromStatisticsAction = function(rowKey) {
        return gfStatisticsExclusions.instance(gridInstanceId).isHidden(rowKey);
      };
      var params = {id:column.id, hidden:column.hidden, width:column.width, selectedTotalsCalculation:column.selectedTotalsCalculation, pinned:column.pinned, valueFormatting:{cellsFormat:column.cellsFormat, isDate:column.isDate(), isNumber:column.isNumber()}, getCurrencySymbol:getCurrencySymbolAction, getCellShadingColor:getCellShadingColorAction, getIsExcludedFromStatistics:getExcludedFromStatisticsAction, getFontColor:getFontColorAction, valid:column.isValid(), isBarChartEnabled:column.isBarChartEnabled, 
      doNotShowPremiumDiscount:column.doNotShowPremiumDiscount, minMaxColumnValues:minMaxColumnsValues[column.id], columnSpan:column.columnSpan};
      if (column.selectedTotalsCalculation) {
        params.totalCalculation = column.selectedTotalsCalculation.name;
      }
      params.title = gfColumnHeaderFormatterService.getExportHeader(column, globalParameters, headerFormatterOptions);
      params.formattedHeader = gfColumnHeaderFormatterService.getFormattedHeader(column, globalParameters, headerFormatterOptions);
      if (column.isMultiColumn()) {
        params.subColumns = [];
        params.isDataBlock = true;
        params.showDataBlockRow = true;
        var numOfSubColumns = _.toArray(column.gridColumns).length;
        _.each(column.gridColumns, function(c) {
          var subColParams = getColumnParams(c, headerFormatterOptions, globalParameters, statisticValues, minMaxColumnsValues, rows, gridSettings, isHeatMapEnabled, options);
          subColParams.header = subColParams.title;
          subColParams.width = column.width / numOfSubColumns;
          if (_.any(subColParams.subColumns, function(clmn) {
            return clmn.showSubColumnsRow;
          })) {
            subColParams.showSubColumnsRow = true;
          }
          params.subColumns.push(subColParams);
        });
      } else {
        fillSubColumns(params, column, globalParameters, headerFormatterOptions, rows);
      }
      return params;
    }
    function getEmptyValue(value) {
      if (_.isArray(value)) {
        return _.map(value, function() {
          return null;
        });
      } else {
        return null;
      }
    }
    var service = {};
    service.getExportData = function(jqxGridAdapter, grid, gridData, title, exportAll, options) {
      var rows = [], selectedIndexes = !exportAll ? grid.jqxGrid("selectedrowindexes") : undefined, internalRows = grid.jqxGrid("dataview").loadedrecords, columnParams = [], showTotalsRow = jqxGridAdapter.getShowTotalsRow(), primaryRowKey = jqxGridAdapter.getPrimaryRow(), gridSettings = jqxGridAdapter.getSettings(), isHeatMapEnabled = jqxGridAdapter.getIsHeatMapEnabled(), gridColumns = jqxGridAdapter.getGridColumns();
      if (showTotalsRow) {
        gfTotalsCalculation.instance(gridInstanceId).clearCache();
        var totalsRow = {hasSubItems:true, isGroupExpanded:true, isRowVisible:true, useCellShading:true, useBarChart:false, isTotalRow:true};
        totalsRow[jqxGridAdapter.getFirstColumnId()] = jqxGridAdapter.getTotalsLabel();
        fillRowColumnValues(jqxGridAdapter, "Totals", {group:{subItems:gridData, group:"Totals"}, serverTotals:gridData.serverTotals}, totalsRow, gridColumns);
        rows.push(totalsRow);
      }
      if (internalRows && internalRows.length != 0) {
        var isFiltersApplied = grid.jqxGrid("getfilterinformation").length > 0;
        var columns = _.chain(gridColumns).map(function(c) {
          return c.isMultiColumn() ? _.toArray(c.gridColumns) : [c];
        }).reduce(function(m, c) {
          return m.concat(c);
        }, []).value();
        _.forEach(internalRows, function(internalRow) {
          processInternalRow(jqxGridAdapter, internalRow, rows, selectedIndexes, isFiltersApplied, columns);
        });
      } else {
        if (exportAll) {
          $.merge(rows, gridData);
        } else {
          _.forEach(selectedIndexes, function(rowIndex) {
            rows.push(grid.jqxGrid("getrowdata", rowIndex));
          });
        }
      }
      return processStatistics(jqxGridAdapter, jqxGridAdapter.getStatistics(), rows).then(function() {
        var headerFormatterOptions = {showStatistics:showTotalsRow || !_.isEmpty(jqxGridAdapter.getGroupping())};
        var globalParameters = jqxGridAdapter.getGlobalParameters();
        var statisticValues = jqxGridAdapter.getStatisticValues();
        var minMaxColumnsValues = jqxGridAdapter.getMinMaxColumnsValues();
        _.forEach(gridColumns, function(column) {
          columnParams.push(getColumnParams(column, headerFormatterOptions, globalParameters, statisticValues, minMaxColumnsValues, rows, gridSettings, isHeatMapEnabled, options));
        });
        var primaryRowParams = null;
        if (primaryRowKey) {
          var primaryStatistics = _.findWhere(jqxGridAdapter.getStatistics(), {isPremium:true});
          if (!primaryStatistics) {
            primaryRowParams = {primaryRowKey:primaryRowKey};
          } else {
            primaryRowParams = {primaryRowKey:primaryRowKey, displayText:$translate.instant("PREMIUM_DISCOUNT_TITLE", {statisticsName:primaryStatistics.name}), premiumDiscountStatistics:primaryStatistics, columns:{}};
            var primaryRow = _.findWhere(gridData, {rowKey:primaryRowKey});
            _.forEach(gridColumns, function(column) {
              if (jqxGridAdapter.hasStatistics(column)) {
                if (column.isMultiColumn()) {
                  _.each(column.gridColumns, function(subColumn) {
                    var value = getPremiumDiscountStatisticValue(subColumn, primaryRow, primaryRowParams.premiumDiscountStatistics.name);
                    var cellsFormat = gfCellsFormattingFactory.createPremiumDiscount(subColumn.cellsFormat);
                    var conditionalValueFormatting = gfConditionalValueFormattingService.createPremiumDiscount(subColumn);
                    primaryRowParams.columns[subColumn.id] = {value:value, getFontColor:function(value) {
                      return conditionalValueFormatting ? conditionalValueFormatting.compare(value, options) : undefined;
                    }, valueFormatting:{cellsFormat:cellsFormat, isDate:subColumn.isDate(), isNumber:subColumn.isNumber()}};
                  });
                } else {
                  var value = getPremiumDiscountStatisticValue(column, primaryRow, primaryRowParams.premiumDiscountStatistics.name);
                  var cellsFormat = gfCellsFormattingFactory.createPremiumDiscount(column.cellsFormat);
                  var conditionalValueFormatting = gfConditionalValueFormattingService.createPremiumDiscount(column);
                  primaryRowParams.columns[column.id] = {value:value, getFontColor:function(value) {
                    return conditionalValueFormatting.compare(value, options);
                  }, valueFormatting:{cellsFormat:cellsFormat, isDate:column.isDate(), isNumber:column.isNumber()}};
                }
              } else {
                if (column.id === "rowKey") {
                  primaryRowParams.columns[column.id] = {value:primaryRowParams.displayText, valueFormatting:{}};
                } else {
                  primaryRowParams.columns[column.id] = {value:getEmptyValue(primaryRow[column.id]), valueFormatting:{}};
                }
              }
            });
          }
        }
        return $q.when({transposed:false, rows:rows, primaryRowParams:primaryRowParams, exportParams:{columnParams:columnParams, title:title}});
      });
    };
    return service;
  }
  var services = {};
  return{instance:function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService(gridInstanceId);
    }
    return services[gridInstanceId];
  }, clear:function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  }};
}]);
goog.provide("gridReport.services.SmartTooltipService");
gridReport.Module.factory("gfSmartTooltipService", ["$timeout", function($timeout) {
  var service = {};
  var hideTimeout;
  var $tooltip;
  var TOP_DIRECTION = "top", BOTTOM_DIRECTION = "bottom", LEFT_DIRECTION = "left", RIGHT_DIRECTION = "right", TOOLTIP_DIRECTIONS = [TOP_DIRECTION, BOTTOM_DIRECTION, LEFT_DIRECTION, RIGHT_DIRECTION];
  var ARROW_SIZE = 3;
  service.TooltipHideTimeout = 300;
  service.TooltipShowTimeout = 700;
  $tooltip = $('<div class="grid-report-tooltip tooltip bottom fade in" style="display: block;">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + "</div>").hover(function() {
    $tooltip.addClass("hovering");
  }, function() {
    $tooltip.removeClass("hovering");
  }).click(function() {
    $tooltip.removeClass("hovering");
    $tooltip.hide();
  });
  $("body").append($tooltip);
  function calculateDirection(context) {
    var x = context.linkToCursor ? context.eventX : context.x, y = context.linkToCursor ? context.eventY : context.y;
    var containerHeight = context.containerHeight;
    var containerWidth = context.containerWidth;
    var tooltipWidth = context.tooltipWidth;
    var tooltipHeight = context.tooltipHeight;
    var elementWidth = context.linkToCursor ? 0 : context.elementWidth;
    var elementHeight = context.elementHeight;
    var hasSpaceBefore = x - Math.round((tooltipWidth - elementWidth) / 2) >= 0;
    var hasSpaceAfter = x + elementWidth + Math.round((tooltipWidth - elementWidth) / 2) < containerWidth;
    if (hasSpaceBefore && hasSpaceAfter) {
      if (y + elementHeight + tooltipHeight < containerHeight) {
        return BOTTOM_DIRECTION;
      }
      return TOP_DIRECTION;
    } else {
      if (x - tooltipWidth >= 0) {
        return LEFT_DIRECTION;
      } else {
        if (x + elementWidth + tooltipWidth < containerWidth) {
          return RIGHT_DIRECTION;
        }
      }
    }
    return BOTTOM_DIRECTION;
  }
  function calculatePosition(context) {
    var x = context.linkToCursor ? context.eventX : context.x, y = context.linkToCursor ? context.eventY : context.y;
    var tooltipWidth = context.tooltipWidth, tooltipHeight = context.tooltipHeight;
    var elementWidth = context.elementWidth, elementHeight = context.elementHeight;
    var positionX = x;
    var positionY = y;
    var direction = context.direction;
    switch(direction) {
      case BOTTOM_DIRECTION:
        if (context.linkToCursor) {
          positionX -= Math.round(tooltipWidth / 2);
        } else {
          positionX += Math.round((elementWidth - tooltipWidth) / 2);
        }
        positionY += elementHeight;
        break;
      case TOP_DIRECTION:
        if (context.linkToCursor) {
          positionX -= Math.round(tooltipWidth / 2);
        } else {
          positionX += Math.round((elementWidth - tooltipWidth) / 2);
        }
        positionY -= tooltipHeight + 2 * ARROW_SIZE;
        break;
      case LEFT_DIRECTION:
        positionX -= tooltipWidth + ARROW_SIZE;
        positionY -= Math.round((tooltipHeight - elementHeight) / 2);
        break;
      case RIGHT_DIRECTION:
        if (context.linkToCursor) {
          positionX += ARROW_SIZE;
        } else {
          positionX += elementWidth;
        }
        positionY -= Math.round((tooltipHeight - elementHeight) / 2);
        break;
    }
    return{x:positionX, y:positionY};
  }
  function getTooltipSize() {
    $tooltip.css("top", -1E3).css("left", -1E3).show();
    _.forEach(TOOLTIP_DIRECTIONS, function(direction) {
      $tooltip.removeClass(direction);
    });
    var size = {width:$tooltip.outerWidth(), height:$tooltip.outerHeight()};
    $tooltip.hide();
    return size;
  }
  function setupTooltipPosition(event) {
    var tooltipSize = getTooltipSize();
    var $target = $(event.target);
    var targetOffset = $target.offset();
    var context = {x:targetOffset.left, y:targetOffset.top, containerWidth:$(window).width(), containerHeight:$(window).height(), tooltipWidth:tooltipSize.width, tooltipHeight:tooltipSize.height, elementWidth:$target.outerWidth(), elementHeight:$target.outerHeight(), eventX:event.clientX, eventY:event.clientY, linkToCursor:$target.closest("[smart-tooltip]").attr("link-to-cursor")};
    context.direction = calculateDirection(context);
    _.forEach(TOOLTIP_DIRECTIONS, function(direction) {
      $tooltip.removeClass(direction);
    });
    $tooltip.addClass(context.direction);
    var tooltipPosition = calculatePosition(context);
    return $tooltip.css("top", tooltipPosition.y).css("left", tooltipPosition.x).show();
  }
  service.show = function(context) {
    if (hideTimeout) {
      $timeout.cancel(hideTimeout);
    }
    var event = _.extend({}, context.event);
    if (!_.isUndefined(context.element)) {
      event.target = context.element;
    }
    $tooltip.find(".tooltip-inner").html(context.html);
    (context.cb || _.noop)({tooltip:$tooltip});
    setupTooltipPosition(event);
  };
  service.hide = function() {
    if (!$tooltip.hasClass("hovering")) {
      $tooltip.hide();
    } else {
      hideTimeout = $timeout(service.hide, service.TooltipHideTimeout);
    }
  };
  return service;
}]);
goog.provide("gridReport.services.BarChartRenderer");
goog.require("gridReport.services.ValueFormattingService");
gridReport.Module.factory("gfBarChartRenderer", ["gfValueFormatting", function(gfValueFormatting) {
  function getBarAligment(value) {
    if (value == 0) {
      return "jqx-bar-chart-zero";
    } else {
      if (value > 0) {
        return "jqx-bar-chart-positive";
      } else {
        return "jqx-bar-chart-negative";
      }
    }
  }
  function getPosition(value, maxValue, minValue, aspect) {
    if (Math.abs(minValue) > Math.abs(maxValue)) {
      if (value > 0) {
        return "left:" + 50 / aspect + "%";
      } else {
        return "right:" + (100 - 50 / aspect) + "%";
      }
    } else {
      if (value > 0) {
        return "left:" + (100 - 50 / aspect) + "%";
      } else {
        return "right:" + 50 / aspect + "%";
      }
    }
  }
  function getBarWidth(value, maxAbsoluteValue, aspect) {
    if (maxAbsoluteValue == 0) {
      return "0%";
    }
    return Math.abs(value) / maxAbsoluteValue * 0.5 * 100 / aspect + "%";
  }
  var service = {};
  service.renderBarChartCell = function(value, extremes, cellsalign, cellsFormat, drawBarChart, currencySymbol, isAuditEnabled) {
    var formattedValue = gfValueFormatting.getFormattedValue(value, cellsFormat, currencySymbol);
    var str = '<div class="jqx-cell-bar-chart">';
    str += '<div class="jqx-cell-bar-chart-value' + (_.isNumber(value) ? "" : " jqx-grid-cell-na") + '" style="text-align:' + cellsalign + '"><span' + (isAuditEnabled ? ' class="jqx-grid-cell-text"' : "") + ">" + formattedValue + "</span></div>";
    str += '<div class="jqx-cell-bar-chart-chart">';
    if (drawBarChart !== false && extremes != null) {
      if (extremes.max == 0 && extremes.min == 0) {
        str += '<div class="jqx-bar-chart ' + getBarAligment(value) + '" style="width:' + getBarWidth(value, extremes.maxAbsoluteValue, 1) + ';left:50%;"></div>';
      } else {
        if (extremes.max >= 0 && extremes.min >= 0) {
          str += '<div class="jqx-bar-chart jqx-bar-chart-positive" style="width:' + value / extremes.max * 100 + '%"></div>';
        } else {
          if (extremes.max <= 0 && extremes.min <= 0) {
            str += '<div class="jqx-bar-chart jqx-bar-chart-negative" style="width:' + value / extremes.min * 100 + '%;right:0;"></div>';
          } else {
            var aspect = (Math.abs(extremes.min) + Math.abs(extremes.max)) / (extremes.maxAbsoluteValue * 2);
            str += '<div class="jqx-bar-chart ' + getBarAligment(value) + '" style="width:' + getBarWidth(value, extremes.maxAbsoluteValue, aspect) + ";" + getPosition(value, extremes.max, extremes.min, aspect) + '"></div>';
          }
        }
      }
    }
    str += "</div>";
    return str + "</div>";
  };
  return service;
}]);
goog.provide("gridReport.services.CellsFormattingFactory");
goog.require("gridReport.services.ValueFormattingService");
goog.require("gridReport.model.CellsFormat");
gridReport.Module.factory("gfCellsFormattingFactory", ["gfValueFormatting", "$translate", function(gfValueFormatting, $translate) {
  var service = {};
  service.create = function(command) {
    var percentage = command.returnType === scr.DataTypes.Percentage;
    var decimalDigits = command.decimalDigits != undefined && command.decimalDigits != -1 ? command.decimalDigits : gfValueFormatting.getDefaultDigitCount(command.returnType);
    var negativeNumberFormat = command.isAbsComp === true ? gridReport.model.NegativeNumberFormats.ColoredDefault : gridReport.model.NegativeNumberFormats.Default;
    var cellFormat = new gridReport.model.CellsFormat;
    cellFormat.decimalDigits = decimalDigits;
    cellFormat.dateFormat = $translate.instant("DD_MM_YYYY_F");
    cellFormat.setNegativeNumberFormat(negativeNumberFormat);
    cellFormat.setPercentage(percentage);
    return cellFormat;
  };
  service.createPremiumDiscount = function(cellsFormat) {
    return new gridReport.model.CellsFormat({decimalDigits:1, percentage:true});
  };
  service.createTooltip = function(cellsFormat) {
    return new gridReport.model.CellsFormat({decimalDigits:6, percentage:cellsFormat.percentage});
  };
  service.parse = function(format) {
    if (_.isEmpty(format)) {
      return new gridReport.model.CellsFormat({dateFormat:$translate.instant("DD_MM_YYYY_F")});
    }
    var decimalDigits = 0, current;
    if (format.length > 1) {
      decimalDigits = parseInt(format.slice(1), 10);
    }
    current = format.charAt(0).toUpperCase();
    return new gridReport.model.CellsFormat({percentage:current === "P", decimalDigits:decimalDigits, dateFormat:$translate.instant("DD_MM_YYYY_F")});
  };
  return service;
}]);
goog.provide("gridReport.services.VectorCellRenderer");
goog.require("gridReport.services.CellsFormattingFactory");
gridReport.Module.factory("gfVectorCellRenderer", ["$translate", "gfValueFormatting", "gfConfig", "gfHeatMapColors", "gfCellsFormattingFactory", "gfNativeCurrencyService", "gfConditionalValueFormattingService", function($translate, gfValueFormatting, gfConfig, gfHeatMapColors, gfCellsFormattingFactory, gfNativeCurrencyService, gfConditionalValueFormattingService) {
  var LABEL_NA = _.isString(gfConfig.notAvailableDataLabel) ? gfConfig.notAvailableDataLabel : "NA";
  var TITLE_NA = _.isString(gfConfig.notAvailableDataTitle) ? gfConfig.notAvailableDataTitle : $translate.instant("NOT_AVAILABLE");
  function createEmptyCell(width, align) {
    return'<div class="jqx-cell-vector-item" data-smart-tooltip="' + TITLE_NA + '" style="width:' + width + "%; text-align:" + align + '"><div class="jqx-grid-cell-na">' + LABEL_NA + "</div></div>";
  }
  function getSubColumn(column, index, valueIndexToColumnIdAssociation) {
    if (valueIndexToColumnIdAssociation == null || column.gridColumns == null) {
      return column.getSubColumnByVectorIndex(index);
    }
    return column.gridColumns[valueIndexToColumnIdAssociation[index]];
  }
  function getTotalColumnsCount(column) {
    var totalCount = 0;
    _.each(column.gridColumns, function(subColumn) {
      totalCount += subColumn.getRepresentedColumnsCount();
    });
    return totalCount;
  }
  function getWidth(totalsColumnCount, subColumn, columns) {
    var widthPerColumn = 100 / totalsColumnCount;
    if (columns) {
      var expectedCount = subColumn.getRepresentedColumnsCount();
      var actualCount = 0;
      _.each(columns, function(columnId) {
        if (subColumn.id === columnId) {
          actualCount++;
        }
      });
      return widthPerColumn / (actualCount / expectedCount);
    } else {
      return widthPerColumn;
    }
  }
  var service = {};
  service.getVectorCell = function(values, statisticValues, column, data, globalParameters, isAuditEnabled, isAuditableCallback, isPremiumDiscount, conditionalFormatting, cellType) {
    var str = '<div class="jqx-cell-vector">';
    var totalsColumnCount = !!values.columns ? getTotalColumnsCount(column) : values.length;
    _.each(values, function(vectorValue, index) {
      var subColumn = getSubColumn(column, index, values.columns);
      var columnWidth = getWidth(totalsColumnCount, subColumn, values.columns);
      if (vectorValue != undefined) {
        var currencySymbol = undefined;
        if (gfConfig.showCurrencySymbol !== false && (subColumn && (subColumn.command && gfNativeCurrencyService.isNativeCurrencyUsed(subColumn.command, globalParameters)))) {
          currencySymbol = gfNativeCurrencyService.getCurrencySymbol(subColumn.id, data ? data.rowKey : undefined);
        }
        var cellsFormat = column.command.isMultiSelect() ? column.cellsFormat : subColumn.cellsFormat;
        var conditionalValueFormatting = subColumn.conditionalValueFormatting;
        if (isPremiumDiscount) {
          cellsFormat = gfCellsFormattingFactory.createPremiumDiscount(subColumn.cellsFormat);
          conditionalValueFormatting = gfConditionalValueFormattingService.createPremiumDiscount(subColumn);
        }
        var formattedTooltip = gfValueFormatting.getFormattedValue(vectorValue, gfCellsFormattingFactory.createTooltip(cellsFormat), currencySymbol);
        var formattedValue = gfValueFormatting.getFormattedValue(vectorValue, cellsFormat, currencySymbol);
        var cssClass = conditionalFormatting && conditionalValueFormatting ? conditionalValueFormatting.compare(vectorValue) : undefined;
        if (data != undefined) {
          if (cellType === gridReport.model.CellTypes.TotalCell && (column.selectedTotalsCalculation && column.selectedTotalsCalculation.name)) {
            formattedTooltip = column.selectedTotalsCalculation.name + ": " + formattedTooltip;
          }
        }
        var heatMapLevelCss;
        if (statisticValues && (statisticValues[index] && subColumn.canHaveHeatMapping())) {
          var defaultOrder = subColumn && subColumn.command ? subColumn.command.defaultOrder : undefined;
          heatMapLevelCss = gfHeatMapColors.getHeatMapStyle(vectorValue, statisticValues[index].average, statisticValues[index].standardDeviation, defaultOrder);
        }
        var elementRawValue = "";
        if (isAuditEnabled && (isAuditableCallback || angular.noop)(vectorValue, data, subColumn, subColumn.getPropsId())) {
          cssClass = cssClass ? cssClass + " gf-clickable-value" : "gf-clickable-value";
          elementRawValue = 'raw-value="' + vectorValue + '"';
        }
        if (column && (column.hasSubColumns() || (subColumn.cellMouseEnterAction != undefined || subColumn.cellMouseLeaveAction != undefined || (column.cellMouseEnterAction != undefined || column.cellMouseLeaveAction != undefined)))) {
          formattedValue = '<span class="jqx-grid-cell-text" ' + elementRawValue + ">" + formattedValue + "</span>";
        }
        var subColKey = "";
        if (subColumn.id != column.id) {
          subColKey = 'sub-col-key="' + encodeURIComponent(subColumn.id) + '" ';
        }
        str += "<div " + subColKey + 'class="jqx-cell-vector-item' + (cssClass ? " " + cssClass : "") + (heatMapLevelCss ? " " + heatMapLevelCss : "") + '" data-smart-tooltip="' + formattedTooltip + '" style="width:' + columnWidth + "%; text-align:" + subColumn.getCellAlign() + '"><div>' + formattedValue + "</div></div>";
      } else {
        str += createEmptyCell(columnWidth, subColumn.getCellAlign());
      }
    });
    return str + "</div>";
  };
  service.getFactorRankVectorCell = function(value, cellsFormat, cellsTooltipFormat, conditionalFormatting, currencySymbol, column, statisticValues, cellType) {
    if (_.size(column.gridColumns) != value.length) {
      return "";
    }
    var str = '<div class="jqx-cell-vector" style="text-align:right">';
    var widthPerColumn = 100 / value.length;
    var index = 0;
    _.each(column.gridColumns, function(gridColumn) {
      var gridColumnValue = value[index];
      if (gridColumnValue != undefined) {
        if (index > 0 && cellType === gridReport.model.CellTypes.PrimaryDiscountStatisticCell) {
          str += '<div class="jqx-cell-vector-item" style="width:' + widthPerColumn + '%"><div></div></div>';
        } else {
          var currentCellsFormat = cellsFormat || gridColumn.cellsFormat;
          var currentCellsTooltipFormat = cellsTooltipFormat || gfCellsFormattingFactory.parse(gridColumn.cellsTooltipFormat);
          var currentCurrencySymbol = currencySymbol && gridColumn.getReturnType() === scr.DataTypes.Money ? currencySymbol : undefined;
          var formattedTooltip = gfValueFormatting.getFormattedValue(gridColumnValue, currentCellsTooltipFormat, currentCurrencySymbol);
          var formattedValue = gfValueFormatting.getFormattedValue(gridColumnValue, currentCellsFormat, currentCurrencySymbol);
          var heatMapLevelCss;
          if (statisticValues && statisticValues[index]) {
            heatMapLevelCss = gfHeatMapColors.getHeatMapStyle(gridColumnValue, statisticValues[index].average, statisticValues[index].standardDeviation, gridColumn.command ? gridColumn.command.defaultOrder : undefined);
          }
          var cssClass = conditionalFormatting ? conditionalFormatting.compare(gridColumnValue) : undefined;
          str += '<div class="jqx-cell-vector-item' + (cssClass ? " " + cssClass : "") + (heatMapLevelCss ? " " + heatMapLevelCss : "") + '" data-smart-tooltip="' + formattedTooltip + '" style="width:' + widthPerColumn + '%"><div>' + formattedValue + "</div></div>";
        }
      } else {
        str += createEmptyCell(widthPerColumn);
      }
      index++;
    });
    return str + "</div>";
  };
  return service;
}]);
goog.provide("gridReport.services.CompanyService");
gridReport.Module.factory("gfCompanyService", [function() {
  var service = {}, cache = {};
  service.setIsPublic = function(identifier, isPublic) {
    cache[identifier] = isPublic;
  };
  service.isPublic = function(identifier) {
    return cache[identifier] === true;
  };
  service.clearCache = function() {
    cache = {};
  };
  return service;
}]);
goog.provide("gridReport.services.GridCellFormatter");
goog.require("gridReport.services.HeatMapColors");
goog.require("gridReport.services.ColumnTooltipFormatterService");
goog.require("gridReport.model.CellTypes");
goog.require("gridReport.services.BarChartRenderer");
goog.require("gridReport.services.VectorCellRenderer");
goog.require("gridReport.services.CellsFormattingFactory");
goog.require("gridReport.services.CompanyService");
gridReport.Module.factory("gfGridCellFormatter", ["$translate", "gfValueFormatting", "gfConfig", "gfNativeCurrencyService", "gfColumnTooltipFormatterService", "gfHeatMapColors", "gfBarChartRenderer", "gfVectorCellRenderer", "gfCellsFormattingFactory", "gfCompanyService", function($translate, gfValueFormatting, gfConfig, gfNativeCurrencyService, gfColumnTooltipFormatterService, gfHeatMapColors, gfBarChartRenderer, gfVectorCellRenderer, gfCellsFormattingFactory, gfCompanyService) {
  var LABEL_NA = _.isString(gfConfig.notAvailableDataLabel) ? gfConfig.notAvailableDataLabel : "NA";
  var TITLE_NA = _.isString(gfConfig.notAvailableDataTitle) ? gfConfig.notAvailableDataTitle : $translate.instant("NOT_AVAILABLE");
  var LABEL_ERR = "ERR";
  var service = {};
  function getCellHtml(formattedValue, cellsalign, classes) {
    classes.push(cellsalign === "right" ? "jqx-cell-right-align" : "jqx-cell-left-align");
    var css = classes.length > 0 ? ' class="' + classes.join(" ") + '"' : "";
    return "<div" + css + ">" + formattedValue + "</div>";
  }
  function isAuditable(value, dataRow, column, propsId) {
    if (!dataRow) {
      return false;
    }
    var props = dataRow[propsId];
    if (!props || (!props[value] || !column.command.isAuditable())) {
      return false;
    }
    return props[value]["CTFlg"] == 1;
  }
  function addCellShadingClass(classList, column, columnfield, value, cellType, isExcludedFromStatistics, statisticValues) {
    if (column && (!isExcludedFromStatistics && (cellType != gridReport.model.CellTypes.PrimaryDiscountStatisticCell && (cellType != gridReport.model.CellTypes.StatisticCell && (statisticValues && (statisticValues[columnfield] != undefined && _.isNumber(value))))))) {
      classList.push(gfHeatMapColors.getHeatMapStyle(value, statisticValues[columnfield].average, statisticValues[columnfield].standardDeviation, column.command ? column.command.defaultOrder : undefined));
    }
  }
  function addMonospaceClass(classList, column) {
    if (column && column.isNumber()) {
      classList.push("monospace");
    }
  }
  function addCellClass(classList, column) {
    if (column && column.cellClass) {
      classList.push(column.cellClass);
    }
  }
  function addFirstCellClass(classList, column, firstColumnId) {
    if (column && column.id == firstColumnId) {
      classList.push("jqx-grid-first-data-cell");
    }
  }
  function addConditionalFormattingClass(classList, conditionalFormatting, value) {
    if (conditionalFormatting != undefined) {
      classList.push(conditionalFormatting.compare(value));
    }
  }
  function addExcludedFromStatisticsClass(classList, isExcludedFromStatistics) {
    if (isExcludedFromStatistics) {
      classList.push("jqx-grid-cell-excluded-stat");
    }
  }
  function addCompanyTypeClass(classList, rowKey) {
    if (rowKey != null && (rowKey != "" && (gfConfig.disableNavigationForPrvt === true || gfConfig.disableNavigationForPrvt === true))) {
      var isPublic = gfCompanyService.isPublic(rowKey);
      classList.push(isPublic ? "gf-univ-public" : "gf-univ-private");
      if (isPublic == true && gfConfig.disableNavigationForPub === true || isPublic == false && gfConfig.disableNavigationForPrvt) {
        classList.push("gf-unclickable-cell");
      }
    }
  }
  function addPrimaryRowClass(classList, data, primaryRowKey) {
    if (primaryRowKey && (data && primaryRowKey == data.rowKey)) {
      classList.push("primary-row");
    }
  }
  function addFreezedRowClass(classList, data, freezedRowKey) {
    if (freezedRowKey && (data && freezedRowKey == data.rowKey)) {
      classList.push("freezed-row");
    }
  }
  function addHighlightedRowClass(classList, data, highlightedRowKey) {
    if (highlightedRowKey && (data && highlightedRowKey == data.rowKey)) {
      classList.push("highlighted-row");
    }
  }
  function formatValue(value, cellType, currentCellsFormat, currencySymbol, isEmpty, column, data, outParam) {
    var formattedValue = "";
    if (!isEmpty) {
      if (cellType === gridReport.model.CellTypes.PrimaryDiscountStatisticCell && (column && (column.command && column.command.isMultiFactorRank()))) {
        formattedValue = "";
        outParam.hideCellTooltip = true;
      } else {
        formattedValue = gfValueFormatting.getFormattedValue(value, currentCellsFormat, currencySymbol);
      }
    }
    if (column && !column.isValid()) {
      formattedValue = outParam.title = LABEL_ERR;
    }
    return formattedValue;
  }
  function isValueEmpty(columnfield, firstColumnId, loadingColumnsFinished, data) {
    return columnfield != firstColumnId && (loadingColumnsFinished[columnfield] != true && (data && data[columnfield] == undefined));
  }
  service.renderedCell = function(conditionalFormatting, row, columnfield, value, columnproperties, data, column, loadingColumnsFinished, showEmptyInsteadOfNA, dataLoadingRows, currentTheme, maxColumnsValues, outParam, firstColumnId, primaryRowKey, globalParameters, cellsFormat, showRemoveButton, statisticValues, cellType, isExcludedFromStatistics, highlightedRowKey, freezedRowKey, isAuditEnabled) {
    var html, rowKey = "", columnKey = "", rawValue = "", smartTooltip = "", currencySymbol, formattedValue, appliedCssClasses = [], appliedInnerCssClasses = [], currentCellsFormat, isRowEmpty = data && data.isRowEmpty;
    outParam = outParam || {};
    if (!cellsFormat && column) {
      currentCellsFormat = column.cellsFormat;
    } else {
      currentCellsFormat = cellsFormat;
    }
    if (gfConfig.showCurrencySymbol !== false && (column && (column.command && gfNativeCurrencyService.isNativeCurrencyUsed(column.command, globalParameters)))) {
      currencySymbol = gfNativeCurrencyService.getCurrencySymbol(columnfield, data ? data.rowKey : undefined);
    }
    var isEmpty = isValueEmpty(columnfield, firstColumnId, loadingColumnsFinished, data) || isRowEmpty;
    formattedValue = formatValue(value, cellType, currentCellsFormat, currencySymbol, isEmpty, column, data, outParam);
    if (column && (column.hasSubColumns() || (column.cellMouseEnterAction != undefined || column.cellMouseLeaveAction != undefined))) {
      formattedValue = '<span class="jqx-grid-cell-text">' + formattedValue + "</span>";
    }
    if (!isEmpty && !column.isBarChartEnabled) {
      addCellShadingClass(appliedCssClasses, column, columnfield, value, cellType, isExcludedFromStatistics, statisticValues);
    }
    addMonospaceClass(appliedInnerCssClasses, column);
    addCellClass(appliedCssClasses, column);
    addFirstCellClass(appliedCssClasses, column, firstColumnId);
    addExcludedFromStatisticsClass(appliedCssClasses, isExcludedFromStatistics);
    addConditionalFormattingClass(appliedCssClasses, conditionalFormatting, value);
    addPrimaryRowClass(appliedCssClasses, data, primaryRowKey);
    addFreezedRowClass(appliedCssClasses, data, freezedRowKey);
    addHighlightedRowClass(appliedCssClasses, data, highlightedRowKey);
    if (data != undefined) {
      addCompanyTypeClass(appliedCssClasses, data.rowKey);
      rowKey = data.rowKey ? 'row-key="' + data.rowKey + '"' : "";
      if (column && (column.cellMouseEnterAction || (column.cellMouseElaveAction || column.isMultiColumn()))) {
        columnKey = 'column-key="' + columnfield + '"';
      }
      if (loadingColumnsFinished[columnfield] === true && (formattedValue != LABEL_ERR && data[columnfield] == undefined)) {
        if (cellType === gridReport.model.CellTypes.TotalCell || (cellType === gridReport.model.CellTypes.StatisticCell && (column && !column.isNumber()) || isRowEmpty)) {
          formattedValue = "";
          outParam.title = "";
          outParam.hideCellTooltip = true;
        } else {
          formattedValue = !showEmptyInsteadOfNA[columnfield] ? LABEL_NA : "";
          outParam.title = !showEmptyInsteadOfNA[columnfield] ? TITLE_NA : "";
          appliedInnerCssClasses.push("jqx-grid-cell-na");
        }
      } else {
        if (isRowEmpty) {
          outParam.title = "";
          outParam.hideCellTooltip = true;
        }
      }
    }
    html = getCellHtml(formattedValue, columnproperties.cellsalign, appliedInnerCssClasses);
    if (showRemoveButton) {
      html += '<div class="deleteRowElement" data-smart-tooltip="' + $translate.instant("REMOVE_ROW") + '" ></div>';
    }
    if (column) {
      if (isAuditEnabled && isAuditable(value, data, column, column.getPropsId())) {
        appliedCssClasses.push("gf-clickable-value");
        rawValue = ' raw-value="' + data[columnfield] + '"';
      }
      if (outParam.hideCellTooltip !== true) {
        if (data && data[columnfield] != undefined) {
          outParam.title = gfValueFormatting.getFormattedValue(value, gfCellsFormattingFactory.createTooltip(column.cellsFormat), currencySymbol);
          if ((cellType === gridReport.model.CellTypes.TotalCell || cellType === gridReport.model.CellTypes.GroupCell) && (column.selectedTotalsCalculation && column.selectedTotalsCalculation.name)) {
            outParam.title = column.selectedTotalsCalculation.name + ": " + outParam.title;
          }
        }
        if (!_.isUndefined(column.tooltipFormat) && (!_.isNull(column.tooltipFormat) && !_.isUndefined(data))) {
          outParam.title = gfColumnTooltipFormatterService.formatTitle(column.tooltipFormat, data);
        }
      }
      if (column && column.isMultiColumn()) {
        outParam.hideCellTooltip = true;
        html = renderDataBlockCell(conditionalFormatting, row, columnfield, value, columnproperties, data, column, loadingColumnsFinished, showEmptyInsteadOfNA, dataLoadingRows, currentTheme, maxColumnsValues, firstColumnId, primaryRowKey, globalParameters, cellsFormat, showRemoveButton, statisticValues, cellType, isExcludedFromStatistics, highlightedRowKey, freezedRowKey, isAuditEnabled);
        appliedCssClasses.push("jqx-grid-datablock-row");
      }
      if (column.isBarChartEnabled) {
        var isGroupOrTotalRow = row == null;
        var drawBar = cellType != gridReport.model.CellTypes.StatisticCell && (_.isNumber(value) && (cellType != gridReport.model.CellTypes.TotalCell && (cellType != gridReport.model.CellTypes.PrimaryDiscountStatisticCell && ((column.selectedTotalsCalculation == null || !(isGroupOrTotalRow && column.selectedTotalsCalculation.name == "Sum")) && !isExcludedFromStatistics))));
        if (cellType == gridReport.model.CellTypes.PrimaryDiscountStatisticCell && (column.command && column.command.isMultiFactorRank())) {
          html = "";
        } else {
          html = gfBarChartRenderer.renderBarChartCell(value, maxColumnsValues[columnfield], columnproperties.cellsalign, currentCellsFormat, drawBar, currencySymbol, isAuditable(value, data, column, column.getPropsId()) && isAuditEnabled);
        }
      } else {
        if (_.isArray(value)) {
          if (value.length > gfConfig.MaxColumnsPerVector && !column.command.isTimeSeries()) {
            html = "<div>" + $translate.instant("MULTIPLE_VALUES") + "</div>";
            outParam.title = $translate.instant("COLUMNS_RETURN_MULTIPLE_VALUES");
          } else {
            var isCellShadingAvailable = cellType != gridReport.model.CellTypes.PrimaryDiscountStatisticCell && cellType != gridReport.model.CellTypes.StatisticCell;
            outParam.hideCellTooltip = true;
            if (column.command && column.command.isFactorRank()) {
              html = gfVectorCellRenderer.getFactorRankVectorCell(value, cellsFormat, gfCellsFormattingFactory.createTooltip(column.cellsFormat), conditionalFormatting, currencySymbol, column, statisticValues && isCellShadingAvailable ? statisticValues[column.id] : undefined, cellType);
            } else {
              html = gfVectorCellRenderer.getVectorCell(value, statisticValues && isCellShadingAvailable ? statisticValues[column.id] : undefined, column, data, globalParameters, isAuditEnabled, isAuditable, cellType == gridReport.model.CellTypes.PrimaryDiscountStatisticCell, conditionalFormatting, cellType);
            }
            appliedCssClasses.push("jqx-grid-vector-row");
          }
        }
      }
    }
    var cssClasses = "";
    if (appliedCssClasses.length) {
      cssClasses = 'class="' + appliedCssClasses.join(" ") + '"';
    }
    if (columnfield != firstColumnId && (data != undefined && dataLoadingRows[data.rowKey])) {
      html = '<div class="' + toThemeProperty("throbber-mini", currentTheme.theme) + '"></div>';
    }
    smartTooltip = ' data-smart-tooltip = "' + (outParam.title || formatValue(value, cellType, currentCellsFormat, currencySymbol, isEmpty, column, data, outParam)) + '"';
    return "<div " + rowKey + " " + columnKey + rawValue + " " + cssClasses + smartTooltip + ">" + html + "</div>";
  };
  function renderDataBlockCell(conditionalFormatting, row, columnfield, value, columnproperties, data, column, loadingColumnsFinished, showEmptyInsteadOfNA, dataLoadingRows, currentTheme, maxColumnsValues, firstColumnId, primaryRowKey, globalParameters, cellsFormat, showRemoveButton, statisticValues, cellType, isExcludedFromStatistics, highlightedRowKey, freezedRowKey, isAuditEnabled) {
    var totalColumnsCount = 0;
    _.each(column.gridColumns, function(subColumn) {
      totalColumnsCount += subColumn.getRepresentedColumnsCount();
    });
    var str = "";
    value = value || [];
    _.each(column.gridColumns, function(subColumn) {
      var columnWidth = 100 * subColumn.getRepresentedColumnsCount() / totalColumnsCount;
      var currentShowEmptyInsteadOfNA = showEmptyInsteadOfNA;
      if (cellType === gridReport.model.CellTypes.StatisticCell) {
        currentShowEmptyInsteadOfNA = true;
      }
      var currentData = cellType === gridReport.model.CellTypes.TotalCell || (cellType === gridReport.model.CellTypes.StatisticCell || cellType === gridReport.model.CellTypes.GroupCell) ? value : data;
      var cellOutParam = {};
      var cellHtml = service.renderedCell(conditionalFormatting ? conditionalFormatting : subColumn.conditionalValueFormatting, row, subColumn.id, value[subColumn.id], {cellsalign:subColumn.getCellAlign()}, currentData, subColumn, loadingColumnsFinished, currentShowEmptyInsteadOfNA, dataLoadingRows, currentTheme, maxColumnsValues, cellOutParam, firstColumnId, primaryRowKey, globalParameters, cellsFormat, showRemoveButton, statisticValues, cellType, isExcludedFromStatistics, highlightedRowKey, freezedRowKey, 
      isAuditEnabled);
      str += '<div style="width:' + columnWidth + '%;"';
      str += ' class="jqx-cell-datablockitem">';
      str += cellHtml;
      str += "</div>";
    });
    return str;
  }
  function getTooltip(cellOutParam) {
    return cellOutParam.hideCellTooltip || !cellOutParam.title ? "" : ' data-smart-tooltip="' + cellOutParam.title + '"';
  }
  function toThemeProperty(className, themeName) {
    return className + " " + className + "-" + themeName;
  }
  return service;
}]);
goog.provide("gridReport.services.JqxGridAdapterFactory");
goog.require("gridReport.adapters.JqxGridAdapter");
goog.require("gridReport.adapters.JqxTransposedGridAdapter");
goog.require("gridReport.adapters.JqxGridDataExporter");
goog.require("gridReport.adapters.JqxTransposedGridDataExporter");
goog.require("gridReport.adapters.JqxGridAutoWidthHelper");
goog.require("gridReport.services.TotalsCalculationService");
goog.require("gridReport.services.StatisticsCalculationService");
goog.require("gridReport.services.ColumnHeaderFormatterService");
goog.require("gridReport.services.GridCellFormatter");
goog.require("gridReport.services.TransposedGridCellFormatter");
goog.require("gridReport.adapters.JqxGridStatisticsRenderer");
goog.require("gridReport.services.SmoothColumnDraggingService");
goog.require("gridReport.services.UuidGenerator");
goog.require("gridReport.services.SmartTooltipService");
gridReport.Module.factory("jqxGridAdapterFactory", ["$timeout", "$translate", "$filter", "gfTotalsCalculation", "gfAggregatesAlgorithms", "gfLogManager", "gfActionPostponingService", "gfColumnHeaderFormatterService", "gfGridCellFormatter", "eeExcelExporter", "eeExcelTransposedExporter", "gfJqxGridDataExporter", "gfJqxTransposedGridDataExporter", "gfStatisticsCalculation", "gfConfig", "gfJqxGridAutoWidthHelper", "gfNativeCurrencyService", "gfHeatMapService", "$q", "gfJqxGridStatisticsRenderer", "gfSmoothColumnDraggingService", 
"gfFormulaColumnsHelper", "pePdfExporterService", "gfTransposedGridCellFormatter", "gfValueFormatting", "gfCellsFormattingFactory", "gfConditionalValueFormattingService", "gfUuidGenerator", "gfSmartTooltipService", function($timeout, $translate, $filter, gfTotalsCalculation, gfAggregatesAlgorithms, gfLogManager, gfActionPostponingService, gfColumnHeaderFormatterService, gfGridCellFormatter, eeExcelExporter, eeExcelTransposedExporter, gfJqxGridDataExporter, gfJqxTransposedGridDataExporter, gfStatisticsCalculation, 
gfConfig, gfJqxGridAutoWidthHelper, gfNativeCurrencyService, gfHeatMapService, $q, gfJqxGridStatisticsRenderer, gfSmoothColumnDraggingService, gfFormulaColumnsHelper, pePdfExporterService, gfTransposedGridCellFormatter, gfValueFormatting, gfCellsFormattingFactory, gfConditionalValueFormattingService, gfUuidGenerator, gfSmartTooltipService) {
  function createInstance(element, settings, addRowBuilder, barChartInTransposeOff, gridId) {
    if (settings.isTransposed) {
      settings.barChartEnabled = !barChartInTransposeOff;
      return new gridReport.adapters.JqxTransposedGridAdapter($timeout, $translate, gfTotalsCalculation.instance(gridId), gfAggregatesAlgorithms, element, settings, gfLogManager, gfActionPostponingService.get(gridId), gfColumnHeaderFormatterService, gfTransposedGridCellFormatter, eeExcelTransposedExporter, gfJqxTransposedGridDataExporter.instance(gridId), gfStatisticsCalculation, addRowBuilder, gfConfig, gfJqxGridAutoWidthHelper, gfNativeCurrencyService, gfHeatMapService, gfSmoothColumnDraggingService.instance(gridId), 
      pePdfExporterService, gfValueFormatting, gfUuidGenerator, gfSmartTooltipService);
    }
    return new gridReport.adapters.JqxGridAdapter($timeout, $translate, $filter, gfTotalsCalculation.instance(gridId), gfAggregatesAlgorithms, element, settings, gfLogManager, gfActionPostponingService.get(gridId), gfColumnHeaderFormatterService, gfGridCellFormatter, eeExcelExporter, gfJqxGridDataExporter.instance(gridId), gfStatisticsCalculation, addRowBuilder, gfConfig, gfJqxGridAutoWidthHelper, gfNativeCurrencyService, gfHeatMapService, $q, gfJqxGridStatisticsRenderer, gfSmoothColumnDraggingService.instance(gridId), 
    gfFormulaColumnsHelper, pePdfExporterService, gfCellsFormattingFactory, gfConditionalValueFormattingService, gfUuidGenerator, gfSmartTooltipService);
  }
  return{createInstance:createInstance};
}]);
goog.provide("gridReport.model.FreezedRowSortingModel");
goog.require("gridReport.model.SingleSortingModel");
gridReport.model.FreezedRowSortingModel = function(options) {
  goog.base(this, options);
};
goog.inherits(gridReport.model.FreezedRowSortingModel, gridReport.model.SingleSortingModel);
gridReport.model.FreezedRowSortingModel.prototype.disableState = function() {
};
gridReport.model.FreezedRowSortingModel.prototype.discard = function() {
};
goog.provide("gridReport.model.SingleSortingState");
goog.require("gridReport.model.BaseSortingState");
goog.require("gridReport.model.SingleSortingModel");
gridReport.model.SingleSortingState = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
goog.inherits(gridReport.model.SingleSortingState, gridReport.model.BaseSortingState);
gridReport.model.SingleSortingState.prototype.column = null;
gridReport.model.SingleSortingState.prototype.direction = null;
gridReport.model.SingleSortingState.prototype.isAsc = function() {
  return this.direction == "asc";
};
gridReport.model.SingleSortingState.prototype.isDesc = function() {
  return this.direction == "desc";
};
gridReport.model.SingleSortingState.prototype._modelConstructor = gridReport.model.SingleSortingModel;
gridReport.model.SingleSortingState.prototype.equals = function(other) {
  try {
    if (!("column" in other)) {
      return false;
    }
    if (_.isEmpty(this.column) && _.isEmpty(other.column)) {
      return true;
    }
    return this.column == other.column && this.direction == other.direction;
  } catch (e) {
    return false;
  }
};
goog.provide("gridReport.model.FreezedRowSortingState");
goog.require("gridReport.model.SingleSortingState");
goog.require("gridReport.model.FreezedRowSortingModel");
gridReport.model.FreezedRowSortingState = function(options) {
  goog.base(this, options);
};
goog.inherits(gridReport.model.FreezedRowSortingState, gridReport.model.SingleSortingState);
gridReport.model.FreezedRowSortingState.FREEZED_ROW_SORTING_FAKE_COLUMN_ID = "FREEZED_ROW_SORTING_FAKE_COLUMN";
gridReport.model.FreezedRowSortingState.prototype.column = gridReport.model.FreezedRowSortingState.FREEZED_ROW_SORTING_FAKE_COLUMN_ID;
gridReport.model.FreezedRowSortingState.prototype.direction = "asc";
gridReport.model.FreezedRowSortingState.prototype._modelConstructor = gridReport.model.FreezedRowSortingModel;
goog.provide("gridReport.model.SortingFullState");
goog.require("gridReport.model.SingleSortingState");
goog.require("gridReport.model.AdvancedSortingState");
goog.require("gridReport.model.FreezedRowSortingState");
gridReport.model.SortingFullState = function(options) {
  this.isPrimaryRowFreezed = false;
  gridReport.jsUtils.mergeProperties(this, options);
  this.singleSortingState = new gridReport.model.SingleSortingState(this.singleSortingState);
  this.advancedSortingState = new gridReport.model.AdvancedSortingState(this.advancedSortingState);
  this.freezedRowState = new gridReport.model.FreezedRowSortingState(this.freezedRowState);
};
gridReport.model.SortingFullState.prototype.singleSortingState = null;
gridReport.model.SortingFullState.prototype.advancedSortingState = null;
gridReport.model.SortingFullState.prototype.freezedRowState = null;
gridReport.model.SortingFullState.prototype.isPrimaryRowFreezed = null;
gridReport.model.SortingFullState.prototype.getEnabledState = function() {
  if (this.advancedSortingState.enabled) {
    return this.advancedSortingState;
  } else {
    if (this.singleSortingState.column || !this.isPrimaryRowFreezed) {
      return this.singleSortingState;
    } else {
      return this.freezedRowState;
    }
  }
};
gridReport.model.SortingFullState.prototype.equals = function(other) {
  try {
    return this.singleSortingState.equals(other.singleSortingState) && this.advancedSortingState.equals(other.advancedSortingState);
  } catch (e) {
    return false;
  }
};
goog.provide("gridReport.model.filters.VectorMembershipColumnFilter");
goog.require("gridReport.model.filters.MembershipColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.VectorMembershipColumnFilter = function(options) {
  this.selectedItems = [];
  if (options) {
    if (options.selectedItems) {
      this.selectedItems = options.selectedItems;
    }
    if (_.isNumber(options.vectorIndex)) {
      this.vectorIndex = options.vectorIndex;
    }
    this.subColId = options.subColId;
  }
};
goog.inherits(gridReport.model.filters.VectorMembershipColumnFilter, gridReport.model.filters.MembershipColumnFilter);
gridReport.model.filters.VectorMembershipColumnFilter.prototype.vectorIndex = null;
gridReport.model.filters.VectorMembershipColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "custom", filterOrOperator = 1, defaultCondition = "equal";
  _.each(this.selectedItems, function(item) {
    var currentCondition = defaultCondition;
    if (_.isNull(item) || _.isUndefined(item)) {
      currentCondition = "null";
    } else {
      if (_.isEmpty(item) && !_.isNumber(item)) {
        currentCondition = "empty";
      }
    }
    filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, {value:item, vectorIndex:this.vectorIndex, subColId:this.subColId}, currentCondition, this.customFilter));
  }, this);
  return filtergroup;
};
gridReport.model.filters.VectorMembershipColumnFilter.prototype.serialize = function() {
  return{selectedItems:angular.copy(this.selectedItems), type:gridReport.model.filters.ColumnFilterTypes.VectorMembershipColumnFilter};
};
gridReport.model.filters.VectorMembershipColumnFilter.prototype.customFilter = function(filterValue, cellValue, operator) {
  var vectorIndex = filterValue.vectorIndex, subColId = filterValue.subColId, cellVal = cellValue, filterVal = filterValue.value;
  if (subColId) {
    cellVal = cellValue[subColId];
  }
  if (vectorIndex != undefined) {
    cellVal = cellVal[vectorIndex];
  }
  switch(operator) {
    case "EQUAL":
      return cellVal === filterVal;
    case "NULL":
      return cellVal === null;
    case "EMPTY":
      return cellVal === "";
    default:
      return true;
  }
};
goog.provide("gridReport.directives.MembershipColumnFilteringManagerController");
goog.require("gridReport.services.ValueFormattingService");
gridReport.Module.controller("MembershipColumnFilteringManagerController", ["$scope", "$timeout", "$modalInstance", "gfGridManagementService", "columnFilteringSettings", "$translate", "$filter", "gfValueFormatting", function($scope, $timeout, $modalInstance, gfGridManagementService, columnFilteringSettings, $translate, $filter, gfValueFormatting) {
  var filterVectorIndex = columnFilteringSettings.columnFilter.vectorIndex;
  $scope.model = {items:[], filteredItems:[]};
  $scope.closeDialog = function() {
    $modalInstance.close();
    $timeout(function() {
      $scope.$destroy();
    }, 100);
  };
  $scope.ok = function() {
    $scope.closeDialog();
    $timeout(function() {
      var columnFilter = columnFilteringSettings.columnFilter;
      columnFilter.returnType = columnFilteringSettings.column.command.returnType;
      var selectedValues = _.where($scope.model.items, {selected:true});
      columnFilter.selectedItems = [];
      _.each(selectedValues, function(i) {
        columnFilter.selectedItems = columnFilter.selectedItems.concat(i.values);
      });
      if (!columnFilter.selectedItems.length) {
        columnFilter = null;
      }
      gfGridManagementService.applyColumnFilter(columnFilteringSettings.gridInstanceId, columnFilteringSettings.columnId, columnFilteringSettings.parentColumnId, columnFilter, filterVectorIndex);
    });
  };
  function toggleItemByformattedValue(formattedValue, selected) {
    var item = _.find($scope.model.filteredItems, {formattedValue:formattedValue});
    toggleItem(item, selected);
  }
  function toggleItem(item, selected) {
    var sourceItem = _.findWhere($scope.model.items, {formattedValue:item.formattedValue});
    selected = !_.isUndefined(selected) ? selected : !sourceItem.selected;
    item.selected = sourceItem.selected = selected;
  }
  $scope.toggle = function(formattedValue) {
    toggleItemByformattedValue(formattedValue);
  };
  $scope.anyItemsSelected = function() {
    return _.where($scope.model.filteredItems, {selected:true}).length;
  };
  $scope.filterItems = function(searchText) {
    $scope.model.filteredItems = $filter("filter")($scope.model.items, {formattedValue:searchText});
  };
  $scope.areAllItemsSelected = function() {
    return _.every($scope.model.filteredItems, function(item) {
      return item.selected;
    });
  };
  $scope.toggleAll = function() {
    var selected = false;
    if (!$scope.anyItemsSelected()) {
      selected = true;
    }
    return _.each($scope.model.filteredItems, function(item) {
      toggleItem(item, selected);
    });
  };
  $scope.allSelected = false;
  $scope.gridOptions = {data:"model.filteredItems", enableRowSelection:false, multiSelect:false, sortInfo:{fields:["count"], directions:["desc"]}, columnDefs:[{field:"selected", width:30, headerCellTemplate:'<div><input type="checkbox" id="chHead" ng-checked="anyItemsSelected()" ng-click="toggleAll()" ng-class="{\'square-shape\':!areAllItemsSelected()}"/><label for="chHead"></label></div>', cellTemplate:'<input type="checkbox" ng-checked="row.entity.selected" id="{{row.entity.id}}" ng-click="toggle(row.entity.formattedValue)"/>' + 
  '<label for="{{row.entity.id}}"></label>'}, {displayName:$translate.instant("UNIQUE_VALUE"), field:"formattedValue"}, {displayName:$translate.instant("NUMBER_OF_ROWS"), width:80, field:"count"}]};
  function getItems() {
    var rows = gfGridManagementService.getGridSourceData(columnFilteringSettings.gridInstanceId);
    var column = gfGridManagementService.getColumnById(columnFilteringSettings.gridInstanceId, columnFilteringSettings.columnId);
    var vectorIndex = filterVectorIndex || 0;
    var groups = _.groupBy(rows, function(row) {
      var value = row[columnFilteringSettings.columnId];
      return _.isArray(value) ? value[vectorIndex] : value;
    });
    var resultDictionary = {};
    var i = 1;
    for (var uniqueKey in groups) {
      var cellValue = groups[uniqueKey][0][columnFilteringSettings.columnId], uniqueObjectValue = _.isArray(cellValue) ? cellValue[vectorIndex] : cellValue;
      var formatedUniqueValue = gfValueFormatting.getFormattedValue(uniqueObjectValue, column.cellsFormat);
      if (formatedUniqueValue in resultDictionary) {
        var existedItem = resultDictionary[formatedUniqueValue];
        existedItem.count += groups[uniqueKey].count;
        existedItem.values.push(cellValue);
        existedItem.selected = existedItem.selected || _.contains(columnFilteringSettings.columnFilter.selectedItems, cellValue);
      } else {
        resultDictionary[formatedUniqueValue] = {id:"filterItem" + i++, values:[uniqueObjectValue], formattedValue:formatedUniqueValue, count:groups[uniqueKey].length, selected:_.contains(columnFilteringSettings.columnFilter.selectedItems, uniqueObjectValue)};
      }
    }
    return _.values(resultDictionary);
  }
  function init() {
    $scope.model.items = getItems();
    $scope.model.filteredItems = angular.copy($scope.model.items);
  }
  init();
}]);
goog.provide("gridReport.model.filters.DateRangeColumnFilter");
goog.require("gridReport.model.filters.ColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.DateRangeColumnFilter = function(options) {
  if (options) {
    if (_.isDate(options.minDate)) {
      this.minDate = options.minDate;
    } else {
      if (_.isString(options.minDate)) {
        this.minDate = new Date(options.minDate);
      }
    }
    if (_.isDate(options.maxDate)) {
      this.maxDate = options.maxDate;
    } else {
      if (_.isString(options.maxDate)) {
        this.maxDate = new Date(options.maxDate);
      }
    }
  }
};
goog.inherits(gridReport.model.filters.DateRangeColumnFilter, gridReport.model.filters.ColumnFilter);
gridReport.model.filters.DateRangeColumnFilter.prototype.minDate = null;
gridReport.model.filters.DateRangeColumnFilter.prototype.maxDate = null;
gridReport.model.filters.DateRangeColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "datefilter", filterOrOperator = 0;
  filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, this.minDate, "GREATER_THAN_OR_EQUAL"));
  filtergroup.addfilter(filterOrOperator, filtergroup.createfilter(filtertype, this.maxDate, "LESS_THAN_OR_EQUAL"));
  return filtergroup;
};
gridReport.model.filters.DateRangeColumnFilter.prototype.serialize = function() {
  return{minDate:this.minDate, maxDate:this.maxDate, type:gridReport.model.filters.ColumnFilterTypes.DateRangeColumnFilter};
};
goog.provide("gridReport.model.filters.VectorDateColumnFilter");
goog.require("gridReport.model.filters.DateRangeColumnFilter");
goog.require("gridReport.model.filters.ColumnFilterTypes");
gridReport.model.filters.VectorDateColumnFilter = function(options) {
  if (options) {
    this.vectorIndex = options.vectorIndex;
    this.subColId = options.subColId;
  }
  goog.base(this, options);
};
goog.inherits(gridReport.model.filters.VectorDateColumnFilter, gridReport.model.filters.DateRangeColumnFilter);
gridReport.model.filters.VectorDateColumnFilter.prototype.vectorIndex = null;
gridReport.model.filters.VectorDateColumnFilter.prototype.convertToJqxFilter = function() {
  var filtergroup = new $.jqx.filter, filtertype = "custom", filterAndOperator = 0;
  filtergroup.addfilter(filterAndOperator, filtergroup.createfilter(filtertype, {value:this.minDate, vectorIndex:this.vectorIndex, subColId:this.subColId}, "GREATER_THAN_OR_EQUAL", this.customFilter));
  filtergroup.addfilter(filterAndOperator, filtergroup.createfilter(filtertype, {value:this.maxDate, vectorIndex:this.vectorIndex, subColId:this.subColId}, "LESS_THAN_OR_EQUAL", this.customFilter));
  return filtergroup;
};
gridReport.model.filters.VectorDateColumnFilter.prototype.serialize = function() {
  return{minDate:this.minDate, maxDate:this.maxDate, vectorIndex:this.vectorIndex, type:gridReport.model.filters.ColumnFilterTypes.VectorDateColumnFilter};
};
gridReport.model.filters.VectorDateColumnFilter.prototype.customFilter = function(filterValue, cellValue, operator) {
  var vectorIndex = filterValue.vectorIndex, subColId = filterValue.subColId;
  cellVal = cellValue, filterVal = filterValue.value;
  if (subColId) {
    cellVal = cellValue[subColId];
  }
  if (vectorIndex != undefined) {
    cellVal = cellVal[vectorIndex];
  }
  if (_.isNull(cellVal) || _.isUndefined(cellVal)) {
    return false;
  }
  switch(operator) {
    case "LESS_THAN_OR_EQUAL":
      return cellVal <= filterVal;
    case "GREATER_THAN_OR_EQUAL":
      return cellVal >= filterVal;
    default:
      return true;
  }
};
goog.provide("gridReport.directives.DateColumnFilteringManagerController");
gridReport.Module.controller("gfDateColumnFilteringManagerController", ["$scope", "$timeout", "$modalInstance", "columnFilteringSettings", "gfGridManagementService", function($scope, $timeout, $modalInstance, columnFilteringSettings, gfGridManagementService) {
  var filterVectorIndex = columnFilteringSettings.columnFilter.vectorIndex;
  $scope.model = {minDate:null, maxDate:null, min:null, max:null};
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.ok = function() {
    $scope.closeDialog();
    var columnFilter = null;
    if ($scope.model.minDate != null && ($scope.model.maxDate != null && ($scope.model.minDate != $scope.model.min || $scope.model.maxDate != $scope.model.max))) {
      columnFilteringSettings.columnFilter.minDate = $scope.model.minDate;
      columnFilteringSettings.columnFilter.maxDate = $scope.model.maxDate;
      columnFilter = columnFilteringSettings.columnFilter;
    }
    $timeout(function() {
      gfGridManagementService.applyColumnFilter(columnFilteringSettings.gridInstanceId, columnFilteringSettings.columnId, columnFilteringSettings.parentColumnId, columnFilter, filterVectorIndex);
    });
  };
  $scope.clear = function() {
    $scope.model.minDate = $scope.model.min;
    $scope.model.maxDate = $scope.model.max;
  };
  function init() {
    var columnData = _.findWhere(gfGridManagementService.getRawData(columnFilteringSettings.gridInstanceId), {id:columnFilteringSettings.columnId}), vectorIndex = _.isNumber(filterVectorIndex) ? filterVectorIndex : 0;
    if (columnData) {
      _.each(columnData.values, function(columnValue) {
        var value = _.isArray(columnValue.value) ? columnValue.value[vectorIndex] : columnValue.value;
        if ($scope.model.min == null && ($scope.model.max == null && _.isDate(value))) {
          $scope.model.min = value;
          $scope.model.max = value;
        } else {
          if (_.isDate(value)) {
            $scope.model.min = $scope.model.min > value ? value : $scope.model.min;
            $scope.model.max = $scope.model.max < value ? value : $scope.model.max;
          }
        }
      });
    }
    if (columnFilteringSettings.columnFilter && (columnFilteringSettings.columnFilter.minDate != null && columnFilteringSettings.columnFilter.maxDate != null)) {
      $scope.model.minDate = columnFilteringSettings.columnFilter.minDate;
      $scope.model.maxDate = columnFilteringSettings.columnFilter.maxDate;
    } else {
      $scope.model.minDate = $scope.model.min;
      $scope.model.maxDate = $scope.model.max;
    }
  }
  init();
}]);
goog.provide("gridReport.directives.CompositeTopBottomColumnFilteringManagerController");
gridReport.Module.controller("gfCompositeTopBottomColumnFilteringManagerController", ["$scope", "$timeout", "$modalInstance", "$translate", "gfGridManagementService", "columnFilteringSettings", function($scope, $timeout, $modalInstance, $translate, gfGridManagementService, columnFilteringSettings) {
  var filterVectorIndex = columnFilteringSettings.columnFilter.vectorIndex, columnFilter = null;
  $scope.filtersList = [];
  $scope.model = {maxValue:null, minValue:null, min:null, max:null, topBottomValue:null, isEnabled:true, typeList:[{title:$translate.instant("T_B_FILTER_TOP_VALUE"), id:"TopVal", persentage:false, direction:"top"}, {title:$translate.instant("T_B_FILTER_BOTTOM_VALUE"), id:"BotVal", persentage:false, direction:"bottom"}, {title:$translate.instant("T_B_FILTER_TOP_PER"), id:"TopPer", persentage:true, direction:"top"}, {title:$translate.instant("T_B_FILTER_BOTTOM_PER"), id:"BotPer", persentage:true, direction:"bottom"}], 
  typeTB:{id:null}};
  var rawData_ = [], sortData = [];
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.removeLast = function() {
    $scope.filtersList.slice(0, $scope.filtersList.length - 2);
  };
  var localSort = function(array, minVal, maxVal) {
    if (!minVal || !maxVal) {
      return _.filter(array, function(num) {
        return num !== null && num !== undefined;
      }).sort(function(a, b) {
        return a - b;
      });
    } else {
      return _.filter(array, function(num) {
        return num >= minVal && num <= maxVal;
      }).sort(function(a, b) {
        return a - b;
      });
    }
  };
  var createTBFilter = function(filterParams) {
    var filterTypeDirection = _.find($scope.model.typeList, function(type) {
      return type.id === filterParams.typeTB.id;
    }), minVal, maxVal, options, selection, sortData = localSort(rawData_), dataLength = sortData.length;
    if (!filterTypeDirection.persentage) {
      if (dataLength > filterParams.topBottomValue) {
        if (filterTypeDirection.direction === "bottom") {
          maxVal = sortData[filterParams.topBottomValue - 1];
          minVal = sortData[0];
        } else {
          maxVal = sortData[dataLength - 1];
          minVal = sortData[dataLength - filterParams.topBottomValue];
        }
      } else {
        maxVal = sortData[dataLength - 1];
        minVal = sortData[0];
      }
    } else {
      selection = Math.round(dataLength * filterParams.topBottomValue / 100);
      if (filterTypeDirection.direction === "bottom") {
        minVal = sortData[0];
        maxVal = sortData[selection - 1];
      } else {
        maxVal = sortData[dataLength - 1];
        minVal = sortData[dataLength - selection];
      }
    }
    options = {minValueTB:minVal, maxValueTB:maxVal, topBottomValue:filterParams.topBottomValue, typeTB:filterTypeDirection};
    return options;
  };
  $scope.ok = function() {
    $scope.closeDialog();
    if ($scope.model.minValue < $scope.model.min) {
      $scope.model.minValue = $scope.model.min;
    }
    if ($scope.model.maxValue > $scope.model.max) {
      $scope.model.maxValue = $scope.model.max;
    }
    var vectorIndex = _.isNumber(filterVectorIndex) ? filterVectorIndex : 0;
    var columnCellsFormat = getCellsFormat(columnFilteringSettings.column, vectorIndex);
    if ($scope.menuItem === "rangeFilter" && $scope.model.min != $scope.model.minValue || $scope.model.max != $scope.model.maxValue) {
      columnFilter = columnFilteringSettings.columnFilter;
      columnFilter.minValue = $scope.model.minValue === $scope.model.min ? _.min(_.filter(rawData_, function(el) {
        return el !== null;
      })) : convertToRawValue($scope.model.minValue, columnCellsFormat);
      columnFilter.maxValue = $scope.model.maxValue === $scope.model.max ? _.max(rawData_) : convertToRawValue($scope.model.maxValue, columnCellsFormat);
      delete columnFilter.maxValueTB;
      delete columnFilter.minValueTB;
      delete columnFilter.topBottomValue;
    } else {
      if (_.isNumber($scope.model.topBottomValue) && ($scope.model.topBottomValue > 0 && ($scope.model.typeTB.id !== null && $scope.model.typeTB.id !== undefined))) {
        var options = createTBFilter({topBottomValue:$scope.model.topBottomValue.toFixed() * 1, typeTB:$scope.model.typeTB});
        columnFilter = columnFilteringSettings.columnFilter;
        columnFilter.maxValueTB = options.maxValueTB;
        columnFilter.minValueTB = options.minValueTB;
        columnFilter.topBottomValue = options.topBottomValue;
        columnFilter.typeTB = options.typeTB;
        delete columnFilter.minValue;
        delete columnFilter.maxValue;
      }
    }
    $timeout(function() {
      if (columnFilter) {
        gfGridManagementService.applyColumnFilter(columnFilteringSettings.gridInstanceId, columnFilteringSettings.columnId, columnFilteringSettings.parentColumnId, columnFilter, filterVectorIndex);
      } else {
        gfGridManagementService.applyColumnFilter(columnFilteringSettings.gridInstanceId, columnFilteringSettings.columnId, columnFilteringSettings.parentColumnId, null, filterVectorIndex);
      }
    });
  };
  $scope.changeFilterType = function(type) {
    $scope.menuItem = type;
  };
  $scope.onSlid = function(values) {
    $scope.model.minValue = values[0];
    $scope.model.maxValue = values[1];
    $timeout(angular.noop);
  };
  $scope.clear = function() {
    $scope.model.minValue = $scope.model.min;
    $scope.model.maxValue = $scope.model.max;
    $scope.model.topBottomValue = 1;
    $scope.model.typeTB = {id:null};
    $timeout(angular.noop);
  };
  function convertToRawValue(value, cellsFormat) {
    if (value === null || value === undefined) {
      return null;
    }
    var output = value;
    if (cellsFormat.percentage) {
      output = output / 100;
    }
    return output;
  }
  function formatValue(value, cellsFormat) {
    if (value === null || value === undefined) {
      return null;
    }
    var output = value;
    if (cellsFormat.percentage) {
      output = value * 100;
    }
    if (_.isNumber(value)) {
      var decimalDigits = cellsFormat.decimalDigits < 0 ? 0 : cellsFormat.decimalDigits;
      if (_.isNumber(decimalDigits)) {
        var decimalplaces = decimalDigits;
        var decimal = Math.pow(10, decimalplaces);
        output = (output * decimal).toFixed(0) / decimal;
      }
    }
    return output;
  }
  function getCellsFormat(column, vectorIndex) {
    if (!column.command.isDataBlock()) {
      if (!column.command.isFactorRank()) {
        return column.cellsFormat;
      }
      var index = 0;
      var col = _.find(column.gridColumns, function(c) {
        return vectorIndex === index++;
      });
      return col.cellsFormat;
    }
    return column.getSubColumnByVectorIndex(vectorIndex).cellsFormat;
  }
  function init() {
    $scope.menuItem = "rangeFilter";
    var column = columnFilteringSettings.column;
    var columnData = _.findWhere(gfGridManagementService.getRawData(columnFilteringSettings.gridInstanceId), {id:columnFilteringSettings.columnId});
    var vectorIndex = _.isNumber(filterVectorIndex) ? filterVectorIndex : 0;
    var columnCellsFormat = getCellsFormat(column, vectorIndex);
    var data = [];
    rawData_ = [];
    if (columnData) {
      _.each(columnData.values, function(columnValue) {
        var value = _.isArray(columnValue.value) ? columnValue.value[vectorIndex] : columnValue.value;
        data.push(formatValue(value, columnCellsFormat));
        rawData_.push(value);
        if ($scope.model.min == null && $scope.model.max == null) {
          $scope.model.min = value;
          $scope.model.max = value;
        } else {
          if (_.isNumber(value) && !_.isNaN(value)) {
            $scope.model.min = Math.min($scope.model.min, value);
            $scope.model.max = Math.max($scope.model.max, value);
          }
        }
      });
    }
    $scope.data = data;
    if ($scope.model.min == null && $scope.model.max == null) {
      $scope.model.isEnabled = false;
      $scope.model.min = 0;
      $scope.model.max = 1;
    }
    if (columnFilteringSettings.columnFilter.topBottomValue) {
      $scope.model.topBottomValue = columnFilteringSettings.columnFilter.topBottomValue;
      $scope.model.typeTB = columnFilteringSettings.columnFilter.typeTB;
    }
    if (columnFilteringSettings.columnFilter && (columnFilteringSettings.columnFilter.minValue != null && columnFilteringSettings.columnFilter.maxValue != null)) {
      $scope.model.minValue = formatValue(columnFilteringSettings.columnFilter.minValue, columnCellsFormat);
      $scope.model.maxValue = formatValue(columnFilteringSettings.columnFilter.maxValue, columnCellsFormat);
    } else {
      $scope.model.minValue = formatValue($scope.model.min, columnCellsFormat);
      $scope.model.maxValue = formatValue($scope.model.max, columnCellsFormat);
    }
    $scope.model.min = formatValue($scope.model.min, columnCellsFormat);
    $scope.model.max = formatValue($scope.model.max, columnCellsFormat);
  }
  init();
}]);
goog.provide("gridReport.directives.NumericColumnFilteringManagerController");
gridReport.Module.controller("gfNumericColumnFilteringManagerController", ["$scope", "$timeout", "$modalInstance", "gfGridManagementService", "columnFilteringSettings", function($scope, $timeout, $modalInstance, gfGridManagementService, columnFilteringSettings) {
  var filterVectorIndex = columnFilteringSettings.columnFilter.vectorIndex;
  var columnFilter = null;
  $scope.model = {maxValue:null, minValue:null, min:null, max:null, isEnabled:true};
  var rawData_ = [];
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.ok = function() {
    $scope.closeDialog();
    if ($scope.model.minValue < $scope.model.min) {
      $scope.model.minValue = $scope.model.min;
    }
    if ($scope.model.maxValue > $scope.model.max) {
      $scope.model.maxValue = $scope.model.max;
    }
    var vectorIndex = _.isNumber(filterVectorIndex) ? filterVectorIndex : 0;
    var columnCellsFormat = getCellsFormat(columnFilteringSettings.column, vectorIndex);
    if ($scope.model.min != $scope.model.minValue || $scope.model.max != $scope.model.maxValue) {
      columnFilter = columnFilteringSettings.columnFilter;
      columnFilter.minValue = $scope.model.minValue === $scope.model.min ? _.min(_.filter(rawData_, function(el) {
        return el !== null;
      })) : convertToRawValue($scope.model.minValue, columnCellsFormat);
      columnFilter.maxValue = $scope.model.maxValue === $scope.model.max ? _.max(rawData_) : convertToRawValue($scope.model.maxValue, columnCellsFormat);
    }
    $timeout(function() {
      gfGridManagementService.applyColumnFilter(columnFilteringSettings.gridInstanceId, columnFilteringSettings.columnId, columnFilteringSettings.parentColumnId, columnFilter, filterVectorIndex);
    });
  };
  $scope.onSlid = function(values) {
    $scope.model.minValue = values[0];
    $scope.model.maxValue = values[1];
    $timeout(angular.noop);
  };
  $scope.clear = function() {
    $scope.model.minValue = $scope.model.min;
    $scope.model.maxValue = $scope.model.max;
    $timeout(angular.noop);
  };
  function convertToRawValue(value, cellsFormat) {
    if (value === null || value === undefined) {
      return null;
    }
    var output = value;
    if (cellsFormat.percentage) {
      output = output / 100;
    }
    return output;
  }
  function formatValue(value, cellsFormat) {
    if (value === null || value === undefined) {
      return null;
    }
    var output = value;
    if (cellsFormat.percentage) {
      output = value * 100;
    }
    if (_.isNumber(value)) {
      var decimalDigits = cellsFormat.decimalDigits < 0 ? 0 : cellsFormat.decimalDigits;
      if (_.isNumber(decimalDigits)) {
        var decimalplaces = decimalDigits;
        var decimal = Math.pow(10, decimalplaces);
        output = (output * decimal).toFixed(0) / decimal;
      }
    }
    return output;
  }
  function getCellsFormat(column, vectorIndex) {
    if (!column.command.isDataBlock()) {
      if (!column.command.isFactorRank()) {
        return column.cellsFormat;
      }
      var index = 0;
      var col = _.find(column.gridColumns, function() {
        return vectorIndex === index++;
      });
      return col.cellsFormat;
    }
    return column.getSubColumnByVectorIndex(vectorIndex).cellsFormat;
  }
  function init() {
    var column = columnFilteringSettings.column;
    var columnData = _.findWhere(gfGridManagementService.getRawData(columnFilteringSettings.gridInstanceId), {id:columnFilteringSettings.columnId});
    var vectorIndex = _.isNumber(filterVectorIndex) ? filterVectorIndex : 0;
    var columnCellsFormat = getCellsFormat(column, vectorIndex);
    var data = [];
    rawData_ = [];
    if (columnData) {
      _.each(columnData.values, function(columnValue) {
        var value = _.isArray(columnValue.value) ? columnValue.value[vectorIndex] : columnValue.value;
        data.push(formatValue(value, columnCellsFormat));
        rawData_.push(value);
        if ($scope.model.min == null && $scope.model.max == null) {
          $scope.model.min = value;
          $scope.model.max = value;
        } else {
          if (_.isNumber(value) && !_.isNaN(value)) {
            $scope.model.min = Math.min($scope.model.min, value);
            $scope.model.max = Math.max($scope.model.max, value);
          }
        }
      });
    }
    $scope.data = data;
    if ($scope.model.min == null && $scope.model.max == null) {
      $scope.model.isEnabled = false;
      $scope.model.min = 0;
      $scope.model.max = 1;
    }
    if (columnFilteringSettings.columnFilter && (columnFilteringSettings.columnFilter.minValue != null && columnFilteringSettings.columnFilter.maxValue != null)) {
      $scope.model.minValue = formatValue(columnFilteringSettings.columnFilter.minValue, columnCellsFormat);
      $scope.model.maxValue = formatValue(columnFilteringSettings.columnFilter.maxValue, columnCellsFormat);
    } else {
      $scope.model.minValue = formatValue($scope.model.min, columnCellsFormat);
      $scope.model.maxValue = formatValue($scope.model.max, columnCellsFormat);
    }
    $scope.model.min = formatValue($scope.model.min, columnCellsFormat);
    $scope.model.max = formatValue($scope.model.max, columnCellsFormat);
  }
  init();
}]);
goog.provide("gridReport.directives.ColumnFilteringManagerDialogFactory");
goog.require("gridReport.directives.MembershipColumnFilteringManagerController");
goog.require("gridReport.directives.NumericColumnFilteringManagerController");
goog.require("gridReport.directives.DateColumnFilteringManagerController");
goog.require("gridReport.directives.CompositeTopBottomColumnFilteringManagerController");
goog.require("gridReport.model.filters.MembershipColumnFilter");
goog.require("gridReport.model.filters.DateRangeColumnFilter");
goog.require("gridReport.model.filters.NumericRangeColumnFilter");
goog.require("gridReport.model.filters.CompositeTopBottomNumericColumnFilter");
goog.require("gridReport.model.filters.VectorNumericColumnFilter");
goog.require("gridReport.model.filters.VectorDateColumnFilter");
goog.require("gridReport.model.filters.VectorMembershipColumnFilter");
gridReport.Module.service("gfColumnFilteringManagerDialogFactory", [function() {
  var service = {};
  function getCommonOptions(columnFilteringSettings) {
    return{windowClass:"gf-modal", keyboard:false, resolve:{columnFilteringSettings:function() {
      return columnFilteringSettings;
    }}};
  }
  var membershipColumnFilteringModalOptions = {templateUrl:"scripts/directives/columnFilteringManager/membershipColumnFilteringManager/MembershipColumnFilteringManager.html", controller:"MembershipColumnFilteringManagerController"};
  var numericColumnFilteringModalOptions = {templateUrl:"scripts/directives/columnFilteringManager/numericColumnFilteringManager/NumericColumnFilteringManager.html", controller:"gfNumericColumnFilteringManagerController"};
  var compositeTopBottomColumnFilteringModalOptions = {templateUrl:"scripts/directives/columnFilteringManager/compositeTopBottomColumnFilteringManager/CompositeTopBottomColumnFilteringManager.html", controller:"gfCompositeTopBottomColumnFilteringManagerController"};
  var dateColumnFilteringModalOptions = {templateUrl:"scripts/directives/columnFilteringManager/dateColumnFilteringManager/DateColumnFilteringManager.html", controller:"gfDateColumnFilteringManagerController"};
  service.resolve = function(columnFilteringSettings) {
    if (!columnFilteringSettings) {
      throw new Error("columnFilteringSettings should be provided");
    }
    if (columnFilteringSettings.columnFilter instanceof gridReport.model.filters.MembershipColumnFilter || columnFilteringSettings.columnFilter instanceof gridReport.model.filters.VectorMembershipColumnFilter) {
      return _.extend(getCommonOptions(columnFilteringSettings), membershipColumnFilteringModalOptions);
    }
    if (columnFilteringSettings.columnFilter instanceof gridReport.model.filters.NumericRangeColumnFilter || columnFilteringSettings.columnFilter instanceof gridReport.model.filters.VectorNumericColumnFilter) {
      return _.extend(getCommonOptions(columnFilteringSettings), numericColumnFilteringModalOptions);
    }
    if (columnFilteringSettings.columnFilter instanceof gridReport.model.filters.CompositeTopBottomNumericColumnFilter || columnFilteringSettings.columnFilter instanceof gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter) {
      return _.extend(getCommonOptions(columnFilteringSettings), compositeTopBottomColumnFilteringModalOptions);
    }
    if (columnFilteringSettings.columnFilter instanceof gridReport.model.filters.DateRangeColumnFilter || columnFilteringSettings.columnFilter instanceof gridReport.model.filters.VectorDateColumnFilter) {
      return _.extend(getCommonOptions(columnFilteringSettings), dateColumnFilteringModalOptions);
    }
    throw new Error("Unknown column filter type");
  };
  return service;
}]);
goog.provide("gridReport.directives.TopBottomRangeSelector");
gridReport.Module.directive("gfTopBottomRangeSelector", ["$translate", function($translate) {
  return{restrict:"E", templateUrl:"scripts/directives/topBottomRangeSelector/TopBottomRangeSelector.html", scope:{type:"=?", typeList:"=?", value:"=?"}, link:function(scope, element) {
    scope.value = scope.value || 1;
    scope.clear = function() {
      scope.type = null;
      scope.value = 1;
    };
    scope.errors = {notNumber:$translate.instant("NUMBER_INPUT_VALIDATION_MESSAGE"), outOfRange:$translate.instant("NUMBER_OUT_OF_RANGE_VALIDATION_MESSAGE")};
  }};
}]);
goog.provide("gridReport.directives.RangeSelectorDirective");
gridReport.Module.directive("gfRange", ["gfConfig", function(gfConfig) {
  return{restrict:"E", templateUrl:"scripts/directives/rangeSelector/RangeSelector.html", scope:{values:"=", isEnabled:"=", min:"=", max:"=", slid:"&", minValue:"=", maxValue:"="}, link:function(scope, element) {
    scope.onSlid = function(values) {
      (scope.slid || angular.noop)({values:values});
    };
    scope.isHistogramAvailable = gfConfig.useHistogramControl && scr.control.Histogram !== undefined;
    if (!scope.isHistogramAvailable) {
      scope.model = {minValue:null, maxValue:null};
      scope.$watch("minValue", function(v) {
        scope.model.minValue = v;
      });
      scope.$watch("maxValue", function(v) {
        scope.model.maxValue = v;
      });
      scope.$watch("model", function(v) {
        scope.minValue = v.minValue;
        scope.maxValue = v.maxValue;
      }, true);
      return;
    }
    var histogram_ = new scr.control.Histogram({type:scr.control.Histogram.TYPES.RANGE_SELECTION, operator:"Between", rerenderHistogramOnSliderMove:true});
    var dataConverter_ = new scr.ArrayToHistogramData;
    var histogramInputs_ = new scr.control.HistogramInputControls({histogram:histogram_});
    var histData_ = null;
    function updateHistogramRange() {
      if (!histData_) {
        return;
      }
      var values = [];
      values.push(scope.minValue != null ? scope.minValue : scope.min);
      values.push(scope.maxValue != null ? scope.maxValue : scope.max);
      if (values[0] != null && values[1] !== null) {
        histogram_.setDataValues(values);
        histogramInputs_.onHistoChangeHandler_();
      }
    }
    function setRange() {
      if (scope.minValue != undefined && scope.maxValue != undefined) {
        updateHistogramRange();
      }
    }
    scope.$watch("values", function() {
      if (!scope.values) {
        return;
      }
      histData_ = dataConverter_.convertToHistogramData(scope.values);
      histogram_.setData(histData_);
      histogram_.render(element.find("#histogram"), true);
      histogramInputs_.render($("#histogramInputs"));
      updateHistogramRange();
    });
    scope.$watch("minValue", setRange);
    scope.$watch("maxValue", setRange);
    scope.element = $(element).closest(".modal-dialog");
    scope.element.draggable({handle:".modal-header"});
    histogram_.on(scr.control.Histogram.EVENTS.CHANGE, function(e, args) {
      if (scope.onSlid) {
        var values = histogram_.getDataValues();
        if (values[0] === "") {
          values[0] = scope.min;
        }
        if (values[1] === "") {
          values[1] = scope.max;
        }
        scope.onSlid(values);
      }
    });
  }};
}]);
goog.provide("gridReport.directives.ColumnFilteringManagerDialogService");
goog.require("gridReport.directives.RangeSelectorDirective");
goog.require("gridReport.directives.ColumnFilteringManagerDialogFactory");
goog.require("gridReport.directives.TopBottomRangeSelector");
gridReport.Module.service("gfColumnFilteringManagerDialogService", ["$rootScope", "$modal", "gfColumnFilteringManagerDialogFactory", "$log", function($rootScope, $modal, gfColumnFilteringManagerDialogFactory, $log) {
  var service = {}, modal;
  service.openDialog = function(columnFilteringSettings) {
    var modalSettings = gfColumnFilteringManagerDialogFactory.resolve(columnFilteringSettings);
    modal = $modal.open(modalSettings);
    return modal;
  };
  service.closeDialog = function() {
    try {
      modal && (modal.close && modal.close());
      modal = null;
    } catch (e) {
      $log.error(e);
    }
  };
  return service;
}]);
goog.provide("gridReport.model.StatisticsCalculation");
gridReport.model.StatisticsCalculation = function(options) {
  if (options) {
    if (options.hasOwnProperty("name")) {
      this.name = options.name;
    }
    if (options.hasOwnProperty("displayText")) {
      this.displayText = options.displayText;
    }
    if (options.hasOwnProperty("func")) {
      this.func = options.func;
    }
    if (options.hasOwnProperty("getStatisticsLineName")) {
      this.getStatisticsLineName = options.getStatisticsLineName;
    }
    if (options.hasOwnProperty("isPremium")) {
      this.isPremium = options.isPremium;
    }
  }
};
gridReport.model.StatisticsCalculation.prototype.name = undefined;
gridReport.model.StatisticsCalculation.prototype.displayText = undefined;
gridReport.model.StatisticsCalculation.prototype.func = undefined;
gridReport.model.StatisticsCalculation.prototype.isPremium = undefined;
gridReport.model.StatisticsCalculation.prototype.getStatisticsLineName = function() {
  return this.displayText;
};
goog.provide("gridReport.services.StatisticsAlgorithmsService");
goog.require("gridReport.model.StatisticsCalculation");
gridReport.Module.factory("gfStatisticsAlgorithms", ["$q", function($q) {
  var statistics = [], algorithms;
  var register = function(item) {
    statistics.push(new gridReport.model.StatisticsCalculation(item));
  };
  var unregister = function(item) {
    statistics = _.reject(statistics, function(calc) {
      return calc.name === item.name;
    });
  };
  var resolve = function(name) {
    return _.findWhere(statistics, {name:name});
  };
  var getAll = function() {
    return statistics.slice();
  };
  var resolveByNames = function(names) {
    return _.map(names, function(name) {
      return resolve(name);
    });
  };
  var clear = function() {
    algorithms = [];
  };
  var convertCalculationAlgorithmToStatisticsAlgorithm = function(algorithm) {
    return function(colId, data) {
      var defered = $q.defer();
      defered.resolve(algorithm(colId, data));
      return defered.promise;
    };
  };
  return{resolve:resolve, register:register, unregister:unregister, getAll:getAll, clear:clear, resolveByNames:resolveByNames, convertCalculationAlgorithmToStatisticsAlgorithm:convertCalculationAlgorithmToStatisticsAlgorithm};
}]);
goog.provide("gridReport.services.ColumnInfoDialogController");
gridReport.Module.controller("gfColumnInfoDialogController", ["$scope", "$modalInstance", "column", "primaryRow", "gfDataCloudCommandService", function($scope, $modalInstance, column, primaryRow, gfDataCloudCommandService) {
  $scope.model = {isLoading:false, description:"", name:"", expression:"", primaryRow:"", errorMessage:undefined};
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.onHeaderHover = function() {
    $(".gf-column-info-dialog").draggable({handle:".modal-header"});
  };
  $scope.model.name = column.header;
  $scope.model.primaryRow = primaryRow || "MSFT.O";
  if (column.command.metadata.type == scr.ObjectType.Expression || column.command.metadata.type == "columnmath") {
    $scope.model.expression = column.command.expression;
  } else {
    if (column.command.metadata.type == scr.ObjectType.Meta || column.command.metadata.type == scr.ObjectType.Field) {
      $scope.model.isLoading = true;
      gfDataCloudCommandService.get($scope.gridInstanceId).getCommandMetadataById(column.command.id).then(function(success) {
        if (success) {
          $scope.model.expression = column.command.expression;
          $scope.model.description = success.description;
        }
        $scope.model.isLoading = false;
      }, function() {
        $scope.model.isLoading = false;
      });
    } else {
      if (column.command.metadata.type == scr.ObjectType.MultiFactorRank) {
        $scope.model.isLoading = true;
        gfDataCloudCommandService.get($scope.gridInstanceId).getSavedMultiFactorRankById(column.command.id).then(function(success) {
          if (success) {
            $scope.model.expression = column.command.expression;
            $scope.model.description = success.description;
          }
          $scope.model.isLoading = false;
        }), function() {
          $scope.model.isLoading = false;
        };
      }
    }
  }
}]);
goog.provide("gridReport.services.ColumnInfoDialogService");
goog.require("gridReport.services.ColumnInfoDialogController");
gridReport.Module.service("gfColumnInfoDialogService", ["$modal", "$log", function($modal, $log) {
  var service = {}, popup;
  service.closeDialog = function() {
    if (popup) {
      try {
        popup.close();
        popup = null;
      } catch (e) {
      }
    }
  };
  service.openDialog = function(column, primaryRow) {
    service.closeDialog();
    popup = $modal.open({windowClass:"gf-column-info-dialog gf-modal", templateUrl:"scripts/services/columnInfoDialog/ColumnInfoDialog.html", controller:"gfColumnInfoDialogController", backdrop:false, resolve:{column:function() {
      return column;
    }, primaryRow:function() {
      return primaryRow;
    }}});
    return popup;
  };
  return service;
}]);
goog.provide("gridReport.services.RowKeysStorage");
gridReport.services.RowKeysStorage = function() {
  this.addColInfoToStorage = function(data) {
    if (_.isNull(data) || _.isUndefined(data)) {
      return;
    }
    var i;
    var curColKeys;
    var addedRowKeys = [];
    for (i = 0;i < data.length;i++) {
      if (_.findWhere(this.columnUniqueKeys, {colId:data[i].id})) {
        continue;
      }
      curColKeys = _.pluck(data[i].values, "rowKey");
      addedRowKeys = addedRowKeys.concat(this.addColKeysToStorage(data[i].id, curColKeys));
    }
    if (addedRowKeys.length > 0 && !_.isNull(this.aggregateKeysChanged)) {
      this.aggregateKeysChanged(addedRowKeys, []);
    }
  };
  this.addKeysToStorage = function(keys) {
    this.addColKeysToStorage("rowKey", keys);
    if (!_.isEmpty(keys)) {
      (this.aggregateKeysChanged || angular.noop)(keys, []);
    }
  };
  this.removeKeysFromStorage = function(keys) {
    if (!_.isEmpty(keys)) {
      this.removeColKeysFromStorage("rowKey", keys);
      (this.aggregateKeysChanged || angular.noop)([], keys);
    }
  };
  this.removeColInfoFromStorage = function(colIds) {
    if (_.isEmpty(colIds)) {
      return;
    }
    var i;
    var removeIndex;
    var removedKeys = [];
    var curRemoveColInfo;
    for (i = 0;i < colIds.length;i++) {
      curRemoveColInfo = _.findWhere(this.columnUniqueKeys, {colId:colIds[i]});
      if (_.isNull(curRemoveColInfo) || _.isUndefined(curRemoveColInfo)) {
        continue;
      }
      removedKeys = removedKeys.concat(curRemoveColInfo.keys);
      removeIndex = this.columnUniqueKeys.indexOf(curRemoveColInfo);
      this.columnUniqueKeys.splice(removeIndex, 1);
    }
    if (this.columnUniqueKeys.length == 0) {
      removedKeys = this.aggregateKeys;
      this.aggregateKeys = [];
    } else {
      for (i = 0;i < removedKeys.length;i++) {
        this.aggregateKeys.splice(this.aggregateKeys.indexOf(removedKeys[i]), 1);
      }
    }
    if (removedKeys.length > 0) {
      (this.aggregateKeysChanged || angular.noop)([], removedKeys);
    }
  };
  this.removeColKeysFromStorage = function(colId, keys) {
    var uniqueKeys = _.findWhere(this.columnUniqueKeys, {colId:colId});
    var aggregateKeys = this.aggregateKeys;
    angular.forEach(keys, function(k) {
      var kIndex = _.indexOf(uniqueKeys, k);
      if (kIndex >= 0) {
        uniqueKeys.splice(kIndex, 1);
      }
      kIndex = _.indexOf(aggregateKeys, k);
      if (kIndex >= 0) {
        aggregateKeys.splice(kIndex, 1);
      }
    });
  };
  this.addColKeysToStorage = function(colId, keys) {
    var that = this;
    var colInd;
    var rowInd;
    var removedKey;
    for (colInd = 0;colInd < this.columnUniqueKeys.length;colInd++) {
      removedKey = [];
      for (rowInd = 0;rowInd < this.columnUniqueKeys[colInd].keys.length;rowInd++) {
        if (_.contains(keys, this.columnUniqueKeys[colInd].keys[rowInd])) {
          removedKey.push(this.columnUniqueKeys[colInd].keys[rowInd]);
        }
      }
      if (removedKey.length > 0) {
        _.each(removedKey, function(rk) {
          that.columnUniqueKeys[colInd].keys.splice(_.indexOf(that.columnUniqueKeys[colInd].keys, rk), 1);
        });
      }
    }
    var difWithCurrentState = _.difference(keys, this.aggregateKeys);
    this.columnUniqueKeys.push({colId:colId, keys:difWithCurrentState});
    this.aggregateKeys = this.aggregateKeys.concat(difWithCurrentState);
    return difWithCurrentState;
  };
  this.columnUniqueKeys = [];
  this.aggregateKeys = [];
  this.aggregateKeysChanged = null;
};
gridReport.services.RowKeysStorage.prototype.clean = function() {
  if (this.aggregateKeys.length > 0) {
    (this.aggregateKeysChanged || angular.noop)([], this.aggregateKeys, {cleaned:true});
  }
  this.columnUniqueKeys = [];
  this.aggregateKeys = [];
};
gridReport.services.RowKeysStorage.prototype.cleanAddedKeys = function() {
  this.removeColInfoFromStorage(["rowKey"]);
};
goog.provide("gridReport.services.DataService");
goog.require("gridReport.model.GridColumn");
goog.require("gridReport.services.RowKeysStorage");
gridReport.services.DataService = function(gfDataProviderResolver, gfLogManager) {
  var that = this;
  this.dataProviders = [];
  this.keysByColumnStorage = new gridReport.services.RowKeysStorage;
  this.keysChangedCallback = undefined;
  this.columnsDataUpdateCallback = undefined;
  this.beginColumnsDataUpdateCallback = undefined;
  this.endColumnsDataUpdateCallback = undefined;
  this.loadingDataStartedCallback = undefined;
  this.clearDataCallback = undefined;
  this.keysByColumnStorage.aggregateKeysChanged = function(addedKeys, removedKeys, additionalOptions) {
    if (_.isNull(that.keysChangedCallback) || _.isUndefined(that.keysChangedCallback)) {
      return;
    }
    if (addedKeys.length > 0) {
      gfLogManager.trace(function() {
        return addedKeys.length + " keys added " + addedKeys.join(",");
      });
    }
    if (removedKeys.length > 0) {
      gfLogManager.trace(function() {
        return removedKeys.length + " keys removed " + removedKeys.join(",");
      });
    }
    that.keysChangedCallback(addedKeys, removedKeys, additionalOptions);
  };
  var runColumnsAction = function(dataService, columns, action) {
    var dataProviderIds = _.chain(columns).map(function(col) {
      return col.command.dataProviderId;
    }).uniq().value();
    var curDataProvider;
    for (var i = 0;i < dataProviderIds.length;i++) {
      curDataProvider = dataService.getDataProvider(dataProviderIds[i]);
      action(curDataProvider, _.filter(columns, function(col) {
        return col.command.dataProviderId === dataProviderIds[i];
      }));
    }
  };
  this.dataLoaded = function(result) {
    if (!result.isSuccess()) {
      var exceptions = result.exceptions;
      angular.forEach(exceptions, function(exception) {
        if (exception.hasOwnProperty("severity")) {
          gfLogManager.log(exception);
        } else {
          gfLogManager.error(exception);
        }
      });
      (that.columnDataLoadingFailedCallback || angular.noop)(exceptions[0].columns, exceptions[0]);
      return;
    }
    var colIds = _.pluck(result.data, "id");
    gfLogManager.trace(function() {
      return "Data for columns: " + colIds.join(",") + " loaded";
    });
    if (_.isNull(that.columnsDataUpdateCallback) || _.isUndefined(that.columnsDataUpdateCallback)) {
      return;
    }
    that.keysByColumnStorage.addColInfoToStorage(result.data);
    (that.beginColumnsDataUpdateCallback || angular.noop)(colIds);
    if (result.data.length > 0) {
      that.columnsDataUpdateCallback(result.data);
    }
    (that.endColumnsDataUpdateCallback || angular.noop)(colIds);
  };
  this.loadingDataStarted = function(columns) {
    (that.loadingDataStartedCallback || angular.noop)(columns);
  };
  this.clearData = function(dataProviderId) {
    that.clean(dataProviderId);
    (that.clearDataCallback || angular.noop)(dataProviderId);
  };
  this.getDataProvider = function(dataProviderId) {
    var provider = _.findWhere(that.dataProviders, {id:dataProviderId});
    if (_.isNull(provider) || _.isUndefined(provider)) {
      provider = gfDataProviderResolver.resolve(dataProviderId);
      provider.dataLoaded = that.dataLoaded;
      provider.dataLoading = that.loadingDataStarted;
      provider.clearData = _.partial(that.clearData, dataProviderId);
      that.dataProviders.push(provider);
    }
    return provider;
  };
  this.subscribe = function(columns) {
    var cols = that.getSubscribableColumns(columns);
    _.each(cols, function(column) {
      (that.columnAddedCallback || angular.noop)(column);
    });
    runColumnsAction(that, cols, function(provider, actColumns) {
      provider.subscribe(actColumns);
    });
  };
  this.unsubscribe = function(columns) {
    var cols = that.getSubscribableColumns(columns);
    _.each(cols, function(column) {
      (that.columnRemovedCallback || angular.noop)(column);
    });
    runColumnsAction(that, cols, function(provider, actColumns) {
      provider.unsubscribe(actColumns);
      that.keysByColumnStorage.removeColInfoFromStorage(_.pluck(actColumns, "id"));
    });
  };
  function abortDataProviders(dataProviderId) {
    for (var i = 0;i < that.dataProviders.length;i++) {
      var dp = that.dataProviders[i];
      if (dataProviderId) {
        if (dp.id == dataProviderId) {
          dp.abort && dp.abort();
          break;
        }
      } else {
        dp.abort && dp.abort();
      }
    }
  }
  function cleanKeysByColumnsStorage(dataProviderId) {
    if (dataProviderId) {
      var provider = _.findWhere(that.dataProviders, {id:dataProviderId});
      if (provider) {
        var colomnsIds = _.pluck(provider.getSubscribedColumns(), "id");
        that.keysByColumnStorage.removeColInfoFromStorage(colomnsIds);
      }
      that.keysByColumnStorage.cleanAddedKeys();
      return;
    }
    that.keysByColumnStorage.clean();
  }
  this.clean = function(dataProviderId) {
    cleanKeysByColumnsStorage(dataProviderId);
    abortDataProviders(dataProviderId);
  };
  this.getSubscribableColumns = function(columns) {
    var result = [];
    for (var i = 0;i < columns.length;i++) {
      if (columns[i].hasSubColumns() && !columns[i].isComposeToVector) {
        for (var key in columns[i].gridColumns) {
          if (columns[i].gridColumns[key].canSubscribe()) {
            result.push(columns[i].gridColumns[key]);
          }
        }
      } else {
        if (columns[i].canSubscribe()) {
          result.push(columns[i]);
        }
        if (columns[i].hasSubColumns()) {
          _.each(_.filter(columns[i].gridColumns, function(c) {
            return c.command.isAuditable();
          }), function(c) {
            result.push(c);
          });
        }
      }
    }
    return result;
  };
  this.resetProviders = function() {
    angular.forEach(that.dataProviders, function(dp) {
      (dp.abort || angular.noop)();
      (dp.unsubscribeAll || angular.noop)();
    });
  };
  this.destroy = function() {
    _.each(that.dataProviders, function(provider) {
      delete provider.dataLoaded;
      delete provider.dataLoading;
      delete provider.clearData;
      delete provider.startLoading;
      delete provider.endLoading;
      delete provider.startLoadingRows;
      delete provider.endLoadingRows;
    });
    delete that.dataProviders;
    delete this.keysByColumnStorage;
    delete this.keysChangedCallback;
    delete this.columnsDataUpdateCallback;
    delete this.beginColumnsDataUpdateCallback;
    delete this.loadingDataStartedCallback;
    delete this.clearDataCallback;
    delete this.columnDataLoadingFailedCallback;
    delete this.columnRemovedCallback;
    delete this.columnAddedCallback;
    delete this.endColumnsDataUpdateCallback;
    delete this.startLoadingRows;
    delete this.endLoadingRows;
  };
  this.addKeys = function(keys, columns) {
    this.keysByColumnStorage.addKeysToStorage(keys);
    runColumnsAction(that, that.getSubscribableColumns(columns), function(provider) {
      provider.loadPartialData(keys);
    });
  };
  this.removeKeys = function(keys, columns) {
    this.keysByColumnStorage.removeKeysFromStorage(keys);
    var needReload = false;
    runColumnsAction(that, that.getSubscribableColumns(columns), function(provider) {
      if (provider.removeKeys(keys)) {
        needReload = true;
      }
    });
    if (needReload) {
      runColumnsAction(that, that.getSubscribableColumns(columns), function(provider) {
        provider.reloadData(provider.parameters);
      });
    }
  };
  this.getKeys = function() {
    return this.keysByColumnStorage.aggregateKeys;
  };
};
gridReport.services.DataService.prototype.columnAddedCallback = null;
gridReport.services.DataService.prototype.columnRemovedCallback = null;
gridReport.services.DataService.prototype.keysChangedCallback = null;
gridReport.services.DataService.prototype.columnsDataUpdateCallback = null;
gridReport.services.DataService.prototype.columnDataLoadingFailedCallback = null;
goog.provide("gridReport.model.GridContentPlacement");
gridReport.model.GridContentPlacement = {All:"GridContentPlacement.All", Rows:"GridContentPlacement.Rows"};
goog.provide("gridReport.model.ExclusionsTypes");
gridReport.model.ExclusionsTypes = {Exclusions:"ExclusionsTypes_Exclusions", StatisticsExclusions:"ExclusionsTypes_StatisticsExclusions"};
goog.provide("gridReport.model.StateChangesCause");
gridReport.model.StateChangesCause = {ColumnResized:"gridReport_ColumnResized", ColumnAdded:"gridReport_ColumnAdded", ColumnProgrammaticallyAdded:"gridReport_ColumnProgrammaticallyAdded", ColumnProgrammaticallyAddedToSavedTemplate:"gridReport_ColumnProgrammaticallyAddedToSavedTemplate", ColumnRemoved:"gridReport_ColumnRemoved", ColumnProgrammaticallyRemoved:"gridReport_ColumnProgrammaticallyRemoved", ColumnInserted:"gridReport_ColumnInserted", ColumnChanged:"gridReport_ColumnChanged", ColumnProgrammaticallyChanged:"gridReport_ColumnProgrammaticallyChanged", 
ColumnReordered:"gridReport_ColumnReordered", ColumnRenamed:"gridReport_ColumnReordered", ColumnPinned:"gridReport_ColumnPinned", ColumnUnpinned:"gridReport_ColumnUnpinned", ColumnFormattingChanged:"gridReport_ColumnFormattingChanged", ColumnParametersVisibilityChanged:"gridReport_ColumnOarametersVisibilityChanged", ColumnTotalCalculationChanged:"gridReport_ColumnTotalCalculationChanged", ColumnBarChartStateChanged:"gridReport_ColumnBarChartStateChanged", SortChanged:"gridReport_SortChanged", ShowHideGroupsHeader:"gridReport_ShowHideGroupsHeader", 
HiddenIdentifiersChanged:"gridReport_HiddenIdentifiersChanged"};
goog.provide("gridReport.services.FilterHelper");
gridReport.Module.factory("gfFilterHelper", [function() {
  function getSubColumn(column, index) {
    if (!column.command.isFactorRank() && (!column.command.isDataBlock() && !column.command.isMultiSelect())) {
      return column;
    }
    var processedCols = 0;
    for (var colId in column.gridColumns) {
      processedCols += column.gridColumns[colId].getRepresentedColumnsCount();
      if (processedCols > index) {
        return column.gridColumns[colId];
      }
    }
    return column;
  }
  function resolveDataBlockSubColumnFilter(column, vectorIndex, subColId) {
    var columnFilter;
    if (!column.isFilterApplied()) {
      if (column.command.isVector() || (column.command.isFactorRank() || column.command.isMultiSelect())) {
        column.filter = new gridReport.model.filters.CompositeColumnFilter;
        columnFilter = resolveFilterByColumnType(getSubColumn(column, vectorIndex), {vectorIndex:vectorIndex, subColId:subColId});
      } else {
        columnFilter = resolveFilterByColumnType(column, {subColId:subColId});
      }
    } else {
      if (column.command.isVector() || (column.command.isFactorRank() || column.command.isMultiSelect())) {
        var vectorFilter = _.find(column.filter.getAll(), function(filter) {
          return filter.vectorIndex === vectorIndex;
        });
        columnFilter = vectorFilter || resolveFilterByColumnType(getSubColumn(column, vectorIndex), {vectorIndex:vectorIndex, subColId:subColId});
      } else {
        columnFilter = column.filter;
      }
    }
    return columnFilter;
  }
  function resolveFilterByColumnType(column, options) {
    var columnFilter;
    if (column.isNumber()) {
      columnFilter = new gridReport.model.filters.VectorCompositeTopBottomNumericColumnFilter(options);
    } else {
      if (column.isDate()) {
        columnFilter = new gridReport.model.filters.VectorDateColumnFilter(options);
      } else {
        columnFilter = new gridReport.model.filters.VectorMembershipColumnFilter(options);
      }
    }
    return columnFilter;
  }
  function resolveRangeFilterByColumnType(column) {
    if (column.isNumber()) {
      return new gridReport.model.filters.CompositeTopBottomNumericColumnFilter;
    } else {
      if (column.isDate()) {
        return new gridReport.model.filters.DateRangeColumnFilter;
      } else {
        return new gridReport.model.filters.MembershipColumnFilter;
      }
    }
  }
  var service = {};
  service.resolveColumnFilter = function(column, vectorIndex, subColId) {
    var columnFilter, vectorFilter;
    if (!column.isFilterApplied()) {
      if (column.isMultiColumn()) {
        column.filter = new gridReport.model.filters.CompositeColumnFilter;
        columnFilter = resolveDataBlockSubColumnFilter(column.gridColumns[subColId], vectorIndex, subColId);
      } else {
        if (column.command.isVector() || (column.command.isFactorRank() || column.command.isMultiSelect())) {
          column.filter = new gridReport.model.filters.CompositeColumnFilter;
          columnFilter = resolveFilterByColumnType(getSubColumn(column, vectorIndex), {vectorIndex:vectorIndex});
        } else {
          columnFilter = resolveRangeFilterByColumnType(column);
        }
      }
    } else {
      if (column.isMultiColumn()) {
        columnFilter = resolveDataBlockSubColumnFilter(column.gridColumns[subColId], vectorIndex, subColId);
        columnFilter = column.gridColumns[subColId].isFilterApplied() ? columnFilter : resolveDataBlockSubColumnFilter(column.gridColumns[subColId], vectorIndex, subColId);
      } else {
        if (column.command.isVector() || (column.command.isFactorRank() || column.command.isMultiSelect())) {
          vectorFilter = _.find(column.filter.getAll(), function(filter) {
            return filter.vectorIndex === vectorIndex;
          });
          columnFilter = vectorFilter || resolveFilterByColumnType(getSubColumn(column, vectorIndex), {vectorIndex:vectorIndex});
        } else {
          columnFilter = column.filter;
        }
      }
    }
    return columnFilter;
  };
  service.addFilterToColumn = function(column, filteredColumnId, columnFilter, vectorIndex) {
    var filter;
    if (column.isMultiColumn()) {
      var filteredColumn = column.gridColumns[filteredColumnId];
      if (filteredColumn.command.isVector() || (filteredColumn.command.isFactorRank() || filteredColumn.command.isMultiSelect())) {
        service.addFilterToColumn(filteredColumn, filteredColumnId, columnFilter, vectorIndex);
        columnFilter = filteredColumn.filter;
      }
      if (!columnFilter) {
        filter = filteredColumn.filter;
        filter && column.filter.remove(filter);
        if (!column.filter.getAll().length) {
          column.removeFilter();
        }
        filteredColumn.removeFilter();
      } else {
        if (column.filter) {
          column.filter.remove(filteredColumn.filter);
        }
        column.filter.add(columnFilter);
      }
      filteredColumn.filter = columnFilter;
    } else {
      if (_.isNumber(vectorIndex)) {
        var filters = column.filter.getAll();
        var index = filters.indexOf(columnFilter);
        if (!columnFilter) {
          filter = _.find(filters, function(filter) {
            return filter.vectorIndex === vectorIndex;
          });
          filter && column.filter.remove(filter);
          if (!column.filter.getAll().length) {
            column.removeFilter();
          }
        } else {
          if (index >= 0) {
            filters[index] = columnFilter;
          } else {
            column.filter.add(columnFilter);
          }
        }
      } else {
        column.filter = columnFilter;
      }
    }
  };
  return service;
}]);
goog.provide("gridReport.model.GridReportScrollMode");
gridReport.model.GridReportScrollMode = {Default:"default", Logical:"logical", Deffered:"deferred"};
goog.provide("gridReport.model.GridReportSelectionMode");
gridReport.model.GridReportSelectionMode = {None:"none", Checkbox:"checkbox", SingleRow:"singlerow", MultipleRows:"multiplerows", MultipleRowsExtended:"multiplerowsextended", SingleCell:"singlecell", MultipleCellsExtended:"multiplecellsextended"};
goog.provide("gridReport.model.GridReportSettings");
goog.require("gridReport.model.GridReportScrollMode");
goog.require("gridReport.model.GridReportSelectionMode");
goog.require("gridReport.model.ExclusionsTypes");
gridReport.model.GridReportSettings = function(options) {
  gridReport.jsUtils.mergeProperties(this, options, ["columns", "gfDataProviderResolver", "groups", "showGroupsHeader", "columnsResize", "columnsReorder", "sortable", "sortable", "groupable", "scrollMode", "selectionMode", "enableTooltips", "hideGroupedColumns", "showTotalsRow", "showTotalsCount", "showGroupCount", "totalsLabel", "parameters", "isStateful", "showFilterRow", "canDeleteColumns", "enableRowsDragging", "universeContext", "enableExclusions", "exclusionsType", "enableInColumnFiltering", 
  "enableConditionalValueFormatting", "enableEmptyRowInserting"]);
};
gridReport.model.GridReportSettings.prototype.columns = [];
gridReport.model.GridReportSettings.prototype.gfDataProviderResolver = undefined;
gridReport.model.GridReportSettings.prototype.groups = [];
gridReport.model.GridReportSettings.prototype.showGroupsHeader = false;
gridReport.model.GridReportSettings.prototype.columnsResize = true;
gridReport.model.GridReportSettings.prototype.columnsReorder = true;
gridReport.model.GridReportSettings.prototype.sortable = true;
gridReport.model.GridReportSettings.prototype.groupable = true;
gridReport.model.GridReportSettings.prototype.enableTooltips = true;
gridReport.model.GridReportSettings.prototype.hideGroupedColumns = true;
gridReport.model.GridReportSettings.prototype.scrollMode = gridReport.model.GridReportScrollMode.Default;
gridReport.model.GridReportSettings.prototype.selectionMode = gridReport.model.GridReportSelectionMode.None;
gridReport.model.GridReportSettings.prototype.showTotalsRow = true;
gridReport.model.GridReportSettings.prototype.showTotalsCount = true;
gridReport.model.GridReportSettings.prototype.showGroupCount = true;
gridReport.model.GridReportSettings.prototype.showFilterRow = false;
gridReport.model.GridReportSettings.prototype.totalsLabel = "Totals";
gridReport.model.GridReportSettings.prototype.isColumnContextMenuActive = true;
gridReport.model.GridReportSettings.prototype.parameters = {};
gridReport.model.GridReportSettings.prototype.setColumnsParametersVisibility = function(visibility) {
  if (this.columns) {
    angular.forEach(this.columns, function(column) {
      column.areParametersVisible = visibility;
    });
  }
};
gridReport.model.GridReportSettings.prototype.getColumnsParametersVisibility = function() {
  var hasTrue = false;
  var hasFalse = false;
  if (this.columns) {
    angular.forEach(this.columns, function(column) {
      switch(column.areParametersVisible) {
        case true:
          hasTrue = true;
          break;
        case false:
          hasFalse = true;
          break;
      }
    });
  }
  if (hasTrue && !hasFalse) {
    return true;
  }
  if (!hasTrue && hasFalse) {
    return false;
  }
  return undefined;
};
gridReport.model.GridReportSettings.prototype.isStateful = true;
gridReport.model.GridReportSettings.prototype.getState = function() {
  return{groups:this.groups};
};
gridReport.model.GridReportSettings.prototype.showAddRemoveRows = false;
gridReport.model.GridReportSettings.prototype.showTimeseriesChartButton = true;
gridReport.model.GridReportSettings.prototype.canDeleteColumns = false;
gridReport.model.GridReportSettings.prototype.enableRowsDragging = false;
gridReport.model.GridReportSettings.prototype.universeContext = undefined;
gridReport.model.GridReportSettings.prototype.enableExclusions = true;
gridReport.model.GridReportSettings.prototype.exclusionsType = gridReport.model.ExclusionsTypes.Exclusions;
gridReport.model.GridReportSettings.prototype.enableInColumnFiltering = true;
gridReport.model.GridReportSettings.prototype.enableConditionalValueFormatting = true;
gridReport.model.GridReportSettings.prototype.enableEmptyRowInserting = false;
goog.provide("gridReport.model.GridTheme");
gridReport.model.GridTheme = function(options) {
  if (options) {
    if (options.hasOwnProperty("rowsHeight")) {
      this.rowsHeight = options.rowsHeight;
    }
    if (options.hasOwnProperty("theme")) {
      this.theme = options.theme;
    }
  }
};
gridReport.model.GridTheme.prototype.rowsHeight = null;
gridReport.model.GridTheme.prototype.theme = null;
goog.provide("gridReport.services.FormulaValidator");
gridReport.Module.factory("gfFormulaValidator", ["gfExpressionParser", function(gfExpressionParser) {
  var acceptedOperators = "+-*/^()", binaryOperators = "+-*/^";
  function findInFormula(columnId, formula, columns) {
    var found = false;
    _.each(formula.columnIds, function(clmnId) {
      if (columnId == clmnId) {
        found = true;
      } else {
        var column = columns[clmnId];
        if (column && (column.command && column.command.formula)) {
          found = findInFormula(columnId, column.command.formula, columns);
        }
      }
    });
    return found;
  }
  function createDictionary(columns) {
    var tempDictionaty = {};
    _.each(columns, function(clm) {
      tempDictionaty[clm.id] = clm;
    });
    return tempDictionaty;
  }
  function findColumn(column, columns) {
    var found = false;
    _.each(columns, function(clmn) {
      if (column.id != clmn.id) {
        if (column.command && (column.command.formula && findInFormula(column.id, column.command.formula, columns))) {
          found = true;
        }
      }
    });
    return found;
  }
  function isColumnUsed(targetColumnId, startColumn, columns) {
    var found = false;
    if (startColumn.command && startColumn.command.formula) {
      _.each(startColumn.command.formula.columnIds, function(columnId) {
        if (columnId == targetColumnId || isColumnUsed(targetColumnId, columns[columnId], columns)) {
          found = true;
        }
      });
    }
    return found;
  }
  function getColumn(columnId, columns) {
    var parentColumn;
    if (columnId != null && (columnId.id != null && columnId.parentId != null)) {
      parentColumn = columns[columnId.parentId];
      if (parentColumn) {
        return parentColumn.gridColumns[columnId.id];
      }
    }
    return columns[columnId];
  }
  var service = {};
  service.validate = function(column, columns) {
    if (!column) {
      throw new Error("column should be provided");
    }
    if (!columns) {
      throw new Error("columns should be provided");
    }
    if (_.isArray(columns)) {
      columns = createDictionary(columns);
    }
    var errorMessages = [];
    _.each(column.command.formula.columnIds, function(columnId) {
      var clmn = getColumn(columnId, columns);
      if (clmn == null) {
        errorMessages.push("Unknown column: " + columnId);
      } else {
        if (!clmn.isNumber()) {
          errorMessages.push("Invalid return type: " + columnId);
        }
        if (clmn.command) {
          if (clmn.command && clmn.command.isTimeSeries()) {
            errorMessages.push("TimeSeries column can not be used in expression: " + clmn.id);
          }
          if (clmn.command.formula && !clmn.command.formula.isValid) {
            errorMessages.push("Column has invalid sub-column: " + clmn.id);
          }
        }
      }
    });
    if (findColumn(column, columns)) {
      errorMessages.push("One or more formulas contain a circullar reference");
    }
    return{isValid:_.isEmpty(errorMessages), errorMessages:errorMessages};
  };
  service.validateExpression = function(expression, validIdentifiers) {
    var errorMessages = [], previousToken = null, token, tokens = [], nextToken, bracketsDeep = 0;
    try {
      tokens = gfExpressionParser.tokenize(expression);
    } catch (e) {
      errorMessages.push(e.name + ":" + e.message);
    }
    for (var tokenIndex = 0, tokenLength = tokens.length;tokenIndex < tokenLength;tokenIndex++) {
      token = tokens[tokenIndex];
      nextToken = tokenIndex + 1 < tokenLength ? tokens[tokenIndex + 1] : null;
      if (token.type == "operator") {
        if (acceptedOperators.indexOf(token.value) < 0) {
          errorMessages.push("Unexpected operator " + token.value);
        } else {
          if (binaryOperators.indexOf(token.value) != -1) {
            if (previousToken == null) {
              errorMessages.push("Indentifier is expected before " + token.value);
            } else {
              if (nextToken == null) {
                errorMessages.push("Indentifier is expected after " + token.value);
              } else {
                if (nextToken.type == "operator" && binaryOperators.indexOf(nextToken.value) != -1) {
                  errorMessages.push("Operator is expected after " + token.value);
                }
              }
            }
            if (token.value == "^" && (nextToken != null && nextToken.type == "string")) {
              errorMessages.push("Number is expected after ^");
            }
          } else {
            if (token.value == "(") {
              bracketsDeep++;
            } else {
              if (token.value == ")") {
                if (bracketsDeep > 0) {
                  bracketsDeep--;
                }
              }
            }
          }
        }
      }
      if (token.type === "string" || token.type === "name") {
        if (previousToken != null && previousToken.type === "string") {
          errorMessages.push("Operator is expected after " + previousToken.value);
        }
        if (nextToken != null && (nextToken.type === "number" || nextToken.type === "name")) {
          errorMessages.push("Operator is expected after " + token.value);
        }
        if (!_.isEmpty(validIdentifiers) && validIdentifiers.indexOf(token.value) == -1) {
          errorMessages.push("Unknown identifier " + token.value);
        }
      }
      previousToken = token;
    }
    if (bracketsDeep > 0) {
      errorMessages.push("Brackets are expected");
    }
    return{isValid:_.isEmpty(errorMessages), errorMessages:errorMessages};
  };
  service.validateForCyclicDependencies = function(expression, currentColumnId, columns) {
    var tokens = [], token, errorMessages = [];
    if (!columns) {
      throw new Error("columns should be provided");
    }
    if (_.isArray(columns)) {
      columns = createDictionary(columns);
    }
    try {
      tokens = gfExpressionParser.tokenize(expression);
    } catch (e) {
      errorMessages.push(e.name + ":" + e.message);
    }
    for (var tokenIndex = 0, tokenLength = tokens.length;tokenIndex < tokenLength;tokenIndex++) {
      token = tokens[tokenIndex];
      if (token.type === "string" && (currentColumnId != token.value && columns[token.value])) {
        if (isColumnUsed(currentColumnId, columns[token.value], columns)) {
          errorMessages.push("One or more formulas contain a circullar reference");
        }
      }
    }
    return{isValid:_.isEmpty(errorMessages), errorMessages:errorMessages};
  };
  service.isHeatMapEnabled = function(formula, columns) {
    if (!formula) {
      throw new Error("formula should be provided");
    }
    if (!columns) {
      throw new Error("columns should be provided");
    }
    var enableHeatMap = undefined;
    if (_.isArray(columns)) {
      columns = createDictionary(columns);
    }
    _.each(formula.columnIds, function(columnId) {
      var column = columns[columnId];
      if (column && (column.command && column.command)) {
        if (enableHeatMap == undefined) {
          enableHeatMap = !!column.command.enableHeatMap;
        } else {
          enableHeatMap = enableHeatMap && !!column.command.enableHeatMap;
        }
      }
    });
    return!!enableHeatMap;
  };
  return service;
}]);
goog.provide("gridReport.columnMath.ExpressionParser");
gridReport.Module.service("gfExpressionParser", [function() {
  var service = {};
  service.tokenize = function(expression) {
    var c;
    var from;
    var i = 0;
    var length = expression.length;
    var n;
    var q;
    var str;
    var result = [];
    var error = function(message, token) {
      token = token || this;
      token.name = "SyntaxError";
      token.message = message;
      throw token;
    };
    var make = function(type, value) {
      return{type:type, value:value, from:from, to:i};
    };
    if (!expression) {
      return[];
    }
    var prefix = "<>+-&";
    var suffix = "=>&:";
    c = expression.charAt(i);
    while (c) {
      from = i;
      if (c <= " ") {
        i += 1;
        c = expression.charAt(i);
      } else {
        if (c >= "a" && c <= "z" || c >= "A" && c <= "Z") {
          str = c;
          i += 1;
          for (;;) {
            c = expression.charAt(i);
            if (c >= "a" && c <= "z" || (c >= "A" && c <= "Z" || (c >= "0" && c <= "9" || c === "_"))) {
              str += c;
              i += 1;
            } else {
              break;
            }
          }
          result.push(make("name", str));
        } else {
          if (c === "." || c >= "0" && c <= "9") {
            str = c;
            i += 1;
            for (;;) {
              c = expression.charAt(i);
              if (c < "0" || c > "9") {
                break;
              }
              i += 1;
              str += c;
            }
            if (c === ".") {
              i += 1;
              str += c;
              for (;;) {
                c = expression.charAt(i);
                if (c < "0" || c > "9") {
                  break;
                }
                i += 1;
                str += c;
              }
            }
            if (c === "e" || c === "E") {
              i += 1;
              str += c;
              c = expression.charAt(i);
              if (c === "-" || c === "+") {
                i += 1;
                str += c;
                c = expression.charAt(i);
              }
              if (c < "0" || c > "9") {
                error("Bad exponent", make("number", str));
              }
              do {
                i += 1;
                str += c;
                c = expression.charAt(i);
              } while (c >= "0" && c <= "9");
            }
            if (c >= "a" && c <= "z") {
              str += c;
              i += 1;
              error("Bad number", make("number", str));
            }
            n = +str;
            if (isFinite(n)) {
              result.push(make("number", n));
            } else {
              error("Bad number", make("number", str));
            }
          } else {
            if (c === "'" || c === '"') {
              str = "";
              q = c;
              i += 1;
              for (;;) {
                c = expression.charAt(i);
                if (c < " ") {
                  error(c === "\n" || (c === "\r" || c === "") ? "Unterminated string." : "Control character in string.", make("", str));
                }
                if (c === q) {
                  break;
                }
                if (c === "\\") {
                  i += 1;
                  if (i >= length) {
                    error("Unterminated string", make("string", str));
                  }
                  c = expression.charAt(i);
                  switch(c) {
                    case "b":
                      c = "\b";
                      break;
                    case "f":
                      c = "\f";
                      break;
                    case "n":
                      c = "\n";
                      break;
                    case "r":
                      c = "\r";
                      break;
                    case "t":
                      c = "\t";
                      break;
                    case "u":
                      if (i >= length) {
                        error("Unterminated string", make("string", str));
                      }
                      c = parseInt(expression.substr(i + 1, 4), 16);
                      if (!isFinite(c) || c < 0) {
                        error("Unterminated string", make("string", str));
                      }
                      c = String.fromCharCode(c);
                      i += 4;
                      break;
                  }
                }
                str += c;
                i += 1;
              }
              i += 1;
              result.push(make("string", str));
              c = expression.charAt(i);
            } else {
              if (c === "/" && expression.charAt(i + 1) === "/") {
                i += 1;
                for (;;) {
                  c = expression.charAt(i);
                  if (c === "\n" || (c === "\r" || c === "")) {
                    break;
                  }
                  i += 1;
                }
              } else {
                if (prefix.indexOf(c) >= 0) {
                  str = c;
                  i += 1;
                  while (true) {
                    c = expression.charAt(i);
                    if (i >= length || suffix.indexOf(c) < 0) {
                      break;
                    }
                    str += c;
                    i += 1;
                  }
                  result.push(make("operator", str));
                } else {
                  i += 1;
                  result.push(make("operator", c));
                  c = expression.charAt(i);
                }
              }
            }
          }
        }
      }
    }
    return result;
  };
  return service;
}]);
goog.provide("gridReport.columnMath.ColumnMathColumnsUpdater");
goog.require("gridReport.columnMath.ExpressionParser");
goog.require("gridReport.services.FormulaValidator");
gridReport.Module.factory("gfColumnMathColumnsUpdater", ["gfExpressionParser", "gfFormulaValidator", function(gfExpressionParser, gfFormulaValidator) {
  function createDictionary(columns) {
    var dictionary = {}, columnIndex, columnsCount;
    for (columnIndex = 0, columnsCount = columns.length;columnIndex < columnsCount;columnIndex++) {
      dictionary[columns[columnIndex].id] = columns[columnIndex];
    }
    return dictionary;
  }
  function getColumnId(columnId) {
    return columnId != null && columnId.id != null ? columnId.id : columnId;
  }
  function fill(list, column, columnsDictionary) {
    if (column.command && column.command.formula) {
      _.each(column.command.formula.columnIds, function(columnId) {
        var usedInFormulaColumn = columnsDictionary[columnId];
        if (usedInFormulaColumn) {
          fill(list, usedInFormulaColumn, columnsDictionary);
        }
      });
    }
    if (list.indexOf(column) == -1) {
      list.push(column);
    }
  }
  function getList(columns, columnsDictionary) {
    var list = [];
    _.each(columns, function(column) {
      fill(list, column, columnsDictionary);
    });
    return list;
  }
  var service = {};
  service.update = function(columns, previousColumnId, newColumnId) {
    if (!columns) {
      throw new Error("columns should be provided");
    }
    var columnsDictionary = createDictionary(columns), list = getList(columns, columnsDictionary), affectedColumns = [], changedExpressions = {};
    _.each(list, function(column) {
      var wasChanged = false;
      if (column.command && column.command.formula) {
        _.each(column.command.formula.columnIds, function(columnId, identifier) {
          if (columnId == previousColumnId || (previousColumnId == undefined && columnId == newColumnId || columnId != null && (columnId.parentId != null && columnId.parentId === previousColumnId))) {
            wasChanged = true;
            if (newColumnId != null && (columnId && columnId.parentId == null)) {
              column.command.formula.columnIds[identifier] = newColumnId;
            }
          } else {
            if (changedExpressions[columnId]) {
              wasChanged = true;
              column.command.formula.columnIds[identifier] = changedExpressions[columnId];
            }
          }
        });
        if (wasChanged) {
          var initialExpression = column.id;
          service.updateColumn(column);
          changedExpressions[initialExpression] = column.id;
          affectedColumns.push(column);
        }
      }
    });
    columnsDictionary = createDictionary(columns);
    if (newColumnId == null) {
      delete columnsDictionary[previousColumnId];
    }
    _.each(affectedColumns, function(column) {
      if (column.command && column.command.formula) {
        column.command.formula.isValid = gfFormulaValidator.validate(column, columnsDictionary).isValid;
      }
    });
    return affectedColumns;
  };
  service.updateColumn = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    if (column.command && column.command.formula) {
      var formula = column.command.formula;
      var tokens = gfExpressionParser.tokenize(formula.expression);
      _.each(tokens, function(token) {
        if (token.type === "name" && formula.columnIds[token.value] != null) {
          token.value = "(" + getColumnId(formula.columnIds[token.value]) + ")";
        }
      });
      column.id = column.command.expression = _.pluck(tokens, "value").join("");
    }
  };
  return service;
}]);
goog.provide("gridReport.model.StarMineConditionalValueFormatting");
goog.require("gridReport.model.BaseConditionalValueFormatting");
gridReport.model.StarMineConditionalValueFormatting = function() {
};
goog.inherits(gridReport.model.StarMineConditionalValueFormatting, gridReport.model.BaseConditionalValueFormatting);
gridReport.model.StarMineConditionalValueFormatting.colors = {lightGreen:"lightGreen", darkGreen:"darkGreen", gray:"gray", lightRed:"lightRed", darkRed:"darkRed"};
gridReport.model.StarMineConditionalValueFormatting.excelLikeColors = {lightGreen:"FF39C46E", darkGreen:"FF1E6637", gray:null, lightRed:"FFF5475B", darkRed:"FF992C3A"};
gridReport.model.StarMineConditionalValueFormatting.htmlLikeColors = {lightGreen:"#39C46E", darkGreen:"#1E6637", gray:null, lightRed:"#F5475B", darkRed:"#992C3A"};
gridReport.model.StarMineConditionalValueFormatting.htmlLikeStyles = {lightGreen:"pills gf-light-green-cf", darkGreen:"pills gf-dark-green-cf", gray:"pills gf-gray-cf", lightRed:"pills gf-light-red-cf", darkRed:"pills gf-dark-red-cf"};
gridReport.model.StarMineConditionalValueFormatting.prototype.getColorStorage_ = function(options) {
  var isExcel = !!options && !!options.isExcel;
  var isHtml = !!options && !!options.isHtml;
  if (isExcel) {
    return gridReport.model.StarMineConditionalValueFormatting.excelLikeColors;
  }
  if (isHtml) {
    return gridReport.model.StarMineConditionalValueFormatting.htmlLikeColors;
  }
  return gridReport.model.StarMineConditionalValueFormatting.htmlLikeStyles;
};
gridReport.model.StarMineConditionalValueFormatting.prototype.compare = function(value, options) {
  var colorStorage = this.getColorStorage_(options);
  value = Math.round(value);
  if (value >= 91 && value <= 100) {
    return colorStorage[gridReport.model.StarMineConditionalValueFormatting.colors.lightGreen];
  }
  if (value >= 71 && value <= 90) {
    return colorStorage[gridReport.model.StarMineConditionalValueFormatting.colors.darkGreen];
  }
  if (value >= 31 && value <= 70) {
    return colorStorage[gridReport.model.StarMineConditionalValueFormatting.colors.gray];
  }
  if (value >= 11 && value <= 30) {
    return colorStorage[gridReport.model.StarMineConditionalValueFormatting.colors.darkRed];
  }
  if (value >= 1 && value <= 10) {
    return colorStorage[gridReport.model.StarMineConditionalValueFormatting.colors.lightRed];
  }
  return undefined;
};
goog.provide("gridReport.model.DataBlockConditionalValueFormatting");
goog.require("gridReport.model.BaseConditionalValueFormatting");
gridReport.model.DataBlockConditionalValueFormatting = function() {
};
goog.inherits(gridReport.model.DataBlockConditionalValueFormatting, gridReport.model.BaseConditionalValueFormatting);
gridReport.model.DataBlockConditionalValueFormatting.prototype.compare = function(value, options) {
  return undefined;
};
goog.provide("gridReport.model.NegativeNumberConditionalValueFormatting");
goog.require("gridReport.model.BaseConditionalValueFormatting");
gridReport.model.NegativeNumberConditionalValueFormatting = function() {
};
goog.inherits(gridReport.model.NegativeNumberConditionalValueFormatting, gridReport.model.BaseConditionalValueFormatting);
gridReport.model.NegativeNumberConditionalValueFormatting.colors = {positive:"positive", zero:"zero", negative:"negative"};
gridReport.model.NegativeNumberConditionalValueFormatting.htmlLikeStyles = {negative:"downStyle"};
gridReport.model.NegativeNumberConditionalValueFormatting.htmlLikeColors = {negative:"#F5475B"};
gridReport.model.NegativeNumberConditionalValueFormatting.excelLikeColors = {negative:"FFF5475B"};
gridReport.model.NegativeNumberConditionalValueFormatting.prototype.getColorStorage_ = function(options) {
  var isExcel = !!options && !!options.isExcel;
  var isHtml = !!options && !!options.isHtml;
  if (isExcel) {
    return gridReport.model.NegativeNumberConditionalValueFormatting.excelLikeColors;
  }
  if (isHtml) {
    return gridReport.model.NegativeNumberConditionalValueFormatting.htmlLikeColors;
  }
  return gridReport.model.NegativeNumberConditionalValueFormatting.htmlLikeStyles;
};
gridReport.model.NegativeNumberConditionalValueFormatting.prototype.compare = function(value, options) {
  var colorStorage = this.getColorStorage_(options);
  if (value < 0) {
    return colorStorage[gridReport.model.NegativeNumberConditionalValueFormatting.colors.negative];
  }
  return undefined;
};
goog.provide("gridReport.conditionalValueFormatting.ConditionalValueFormattingService");
goog.require("gridReport.model.StarMineConditionalValueFormatting");
goog.require("gridReport.model.ConditionalValueFormatting");
goog.require("gridReport.model.NegativeNumberConditionalValueFormatting");
goog.require("gridReport.model.NegativeNumberFormats");
goog.require("gridReport.model.DataBlockConditionalValueFormatting");
gridReport.Module.service("gfConditionalValueFormattingService", function() {
  var service = {};
  service.create = function(gridColumn) {
    if (!gridColumn) {
      throw new Error("gridColumn should be provided");
    }
    if (gridColumn.cellsFormat && (gridColumn.cellsFormat.negativeNumberFormat === gridReport.model.NegativeNumberFormats.Colored || (gridColumn.cellsFormat.negativeNumberFormat === gridReport.model.NegativeNumberFormats.ColoredDefault || gridColumn.cellsFormat.negativeNumberFormat === gridReport.model.NegativeNumberFormats.ColoredBrackets))) {
      return new gridReport.model.NegativeNumberConditionalValueFormatting;
    }
    if (gridColumn.command) {
      if (gridColumn.command.isAbsComp) {
        return new gridReport.model.ConditionalValueFormatting;
      }
      if (gridColumn.command.returnType === scr.DataTypes.Score) {
        return new gridReport.model.StarMineConditionalValueFormatting;
      }
    }
    return null;
  };
  service.createPremiumDiscount = function(gridColumn) {
    if (gridColumn && gridColumn.canHaveStatistics()) {
      return new gridReport.model.ConditionalValueFormatting;
    }
    return null;
  };
  return service;
});
goog.provide("gridReport.services.JetService");
gridReport.Module.factory("gfJetService", [function() {
  var service = {}, isLinked = false;
  JET.onLoad(function() {
    JET.onLinked(function() {
      isLinked = true;
    });
    JET.onUnlinked(function() {
      isLinked = false;
    });
  });
  service.isLinked = function() {
    return isLinked;
  };
  service.contextChange = function(context) {
    JET.contextChange(context);
  };
  service.navigate = function(data) {
    JET.navigate(data);
  };
  service.copyToClipboard = function(data) {
    JET.copyToClipboard(data);
  };
  return service;
}]);
goog.provide("gridReport.services.AppUrlResolver");
gridReport.Module.factory("gfAppUrlResolver", ["$window", function($window) {
  var envCpUrl = {alpha:"https://amers1.apps.cp.icp2.mpp.reutest.com/", beta:"https://amers1.apps.cp.reutest.com/", prod:getBaseUrl()};
  function getBaseUrl() {
    if (typeof $window.location !== "undefined") {
      return $window.location.protocol + "//" + $window.location.hostname + ($window.location.port ? ":" + $window.location.port : "") + "/";
    }
    return "";
  }
  function getEnvironment() {
    var fromQuery = /(\?env\=|&env\=)([^&]+)/i.exec($window.location);
    if (fromQuery && fromQuery.length >= 2) {
      return fromQuery[2].toLowerCase();
    }
    return null;
  }
  function getAppsCpUrl() {
    var environment = getEnvironment();
    if (envCpUrl.hasOwnProperty(environment)) {
      return envCpUrl[environment];
    }
    return null;
  }
  return{resolve:function() {
    return getAppsCpUrl() || envCpUrl.prod;
  }};
}]);
goog.provide("gridReport.services.AuditLinkingService");
goog.require("gridReport.services.AppUrlResolver");
goog.require("gridReport.services.JetService");
gridReport.Module.factory("gfAuditLinkingService", ["gfNativeCurrencyService", "gfAppUrlResolver", "gfJetService", function(gfNativeCurrencyService, gfAppUrlResolver, gfJetService) {
  var service = {};
  var fieldType = {std:"STD", rfa:"RFA", na:"na"};
  service.bindColumn = function(column) {
    column.cellMouseEnterAction = onCellMouseEnter;
    column.cellMouseLeaveAction = onCellMouseLeave;
  };
  service.isLinked = function() {
    return gfJetService.isLinked();
  };
  function getFieldType(column) {
    if (column.command.isSTD()) {
      return fieldType.std;
    }
    if (column.command.isRFA()) {
      return fieldType.rfa;
    }
    return fieldType.na;
  }
  function onCellMouseEnter(args) {
    var cellTextElement = $(args.element).find(".jqx-grid-cell-text");
    if (cellTextElement) {
      cellTextElement.on("click", function(clickArgs) {
        cellTextClicked(clickArgs.currentTarget, args);
      });
    }
  }
  function onCellMouseLeave(args) {
    var cellTextElement = $(args.element).find(".jqx-grid-cell-text");
    if (cellTextElement) {
      cellTextElement.unbind("click");
    }
  }
  function cellTextClicked(currentTarget, args) {
    var clickedCell = $(currentTarget).closest(".gf-clickable-value").first();
    if (!args.dataRow || (!args.isAuditEnabled || clickedCell.length == 0)) {
      return;
    }
    var colId = args.colId;
    var column = args.column;
    if (args.isDataBlock) {
      colId = decodeURIComponent(clickedCell.attr("column-key"));
      column = column.gridColumns[colId];
    }
    var colHeader = column.header;
    var colType = getFieldType(column);
    var command = column.command;
    var props = args.dataRow[colId + "_props"];
    var rawVal = $(currentTarget).attr("raw-value");
    if (rawVal == null) {
      rawVal = clickedCell.attr("raw-value");
    }
    rawVal = rawVal ? rawVal : args.rawValue;
    if (!props || (!props[rawVal] || (!props[rawVal]["CTFlg"] || props[rawVal]["CTFlg"] != "1"))) {
      return;
    }
    var valProps = props[rawVal];
    var isNativeCurrency = gfNativeCurrencyService.isNativeCurrencyUsed(command, args.globalParameters);
    var curCode = gfNativeCurrencyService.getIdentifierCurrencyCode(command, args.dataRow.rowKey, args.globalParameters);
    var data = {target:"popup", location:{x:100, y:100}, name:"Eikon Explorer App", url:getUrl(colType, colHeader, valProps, {isNative:isNativeCurrency, code:curCode})};
    gfJetService.navigate(data);
  }
  function getUrl(colType, colHeader, valProps, currency) {
    switch(colType) {
      case fieldType.std:
        return getSTDUrl(colHeader, valProps, currency);
      case fieldType.rfa:
        return getRFAUrl(colHeader, valProps, currency);
    }
    return null;
  }
  function getValue(value) {
    return _.isUndefined(value) ? null : value;
  }
  function getSTDUrl(colHeader, valProps, currency) {
    var baseUrl = gfAppUrlResolver.resolve() + "Explorer/EikonExcelCTAudit.aspx?mode=plain";
    baseUrl += "&coaName=" + encodeURIComponent(colHeader);
    baseUrl += "&prType=" + encodeURIComponent(getValue(valProps["prType"]));
    baseUrl += "&reponos=" + encodeURIComponent(getValue(valProps["RepNoCT"]));
    baseUrl += "&stType=" + encodeURIComponent(getValue(valProps["stType"]));
    baseUrl += "&prDate=" + encodeURIComponent(getValue(valProps["periodenddate"]));
    baseUrl += "&COACodes=" + encodeURIComponent(getValue(valProps["COA"]));
    baseUrl += "&lineId=" + encodeURIComponent(getValue(valProps["lineId"]));
    baseUrl += "&source=" + encodeURIComponent(getValue(valProps["source"]));
    baseUrl += "&stDate=" + encodeURIComponent(getValue(valProps["stDate"]));
    baseUrl += "&periodLength=" + encodeURIComponent(getValue(valProps["periodlength"]));
    baseUrl += "&displayCurrency=" + encodeURIComponent(getValue(currency.isNative ? "OTH" : currency.code));
    baseUrl += "&currSymbolConv=true";
    baseUrl += "&fxRate=" + encodeURIComponent(getValue(valProps["fxRate"]));
    baseUrl += "&stdConvertedTo=" + encodeURIComponent(getValue(valProps["stdConvertedTo"]));
    baseUrl += "&companyCurrency=" + encodeURIComponent(getValue(valProps["companyCurrency"]));
    baseUrl += "&isNotScalable=" + encodeURIComponent(getValue(valProps["isNotScalable"]));
    baseUrl += "&precision=1";
    baseUrl += "&isInterimSingle=" + encodeURIComponent(getValue(valProps["isInterimSingle"]) == 1);
    baseUrl += "&interimType=" + encodeURIComponent(getValue(valProps["interimType"]));
    baseUrl += "&interimNumber=" + encodeURIComponent(getValue(valProps["interimNumber"]));
    baseUrl += "&periodType=" + encodeURIComponent(getValue(valProps["PeriodLenType"]));
    baseUrl += "&requestType=1";
    baseUrl += "&reportUnit=" + encodeURIComponent(getValue(valProps["reportUnit"]));
    return baseUrl;
  }
  function getRFAUrl(colHeader, valProps, currency) {
    var baseUrl = gfAppUrlResolver.resolve() + "Explorer/EikonExcelRatiosAudit.aspx?mode=plain";
    baseUrl += "&Label=" + encodeURIComponent(colHeader);
    baseUrl += "&RepNo=" + encodeURIComponent(getValue(valProps["RepNoCT"]));
    baseUrl += "&FpEndDate=" + encodeURIComponent(getValue(valProps["periodenddate"]));
    baseUrl += "&Acronym=" + encodeURIComponent(getValue(valProps["RFAAcronym"]));
    baseUrl += "&FiscalYear=" + encodeURIComponent(getValue(valProps["FiscalYr"]));
    baseUrl += "&periodLength=" + encodeURIComponent(getValue(valProps["periodlength"]));
    baseUrl += "&CurrencyCode=" + encodeURIComponent(getValue(currency.isNative ? "OTH" : currency.code));
    baseUrl += "&fxRate=" + encodeURIComponent(getValue(valProps["fxRate"]));
    baseUrl += "&PeriodLenType=" + encodeURIComponent(getValue(valProps["PeriodLenType"]));
    return baseUrl;
  }
  return service;
}]);
goog.provide("gridReport.services.DataBlockAggregateAlgorithm");
goog.require("gridReport.model.TotalCalculation");
gridReport.Module.factory("gfDataBlockAggregateAlgorithm", [function() {
  function prepeareData(columnId, data) {
    return _.map(data, function(dataItem) {
      var result = {};
      result[columnId] = dataItem[columnId];
      return result;
    });
  }
  function createDataBlockCalculation(column) {
    if (!column.isMultiColumn()) {
      throw Error("Attempt to use column that is no a datablock to create data block totals calculation");
    }
    return new gridReport.model.TotalCalculation({name:"DataBlockCalculation", displayText:"", func:function(columnId, data) {
      if (columnId != column.id) {
        return undefined;
      }
      var result = {};
      for (var colKey in column.gridColumns) {
        var subColumn = column.gridColumns[colKey];
        if (subColumn.selectedTotalsCalculation == null || subColumn.selectedTotalsCalculation.isNone) {
          result[subColumn.id] = undefined;
        } else {
          result[subColumn.id] = subColumn.selectedTotalsCalculation.func(subColumn.id, prepeareData(subColumn.id, data));
        }
      }
      return result;
    }});
  }
  return{get:createDataBlockCalculation};
}]);
goog.provide("gridReport.services.AggregatesAlgorithmsCollection");
gridReport.Module.factory("gfAggregatesAlgorithmsCollection", [function() {
  function createEmptyArray(n, fillFunction) {
    fillFunction = fillFunction || function() {
      return 0;
    };
    var array = [];
    for (var i = 0;i < n;i++) {
      array.push(fillFunction());
    }
    return array;
  }
  var toNumber = function(value) {
    if (value === null || value === undefined) {
      return 0;
    }
    return Number(value);
  };
  function sumPerVector(columnId, data, excludeFunc) {
    var results = createEmptyArray(data[0][columnId].length), counts = createEmptyArray(data[0][columnId].length);
    results.columns = data[0][columnId].columns;
    for (var rowIndex = 0, n = data.length;rowIndex < n;rowIndex++) {
      if ((excludeFunc || angular.noop)(data[rowIndex]) || data[rowIndex][columnId] == undefined) {
        continue;
      }
      for (var vectorIndex = 0;vectorIndex < data[rowIndex][columnId].length;vectorIndex++) {
        var value = data[rowIndex][columnId][vectorIndex];
        if (value != null) {
          counts[vectorIndex] = counts[vectorIndex] + 1;
        }
        results[vectorIndex] += toNumber(value);
      }
    }
    for (var i = 0;i < results.length;i++) {
      if (counts[i] === 0) {
        results[i] = null;
      }
    }
    return results;
  }
  function sumFunction(columnId, data) {
    if (data.length > 0 && _.isArray(data[0][columnId])) {
      return sumPerVector(columnId, data);
    }
    var result = 0, count = 0;
    for (var i = 0;i < data.length;i++) {
      if (data[i][columnId] != null) {
        count++;
      }
      result += toNumber(data[i][columnId]);
    }
    return count == 0 ? null : result;
  }
  function averageFunction(columnId, data) {
    if (data.length > 0 && _.isArray(data[0][columnId])) {
      return averagePerVector(columnId, data);
    }
    var result = 0;
    var count = 0;
    for (var i = 0;i < data.length;i++) {
      if (data[i][columnId] != null) {
        result += toNumber(data[i][columnId]);
        count++;
      }
    }
    if (count != 0) {
      result = result / count;
    }
    return count === 0 ? null : result;
  }
  function averagePerVector(columnId, data) {
    var results = createEmptyArray(data[0][columnId].length), counts = createEmptyArray(data[0][columnId].length);
    results.columns = data[0][columnId].columns;
    for (var rowIndex = 0, rowCount = data.length;rowIndex < rowCount;rowIndex++) {
      if (data[rowIndex][columnId] == undefined) {
        continue;
      }
      for (var vectorIndex = 0, vectorCount = data[rowIndex][columnId].length;vectorIndex < vectorCount;vectorIndex++) {
        var value = data[rowIndex][columnId][vectorIndex];
        if (value != null) {
          counts[vectorIndex] = counts[vectorIndex] + 1;
          results[vectorIndex] += toNumber(data[rowIndex][columnId][vectorIndex]);
        }
      }
    }
    for (var i = 0;i < results.length;i++) {
      if (counts[i] != 0) {
        results[i] = results[i] / counts[i];
      }
    }
    return results;
  }
  function medianFunction(columnId, data) {
    if (data.length > 0 && _.isArray(data[0][columnId])) {
      return medianPerVectorFunction(columnId, data);
    }
    var result, colData = [];
    angular.forEach(_.pluck(_.filter(data, function(item) {
      return item[columnId] !== undefined && (item[columnId] !== null && item[columnId] !== "");
    }), columnId), function(num) {
      colData.push(toNumber(num));
    });
    colData = _.sortBy(colData, function(num) {
      return num;
    });
    if (colData.length == 1) {
      return colData[0];
    }
    if (colData.length == 0) {
      return null;
    }
    if (colData.length % 2 === 0) {
      result = (colData[colData.length / 2] + colData[colData.length / 2 - 1]) / 2;
    } else {
      result = colData[Math.floor(colData.length / 2)];
    }
    return result;
  }
  function medianPerVectorFunction(columnId, data) {
    var vectorIndex, vectorCount, results = createEmptyArray(data[0][columnId].length), colData = createEmptyArray(data[0][columnId].length, function() {
      return[];
    });
    results.columns = data[0][columnId].columns;
    for (var rowIndex = 0, rowCount = data.length;rowIndex < rowCount;rowIndex++) {
      if (data[rowIndex][columnId] === undefined) {
        continue;
      }
      for (vectorIndex = 0, vectorCount = data[rowIndex][columnId].length;vectorIndex < vectorCount;vectorIndex++) {
        var value = data[rowIndex][columnId][vectorIndex];
        if (value !== null && (value !== "" && value !== undefined)) {
          colData[vectorIndex].push(value);
        }
      }
    }
    for (vectorIndex = 0;vectorIndex < colData.length;vectorIndex++) {
      colData[vectorIndex] = _.sortBy(colData[vectorIndex], function(num) {
        return num;
      });
      if (colData[vectorIndex].length == 1) {
        results[vectorIndex] = colData[vectorIndex][0];
      }
      if (colData[vectorIndex].length == 0) {
        results[vectorIndex] = null;
      }
      if (colData[vectorIndex].length % 2 === 0) {
        results[vectorIndex] = (colData[vectorIndex][colData[vectorIndex].length / 2] + colData[vectorIndex][colData[vectorIndex].length / 2 - 1]) / 2;
      } else {
        results[vectorIndex] = colData[vectorIndex][Math.floor(colData[vectorIndex].length / 2)];
      }
    }
    return results;
  }
  function maxFunction(columnId, data) {
    return minMaxFunction(columnId, data, _.max);
  }
  function minFunction(columnId, data) {
    return minMaxFunction(columnId, data, _.min);
  }
  function minMaxFunction(columnId, data, func) {
    if (data.length > 0 && _.isArray(data[0][columnId])) {
      return minMaxPerVector(columnId, data, func);
    }
    var anyDefined = false;
    var result = func(data, function(item) {
      if (item[columnId] == undefined) {
        return undefined;
      }
      anyDefined = true;
      return toNumber(item[columnId]);
    });
    return!anyDefined ? null : toNumber(result[columnId]);
  }
  function minMaxPerVector(columnId, data, func) {
    var results = createEmptyArray(data[0][columnId].length);
    results.columns = data[0][columnId].columns;
    for (var vectorIndex = 0;vectorIndex < data[0][columnId].length;vectorIndex++) {
      var anyDefined = false;
      var value = func(data, function(item) {
        var row = item[columnId], cellValue;
        if (row == undefined) {
          return undefined;
        } else {
          cellValue = row[vectorIndex];
          if (cellValue == undefined || !_.isNumber(cellValue)) {
            return undefined;
          }
        }
        anyDefined = true;
        return toNumber(cellValue);
      });
      results[vectorIndex] = null;
      if (anyDefined) {
        results[vectorIndex] = toNumber(value[columnId][vectorIndex]);
      }
    }
    return results;
  }
  function getArray(columnId, data) {
    return _.pluck(_.filter(data, function(item) {
      return item[columnId] !== undefined && (item[columnId] !== null && item[columnId] !== "");
    }), columnId);
  }
  function getArrayFromVector(columnId, data, vectorIndex) {
    var result = [];
    for (var i = 0;i < data.length;i++) {
      if (data[i][columnId] != undefined && (data[i][columnId][vectorIndex] != undefined && (data[i][columnId][vectorIndex] !== null && data[i][columnId][vectorIndex] !== ""))) {
        result.push(data[i][columnId][vectorIndex]);
      }
    }
    return result;
  }
  function quartile1Function(columnId, data) {
    return quartileFunction(columnId, data, 25);
  }
  function quartile3Function(columnId, data) {
    return quartileFunction(columnId, data, 75);
  }
  function quartileFunction(columnId, data, percentile) {
    if (data.length > 0 && _.isArray(data[0][columnId])) {
      return quartilePerVector(columnId, data, percentile);
    }
    return quartileCalculation(getArray(columnId, data), percentile);
  }
  function quartilePerVector(columnId, data, percentile) {
    var results = [];
    for (var vectorIndex = 0;vectorIndex < data[0][columnId].length;vectorIndex++) {
      results.push(quartileCalculation(getArrayFromVector(columnId, data, vectorIndex), percentile));
    }
    return results;
  }
  function quartileCalculation(arr, percentile) {
    if (arr.length == 0 || _.every(arr, function(item) {
      return item == null;
    })) {
      return null;
    }
    arr = _.sortBy(arr, function(item) {
      return item;
    });
    var positionCalc = [];
    var equalsCount = 0;
    var sumOfEquals = 0;
    for (var i = 0;i < arr.length;i++) {
      positionCalc[i] = (i + 1) / arr.length * 100;
      if (i > 0 && arr[i] == arr[i - 1]) {
        sumOfEquals += positionCalc[i - 1];
        equalsCount++;
      }
      if (i > 0 && (equalsCount > 0 && arr[i] != arr[i - 1])) {
        sumOfEquals += positionCalc[i - 1];
        equalsCount++;
        var avgValue = sumOfEquals / equalsCount;
        for (var j = 0;j < equalsCount;j++) {
          positionCalc[i - j - 1] = avgValue;
        }
        sumOfEquals = 0;
        equalsCount = 0;
      }
    }
    for (i = 0;i < positionCalc.length;i++) {
      positionCalc[i] = Math.ceil(positionCalc[i]);
    }
    if (positionCalc.indexOf(percentile) >= 0) {
      return arr[positionCalc.indexOf(percentile)];
    } else {
      return quartileInterpolate(positionCalc, arr, percentile);
    }
  }
  function quartileInterpolate(positionCalc, sortedArr, value) {
    var left = null;
    var right = null;
    for (var i = 0;i < positionCalc.length;i++) {
      if (positionCalc[i] < value) {
        left = positionCalc[i];
      }
      if (positionCalc[i] > value) {
        right = positionCalc[i];
      }
      if (right != null && left != null) {
        break;
      }
    }
    if (left == null || right == null) {
      return null;
    }
    var leftWeight = Math.abs(value - right);
    var rightWeight = Math.abs(value - left);
    var leftValue = sortedArr[positionCalc.indexOf(left)];
    var rightValue = sortedArr[positionCalc.indexOf(right)];
    return(leftValue * leftWeight + rightValue * rightWeight) / (leftWeight + rightWeight);
  }
  return{sum:sumFunction, mean:averageFunction, median:medianFunction, max:maxFunction, min:minFunction, quartile1:quartile1Function, quartile3:quartile3Function};
}]);
goog.provide("gridReport.services.AggregatesAlgorithmsService");
goog.require("gridReport.services.DataBlockAggregateAlgorithm");
goog.require("gridReport.model.TotalCalculation");
goog.require("gridReport.services.AggregatesAlgorithmsCollection");
gridReport.Module.factory("gfAggregatesAlgorithms", ["$translate", "gfDefaultCalculationName", "gfAggregatesAlgorithmsCollection", "gfDataBlockAggregateAlgorithm", function($translate, gfDefaultCalculationName, gfAggregatesAlgorithmsCollection, gfDataBlockAggregateAlgorithm) {
  var algorithms = [];
  var register = function(item) {
    algorithms.push(new gridReport.model.TotalCalculation(item));
  };
  var unregister = function(item) {
    algorithms = _.reject(algorithms, function(calc) {
      return calc.name === item.name;
    });
  };
  var resolve = function(name) {
    return _.findWhere(algorithms, {name:name});
  };
  var getAll = function() {
    return algorithms.slice(0);
  };
  var getCommon = function() {
    return _.map(["None", "Sum", "Average", "Median"], function(name) {
      return resolve(name);
    });
  };
  var resolveByNames = function(names) {
    return _.map(names, function(name) {
      return resolve(name);
    });
  };
  var clear = function() {
    algorithms = [];
  };
  var getDefaultCalculation = function() {
    return resolve(gfDefaultCalculationName);
  };
  register({name:"None", displayText:$translate.instant("NONE"), isNone:true, func:angular.noop});
  register({name:"Sum", displayText:$translate.instant("SUM"), func:gfAggregatesAlgorithmsCollection.sum});
  register({name:"Average", displayText:$translate.instant("AVERAGE"), func:gfAggregatesAlgorithmsCollection.mean});
  register({name:"Median", displayText:$translate.instant("MEDIAN"), func:gfAggregatesAlgorithmsCollection.median});
  register({name:"Server side", displayText:$translate.instant("SERVER_SIDE"), isServerSide:true, func:angular.noop});
  return{resolve:resolve, register:register, unregister:unregister, getAll:getAll, getCommon:getCommon, clear:clear, resolveByNames:resolveByNames, getDefaultCalculation:getDefaultCalculation, getDataBlockCalculation:function(column) {
    return gfDataBlockAggregateAlgorithm.get(column);
  }};
}]);
goog.provide("gridReport.utils.CommandHelper");
gridReport.Module.factory("gfCommandHelper", [function() {
  function getUniverseSyntax(command) {
    var syntax = "";
    if (command.metadata.universe === scr.mfr.RankAgainst.CurrentUniverse || command.metadata.universe === scr.mfr.RankAgainst.AllCompanies) {
      syntax = scr.mfr.ADC.getMFROptionToADCCode("RankAgainst", command.metadata.universe);
    } else {
      if (command.metadata.universe === scr.mfr.RankAgainst.ListPortfolioIndex) {
        if (command.metadata.universeMetadata) {
          switch(command.metadata.universeMetadata.type) {
            case "index":
            ;
            case "MarketIndex":
              syntax = "Indices";
              break;
            case "watchlist":
            ;
            case "Watchlist":
              syntax = "Lists";
              break;
            case "portfolio":
            ;
            case "Funded":
              syntax = "Portfolios";
              break;
          }
          var s = command.metadata.universeMetadata.id + "/*" + command.metadata.universeMetadata.name + "*/";
          syntax = "SCREEN(U(IN(" + syntax + "(" + s + "))))";
        }
      }
    }
    return syntax;
  }
  function getDecoratedExpression(expression, returnType) {
    if (returnType === "Boolean") {
      return "SELECT(" + expression + ', instrument, "(percent)value:[value]?1:0")';
    } else {
      return expression;
    }
  }
  var service = {};
  service.getTransformedPath = function(command, rankNumber, outputType) {
    var syntax, factorsSyntax = "", rankType = "RankType=", universe = "Universe=", nTileSort = "NTileSort=", comma = ", ";
    rankType += scr.mfr.ADC.getMFROptionToADCCode("MFMethodology", command.metadata.methodology);
    nTileSort += scr.mfr.ADC.getMFROptionToADCCode("MFNTileOrder", command.metadata.nTileOrder);
    for (var i = 0;i < command.factors.length;i++) {
      var factor = command.factors[i];
      var factorSyntax = "Factor(" + getDecoratedExpression(factor.expression, factor.returnType) + comma + "SortOrder=" + scr.mfr.ADC.getMFROptionToADCCode("Order", factor.metadata.order) + comma + "optionIfNullFactor=" + scr.mfr.ADC.getMFROptionToADCCode("FactorIfNA", factor.metadata.ifNotAvailable) + comma + "weight=" + factor.metadata.weight + comma + "UseRawAsFactor=" + (factor.metadata.useRaw === false ? "False" : "True") + ")";
      factorsSyntax += factorSyntax + comma;
    }
    factorsSyntax = factorsSyntax.substring(0, factorsSyntax.length - comma.length);
    var groupBy = scr.output.Item.getPathFromUniverse(command.metadata.partitionBy);
    if (groupBy && groupBy.length > 0) {
      groupBy = "GroupBy(" + groupBy + ")" + comma;
    }
    universe += '"' + getUniverseSyntax(command) + '"';
    var rankNumberString = "RankNumber=" + (rankNumber || 0);
    var outputTypeString = "OutputType=" + (outputType || "FinalRank");
    syntax = "GRANK(" + factorsSyntax + comma + groupBy + rankType + comma + universe + comma + nTileSort + comma + outputTypeString + comma + rankNumberString + ")";
    return syntax;
  };
  service.getDecoratedExpression = getDecoratedExpression;
  return service;
}]);
goog.provide("gridReport.services.FactorRankService");
goog.require("gridReport.utils.CommandHelper");
goog.require("gridReport.services.CellsFormattingFactory");
goog.require("gridReport.services.UuidGenerator");
goog.require("gridReport.services.AggregatesAlgorithmsService");
gridReport.Module.factory("gfFactorRankService", ["gfAggregatesAlgorithms", "gfCommandHelper", "gfCellsFormattingFactory", "gfUuidGenerator", function(gfAggregatesAlgorithms, gfCommandHelper, gfCellsFormattingFactory, gfUuidGenerator) {
  function calculateWeight(mfrColumn, rankNumber) {
    var totalWeight = _.reduce(mfrColumn.command.metadata.factors, function(weight, fctr) {
      return weight + fctr.weight;
    }, 0);
    return mfrColumn.command.metadata.factors[rankNumber - 1].weight / totalWeight;
  }
  function createFactorColumn(mfrColumn, rankNumber, showFactorRank) {
    var valueColumn, rankColumn, factorRank = mfrColumn.command.factors[rankNumber - 1], id = gfUuidGenerator.get(), weight = calculateWeight(mfrColumn, rankNumber);
    var gridColumn = new gridReport.model.GridColumn({id:id, parentColumn:mfrColumn.id, header:factorRank.name, canEdit:false, isAutoresizable:true, isComposeToVector:true, selectedTotalsCalculation:gfAggregatesAlgorithms.getDefaultCalculation(), totalCalculations:gfAggregatesAlgorithms.getCommon(), command:new gridReport.model.Command({expression:id, dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, returnType:scr.DataTypes.Float, metadata:{type:"factor", weight:weight}, factor:new gridReport.model.Factor({rankNumber:rankNumber, 
    showFactorRank:showFactorRank, weight:weight})}), gridColumns:{}});
    valueColumn = createFactorSubColumn(mfrColumn, factorRank, gridReport.model.RankOutputTypes.DataValue, rankNumber);
    gridColumn.gridColumns[valueColumn.id] = valueColumn;
    if (showFactorRank) {
      rankColumn = createFactorSubColumn(mfrColumn, factorRank, gridReport.model.RankOutputTypes.FinalRank, rankNumber);
      gridColumn.gridColumns[rankColumn.id] = rankColumn;
    }
    return gridColumn;
  }
  function createFactorSubColumn(mfrColumn, factorRank, rankOutputType, rankNumber) {
    var factorCommand = createFactorCommand(mfrColumn, factorRank, rankOutputType, rankNumber);
    return new gridReport.model.GridColumn({id:factorCommand.expression, command:factorCommand, cellsFormat:gfCellsFormattingFactory.create(factorCommand)});
  }
  function createFactorCommand(mfrColumn, factorRank, rankOutputType, rankNumber) {
    var epression = gfCommandHelper.getTransformedPath(mfrColumn.command, rankNumber, rankOutputType) + "/*" + mfrColumn.command.name + "*/" + "/*rankNumber=" + rankNumber + "*/";
    var command = new gridReport.model.Command({dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, expression:epression});
    if (rankOutputType === gridReport.model.RankOutputTypes.DataValue) {
      command.enableHeatMap = factorRank.enableHeatMap;
      command.isAbsComp = factorRank.isAbsComp;
      command.isNewestFirst = factorRank.isNewestFirst;
      command.defaultOrder = factorRank.defaultOrder;
      command.returnType = factorRank.returnType;
    } else {
      command.defaultOrder = factorRank.metadata.order;
      command.returnType = mfrColumn.getReturnType();
    }
    return command;
  }
  function formatId(id, rankNumber) {
    return id + "/*rankNumber=" + rankNumber + "*/";
  }
  return{createFactorRankColumn:createFactorColumn, formatFactorRankColumnId:formatId};
}]);
goog.provide("gridReport.model.Formula");
gridReport.model.Formula = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
gridReport.model.Formula.prototype.expression = null;
gridReport.model.Formula.prototype.columnIds = null;
gridReport.model.Formula.prototype.isValid = true;
goog.provide("gridReport.model.OutputColumn");
(function() {
  gridReport.model.OutputColumn = function(options) {
    gridReport.jsUtils.mergeProperties(this, options);
  };
  gridReport.model.OutputColumn.prototype.id = null;
  gridReport.model.OutputColumn.prototype.name = null;
  gridReport.model.OutputColumn.prototype.returnType = null;
  gridReport.model.OutputColumn.prototype.isValueOutputColumn = function() {
    return this.id === "value";
  };
  gridReport.model.OutputColumn.convertAdcOutputColumn = function(field) {
    if (!field) {
      throw new Error("field should be provided");
    }
    if (_.isArray(field.outputColumn)) {
      return _.map(field.outputColumn, function(item) {
        return createOutputColumnObject(item.id, field.metadata);
      });
    } else {
      if (field.outputColumn) {
        return createOutputColumnObject(field.outputColumn, field.metadata);
      } else {
        return null;
      }
    }
  };
  function capitalizeFirstLetter(string) {
    return string && string.charAt(0).toUpperCase() + string.slice(1);
  }
  function getReturnType(outColumn, metadata) {
    if (outColumn.dataType != null) {
      return capitalizeFirstLetter(outColumn.dataType);
    } else {
      if (outColumn.id !== "value") {
        return "String";
      } else {
        return metadata.dataType;
      }
    }
  }
  function createOutputColumnObject(outputColumnId, metadata) {
    var outColumn, name = null, returnType = null;
    if (metadata && (metadata.outputColumns && metadata.outputColumns.columns)) {
      outColumn = _.findWhere(metadata.outputColumns.columns, {id:outputColumnId});
      if (outColumn) {
        name = outColumn.name;
        returnType = getReturnType(outColumn, metadata);
      }
    }
    return new gridReport.model.OutputColumn({id:outputColumnId, name:name, returnType:returnType});
  }
})();
goog.provide("gridReport.services.JetLinkingService");
goog.require("gridReport.services.AppUrlResolver");
goog.require("gridReport.services.JetService");
goog.require("gridReport.services.CompanyService");
gridReport.Module.factory("gfJetLinkingService", ["gfAppUrlResolver", "gfJetService", "gfCompanyService", "gfConfig", function(gfAppUrlResolver, gfJetService, gfCompanyService, gfConfig) {
  function onCellMouseEnter(args) {
    var cellTextElement = $(args.element).find(".jqx-grid-cell-text");
    if (cellTextElement) {
      cellTextElement.on("click", function() {
        cellTextClicked(args);
      });
    }
  }
  function onCellMouseLeave(args) {
    var cellTextElement = $(args.element).find(".jqx-grid-cell-text");
    if (cellTextElement) {
      cellTextElement.unbind("click");
    }
  }
  function cellTextClicked(args) {
    var data, rowKey = args.rowKey, type = gfCompanyService.isPublic(args.rowKey) ? "RIC" : "OAPermID";
    if (gfConfig.disableNavigationForPrvt === true && type === "OAPermID" || gfConfig.disableNavigationForPub === true && type === "RIC") {
      return;
    }
    var jetContext = {};
    jetContext[type] = rowKey;
    gfJetService.contextChange([jetContext]);
    if (!gfJetService.isLinked()) {
      data = {target:"popup", location:{x:100, y:100}, name:"Eikon Explorer App", url:gfAppUrlResolver.resolve() + "Explorer/Default.aspx?st=" + type + "&s=" + rowKey};
      gfJetService.navigate(data);
    }
  }
  var service = {};
  service.bindColumn = function(column) {
    column.cellMouseEnterAction = onCellMouseEnter;
    column.cellMouseLeaveAction = onCellMouseLeave;
  };
  return service;
}]);
goog.provide("gridReport.model.Factor");
(function() {
  gridReport.model.Factor = function(options) {
    gridReport.jsUtils.mergeProperties(this, options);
  };
  gridReport.model.Factor.prototype.rankNumber = 1;
  gridReport.model.Factor.prototype.showFactorRank = false;
  gridReport.model.Factor.prototype.weight = 0;
})();
goog.provide("gridReport.services.GridColumnConverterService");
goog.require("gridReport.services.JetLinkingService");
goog.require("gridReport.conditionalValueFormatting.ConditionalValueFormattingService");
goog.require("gridReport.services.AuditLinkingService");
goog.require("gridReport.services.CellsFormattingFactory");
goog.require("gridReport.services.FactorRankService");
goog.require("gridReport.model.Factor");
goog.require("gridReport.model.OutputColumn");
goog.require("gridReport.model.Formula");
gridReport.Module.factory("gfGridColumnConverterService", ["gfAggregatesAlgorithms", "gfJetLinkingService", "gfConditionalValueFormattingService", "gfAuditLinkingService", "gfConfig", "gfCellsFormattingFactory", "gfValueFormatting", "gfFactorRankService", function(gfAggregatesAlgorithms, gfJetLinkingService, gfConditionalValueFormattingService, gfAuditLinkingService, gfConfig, gfCellsFormattingFactory, gfValueFormatting, gfFactorRankService) {
  var columnConverterService = {}, services = {};
  columnConverterService.createGridColumnFromState = function(id, stateColumn) {
    if (!stateColumn) {
      throw new Error("stateColumn should be provided.");
    }
    var isRowKey = id === "rowKey";
    var showInHeaderAsTransposed = stateColumn.showInHeaderAsTransposed;
    if (id === "rowKey" || id === "TR.CommonName") {
      showInHeaderAsTransposed = true;
    }
    var result = new gridReport.model.GridColumn({id:id, header:stateColumn.text, initialHeader:stateColumn.initialText, parameters:stateColumn.parameters, width:stateColumn.width, totalCalculations:gfAggregatesAlgorithms.resolveByNames(stateColumn.totalCalculations), selectedTotalsCalculation:gfAggregatesAlgorithms.resolve(stateColumn.selectedTotalsCalculation), pinned:stateColumn.forcePinned || stateColumn.pinned, forcePinned:stateColumn.forcePinned, areParametersVisible:stateColumn.areParametersVisible, 
    groupable:stateColumn.groupable, canEdit:stateColumn.canEdit, canDelete:stateColumn.canDelete, cellClass:isRowKey ? "key-cell" : null, command:new gridReport.model.Command(stateColumn.command), doNotShowPremiumDiscount:stateColumn.doNotShowPremiumDiscount, isBarChartEnabled:stateColumn.isBarChartEnabled, parentColumn:stateColumn.parentColumn, isComposeToVector:stateColumn.isComposeToVector, showInHeaderAsTransposed:showInHeaderAsTransposed, vectorIndex:stateColumn.vectorIndex});
    if (result.command && (result.command.isFactorRank() && _.isEmpty(result.totalCalculations))) {
      result.totalCalculations = gfAggregatesAlgorithms.getCommon();
    }
    if (result.command && (result.command.id != null && result.command.isDataBlock())) {
      result.id = result.command.id;
    }
    if (stateColumn.cellsFormat) {
      result.cellsFormat = new gridReport.model.CellsFormat(stateColumn.cellsFormat);
      if (result.cellsFormat.decimalDigits == -1) {
        result.cellsFormat.decimalDigits = gfValueFormatting.getDefaultDigitCount(result.getReturnType());
      }
    } else {
      if (result.command) {
        result.cellsFormat = gfCellsFormattingFactory.create(result.command);
      }
    }
    if (stateColumn.filter) {
      switch(stateColumn.filter.type) {
        case gridReport.model.filters.ColumnFilterTypes.MembershipColumnFilter:
          result.filter = new gridReport.model.filters.MembershipColumnFilter(stateColumn.filter);
          break;
        case gridReport.model.filters.ColumnFilterTypes.NumericRangeColumnFilter:
          result.filter = new gridReport.model.filters.NumericRangeColumnFilter(stateColumn.filter);
          break;
        case gridReport.model.filters.ColumnFilterTypes.DateRangeColumnFilter:
          result.filter = new gridReport.model.filters.DateRangeColumnFilter(stateColumn.filter);
          break;
      }
    }
    if (result.command) {
      if (result.command.parameters) {
        for (var i = 0;i < result.command.parameters.length;i++) {
          result.command.parameters[i] = new gridReport.model.CommandParameter(result.command.parameters[i]);
        }
      }
      if (result.command.formula) {
        result.command.formula = new gridReport.model.Formula(result.command.formula);
      }
      if (result.command.outputColumn) {
        if (_.isArray(result.command.outputColumn)) {
          result.command.outputColumn = _.map(result.command.outputColumn, function(item) {
            return new gridReport.model.OutputColumn(item);
          });
        } else {
          result.command.outputColumn = new gridReport.model.OutputColumn(result.command.outputColumn);
        }
      }
      if (result.command.factor) {
        result.command.factor = new gridReport.model.Factor(result.command.factor);
      }
      if (result.command.isMultiFactorRank() && result.id.indexOf("MfrExpression:") === -1) {
        result.command.metadata.isBasedOnColumn = true;
      }
    }
    var gridColumns = {};
    if (stateColumn.gridColumns != undefined) {
      for (var colKey in stateColumn.gridColumns) {
        gridColumns[colKey] = columnConverterService.createGridColumnFromState(colKey, stateColumn.gridColumns[colKey]);
        gridColumns[colKey].canEdit = false;
        gridColumns[colKey].canAddFormula = false;
        gridColumns[colKey].canAdd = false;
        gridColumns[colKey].canDelete = false;
        gridColumns[colKey].canPin = false;
        gridColumns[colKey].parentColumn = result.id;
      }
      result.gridColumns = gridColumns;
    }
    if (result.command.isAuditable() && gfConfig.enableAudit) {
      result.command.dataProviderId = gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID;
    } else {
      if (result.command.isAuditable() && !gfConfig.enableAudit) {
        result.command.dataProviderId = gridReport.model.Command.ADC_DATA_PROVIDER_ID;
      }
    }
    result.conditionalValueFormatting = gfConditionalValueFormattingService.create(result);
    if ((result.command.isDataBlock() || result.command.isMultiOutput()) && stateColumn.selectedTotalsCalculation) {
      result.isComposeToVector = false;
      result.canAddRank = false;
      result.canChangeStatistics = false;
      result.selectedTotalsCalculation = gfAggregatesAlgorithms.getDataBlockCalculation(result);
    }
    return result;
  };
  columnConverterService.convertGridColumnToState = function(stateColumn, gridColumn, options) {
    if (!stateColumn) {
      throw new Error("stateColumn should be provided");
    }
    if (!gridColumn) {
      throw new Error("gridColumn should be provided");
    }
    stateColumn.parameters = gridColumn.parameters;
    stateColumn.selectedTotalsCalculation = gridColumn.selectedTotalsCalculation ? gridColumn.selectedTotalsCalculation.name : "";
    stateColumn.totalCalculations = _.pluck(gridColumn.totalCalculations, "name");
    stateColumn.text = gridColumn.header;
    stateColumn.initialText = gridColumn.initialHeader;
    stateColumn.pinned = gridColumn.pinned;
    stateColumn.forcePinned = gridColumn.forcePinned;
    stateColumn.areParametersVisible = gridColumn.areParametersVisible;
    stateColumn.command = gridColumn.command;
    stateColumn.groupable = gridColumn.groupable;
    stateColumn.canEdit = gridColumn.canEdit;
    stateColumn.canDelete = gridColumn.canDelete;
    stateColumn.doNotShowPremiumDiscount = gridColumn.doNotShowPremiumDiscount;
    stateColumn.showInHeaderAsTransposed = gridColumn.showInHeaderAsTransposed;
    stateColumn.parentColumn = gridColumn.parentColumn;
    stateColumn.isComposeToVector = gridColumn.isComposeToVector;
    stateColumn.isBarChartEnabled = gridColumn.isBarChartEnabled;
    stateColumn.vectorIndex = gridColumn.vectorIndex;
    stateColumn.cellsFormat = gridColumn.cellsFormat;
    stateColumn.width = gridColumn.width;
    if (gridColumn.cellsFormat && gridColumn.command) {
      stateColumn.command.decimalDigits = gridColumn.cellsFormat.decimalDigits;
    }
    if (options && (options.keepColumnFilter && gridColumn.filter)) {
      stateColumn.filter = gridColumn.filter.serialize();
    }
    if (gridColumn.hasSubColumns()) {
      stateColumn.gridColumns = {};
      for (var colKey in gridColumn.gridColumns) {
        var subCol = new gridReport.model.GridColumn;
        stateColumn.gridColumns[colKey] = subCol;
        columnConverterService.convertGridColumnToState(subCol, gridColumn.gridColumns[colKey]);
      }
    }
  };
  function createService() {
    function convertFactorCommandToColumn(command, width) {
      var mfrColumn = convertCommandToColumn(gridReport.model.Command.convertMfr(command.metadata.mfr), width);
      return gfFactorRankService.createFactorRankColumn(mfrColumn, command.factor.rankNumber, command.factor.showFactorRank);
    }
    function convertCommandToColumn(command, width) {
      var columnId = command.isDataBlock() ? command.id : command.expression;
      return new gridReport.model.GridColumn({id:columnId, header:command.name, initialHeader:command.name, parameters:{}, hidden:command.parameters && command.parameters.isVisible === false, width:width, command:command, cellsFormat:gfCellsFormattingFactory.create(command)});
    }
    function convertToGridColumn(command, width) {
      if (!command) {
        throw new Error("command should be provided.");
      }
      var column = command.isFactorRank() ? convertFactorCommandToColumn(command, width) : convertCommandToColumn(command, width);
      if (column.id === "rowKey") {
        gfJetLinkingService.bindColumn(column);
      }
      if (column.command.isAuditable()) {
        if (gfConfig.enableAudit) {
          column.command.dataProviderId = gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID;
          gfAuditLinkingService.bindColumn(column);
        } else {
          if (!gfConfig.enableAudit) {
            column.command.dataProviderId = gridReport.model.Command.ADC_DATA_PROVIDER_ID;
          }
        }
      }
      if (column.command.isDataBlock() || column.command.isMultiOutput()) {
        column.canAddRank = false;
        column.canChangeStatistics = false;
        column.gridColumns = {};
        var hasAudit = false;
        _.each(column.command.subCommands, function(cmd) {
          var col = convertToGridColumn(cmd);
          col.canEdit = false;
          col.canDelete = false;
          col.canPin = false;
          col.canAdd = false;
          col.canAddFormula = false;
          col.parentColumn = column.id;
          column.gridColumns[col.id] = col;
          if (col.command.isAuditable()) {
            hasAudit = true;
          }
        });
        if (hasAudit) {
          gfAuditLinkingService.bindColumn(column);
        }
      } else {
        if (column.command.subCommands) {
          column.gridColumns = {};
          column.isComposeToVector = true;
          _.each(column.command.subCommands, function(cmd) {
            var col = convertToGridColumn(cmd);
            col.parentColumn = column.id;
            column.gridColumns[col.id] = col;
          });
        }
      }
      column.conditionalValueFormatting = gfConditionalValueFormattingService.create(column);
      (service.onCommandConverted || angular.noop)(column);
      return column;
    }
    function createGridColumnFromState(id, stateColumn) {
      if (!stateColumn) {
        throw new Error("stateColumn should be provided.");
      }
      var isRowKey = id == "rowKey";
      var showInHeaderAsTransposed = stateColumn.showInHeaderAsTransposed;
      if (id == "rowKey" || id == "TR.CommonName") {
        showInHeaderAsTransposed = true;
      }
      var result = new gridReport.model.GridColumn({id:id, header:stateColumn.text, initialHeader:stateColumn.initialText, parameters:stateColumn.parameters, width:stateColumn.width, totalCalculations:gfAggregatesAlgorithms.resolveByNames(stateColumn.totalCalculations), selectedTotalsCalculation:gfAggregatesAlgorithms.resolve(stateColumn.selectedTotalsCalculation), pinned:stateColumn.forcePinned || stateColumn.pinned, forcePinned:stateColumn.forcePinned, areParametersVisible:stateColumn.areParametersVisible, 
      groupable:stateColumn.groupable, canEdit:stateColumn.canEdit, canDelete:stateColumn.canDelete, cellClass:isRowKey ? "key-cell" : null, command:new gridReport.model.Command(stateColumn.command), doNotShowPremiumDiscount:stateColumn.doNotShowPremiumDiscount, isBarChartEnabled:stateColumn.isBarChartEnabled, parentColumn:stateColumn.parentColumn, isComposeToVector:stateColumn.isComposeToVector, showInHeaderAsTransposed:showInHeaderAsTransposed, vectorIndex:stateColumn.vectorIndex});
      if (result.command && (result.command.isFactorRank() && _.isEmpty(result.totalCalculations))) {
        result.totalCalculations = gfAggregatesAlgorithms.getCommon();
      }
      if (result.command && (result.command.id != null && result.command.isDataBlock())) {
        result.id = result.command.id;
      }
      if (stateColumn.cellsFormat) {
        result.cellsFormat = new gridReport.model.CellsFormat(stateColumn.cellsFormat);
        if (result.cellsFormat.decimalDigits == -1) {
          result.cellsFormat.decimalDigits = gfValueFormatting.getDefaultDigitCount(result.getReturnType());
        }
      } else {
        if (result.command) {
          result.cellsFormat = gfCellsFormattingFactory.create(result.command);
        }
      }
      if (stateColumn.filter) {
        switch(stateColumn.filter.type) {
          case gridReport.model.filters.ColumnFilterTypes.MembershipColumnFilter:
            result.filter = new gridReport.model.filters.MembershipColumnFilter(stateColumn.filter);
            break;
          case gridReport.model.filters.ColumnFilterTypes.NumericRangeColumnFilter:
            result.filter = new gridReport.model.filters.NumericRangeColumnFilter(stateColumn.filter);
            break;
          case gridReport.model.filters.ColumnFilterTypes.DateRangeColumnFilter:
            result.filter = new gridReport.model.filters.DateRangeColumnFilter(stateColumn.filter);
            break;
        }
      }
      if (result.command) {
        if (result.command.parameters) {
          for (var i = 0;i < result.command.parameters.length;i++) {
            result.command.parameters[i] = new gridReport.model.CommandParameter(result.command.parameters[i]);
          }
        }
        if (result.command.formula) {
          result.command.formula = new gridReport.model.Formula(result.command.formula);
        }
        if (result.command.outputColumn) {
          if (_.isArray(result.command.outputColumn)) {
            result.command.outputColumn = _.map(result.command.outputColumn, function(item) {
              return new gridReport.model.OutputColumn(item);
            });
          } else {
            result.command.outputColumn = new gridReport.model.OutputColumn(result.command.outputColumn);
          }
        }
        if (result.command.factor) {
          result.command.factor = new gridReport.model.Factor(result.command.factor);
        }
        if (result.command.isMultiFactorRank() && result.id.indexOf("MfrExpression:") === -1) {
          result.command.metadata.isBasedOnColumn = true;
        }
      }
      var gridColumns = {};
      if (stateColumn.gridColumns != undefined) {
        for (var colKey in stateColumn.gridColumns) {
          gridColumns[colKey] = createGridColumnFromState(colKey, stateColumn.gridColumns[colKey]);
          gridColumns[colKey].canEdit = false;
          gridColumns[colKey].canAddFormula = false;
          gridColumns[colKey].canAdd = false;
          gridColumns[colKey].canDelete = false;
          gridColumns[colKey].canPin = false;
        }
        result.gridColumns = gridColumns;
      }
      if (result.id === "rowKey") {
        gfJetLinkingService.bindColumn(result);
      }
      if (result.command.isAuditable() && gfConfig.enableAudit) {
        result.command.dataProviderId = gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID;
        gfAuditLinkingService.bindColumn(result);
      } else {
        if (result.command.isAuditable() && !gfConfig.enableAudit) {
          result.command.dataProviderId = gridReport.model.Command.ADC_DATA_PROVIDER_ID;
        }
      }
      result.conditionalValueFormatting = gfConditionalValueFormattingService.create(result);
      if ((result.command.isDataBlock() || result.command.isMultiOutput()) && stateColumn.selectedTotalsCalculation) {
        result.isComposeToVector = false;
        result.canAddRank = false;
        result.canChangeStatistics = false;
        if (_.any(result.gridColumns, function(c) {
          return c.command.isAuditable();
        })) {
          gfAuditLinkingService.bindColumn(result);
        }
        result.selectedTotalsCalculation = gfAggregatesAlgorithms.getDataBlockCalculation(result);
      }
      (service.onStateConverted || angular.noop)(result);
      return result;
    }
    function convertGridColumnToState(stateColumn, gridColumn, options) {
      if (!stateColumn) {
        throw new Error("stateColumn should be provided");
      }
      if (!gridColumn) {
        throw new Error("gridColumn should be provided");
      }
      stateColumn.parameters = gridColumn.parameters;
      stateColumn.selectedTotalsCalculation = gridColumn.selectedTotalsCalculation ? gridColumn.selectedTotalsCalculation.name : "";
      stateColumn.totalCalculations = _.pluck(gridColumn.totalCalculations, "name");
      stateColumn.text = gridColumn.header;
      stateColumn.initialText = gridColumn.initialHeader;
      stateColumn.pinned = gridColumn.pinned;
      stateColumn.forcePinned = gridColumn.forcePinned;
      stateColumn.areParametersVisible = gridColumn.areParametersVisible;
      stateColumn.command = gridColumn.command;
      stateColumn.groupable = gridColumn.groupable;
      stateColumn.canEdit = gridColumn.canEdit;
      stateColumn.canDelete = gridColumn.canDelete;
      stateColumn.doNotShowPremiumDiscount = gridColumn.doNotShowPremiumDiscount;
      stateColumn.showInHeaderAsTransposed = gridColumn.showInHeaderAsTransposed;
      stateColumn.parentColumn = gridColumn.parentColumn;
      stateColumn.isComposeToVector = gridColumn.isComposeToVector;
      stateColumn.isBarChartEnabled = gridColumn.isBarChartEnabled;
      stateColumn.vectorIndex = gridColumn.vectorIndex;
      stateColumn.cellsFormat = gridColumn.cellsFormat;
      if (gridColumn.cellsFormat && gridColumn.command) {
        stateColumn.command.decimalDigits = gridColumn.cellsFormat.decimalDigits;
      }
      if (options && (options.keepColumnFilter && gridColumn.filter)) {
        stateColumn.filter = gridColumn.filter.serialize();
      }
      if (gridColumn.hasSubColumns()) {
        stateColumn.gridColumns = {};
        for (var colKey in gridColumn.gridColumns) {
          var subCol = new gridReport.model.GridColumn;
          stateColumn.gridColumns[colKey] = subCol;
          convertGridColumnToState(subCol, gridColumn.gridColumns[colKey]);
        }
      }
    }
    function createFromDefaultColumn(defaultColumn) {
      var column = new gridReport.model.GridColumn(defaultColumn);
      if (column.hasSubColumns()) {
        for (var i = 0;i < defaultColumn.gridColumns.length;i++) {
          column.gridColumns[i] = new gridReport.model.GridColumn(column.gridColumns[i]);
        }
      }
      if (column.id === "rowKey") {
        gfJetLinkingService.bindColumn(column);
      }
      column.conditionalValueFormatting = gfConditionalValueFormattingService.create(column);
      (service.onCommandConverted || angular.noop)(column);
      return column;
    }
    var service = {convertCommandToGridColumn:convertToGridColumn, convertStateToGridColumn:createGridColumnFromState, convertGridColumnToState:convertGridColumnToState, convertDefaultColumnToGridColumn:createFromDefaultColumn, onCommandConverted:null, onStateConverted:null};
    return service;
  }
  columnConverterService.instance = function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService();
    }
    return services[gridInstanceId];
  };
  columnConverterService.clear = function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  };
  return columnConverterService;
}]);
goog.provide("gridReport.directives.GridReportDirective");
goog.require("gridReport.services.DataService");
goog.require("gridReport.model.GridReportSettings");
goog.require("gridReport.services.ActionPostponingService");
goog.require("gridReport.services.JqxGridAdapterFactory");
goog.require("gridReport.services.TotalsCalculationService");
goog.require("gridReport.model.ConditionalValueFormatting");
goog.require("gridReport.services.ValueFormattingService");
goog.require("gridReport.services.DataServiceFactory");
goog.require("gridReport.services.GridStateService");
goog.require("gridReport.services.GridColumnConverterService");
goog.require("gridReport.controllers.GridReportController");
goog.require("gridReport.services.GridManagementService");
goog.require("gridReport.model.StateChangesCause");
goog.require("gridReport.model.GridContentPlacement");
goog.require("gridReport.model.GridTheme");
goog.require("gridReport.model.ColumnContextMenuOptions");
goog.require("gridReport.services.ColumnInfoDialogService");
goog.require("gridReport.services.StatisticsAlgorithmsService");
goog.require("gridReport.model.SortingFullState");
goog.require("gridReport.services.StatisticsExclusions");
goog.require("gridReport.model.ExclusionsTypes");
goog.require("gridReport.directives.ColumnFilteringManagerDialogService");
goog.require("gridReport.columnMath.ColumnMathColumnsUpdater");
goog.require("gridReport.services.FilterHelper");
goog.require("gridReport.services.UuidGenerator");
gridReport.Module.directive("gridReport", ["$compile", "$timeout", "$rootScope", "gfTotalsCalculation", "gfLogManager", "gfAggregatesAlgorithms", "gfValueFormatting", "jqxGridAdapterFactory", "gfDataServiceFactory", "gfGridStateService", "localStorageService", "gfGridColumnConverterService", "gfEventsAggregator", "gfDataCloudCommandService", "gfGridManagementService", "gfDefaultGridColumns", "$translate", "gfNotificationService", "gfExclusions", "gfStateProviderService", "gfStatisticsCalculation", 
"gfColumnInfoDialogService", "gfStatisticsExclusions", "gfColumnFilteringManagerDialogService", "gfColumnMathColumnsUpdater", "gfFormulaColumnsHelper", "$q", "gfJetService", "gfFilterHelper", "gfUuidGenerator", function($compile, $timeout, $rootScope, gfTotalsCalculation, gfLogManager, gfAggregatesAlgorithms, gfValueFormatting, jqxGridAdapterFactory, gfDataServiceFactory, gfGridStateService, localStorageService, gfGridColumnConverterService, gfEventsAggregator, gfDataCloudCommandService, gfGridManagementService, 
gfDefaultGridColumns, $translate, gfNotificationService, gfExclusions, gfStateProviderService, gfStatisticsCalculation, gfColumnInfoDialogService, gfStatisticsExclusions, gfColumnFilteringManagerDialogService, gfColumnMathColumnsUpdater, gfFormulaColumnsHelper, $q, gfJetService, gfFilterHelper, gfUuidGenerator) {
  return{restrict:"E", replace:true, transclude:true, templateUrl:"scripts/directives/gridReport/GridReport.html", scope:{gridReportSettings:"=", allParametersVisible:"=", isWorking:"=", theme:"=", selectedRows:"=", gridRowsCount:"=", enableBrowserSelection:"=", identifiers:"=", hiddenIdentifiers:"=", gridInstanceId:"=", stateChangeCauses:"=", primaryRowKey:"=", columnContextMenuOptions:"=", barChartInTransposeOff:"=", enableRowsDragging:"=?", showTimeseriesChartButton:"=?", isTransposed:"=?", heatMapState:"=?", 
  highlightedRowKey:"=", enablePrimaryRowFreezing:"=?", enableAudit:"="}, controller:"GridReportController", link:function(scope, element) {
    var GRID_STATE_POSTFIX = "_STATE_1_0";
    var eventsAggregator = null;
    scope.isGridEnabled = true;
    var currentStateId;
    var isStateDirty = false;
    var dataService = gfDataServiceFactory.createInstance(scope.gridReportSettings.gfDataProviderResolver);
    var sortingFullStateCache = null;
    var addRowBuilder = {getHtml:function() {
      return'<gf-add-row placeholder-text="placeholderText" grid-instance-id="gridInstanceId"></gf-add-row>';
    }, compile:function(placementElement) {
      var autoSuggestScope = scope.$new();
      autoSuggestScope.placeholderText = undefined;
      autoSuggestScope.gridInstanceId = scope.gridInstanceId;
      var template = angular.element($compile(placementElement[0].innerHTML)(autoSuggestScope));
      placementElement.html(template);
    }};
    var gridAdapter = jqxGridAdapterFactory.createInstance(element.find(".reportGrid"), {isTransposed:scope.isTransposed, theme:scope.theme, enableBrowserSelection:scope.enableBrowserSelection, showTotalsRow:scope.gridReportSettings.showTotalsRow, showTotalsCount:scope.gridReportSettings.showTotalsCount, showGroupCount:scope.gridReportSettings.showGroupCount, totalsLabel:scope.gridReportSettings.totalsLabel, canDeleteColumns:scope.gridReportSettings.canDeleteColumns, showTimeseriesChartButton:scope.showTimeseriesChartButton, 
    enableRowsDragging:scope.enableRowsDragging, heatMapState:scope.heatMapState, enableInColumnFiltering:scope.gridReportSettings.enableInColumnFiltering, highlightedRowKey:scope.highlightedRowKey, enablePrimaryRowFreezing:scope.enablePrimaryRowFreezing, enableConditionalValueFormatting:scope.gridReportSettings.enableConditionalValueFormatting, isAuditEnabled:scope.enableAudit, universeContext:scope.gridReportSettings.universeContext}, addRowBuilder, scope.barChartInTransposeOff, scope.gridInstanceId);
    var isCopyInvokedOnGrid = false;
    var lastException;
    var isSetStateInProcess = false;
    var causeQueue_ = [];
    var groupsUpdating_ = false;
    var currentGroupingCommands = [];
    var groupingCommandIdsWaitDataLoading = [];
    var loadingReasonsStorage = {};
    var isAddRemoveIdentifierInProgress = false;
    dataService.columnDataLoadingFailedCallback = function(columnIds, exception) {
      gridAdapter.setFailedLoadingColumns(columnIds, exception);
      _.each(columnIds, function(colId) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnDataLoaded, findColumnById(scope.gridReportSettings.columns, colId));
      });
      lastException = exception;
    };
    scope.getGrouppingExpressions = getCurrentGroupingCommandsExpressions;
    scope.setGroupingByCommands = setGroupingByCommandsCallback;
    dataService.keysChangedCallback = function(addedKeys, removedKeys, additionalOptions) {
      if (addedKeys.length > 0 || removedKeys.length > 0) {
        gfTotalsCalculation.instance(scope.gridInstanceId).clearCache();
        gfStatisticsCalculation.clearStatisticsCache();
      }
      scope.gridRowsCount = gridAdapter.updateRows(addedKeys, removedKeys, isHiddenRow, additionalOptions);
      scope.identifiers = gridAdapter.getIdentifiers();
      scope.hiddenIdentifiers = gridAdapter.getHiddenIdentifiers();
      if (!isAddRemoveIdentifierInProgress && !_.isEmpty(gridAdapter.getSelectedRowIndexes())) {
        scope.clearSelection();
      }
    };
    dataService.beginColumnsDataUpdateCallback = function(colIds) {
    };
    dataService.columnsDataUpdateCallback = function(data) {
      var doNotResetToFalse = false;
      if (isSetStateInProcess) {
        doNotResetToFalse = true;
      }
      isSetStateInProcess = true;
      gridAdapter.premiumDiscoutAutoRestoringDisabled(true);
      if (gridAdapter.setColumnsData(data)) {
        updateGropingColumns();
      }
      _.each(data, function(column) {
        var gridColumn = findColumnById(scope.gridReportSettings.columns, column.id);
        if (gridColumn && (!gridColumn.hidden && gridColumn.isAutoresizable === true)) {
          gridColumn.width = gridAdapter.autoWidthColumn(gridColumn.id);
          gridColumn.isAutoresizable = false;
        }
      });
      updateGroupingCommandIdsWaitDataLoading(data);
      var groupsUpdated = tryApplyCurrentGroupingCommands(groupsUpdating_);
      if (!doNotResetToFalse) {
        isSetStateInProcess = false;
      }
      if (groupsUpdating_ && groupsUpdated) {
        groupsUpdating_ = false;
      } else {
        gridAdapter.dataUpdated();
      }
      gridAdapter.premiumDiscoutAutoRestoringDisabled(false);
      gridAdapter.tryRestorePremiumDiscontRowState();
    };
    dataService.clearDataCallback = function() {
      gfTotalsCalculation.instance(scope.gridInstanceId).clearCache();
      gfStatisticsCalculation.clearStatisticsCache();
      gridAdapter.clean();
    };
    dataService.loadingDataStartedCallback = function(columns) {
      angular.forEach(columns, function(column) {
        gridAdapter.columnDataLoadingStarted(column.id);
      });
      gridAdapter.dataLoadingStarted();
      lastException = undefined;
    };
    dataService.endColumnsDataUpdateCallback = function(colIds) {
      _.each(colIds, function(colId) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnDataLoaded, findColumnById(scope.gridReportSettings.columns, colId));
      });
    };
    dataService.columnAddedCallback = function(column) {
      eventsAggregator.raiseEvent(gridReport.model.InternalEvents.columnAdded, column);
    };
    dataService.columnRemovedCallback = function(column) {
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnRemoved, column);
    };
    dataService.startLoadingRows = function(rows) {
      gridAdapter.addLoadingRows(rows);
    };
    dataService.endLoadingRows = function(rows) {
      gridAdapter.removeLoadingRows(rows);
    };
    function findColumnById(columns, columnId) {
      for (var i = 0, n = columns.length;i < n;i++) {
        var column = columns[i];
        if (column.id === columnId) {
          return column;
        }
        if (column.gridColumns && column.gridColumns[columnId]) {
          return column.gridColumns[columnId];
        }
      }
      return null;
    }
    function updateSelectedRows() {
      var rows = [];
      var indexes = gridAdapter.getSelectedRowIndexes();
      _.forEach(indexes, function(index) {
        rows.push(gridAdapter.getRowData(index));
      });
      scope.selectedRows = rows;
      $timeout(angular.noop);
    }
    function isHiddenRow(identifier) {
      var enableExclusions = scope.gridReportSettings.enableExclusions == undefined ? false : scope.gridReportSettings.enableExclusions;
      return enableExclusions && gfExclusions.instance(scope.gridInstanceId).isHidden(identifier);
    }
    function isCellsSelectionMode() {
      var selectionMode = scope.gridReportSettings.selectionMode;
      return selectionMode == gridReport.model.GridReportSelectionMode.SingleCell || selectionMode == gridReport.model.GridReportSelectionMode.MultipleCellsExtended;
    }
    function resetColumns(newColumns, oldCols) {
      gfDataCloudCommandService.get(scope.gridInstanceId).abortUpdateGridColumns();
      var oldColumns = oldCols ? oldCols : scope.gridReportSettings.columns;
      scope.gridReportSettings.columns = newColumns;
      resetGroups();
      if (oldColumns.length > 0) {
        dataService.unsubscribe(oldColumns);
      }
      gridAdapter.setColumns(scope.gridReportSettings.columns);
      if (scope.gridReportSettings.columns.length > 0) {
        dataService.subscribe(scope.gridReportSettings.columns);
      }
    }
    var doNotSaveState = false;
    function saveState() {
      if (currentStateId === undefined) {
        gfLogManager.trace("GRID. trying to save state with undefined id");
        return;
      }
      if (doNotSaveState) {
        return;
      }
      gfLogManager.trace("Request to save grid state locally [id: " + (currentStateId + GRID_STATE_POSTFIX) + "]");
      if (scope.gridReportSettings.isStateful) {
        $timeout(function() {
          if (!gridAdapter.destroyed) {
            localStorageService.add(currentStateId + GRID_STATE_POSTFIX, JSON.stringify(gfGridStateService.getState(scope.gridInstanceId, {keepColumnFilter:false})));
            gfLogManager.trace("Grid saved state locally [id: " + (currentStateId + GRID_STATE_POSTFIX) + "]");
          }
        });
      }
    }
    scope.$watch("gridReportSettings", saveState, true);
    scope.$watch("gridReportSettings.totalsLabel", function(newValue, oldValue) {
      if (newValue) {
        gridAdapter.setTotalsLabel(newValue, oldValue);
      }
    });
    function createNewGridColumn(command, columnParams) {
      var width = columnParams == undefined ? undefined : columnParams.width;
      var column = gfGridColumnConverterService.instance(scope.gridInstanceId).convertCommandToGridColumn(command, width);
      column.isAutoresizable = true;
      if (column.canHaveStatistics()) {
        if (column.isMultiColumn()) {
          if (columnParams) {
            columnParams.totalsCalculationName = null;
          }
          column.selectedTotalsCalculation = gfAggregatesAlgorithms.getDataBlockCalculation(column);
        } else {
          column.selectedTotalsCalculation = gfAggregatesAlgorithms.getDefaultCalculation();
        }
      }
      if (column.isMultiColumn()) {
        for (var key in column.gridColumns) {
          if (column.gridColumns[key].canHaveStatistics()) {
            column.gridColumns[key].selectedTotalsCalculation = gfAggregatesAlgorithms.getDefaultCalculation();
          }
          if (scope.allParametersVisible != undefined) {
            column.gridColumns[key].areParametersVisible = scope.allParametersVisible;
          }
        }
      }
      if (columnParams) {
        if (columnParams.areParametersVisible != undefined) {
          column.areParametersVisible = columnParams.areParametersVisible;
        } else {
          if (scope.allParametersVisible != undefined) {
            column.areParametersVisible = scope.allParametersVisible;
          }
        }
        if (columnParams.forcePinned != undefined) {
          column.forcePinned = columnParams.forcePinned;
        }
        if (columnParams.pinned != undefined) {
          column.pinned = column.forcePinned != undefined && column.forcePinned ? true : columnParams.pinned;
        }
        if (columnParams.totalsCalculationName != undefined) {
          column.selectedTotalsCalculation = _.findWhere(column.totalCalculations, {name:columnParams.totalsCalculationName});
        }
        if (columnParams.cellsFormat != undefined) {
          column.cellsFormat = new gridReport.model.CellsFormat(columnParams.cellsFormat);
        }
        if (columnParams.conditionalValueFormatting != undefined) {
          column.conditionalValueFormatting = columnParams.conditionalValueFormatting;
        }
        if (columnParams.header != undefined) {
          column.header = columnParams.header;
        }
        if (columnParams.canEdit != undefined) {
          column.canEdit = columnParams.canEdit;
        }
      }
      return column;
    }
    function exportDataCallback() {
      return gridAdapter.getGridData();
    }
    function getDataForExportCallback(title, exportAll) {
      return gridAdapter.getDataForExport(title, exportAll);
    }
    function getLastErrorCallback() {
      return lastException;
    }
    function scrollToColumnCallback(gridColumnId) {
      gridAdapter.scrollToColumn(gridColumnId);
    }
    scope.removeColumn = function(columnId) {
      removeCommand(columnId, gridReport.model.StateChangesCause.ColumnRemoved);
    };
    function getDefaultColumns() {
      return _.map(gfDefaultGridColumns, gfGridColumnConverterService.instance(scope.gridInstanceId).convertDefaultColumnToGridColumn);
    }
    function getColumnByExpression(expression) {
      return _.find(scope.gridReportSettings.columns, function(column) {
        return column.id === expression || column.command && column.command.expression === expression;
      });
    }
    function getColumnById(id, checkDataBlock) {
      var result = _.findWhere(scope.gridReportSettings.columns, {id:id});
      if (checkDataBlock && !result) {
        result = _.chain(scope.gridReportSettings.columns).reduce(function(subCols, c) {
          return subCols.concat(_.toArray(c.gridColumns));
        }, []).findWhere({id:id}).value();
      }
      return result;
    }
    function setDefaultCommandsCallback() {
      resetColumns(getDefaultColumns());
      stateChanged();
    }
    function setCommandsCallback(commands) {
      var newColumns = [], i, l;
      for (i = 0, l = getDefaultColumns().length;i < l;i++) {
        newColumns.push(scope.gridReportSettings.columns[i]);
      }
      for (i in commands) {
        newColumns.push(createNewGridColumn(commands[i], {areParametersVisible:scope.allParametersVisible}));
      }
      resetColumns(newColumns);
      stateChanged();
    }
    function setColumnsCallback(columns) {
      var newColumns = [], i, l;
      for (i = 0, l = getDefaultColumns().length;i < l;i++) {
        newColumns.push(scope.gridReportSettings.columns[i]);
      }
      for (i in columns) {
        var column = columns[i];
        column.areParametersVisible = scope.allParametersVisible;
        newColumns.push(column);
      }
      resetColumns(newColumns);
      stateChanged();
    }
    function getColumnsCallback() {
      return _.chain(scope.gridReportSettings.columns).filter(function(c) {
        return!c.isColumnEmpty;
      }).map(function(c) {
        return new gridReport.model.GridColumn(c);
      }).value();
    }
    function getColumnByIdCallback(columnId) {
      var column = _.findWhere(scope.gridReportSettings.columns, {id:columnId});
      if (!column) {
        column = _.chain(scope.gridReportSettings.columns).reduce(function(subCols, c) {
          return subCols.concat(_.toArray(c.gridColumns));
        }, []).findWhere({id:columnId}).value();
      }
      if (column) {
        return new gridReport.model.GridColumn(column);
      } else {
        return null;
      }
    }
    function addByUserCommandCallback(command) {
      if (_.isNull(command) || _.isUndefined(command)) {
        return;
      }
      removeFromGroupingColmmandsList(command);
      if (addColumnToGrid(command)) {
        stateChanged(gridReport.model.StateChangesCause.ColumnAdded);
      }
    }
    function addCommandProgrammatically(command) {
      if (_.isNull(command) || _.isUndefined(command)) {
        return;
      }
      addColumnToGrid(command);
    }
    function addCommandCallback(command) {
      removeFromGroupingColmmandsList(command);
      addCommandProgrammatically(command);
      stateChanged(gridReport.model.StateChangesCause.ColumnProgrammaticallyAdded);
      stateChanged(gridReport.model.StateChangesCause.ColumnProgrammaticallyAddedToSavedTemplate);
      if (command.isMultiFactorRank()) {
        gfEventsAggregator.getChildAggregator(scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.mfrAdded);
      }
    }
    function removeFromGroupingColmmandsList(addedCommand) {
      if (addedCommand) {
        var groupingCmd = _.findWhere(currentGroupingCommands, {expression:addedCommand.expression});
        if (groupingCmd) {
          currentGroupingCommands.splice(currentGroupingCommands.indexOf(groupingCmd), 1);
          var groupColumn = _.findWhere(scope.gridReportSettings.columns, {id:addedCommand.expression});
          scope.gridReportSettings.columns.splice(_.indexOf(scope.gridReportSettings.columns, groupColumn), 1);
        }
      }
    }
    function addColumnCallback(column, stateChangesCause) {
      if (!column) {
        throw new Error("column should be provided");
      }
      var needSubscribeFirstColumns = false;
      if (scope.gridReportSettings.columns.length == 0) {
        scope.gridReportSettings.columns.splice.apply(scope.gridReportSettings.columns, [2, 0].concat(getDefaultColumns()));
        needSubscribeFirstColumns = true;
      } else {
        var gridColumn = getColumnById(column.id);
        if (gridColumn) {
          if (showDuplicateWarning(gridColumn.command, column.command)) {
            eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnActionCanceled);
            gfNotificationService.warning($translate.instant("COLUMN_ALREADY_EXISTS", {name:column.name, existName:gridColumn.header}));
          }
          return false;
        }
      }
      scope.gridReportSettings.columns.push(column);
      gridAdapter.setColumns(scope.gridReportSettings.columns);
      if (needSubscribeFirstColumns) {
        dataService.subscribe(scope.gridReportSettings.columns);
      } else {
        dataService.subscribe([column]);
      }
      stateChanged(stateChangesCause || gridReport.model.StateChangesCause.ColumnProgrammaticallyAdded);
      return true;
    }
    function changeColumnCallback(previousColumn, newColumn, stateChangesCause) {
      if (!previousColumn) {
        throw new Error("previousColumn should be provided");
      }
      if (!newColumn) {
        throw new Error("newColumn should be provided");
      }
      var previousColumnIndex = _.indexOf(scope.gridReportSettings.columns, previousColumn);
      if (previousColumnIndex == -1) {
        previousColumnIndex = _.indexOf(scope.gridReportSettings.columns, getColumnById(previousColumn.id));
      }
      if (previousColumnIndex == -1) {
        throw new Error("Previous column not found.");
      }
      if (previousColumn.id == newColumn.id) {
        newColumn.width = undefined;
      }
      scope.gridReportSettings.columns.splice(previousColumnIndex, 1);
      dataService.unsubscribe([previousColumn]);
      scope.gridReportSettings.columns.splice(previousColumnIndex, 0, newColumn);
      if (previousColumn.isFilterApplied()) {
        gridAdapter.removeFilter(previousColumn.id, false);
      }
      gridAdapter.setColumns(scope.gridReportSettings.columns);
      dataService.subscribe([newColumn]);
      stateChanged(stateChangesCause || gridReport.model.StateChangesCause.ColumnProgrammaticallyChanged);
    }
    function getExpandCollapseStateCallback() {
      return gridAdapter.getCurrentExpandCollapseState();
    }
    function showDuplicateWarning(previousCommand, newCommand) {
      if (previousCommand == null || newCommand == null) {
        return true;
      }
      return!(previousCommand.id === newCommand.id && (previousCommand.isDataBlock() && newCommand.isDataBlock() || (previousCommand.isCustom() && newCommand.isCustom() || previousCommand.isMultiFactorRank() && newCommand.isMultiFactorRank())));
    }
    function addColumnToGrid(command) {
      var needSubscribeFirstColumns = false;
      if (scope.gridReportSettings.columns.length == 0) {
        scope.gridReportSettings.columns.splice.apply(scope.gridReportSettings.columns, [2, 0].concat(getDefaultColumns()));
        needSubscribeFirstColumns = true;
      } else {
        var gridColumn = getColumnByExpression(command.expression);
        if (gridColumn) {
          if (showDuplicateWarning(gridColumn.command, command)) {
            eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnActionCanceled);
            gfNotificationService.warning($translate.instant("COLUMN_ALREADY_EXISTS", {name:command.name, existName:gridColumn.header}));
          }
          return false;
        }
      }
      var column = createNewGridColumn(command, {areParametersVisible:scope.allParametersVisible});
      column.hidden = getCurrentGroupingCommandsExpressions().indexOf(command.expression) >= 0 || _.findWhere(currentGroupingCommands, {expression:command.expression}) != undefined;
      scope.gridReportSettings.columns.push(column);
      gfColumnMathColumnsUpdater.update(scope.gridReportSettings.columns, undefined, column.id);
      gridAdapter.setColumns(scope.gridReportSettings.columns);
      var appliedGroups = gridAdapter.getGroupping();
      if (!appliedGroups || !appliedGroups.length) {
        gridAdapter.hidePremiumDiscountRow();
      }
      if (needSubscribeFirstColumns) {
        dataService.subscribe(scope.gridReportSettings.columns);
      } else {
        dataService.subscribe([column]);
      }
      return true;
    }
    function removeCommandCallback(commandExpression, stateChangesCause) {
      removeCommand(commandExpression, stateChangesCause || gridReport.model.StateChangesCause.ColumnProgrammaticallyRemoved);
    }
    function removeCommand(commandExpression, reason) {
      if (!commandExpression) {
        throw new Error("Argument is null or undefined. { commandExpression: <value> } is expected");
      }
      var column = _.findWhere(scope.gridReportSettings.columns, {id:commandExpression});
      var columnsToRemove = [];
      if (column) {
        columnsToRemove.push(column);
        var columnIndex = _.indexOf(scope.gridReportSettings.columns, column);
        scope.gridReportSettings.columns.splice(columnIndex, 1);
        var childColumns = _.where(scope.gridReportSettings.columns, {parentColumn:commandExpression});
        if (!_.isEmpty(childColumns)) {
          _.each(childColumns, function(clmn) {
            columnIndex = _.indexOf(scope.gridReportSettings.columns, clmn);
            scope.gridReportSettings.columns.splice(columnIndex, 1);
            columnsToRemove.push(clmn);
          });
        }
        gfColumnMathColumnsUpdater.update(scope.gridReportSettings.columns, column.id);
        gridAdapter.removeColumn(_.pluck(columnsToRemove, "id"));
        _.each(columnsToRemove, function(col) {
          gfTotalsCalculation.instance(scope.gridInstanceId).clearColumnCache(col.id);
          gfStatisticsCalculation.clearColumnCache(col.id);
        });
        var groupIndex = getCurrentGroupingCommandsExpressions().indexOf(column.id);
        if (groupIndex >= 0) {
          currentGroupingCommands.splice(groupIndex, 1);
          updateGropingColumns();
        }
        dataService.unsubscribe(columnsToRemove);
        refreshAdvancedSortinState();
      }
      stateChanged(reason);
    }
    function changeCommandCallback(previousCommand, newCommand) {
      if (!previousCommand) {
        throw new Error("previousCommand should be provided");
      }
      if (!newCommand) {
        throw new Error("newCommand should be provided");
      }
      var gridColumn = getColumnByExpression(newCommand.expression);
      if (gridColumn) {
        if (showDuplicateWarning(gridColumn.command, newCommand)) {
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnActionCanceled);
          gfNotificationService.warning($translate.instant("COLUMN_ALREADY_EXISTS", {name:newCommand.name, existName:gridColumn.header}));
        }
        return false;
      }
      var previousColumn = getColumnByExpression(previousCommand.expression);
      if (previousColumn) {
        var index = _.indexOf(scope.gridReportSettings.columns, previousColumn);
        var totalsCalculationName = newCommand.id == previousCommand.id && previousColumn.selectedTotalsCalculation != undefined ? previousColumn.selectedTotalsCalculation.name : undefined;
        var cellsFormat = undefined, conditionalValueFormatting = undefined;
        if (newCommand.id === previousCommand.id && newCommand.returnType === previousCommand.returnType) {
          cellsFormat = previousColumn.cellsFormat;
          conditionalValueFormatting = previousColumn.conditionalValueFormatting;
        }
        var header = newCommand.id == previousCommand.id && (previousColumn.header != undefined && previousColumn.header != previousColumn.initialHeader) ? previousColumn.header : undefined;
        var newColumn = createNewGridColumn(newCommand, {width:previousColumn.width, areParametersVisible:previousColumn.areParametersVisible, pinned:previousColumn.pinned, forcePinned:previousColumn.forcePinned, totalsCalculationName:totalsCalculationName, cellsFormat:cellsFormat, conditionalValueFormatting:conditionalValueFormatting, header:header});
        var columns = scope.gridReportSettings.columns.slice();
        columns.splice(index, 1);
        columns.splice(index, 0, newColumn);
        var columnsToUnsubscribe = [previousColumn];
        var columnsToSubscribe = [newColumn];
        _.each(columns, function(column) {
          if (column.parentColumn && previousColumn.id == column.parentColumn) {
            columnsToUnsubscribe.push(column);
          }
        });
        columns = _.difference(columns, columnsToUnsubscribe);
        angular.forEach(gfFormulaColumnsHelper.getDependantColumnIds(columns, previousColumn.id), function(colId) {
          columnsToUnsubscribe.push(new gridReport.model.GridColumn(_.findWhere(columns, {id:colId})));
        });
        gfColumnMathColumnsUpdater.update(columns, previousColumn.id, newColumn.id);
        angular.forEach(gfFormulaColumnsHelper.getDependantColumnIds(columns, previousColumn.id), function(colId) {
          columnsToSubscribe.push(_.findWhere(columns, {id:colId}));
        });
        dataService.unsubscribe(columnsToUnsubscribe);
        gridAdapter.setColumns(columns);
        scope.gridReportSettings.columns = columns;
        dataService.subscribe(columnsToSubscribe);
        refreshAdvancedSortinState();
        stateChanged(gridReport.model.StateChangesCause.ColumnChanged);
        return true;
      } else {
        return false;
      }
    }
    function toggleAllGroupsCallback(needExpand) {
      if (needExpand) {
        scope.expandAllGroups();
      } else {
        scope.collapseAllGroups();
      }
    }
    function isTransposedCallback() {
      return scope.isTransposed;
    }
    function totalsRowVisibleCallback(needShow) {
      if (!_.isUndefined(needShow)) {
        scope.gridReportSettings.showTotalsRow = needShow;
      }
      return scope.gridReportSettings.showTotalsRow;
    }
    function insertCommandCallback(beforeCommand, newCommand, columnParams) {
      var gridColumn = getColumnByExpression(newCommand.expression);
      if (gridColumn) {
        if (showDuplicateWarning(gridColumn.command, newCommand)) {
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnActionCanceled);
          gfNotificationService.warning($translate.instant("COLUMN_ALREADY_EXISTS", {name:newCommand.name, existName:gridColumn.header}));
        }
        return false;
      }
      var previousColumn = getColumnByExpression(beforeCommand ? beforeCommand.expression : "");
      var index = _.indexOf(scope.gridReportSettings.columns, previousColumn);
      if (index < 0) {
        index = scope.gridReportSettings.columns.length;
      }
      columnParams = _.extend(columnParams || {}, {areParametersVisible:scope.allParametersVisible});
      var newColumn = createNewGridColumn(newCommand, columnParams);
      scope.gridReportSettings.columns.splice(index + 1, 0, newColumn);
      gfColumnMathColumnsUpdater.update(scope.gridReportSettings.columns, undefined, newCommand.expression);
      gridAdapter.setColumns(scope.gridReportSettings.columns);
      if (newColumn.command.isMultiFactorRank()) {
        gfGridManagementService.setSortDirection(scope.gridInstanceId, newColumn.command.expression, newColumn.command.getDefaultSortDirection());
      }
      dataService.subscribe([newColumn]);
      stateChanged(gridReport.model.StateChangesCause.ColumnInserted);
      return true;
    }
    function setGlobalParametersCallback(globalPatameters) {
      gridAdapter.setGlobalParameters(globalPatameters);
      removeAllFiltersCallback();
    }
    function showErrorCallback(error, placement) {
      hideErrorCallback();
      if (placement === gridReport.model.GridContentPlacement.All || scope.isTransposed) {
        scope.error = error;
        $timeout(angular.noop);
      } else {
        if (placement === gridReport.model.GridContentPlacement.Rows) {
          gridAdapter.showError(error);
        }
      }
    }
    function hideErrorCallback() {
      scope.error = null;
      gridAdapter.hideError();
    }
    function startLoadingCallback(placement, reason) {
      if (scope.isTransposed && placement) {
        placement = gridReport.model.GridContentPlacement.All;
      }
      if (!loadingReasonsStorage[placement]) {
        loadingReasonsStorage[placement] = {};
      }
      if (reason) {
        loadingReasonsStorage[placement][reason] = true;
      }
      hideErrorCallback();
      if (placement === gridReport.model.GridContentPlacement.All) {
        scope.isWorking = true;
      } else {
        if (placement === gridReport.model.GridContentPlacement.Rows) {
          gridAdapter.showLoading();
          gridAdapter.disableGridHeader();
        } else {
          gfLogManager.trace("GridReport: Tried to start loading for unknown GridContentPlacement");
        }
      }
    }
    function endLoadingCallback(placement, reason) {
      if (scope.isTransposed && placement) {
        placement = gridReport.model.GridContentPlacement.All;
      }
      if (!loadingReasonsStorage[placement] || !reason) {
        loadingReasonsStorage[placement] = {};
      }
      if (reason) {
        delete loadingReasonsStorage[placement][reason];
      }
      if (Object.keys(loadingReasonsStorage[placement]).length) {
        return;
      }
      if (placement === gridReport.model.GridContentPlacement.All) {
        scope.isWorking = false;
      } else {
        if (placement === gridReport.model.GridContentPlacement.Rows) {
          gridAdapter.hideLoading();
          gridAdapter.enableGridHeader();
        } else {
          gfLogManager.trace("GridReport: Tried to stop loading for unknown GridContentPlacement");
        }
      }
    }
    function enableGridHeaderCallback() {
      gridAdapter.enableGridHeader();
    }
    function disableGridHeaderCallback() {
      gridAdapter.disableGridHeader();
    }
    function enableGridRowsCallback() {
      gridAdapter.enableGridRows();
    }
    function disableGridRowsCallback() {
      gridAdapter.disableGridRows();
    }
    function enableGridCallback() {
      scope.isGridEnabled = true;
      gridAdapter.enableGrid();
    }
    function disableGridCallback() {
      scope.isGridEnabled = false;
      gridAdapter.disableGrid();
    }
    function updateGroupingCommandIdsWaitDataLoading(columnsData) {
      if (groupingCommandIdsWaitDataLoading.length == 0) {
        return;
      }
      for (var i = 0;i < columnsData.length;i++) {
        var indexOfWaitingCommand = groupingCommandIdsWaitDataLoading.indexOf(columnsData[i].id);
        if (indexOfWaitingCommand >= 0) {
          groupingCommandIdsWaitDataLoading.splice(indexOfWaitingCommand, 1);
        }
      }
    }
    function getCurrentGroupingCommandsExpressions() {
      return _.pluck(currentGroupingCommands, "expression");
    }
    scope.getGrouping = function() {
      return gridAdapter.getGroupping();
    };
    function getGroupingCallback() {
      return scope.getGrouping();
    }
    function setGroupingByCommandsCallback(groupingCommands, isUserAction) {
      groupingCommands = groupingCommands || [];
      var groupsExpressions = _.pluck(groupingCommands, "expression");
      var previousGroupsExpressions = getCurrentGroupingCommandsExpressions();
      var previousGroupingCommand = currentGroupingCommands;
      var removedExpressions = _.difference(previousGroupsExpressions, groupsExpressions);
      var addedExpressions = _.difference(groupsExpressions, previousGroupsExpressions);
      _.each(removedExpressions, function(exp) {
        var column = _.findWhere(scope.gridReportSettings.columns, {id:exp});
        if (column) {
          scope.gridReportSettings.columns.splice(_.indexOf(scope.gridReportSettings.columns, column), 1);
          dataService.unsubscribe([column]);
        }
        if (groupingCommandIdsWaitDataLoading.indexOf(exp) >= 0) {
          groupingCommandIdsWaitDataLoading.splice(groupingCommandIdsWaitDataLoading.indexOf(exp), 1);
        }
      });
      var addedColumns = [];
      _.each(addedExpressions, function(exp, index) {
        var existedColumn = getColumnByExpression(exp);
        var existedCommand = existedColumn ? existedColumn.command : _.findWhere(previousGroupingCommand, {expression:exp});
        if (!existedCommand) {
          groupingCommandIdsWaitDataLoading.push(exp);
          var command = _.findWhere(groupingCommands, {expression:exp});
          var column = createNewGridColumn(command, {areParametersVisible:scope.allParametersVisible});
          column.hidden = true;
          scope.gridReportSettings.columns.push(column);
          addedColumns.push(column);
        } else {
          groupingCommands.splice(index, 1, existedCommand);
        }
      });
      dataService.subscribe(addedColumns);
      if (addedColumns.length > 0 && isUserAction) {
        groupsUpdating_ = true;
      }
      currentGroupingCommands = groupingCommands;
      setTimeout(function() {
        if (gridAdapter === null) {
          return;
        }
        if (addedColumns.length > 0) {
          gridAdapter.setColumns(scope.gridReportSettings.columns);
        }
        tryApplyCurrentGroupingCommands();
      });
    }
    function setStatisticsCallback(statistics) {
      gridAdapter.setStatistics(statistics);
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.statisticsApplied, {statistics:statistics});
    }
    function getStatisticsCallback() {
      return gridAdapter.getStatistics();
    }
    function recalculateStatisticsCallback() {
      gfStatisticsCalculation.clearStatisticsCache();
      gridAdapter.updateStatistics();
    }
    function setSortDirectionCallback(columnId, sortDirection) {
      checkSortingStateChanges();
      gridAdapter.setSingleSortingState(columnId, sortDirection);
    }
    function getGridSourceDataCallback() {
      return gridAdapter.getGridData();
    }
    function getRowsCountCallback() {
      return gridAdapter.getRowsCount();
    }
    function getRowsCallback() {
      return gridAdapter.getRows();
    }
    function removeEmptyColumns(columns) {
      var emptyColumnIndex;
      while (true) {
        emptyColumnIndex = _.findIndex(columns, function(c) {
          return c.isColumnEmpty === true;
        });
        if (emptyColumnIndex >= 0) {
          columns.splice(emptyColumnIndex, 1);
        } else {
          break;
        }
      }
    }
    function applyTransposeMode() {
      scope.isWorking = true;
      $timeout(function() {
        var showAddRow = scope.gridReportSettings.showAddRemoveRows;
        if (!scope.isTransposed) {
          gridAdapter.beginUpdate();
          showHideAddRow(false, true);
          gridAdapter.endUpdate(true);
        } else {
          removeAllFiltersCallback();
        }
        scope.selectedRows = [];
        setGroupingByCommandsCallback([]);
        var columns = gridAdapter.getGridColumns();
        angular.forEach(columns, function(c) {
          c.isBarChartEnabled = false;
        });
        removeEmptyColumns(columns);
        var globalParams = gridAdapter.getGlobalParameters();
        var primaryRowKey = gridAdapter.getPrimaryRow();
        var statistics = gridAdapter.getStatistics();
        var sortingState = gridAdapter.getSortingFullState();
        var data = getRawDataCallback();
        gridAdapter.beginUpdate();
        gridAdapter.destroy();
        gridAdapter.endUpdate(true);
        gridAdapter.erase();
        element.find(".gridReportContainer").prepend('<div class="reportGrid"></div>');
        gridAdapter = jqxGridAdapterFactory.createInstance(element.find(".reportGrid"), {isTransposed:scope.isTransposed, theme:scope.theme, enableBrowserSelection:scope.enableBrowserSelection, showTotalsRow:scope.gridReportSettings.showTotalsRow, totalsLabel:scope.gridReportSettings.totalsLabel, canDeleteColumns:scope.gridReportSettings.canDeleteColumns, enableRowsDragging:scope.enableRowsDragging, showTimeseriesChartButton:scope.showTimeseriesChartButton, showTotalsCount:scope.gridReportSettings.showTotalsCount, 
        showGroupCount:scope.gridReportSettings.showGroupCount, heatMapState:scope.heatMapState, enableTooltips:scope.gridReportSettings.enableTooltips, selectionMode:scope.gridReportSettings.selectionMode, enableInColumnFiltering:scope.gridReportSettings.enableInColumnFiltering, highlightedRowKey:scope.highlightedRowKey, enablePrimaryRowFreezing:scope.enablePrimaryRowFreezing, enableConditionalValueFormatting:scope.gridReportSettings.enableConditionalValueFormatting, isAuditEnabled:scope.enableAudit, 
        universeContext:scope.gridReportSettings.universeContext}, addRowBuilder, scope.barChartInTransposeOff, scope.gridInstanceId);
        registerAdapterEventListeners();
        gridAdapter.setColumns(columns);
        gridAdapter.setGlobalParameters(globalParams);
        gridAdapter.updateRows(dataService.getKeys(), [], isHiddenRow);
        gridAdapter.beginUpdate();
        gridAdapter.setPrimaryRow(primaryRowKey);
        gridAdapter.setColumnsData(data);
        gridAdapter.setStatistics(statistics);
        gridAdapter.setSortingFullState(sortingState);
        var excludedIdentifiers = gfStatisticsExclusions.instance(scope.gridInstanceId).getExcludedIdentifiers();
        if (!_.isEmpty(excludedIdentifiers)) {
          gridAdapter.setExcludedFromStatisticsIdentifiers(excludedIdentifiers);
        }
        if (!scope.gridReportSettings.showFilterRow) {
          gridAdapter.clearFilters();
        }
        showHideAddRow(showAddRow, scope.isTransposed);
        gridAdapter.endUpdate();
        gridAdapter.setSortingFullState(sortingState);
        scope.isWorking = true;
        $timeout(function() {
          scope.isWorking = false;
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.transposed, {isTransposed:scope.isTransposed});
        });
      }, 100);
    }
    function transposeCallback() {
      scope.isTransposed = !scope.isTransposed;
    }
    function filterAdvancedSortingCriterias(criterias) {
      if (!criterias || !criterias.length) {
        return criterias;
      }
      var columns = getGridColumnsCallback();
      return _.filter(criterias, function(c) {
        return _.any(columns, function(col) {
          return col.id == c.dataField && !col.hidden;
        });
      });
    }
    function setAdvancedSortingStateCallback(sortingState) {
      if (!sortingState) {
        return;
      }
      sortingState.criterias = filterAdvancedSortingCriterias(sortingState.criterias);
      var currentSortingState = gridAdapter.getAdvancedSortingState();
      if (currentSortingState && (currentSortingState.equals && currentSortingState.equals(sortingState))) {
        return;
      }
      gridAdapter.setAdvancedSortingState(sortingState);
      saveState();
    }
    function refreshSortingFullStateCache() {
      sortingFullStateCache = gridAdapter.getSortingFullState();
    }
    function checkSortingStateChanges() {
      var prevState = sortingFullStateCache;
      refreshSortingFullStateCache();
      if (!prevState && !sortingFullStateCache) {
        return;
      }
      if (!prevState || !prevState.equals(sortingFullStateCache)) {
        onSortStateChanged();
      }
    }
    function onSortStateChanged(colimnId, isAsc) {
      var sortBy = colimnId, orderBy = isAsc ? "asc" : "desc";
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.sortChanged, {gridInstanceId:scope.gridInstanceId, sortBy:sortBy, orderBy:orderBy});
      stateChanged(gridReport.model.StateChangesCause.SortChanged);
      $timeout(angular.noop);
    }
    function refreshAdvancedSortinState() {
      setAdvancedSortingStateCallback(getAdvancedSortingStateCallback());
    }
    function getSortingFullStateCallback() {
      return gridAdapter.getSortingFullState();
    }
    function setSortingFullSateCallback(state) {
      gridAdapter.setSortingFullState(state);
    }
    function getAdvancedSortingStateCallback() {
      return gridAdapter.getAdvancedSortingState();
    }
    function isPrimaryRowFreezedCallback() {
      return gridAdapter.isPrimaryRowFreezed();
    }
    function freezePrimaryRowCallback(value) {
      var sortingState = gridAdapter.getSortingFullState();
      sortingState.isPrimaryRowFreezed = value;
      setSortingFullSateCallback(sortingState);
    }
    function getPrimaryRowKeyCallback() {
      return gridAdapter.getPrimaryRow();
    }
    function scrollToTickerCallback(rowKey) {
      gridAdapter.scrollToTicker(rowKey);
    }
    function scrollToGroupCallback(path) {
      gridAdapter.scrollToGroup(path);
    }
    function removeAllFiltersCallback() {
      var isAnyFilterWasRemoved = false;
      _.each(scope.gridReportSettings.columns, function(column) {
        if (column.gridColumns) {
          _.each(column.gridColumns, function(subcolumn) {
            if (subcolumn.isFilterApplied()) {
              subcolumn.removeFilter();
              isAnyFilterWasRemoved = true;
            }
          });
        }
        if (column.isFilterApplied()) {
          column.removeFilter();
          isAnyFilterWasRemoved = true;
        }
      });
      if (isAnyFilterWasRemoved) {
        gridAdapter.applyFilters();
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnFiltersRemoved);
      }
    }
    function reorderColumnsCallback(columns) {
      isSetStateInProcess = true;
      doNotSaveState = true;
      gridAdapter.reorderColumns(columns);
      isSetStateInProcess = false;
      doNotSaveState = false;
      stateChanged(gridReport.model.StateChangesCause.ColumnReordered);
    }
    function isPrimaryRowFreezingEnabledCallback() {
      return scope.enablePrimaryRowFreezing;
    }
    var callbacksArray = [[gfGridManagementService.setGlobalParameters, setGlobalParametersCallback], [gfGridManagementService.addCommand, addCommandCallback], [gfGridManagementService.addByUserCommand, addByUserCommandCallback], [gfGridManagementService.removeCommand, removeCommandCallback], [gfGridManagementService.changeCommand, changeCommandCallback], [gfGridManagementService.insertCommand, insertCommandCallback], [gfGridManagementService.setDefaultCommands, setDefaultCommandsCallback], [gfGridManagementService.setCommands, 
    setCommandsCallback], [gfGridManagementService.setColumns, setColumnsCallback], [gfGridManagementService.exportData, exportDataCallback], [gfGridManagementService.getDataForExport, getDataForExportCallback], [gfGridManagementService.restoreState, restoreStateCallback], [gfGridManagementService.createNew, createNewCallback], [gfGridManagementService.getLastError, getLastErrorCallback], [gfGridManagementService.scrollToColumn, scrollToColumnCallback], [gfGridManagementService.showError, showErrorCallback], 
    [gfGridManagementService.hideError, hideErrorCallback], [gfGridManagementService.startLoading, startLoadingCallback], [gfGridManagementService.endLoading, endLoadingCallback], [gfGridManagementService.enableGridHeader, enableGridHeaderCallback], [gfGridManagementService.disableGridHeader, disableGridHeaderCallback], [gfGridManagementService.enableGridRows, enableGridRowsCallback], [gfGridManagementService.disableGridRows, disableGridRowsCallback], [gfGridManagementService.enableGrid, enableGridCallback], 
    [gfGridManagementService.disableGrid, disableGridCallback], [gfGridManagementService.addIdentifiers, addIdentifiersCallback], [gfGridManagementService.removeIdentifiers, removeIdentifiersCallback], [gfGridManagementService.setTheme, setThemeCallback], [gfGridManagementService.getTheme, getThemeCallback], [gfGridManagementService.setGroupingByCommands, setGroupingByCommandsCallback], [gfGridManagementService.getGrouping, getGroupingCallback], [gfGridManagementService.setStatistics, setStatisticsCallback], 
    [gfGridManagementService.getStatistics, getStatisticsCallback], [gfGridManagementService.getRowsCount, getRowsCountCallback], [gfGridManagementService.getRows, getRowsCallback], [gfGridManagementService.getGridSourceData, getGridSourceDataCallback], [gfGridManagementService.recalculateStatistics, recalculateStatisticsCallback], [gfGridManagementService.setSortDirection, setSortDirectionCallback], [gfGridManagementService.getExpandCollapseState, getExpandCollapseStateCallback], [gfGridManagementService.toggleAllGroups, 
    toggleAllGroupsCallback], [gfGridManagementService.getVisibleIdentifiers, getVisibleIdentifiersCallback], [gfGridManagementService.getRawData, getRawDataCallback], [gfGridManagementService.getGridColumns, getGridColumnsCallback], [gfGridManagementService.addColumn, addColumnCallback], [gfGridManagementService.changeColumn, changeColumnCallback], [gfGridManagementService.transpose, transposeCallback], [gfGridManagementService.totalsRowVisible, totalsRowVisibleCallback], [gfGridManagementService.isTransposed, 
    isTransposedCallback], [gfGridManagementService.setAdvancedSortingState, setAdvancedSortingStateCallback], [gfGridManagementService.getAdvancedSortingState, getAdvancedSortingStateCallback], [gfGridManagementService.isPrimaryRowFreezed, isPrimaryRowFreezedCallback], [gfGridManagementService.freezePrimaryRow, freezePrimaryRowCallback], [gfGridManagementService.getSortingFullState, getSortingFullStateCallback], [gfGridManagementService.setSortingFullState, setSortingFullSateCallback], [gfGridManagementService.isPrimaryRowFreezingEnabled, 
    isPrimaryRowFreezingEnabledCallback], [gfGridManagementService.heatMapState, heatMapStateCallback], [gfGridManagementService.getPrimaryRowKey, getPrimaryRowKeyCallback], [gfGridManagementService.getColumns, getColumnsCallback], [gfGridManagementService.getColumnById, getColumnByIdCallback], [gfGridManagementService.beginUpdate, beginUpdateCallback], [gfGridManagementService.endUpdate, endUpdateCallback], [gfGridManagementService.scrollToTicker, scrollToTickerCallback], [gfGridManagementService.scrollToGroup, 
    scrollToGroupCallback], [gfGridManagementService.applyColumnFilter, applyColumnFilterCallback], [gfGridManagementService.removeAllFilters, removeAllFiltersCallback], [gfGridManagementService.setUniverse, setUniverseCallback], [gfGridManagementService.reorderColumns, reorderColumnsCallback], [gfGridManagementService.columnSelectionState, columnSelectionStateCallback], [gfGridManagementService.selectColumn, selectColumnCallback], [gfGridManagementService.exportToExcel, exportToExcelCallback], [gfGridManagementService.exportToHtml, 
    exportToHtmlCallback], [gfGridManagementService.exportToPdf, exportToPdfCallback], [gfGridManagementService.print, printCallback], [gfGridManagementService.hasMfrColumn, hasMfrColumnCallback]];
    function exportToHtmlCallback(exportSettings) {
      return exportCallback(gridAdapter.exportToHtml, exportSettings);
    }
    function exportToPdfCallback(exportSettings) {
      return exportCallback(gridAdapter.exportToPdf, exportSettings);
    }
    function printCallback(exportSettings) {
      return exportCallback(gridAdapter.print, exportSettings);
    }
    function hasMfrColumnCallback() {
      return _.any(scope.gridReportSettings.columns, function(column) {
        if (column.command) {
          if (column.command.isDataBlock() && column.gridColumns) {
            return _.any(column.gridColumns, function(subColumn) {
              return!!subColumn.command && subColumn.command.isMultiFactorRank();
            });
          } else {
            return column.command.isMultiFactorRank();
          }
        } else {
          return false;
        }
      });
    }
    function exportToExcelCallback(exportSettings) {
      return exportCallback(gridAdapter.exportData, exportSettings);
    }
    function exportCallback(action, exportSettings) {
      var deferred = $q.defer();
      gfGridManagementService.startLoading(scope.gridInstanceId, gridReport.model.GridContentPlacement.All);
      $timeout(function() {
        action(exportSettings).then(function(result) {
          deferred.resolve(result);
        }, function(fail) {
          gfLogManager.error(fail);
          deferred.reject(fail);
        })["finally"](function() {
          $timeout(function() {
            gfGridManagementService.endLoading(scope.gridInstanceId, gridReport.model.GridContentPlacement.All);
          });
        });
      });
      return deferred.promise;
    }
    function selectColumnCallback(columnId, color) {
      if (color != undefined) {
        gridAdapter.columnSelection.selectColumn(columnId, color);
      } else {
        gridAdapter.columnSelection.deselectColumn(columnId, color);
      }
    }
    function columnSelectionStateCallback(enabled) {
      if (enabled === undefined) {
        return gridAdapter.columnSelection.getEnabled();
      }
      return gridAdapter.columnSelection.setEnabled(enabled);
    }
    function setUniverseCallback() {
      removeAllFiltersCallback();
    }
    function registerManagementServiceCallbacks(gridInstanceId) {
      gfGridManagementService.registerCallbacks(gridInstanceId, callbacksArray);
    }
    function unregisterManagementServiceCallbacks(gridInstanceId) {
      gfGridManagementService.unregisterCallbacks(gridInstanceId, callbacksArray);
    }
    function beginUpdateCallback() {
      gridAdapter.beginUpdate();
    }
    function endUpdateCallback(postponeRendering) {
      gridAdapter.endUpdate(postponeRendering);
    }
    function heatMapStateCallback(heatMapState) {
      if (heatMapState === undefined) {
        return scope.heatMapState;
      }
      scope.heatMapState = heatMapState;
      return gridAdapter.setHeatMapState(heatMapState);
    }
    function addIdentifiersCallback(identifiers) {
      isAddRemoveIdentifierInProgress = true;
      var alreadyAddedKeys = _.intersection(gridAdapter.getIdentifiers(), identifiers);
      if (!_.isEmpty(alreadyAddedKeys)) {
        if (alreadyAddedKeys.length > 1) {
          gfNotificationService.warning($translate.instant("SECURITIES_ALREADY_ADDED", {rics:alreadyAddedKeys.join(", ")}));
        } else {
          gfNotificationService.warning($translate.instant("SECURITY_ALREADY_ADDED", {ric:alreadyAddedKeys[0]}));
        }
      }
      identifiers = _.difference(identifiers, alreadyAddedKeys);
      if (!_.isEmpty(identifiers)) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.rowsAdded, identifiers);
        dataService.addKeys(identifiers, scope.gridReportSettings.columns);
        gridAdapter.afterDataKeysChanged(identifiers);
      }
      isAddRemoveIdentifierInProgress = false;
    }
    function getVisibleIdentifiersCallback() {
      return gridAdapter.getVisibleIdentifiers();
    }
    function getRawDataCallback() {
      var data = gridAdapter.getRawGridData();
      angular.forEach(data, function(dataItem) {
        var values = {};
        for (var k in dataItem.values) {
          if (!dataItem.values.hasOwnProperty(k) || !dataItem.values[k]) {
            continue;
          }
          values[k] = new gridReport.model.ColumnValue(k, dataItem.values[k].value, undefined, undefined, dataItem.values[k].props);
        }
        dataItem.values = values;
      });
      return data;
    }
    function getGridColumnsCallback() {
      return scope.gridReportSettings.columns;
    }
    function removeIdentifiersCallback(identifiers) {
      isAddRemoveIdentifierInProgress = true;
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.rowsRemoved, identifiers);
      gridAdapter.beforeRowRemoved(identifiers);
      gfStatisticsExclusions.instance(scope.gridInstanceId).removeFromExcluded(identifiers);
      dataService.removeKeys(identifiers, scope.gridReportSettings.columns);
      gridAdapter.afterDataKeysChanged();
      updateSelectedRows();
      isAddRemoveIdentifierInProgress = false;
    }
    function setThemeCallback(theme) {
      scope.theme = theme;
      gridAdapter.setTheme(theme);
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.themeChanged, {theme:theme});
    }
    function getThemeCallback() {
      return gridAdapter.getTheme();
    }
    scope.$watch("primaryRowKey", function(newValue) {
      gridAdapter.setPrimaryRow(newValue);
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.primaryRowKeyChanged, {newValue:newValue});
    });
    scope.$watch("highlightedRowKey", function(newValue, oldValue) {
      if (newValue != oldValue) {
        gridAdapter.setHighlightedRow(newValue);
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.highlightedRowKeyChanged, {newValue:newValue});
      }
    });
    scope.$watch("gridReportSettings.showTotalsRow", function(newValue) {
      gridAdapter.changeTotalsRowVisibility(newValue);
    });
    scope.$watch("gridReportSettings.showTotalsCount", function(newValue) {
      gridAdapter.changeTotalsCountVisibility(newValue);
    });
    scope.$watch("gridReportSettings.showGroupCount", function(newValue) {
      gridAdapter.changeGroupCountVisibility(newValue);
    });
    scope.$watch("gridReportSettings.showGroupsHeader", function() {
      gridAdapter.setShowGroupsHeader(scope.gridReportSettings.showGroupsHeader);
    });
    scope.$watch("gridReportSettings.columnsResize", function() {
      gridAdapter.setColumnsResize(scope.gridReportSettings.columnsResize);
    });
    scope.$watch("gridReportSettings.columnsReorder", function() {
      gridAdapter.setColumnsReorder(scope.gridReportSettings.columnsReorder);
    });
    scope.$watch("gridReportSettings.groupable", function() {
      gridAdapter.setGroupable(scope.gridReportSettings.groupable);
    });
    scope.$watch("gridReportSettings.sortable", function() {
      gridAdapter.setSortable(scope.gridReportSettings.sortable);
    });
    scope.$watch("gridReportSettings.scrollMode", function() {
      gridAdapter.setScrollMode(scope.gridReportSettings.scrollMode);
    });
    scope.$watch("gridReportSettings.selectionMode", function() {
      gridAdapter.setSelectionMode(scope.gridReportSettings.selectionMode);
      scope.clearSelection();
      if (scope.enableBrowserSelection) {
        var allowedBrowserSelection = scope.gridReportSettings.selectionMode != gridReport.model.GridReportSelectionMode.MultipleCellsExtended && scope.gridReportSettings.selectionMode != gridReport.model.GridReportSelectionMode.MultipleRowsExtended;
        gridAdapter.setBrowserSelection(allowedBrowserSelection);
      }
    });
    scope.$watch("isTransposed", function(newValue, value) {
      if (newValue != value) {
        applyTransposeMode();
      }
    });
    scope.$watch("enablePrimaryRowFreezing", function(newValue, value) {
      gridAdapter.enablePrimaryRowFreezing(newValue);
    });
    scope.$watch("gridReportSettings.enableTooltips", function() {
      gridAdapter.enableTooltips(scope.gridReportSettings.enableTooltips);
    });
    scope.$watch("enableRowsDragging", function(newVal, val) {
      if (newVal != val) {
        gridAdapter.enableRowsDragging(scope.enableRowsDragging);
      }
    });
    scope.$watch("showTimeseriesChartButton", function(newVal, val) {
      if (newVal != val) {
        gridAdapter.showTimeseriesChartButton(scope.showTimeseriesChartButton);
      }
    });
    scope.$watch("gridReportSettings.enableInColumnFiltering", function(newValue, oldValue) {
      if (newValue != oldValue) {
        gridAdapter.enableInColumnFiltering(newValue);
      }
    });
    scope.$watch("gridReportSettings.enableConditionalValueFormatting", function(newValue, oldValue) {
      if (newValue != oldValue) {
        gridAdapter.enableConditionalValueFormatting(newValue);
      }
    });
    scope.$watch("gridReportSettings.hideGroupedColumns", function() {
      updateGropingColumns();
    });
    scope.$watch("gridReportSettings.showFilterRow", function() {
      if (!scope.gridReportSettings.showFilterRow) {
        scope.clearFilters();
      }
      gridAdapter.setFilterRowDisplay(scope.gridReportSettings.showFilterRow);
    });
    scope.$watch("gridReportSettings.universeContext", function(newValue, oldValue) {
      if (newValue != oldValue) {
        gridAdapter.setUniverseContext(scope.gridReportSettings.universeContext);
      }
    });
    scope.$watch("gridReportSettings.enableEmptyRowInserting", function(newValue, oldValue) {
    });
    function tryApplyCurrentGroupingCommands() {
      if (groupingCommandIdsWaitDataLoading.length > 0) {
        return false;
      }
      var groups = getCurrentGroupingCommandsExpressions();
      if (_.isEqual(groups, gridAdapter.getGroupping())) {
        return false;
      }
      gfTotalsCalculation.instance(scope.gridInstanceId).clearCache();
      gridAdapter.setGroupping(groups);
      updateGropingColumns();
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.groupingApplied, {newGroups:groups});
      return true;
    }
    scope.$watch("gridReportSettings.showAddRemoveRows", function(newValue) {
      showHideAddRow(newValue, scope.isTransposed);
    });
    function showHideAddRow(show, isTransposed) {
      if (isTransposed) {
        var addRowElement = element.find(".gf-transposed-add-identifer-container");
        if (show) {
          element.find(".gridReportContainer").addClass("gf-add-identifier");
          addRowElement.show();
        } else {
          element.find(".gridReportContainer").removeClass("gf-add-identifier");
          addRowElement.hide();
        }
        gridAdapter.resize();
        gridAdapter.showAddRemoveRows(show);
      } else {
        gridAdapter.showAddRemoveRows(show);
      }
    }
    function updateGropingColumns() {
      var groups = gridAdapter.getGroupping() || [];
      angular.forEach(scope.gridReportSettings.columns, function(column) {
        var isHidden = scope.gridReportSettings.hideGroupedColumns && groups.indexOf(column.id) != -1;
        var changeState = isHidden != column.hidden;
        if (changeState) {
          column.hidden = isHidden;
          gridAdapter.showHideColumn(column.id, isHidden);
        }
      });
    }
    scope.setTotalCalculation = function(calculation) {
      if (scope.clickedColumn.model.isMultiColumn()) {
        gfTotalsCalculation.instance(scope.gridInstanceId).clearColumnCache(scope.clickedColumn.model.id);
      }
      gridAdapter.setColumnTotalsCalculation(scope.clickedColumn.subColModel || scope.clickedColumn.model, calculation);
      markAsDirty(gridReport.model.StateChangesCause.ColumnTotalCalculationChanged);
    };
    scope.getCurrentExpandCollapseState = function() {
      return gridAdapter.getCurrentExpandCollapseState();
    };
    scope.startEditColumnHeader = function(column, parentColumn) {
      gridAdapter.startEditColumnHeader(column, parentColumn, function() {
        stateChanged(gridReport.model.StateChangesCause.ColumnRenamed);
      });
    };
    scope.refreshColumns = function() {
      gridAdapter.setColumns(scope.gridReportSettings.columns);
    };
    scope.setColumnHeader = function(columnId, headerText) {
      gridAdapter.setColumnHeader(columnId, headerText);
      markAsDirty(gridReport.model.StateChangesCause.ColumnRenamed);
    };
    scope.applyCellsFormatting = function() {
      gridAdapter.applyCellsFormatting();
      markAsDirty(gridReport.model.StateChangesCause.ColumnFormattingChanged);
    };
    scope.setColumnSortingType = function(columnId, sortingType, needRefreshSorting) {
      var columnIndex = gridReport.jsUtils.findIndex(scope.gridReportSettings.columns, "id", columnId);
      var prevSortingType = scope.gridReportSettings.columns[columnIndex].sortingType;
      if (prevSortingType == sortingType) {
        return;
      }
      scope.gridReportSettings.columns[columnIndex].sortingType = sortingType;
      scope.refreshColumns();
      needRefreshSorting && gridAdapter.refreshSorting();
    };
    scope.expandAllGroups = function() {
      gridAdapter.expandAllGroups();
    };
    scope.excludeSelectedRows = function() {
      if (scope.selectedRows && scope.selectedRows.length) {
        gfExclusions.instance(scope.gridInstanceId).exclude(_.pluck(scope.selectedRows, "rowKey"));
      }
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.excludeRows, {exclusionsType:gridReport.model.ExclusionsTypes.Exclusions});
    };
    scope.excludeRow = function(rowKey) {
      gfExclusions.instance(scope.gridInstanceId).exclude([rowKey]);
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.excludeRows, {exclusionsType:gridReport.model.ExclusionsTypes.Exclusions});
    };
    scope.collapseAllGroups = function() {
      gridAdapter.collapseAllGroups();
    };
    scope.selectAllRows = function() {
      gridAdapter.selectAllRows();
      updateSelectedRows();
    };
    scope.clearSelection = function() {
      gridAdapter.clearSelection();
      updateSelectedRows();
    };
    scope.pinColumn = function(columnId) {
      gridAdapter.pinColumn(columnId);
      stateChanged(gridReport.model.StateChangesCause.ColumnPinned);
    };
    scope.unpinColumn = function(columnId) {
      gridAdapter.unpinColumn(columnId);
      stateChanged(gridReport.model.StateChangesCause.ColumnUnpinned);
    };
    scope.getColumn = function(columnId) {
      return gridAdapter.getColumn(columnId);
    };
    scope.clearFilters = function() {
      gridAdapter.clearFilters();
    };
    scope.setVisibleRows = function() {
      var selectedIdentifiers = _.pluck(scope.selectedRows, "rowKey");
      scope.clearSelection();
      gridAdapter.setVisibleRows(isHiddenRow);
      scope.hiddenIdentifiers = gridAdapter.getHiddenIdentifiers();
      var identifiersToSelect = _.difference(selectedIdentifiers, scope.hiddenIdentifiers);
      _.each(identifiersToSelect, gridAdapter.selectRowByKey);
    };
    scope.showHiddenRows = function() {
      gridAdapter.showHiddenRows();
      scope.hiddenIdentifiers = [];
      $timeout(function() {
        markAsDirty(gridReport.model.StateChangesCause.HiddenIdentifiersChanged);
        scope.$apply();
      });
    };
    scope.isRowEmpty = function(rowKey) {
      return gridAdapter.isRowEmpty(rowKey);
    };
    function restoreStateCallback(stateId) {
      if (currentStateId === stateId) {
        return;
      }
      if (stateId === undefined) {
        gfLogManager.trace("GRID. trying to resotre state with undefined id");
        return;
      }
      gfLogManager.trace("GRID. resotreState id: " + stateId);
      currentStateId = stateId;
      var lastSavedState = localStorageService.get(currentStateId + GRID_STATE_POSTFIX);
      if (lastSavedState) {
        gfLogManager.trace("GRID. restoreState. State loaded id: " + stateId);
        if (isStateBroken(lastSavedState)) {
          fixState(lastSavedState);
        }
        gfDataCloudCommandService.get(scope.gridInstanceId).abortUpdateGridColumns();
        gfGridStateService.setState(scope.gridInstanceId, lastSavedState);
      } else {
        eventsAggregator.raiseEvent(gridReport.model.InternalEvents.gridStateNotFound);
      }
    }
    function isStateBroken(state) {
      return state.gridState.columns.length === 0;
    }
    function fixState(state) {
      var columns = {};
      _.each(getDefaultColumns(), function(col) {
        columns[col.id] = {};
        gfGridColumnConverterService.instance(scope.gridInstanceId).convertGridColumnToState(columns[col.id], col);
      });
      state.gridState.columns = columns;
    }
    scope.$watch("enableAudit", function(newVal) {
      gridAdapter.enableAudit(newVal);
    });
    scope.$watch("gridInstanceId", function(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }
      gfLogManager.trace("GR set gridInstanceId: " + newVal);
      gridInstanceIdChanged(newVal, oldVal);
    });
    function gridInstanceIdChanged(newVal, oldVal) {
      registerGridStateCallbacksForGrid(newVal, oldVal);
      if (oldVal) {
        unregisterManagementServiceCallbacks(oldVal);
      }
      registerManagementServiceCallbacks(newVal);
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.gridComponentRegistered, {gridInstanceId:newVal});
    }
    function registerGridStateCallbacksForGrid(newGridId, oldGridId) {
      if (oldGridId) {
        gfGridStateService.unregister(oldGridId);
      }
      gfGridStateService.register(newGridId, {getStateCallback:function(options) {
        var gridState = gridAdapter.getState();
        for (var columnKey in gridState.columns) {
          var columnDataInfo = _.find(scope.gridReportSettings.columns, function(col) {
            var isGroupingColumn = _.findWhere(currentGroupingCommands, {expression:columnKey}) != undefined;
            return col.id === columnKey && (col.isSavedInState && !isGroupingColumn);
          });
          if (!_.isUndefined(columnDataInfo) && columnKey != "TR.IsPublic") {
            gfGridColumnConverterService.instance(scope.gridInstanceId).convertGridColumnToState(gridState.columns[columnKey], columnDataInfo, options);
          } else {
            delete gridState.columns[columnKey];
          }
        }
        return{gridState:gridState};
      }, getGridDescriptionCallback:function() {
        var columns = _.chain(scope.gridReportSettings.columns).filter(function(column) {
          return column.hidden != true && column.isSavedInState;
        }).map(function(column) {
          return{header:column.header};
        }).value();
        return JSON.stringify({columns:columns, universeContext:scope.gridReportSettings.universeContext});
      }, setStateCallback:function(state, callback) {
        isSetStateInProcess = true;
        if (!state) {
          dataService.clearDataCallback();
          gridAdapter.clearState();
          setDefaultCommandsCallback();
          (callback || angular.noop)();
          isSetStateInProcess = false;
          return;
        }
        var newColumns = [];
        var gridState = state.gridState;
        for (var columnKey in gridState.columns) {
          newColumns.push(gfGridColumnConverterService.instance(scope.gridInstanceId).convertStateToGridColumn(columnKey, gridState.columns[columnKey]));
        }
        gfLogManager.trace(function() {
          return "GR set setStateCallback: updateGridColumns calling " + JSON.stringify(newColumns);
        });
        gfDataCloudCommandService.get(scope.gridInstanceId).updateGridColumns(newColumns).then(function(successResponse) {
          newColumns = successResponse;
          gfLogManager.trace(function() {
            return "GR set setStateCallback: updateGridColumns retrieved " + JSON.stringify(newColumns);
          });
          (dataService.clearDataCallback || angular.noop)();
          gridAdapter.clearState();
          var oldColumns = scope.gridReportSettings.columns;
          resetColumns(newColumns, oldColumns);
          var sortDirection;
          if (gridState.sortdirection) {
            sortDirection = gridState.sortdirection.ascending ? "asc" : "desc";
            gridState.sortdirection.ascending = false;
            gridState.sortdirection.descending = false;
          }
          resetGroups();
          $timeout(function() {
            if (!gridAdapter.destroyed) {
              var prevSortingFullState = gridAdapter.getSortingFullState();
              var singleSortingState = new gridReport.model.SingleSortingState({column:gridState.sortcolumn, direction:sortDirection, enabled:true});
              var advancedSortingState = new gridReport.model.AdvancedSortingState(gridState.advancedSortingState);
              var sortingFullState = new gridReport.model.SortingFullState({singleSortingState:singleSortingState, advancedSortingState:advancedSortingState, isPrimaryRowFreezed:prevSortingFullState && prevSortingFullState.isPrimaryRowFreezed});
              gridAdapter.setSortingFullState(sortingFullState);
              refreshSortingFullStateCache();
            }
            (callback || angular.noop)();
            eventsAggregator.raiseEvent(gridReport.model.GridEvents.newStateApplied);
            isSetStateInProcess = false;
          });
        }, function() {
          (callback || angular.noop)();
          isSetStateInProcess = false;
        });
      }});
    }
    function resetGroups() {
      var groupingCommandsCopy = angular.copy(currentGroupingCommands);
      currentGroupingCommands = [];
      groupingCommandIdsWaitDataLoading = [];
      tryApplyCurrentGroupingCommands();
      setGroupingByCommandsCallback(groupingCommandsCopy);
    }
    scope.columParametersVsibilityChanged = function() {
      stateChanged(gridReport.model.StateChangesCause.ColumnParametersVisibilityChanged);
      gridAdapter.updateColumnHeaders();
    };
    scope.excludeRowFromStatistics = function(rowKey) {
      gfStatisticsExclusions.instance(scope.gridInstanceId).exclude([rowKey]);
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.excludeRows, {exclusionsType:gridReport.model.ExclusionsTypes.StatisticsExclusions});
    };
    scope.excludeSelectedRowsFromStatistics = function() {
      if (!_.isEmpty(scope.selectedRows)) {
        var excludedTickers = _.chain(scope.selectedRows).pluck("rowKey").filter(function(key) {
          return key != scope.primaryRowKey;
        }).value();
        gfStatisticsExclusions.instance(scope.gridInstanceId).exclude(excludedTickers);
        scope.clearSelection();
      }
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.excludeRows, {exclusionsType:gridReport.model.ExclusionsTypes.StatisticsExclusions});
    };
    scope.getSelectionState = function() {
      return columnSelectionStateCallback(undefined);
    };
    scope.insertBlankRow = function(rowKey, insertPosition) {
      gridAdapter.addEmptyRow(rowKey, insertPosition);
    };
    scope.insertBlankColumn = function(columnId, insertPosition) {
      var previousColumn = getColumnById(columnId);
      if (previousColumn) {
        var index = _.indexOf(scope.gridReportSettings.columns, previousColumn);
        if (index < 0) {
          index = scope.gridReportSettings.columns.length;
        }
        var indexToInsert = insertPosition === "before" ? index : index + 1;
        scope.gridReportSettings.columns.splice(indexToInsert, 0, createEmptyGridColumn());
        gridAdapter.setColumns(scope.gridReportSettings.columns);
      }
    };
    function createEmptyGridColumn() {
      var id = gfUuidGenerator.get();
      return new gridReport.model.GridColumn({id:id, isColumnEmpty:true, header:"", isSavedInState:false, canPin:false, forcePinned:false, canAddRank:false, canEdit:false, canRename:false, canHideParameters:false, command:new gridReport.model.Command({expression:id})});
    }
    function markAsDirty(cause) {
      if (isSetStateInProcess) {
        return;
      }
      if (isInfulenceState(cause)) {
        causeQueue_.push(cause);
        waitfor(function() {
          return gridAdapter.isUpdating();
        }, false, 100, 0, this, function() {
          if (!causeQueue_ || causeQueue_.length == 0) {
            return;
          }
          isStateDirty = true;
          for (var i = 0;i < causeQueue_.length;i++) {
            eventsAggregator.raiseEvent(gridReport.model.GridEvents.stateChanged, causeQueue_[i]);
          }
          causeQueue_ = [];
        });
      }
    }
    function waitfor(test, expectedValue, msec, count, source, callback) {
      while (test() !== expectedValue) {
        count++;
        setTimeout(function() {
          waitfor(test, expectedValue, msec, count, source, callback);
        }, msec);
        return;
      }
      callback();
    }
    function isInfulenceState(cause) {
      return scope.stateChangeCauses && scope.stateChangeCauses.indexOf(cause) != -1;
    }
    var debouncedUpdateSelectedRows = _.debounce(updateSelectedRows, 100);
    function registerAdapterEventListeners() {
      gridAdapter.addListener("beforecolumnsort", function(eventArgs) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.beforeColumnSort, eventArgs);
      });
      gridAdapter.addListener("groupsstaterestored", function() {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.groupsStateRestored);
      });
      gridAdapter.addListener("allgroupsexpanded", function() {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.allGroupsExpanded);
      });
      gridAdapter.addListener("allgroupscollapsed", function() {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.allGroupsCollapsed);
      });
      gridAdapter.addListener("groupexpand", function(event) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.groupExpanded, event.args.group);
      });
      gridAdapter.addListener("groupcollapse", function(event) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.groupCollapsed, event.args.group);
      });
      gridAdapter.addListener("grouprowrightclick", function(event) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.groupRowRightClicked, event.args);
      });
      gridAdapter.addListener("rowselect", function(event) {
        debouncedUpdateSelectedRows();
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.rowSelected, event);
      });
      gridAdapter.addListener("rowunselect", function(event) {
        debouncedUpdateSelectedRows();
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.rowUnselected, event);
      });
      gridAdapter.addListener("allRowsSelected", function() {
        updateSelectedRows();
      });
      gridAdapter.addListener("allRowsUnselected", function() {
        updateSelectedRows();
      });
      gridAdapter.addListener("columnresized", function(event) {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnResized, event);
        markAsDirty(gridReport.model.StateChangesCause.ColumnResized);
        $timeout(angular.noop);
      });
      gridAdapter.addListener("columnresized", saveState);
      gridAdapter.addListener("showgroupsheader", function(event) {
        scope.gridReportSettings.showGroupsHeader = event.state;
        markAsDirty(gridReport.model.StateChangesCause.ShowHideGroupsHeader);
      });
      gridAdapter.addListener("columnreordered", function() {
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnReordered, {gridInstanceId:scope.gridInstanceId});
        stateChanged(gridReport.model.StateChangesCause.ColumnReordered);
        $timeout(angular.noop);
      });
      gridAdapter.addListener("sort", checkSortingStateChanges);
      gridAdapter.addListener("rowdeleting", function(rowId) {
        gfGridManagementService.removeIdentifiers(scope.gridInstanceId, [rowId]);
      });
      gridAdapter.addListener("columndeleting", function(columnId) {
        scope.removeColumn(columnId);
      });
      gridAdapter.addListener("columninfoclicked", function(columnId) {
        var column = getColumnById(columnId, true);
        if (column) {
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnInfoClicked);
          gfColumnInfoDialogService.openDialog(column, gridAdapter.getPrimaryRow());
          $timeout(angular.noop);
        }
      });
      gridAdapter.addListener("columntimeserieschartclicked", function(columnId) {
        var column = _.findWhere(scope.gridReportSettings.columns, {id:columnId});
        if (column) {
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnTimeseriesChartClicked, column);
        }
      });
      gridAdapter.addListener("columnbarchartclicked", function(attrs) {
        var column = _.findWhere(scope.gridReportSettings.columns, {id:attrs.parentId || attrs.columnId});
        var isDataBlock = false;
        if (attrs.parentId && (column && column.gridColumns)) {
          isDataBlock = true;
          column = column.gridColumns[attrs.columnId];
        }
        if (column) {
          column.isBarChartEnabled = !column.isBarChartEnabled;
          if (column.isBarChartEnabled) {
            gridAdapter.showColumnBarChart(column, isDataBlock);
          } else {
            gridAdapter.hideColumnBarChart(column, isDataBlock);
          }
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnChartClicked, {isShowed:column.isBarChartEnabled});
          stateChanged(gridReport.model.StateChangesCause.ColumnBarChartStateChanged);
        }
      });
      gridAdapter.addListener("columnfilterresultsclickedclicked", function(columnId, subColId, vectorIndex) {
        var column = _.findWhere(scope.gridReportSettings.columns, {id:columnId}), columnFilter;
        if (!column) {
          return;
        }
        var parentColumnId = columnId;
        columnFilter = gfFilterHelper.resolveColumnFilter(column, vectorIndex, subColId);
        gfColumnFilteringManagerDialogService.openDialog({gridInstanceId:scope.gridInstanceId, columnId:column.isMultiColumn() ? subColId : columnId, parentColumnId:parentColumnId, columnFilter:columnFilter, column:column.isMultiColumn() ? column.gridColumns[subColId] : column});
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnFilterResultsClicked, {columnId:columnId, vectorIndex:vectorIndex});
      });
      function getFormattedErrorMessage(error) {
        return error.displayMessage ? error.displayMessage + "\n\r" + error.errorDetails : error.errorDetails;
      }
      gridAdapter.addListener("copytoclipboard", function(error) {
        gfJetService.copyToClipboard({entries:[{name:"TEXT", value:getFormattedErrorMessage(error)}]});
        gfNotificationService.info($translate.instant("ERROR_MESSAGE_HAS_BEEN_COPIED"));
      });
      gridAdapter.addListener("columnselected", function(args) {
        var column = getColumnById(args.columnId, true);
        if (column) {
          eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnSelected, {column:column, parentColumn:getColumnById(column.parentColumn), vectorIndex:args.vectorIndex});
        }
      });
    }
    function applyColumnFilterCallback(columnId, parentColumnId, columnFilter, vectorIndex) {
      var column = _.findWhere(scope.gridReportSettings.columns, {id:columnId});
      if (!column || parentColumnId != null) {
        column = _.findWhere(scope.gridReportSettings.columns, {id:parentColumnId});
      }
      if (column) {
        gfFilterHelper.addFilterToColumn(column, columnId, columnFilter, vectorIndex);
        gridAdapter.applyFilters();
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnFilterApplied, {columnId:columnId, columnFilter:columnFilter, vectorIndex:vectorIndex});
      }
    }
    registerAdapterEventListeners();
    function createNewCallback(newStateId) {
      if (newStateId === undefined && newStateId != currentStateId) {
        gfLogManager.trace("GRID. trying to create new state with undefined id");
        return;
      }
      currentStateId = newStateId;
      gridAdapter.resetToNewTemplateState();
      gfGridManagementService.abortDataLoading(scope.gridInstanceId);
      gfGridManagementService.setDefaultCommands(scope.gridInstanceId);
      resetGroups();
      isStateDirty = false;
      saveState();
    }
    eventsAggregator = gfEventsAggregator.getChildAggregator(scope.gridInstanceId);
    eventsAggregator.addHandler(gridReport.model.GridEvents.resize, function() {
      gridAdapter.resize();
    });
    eventsAggregator.addHandler(gridReport.model.GridEvents.identifiersExcluded, function(excludedIdentifiers, exclusionsType) {
      if (exclusionsType == gridReport.model.ExclusionsTypes.StatisticsExclusions) {
        gridAdapter.setExcludedFromStatisticsIdentifiers(gfStatisticsExclusions.instance(scope.gridInstanceId).getExcludedIdentifiers());
      } else {
        scope.setVisibleRows();
      }
    });
    eventsAggregator.addHandler(gridReport.model.GridEvents.startLoadingRows, function(keys) {
      gridAdapter.addLoadingRows(keys);
    });
    eventsAggregator.addHandler(gridReport.model.GridEvents.endLoadingRows, function(keys) {
      gridAdapter.removeLoadingRows(keys);
    });
    function stateChanged(cause) {
      markAsDirty(cause);
      saveState();
    }
    function getCellsSelectionToCopy() {
      var selectedCells = gridAdapter.getSelectedCells();
      var selectionObject = {};
      _.forEach(selectedCells, function(cell) {
        var rowObject = {};
        if (selectionObject[cell.rowindex] == undefined) {
          selectionObject[cell.rowindex] = rowObject;
        } else {
          rowObject = selectionObject[cell.rowindex];
        }
        var rowData = gridAdapter.getRowData(cell.rowindex);
        var cellData = rowData[cell.datafield];
        rowObject[cell.datafield] = cellData;
      });
      return selectionObject;
    }
    function getRowsSelectionToCopy() {
      var selectedRowIndexes = gridAdapter.getSelectedRowIndexes();
      var selectionObject = {};
      _.forEach(selectedRowIndexes, function(index) {
        selectionObject[index] = gridAdapter.getRowData(index);
      });
      return selectionObject;
    }
    function loadState() {
      if (currentStateId === undefined) {
        gfLogManager.trace("GRID. trying to load state with undefined id");
        return false;
      }
      gfLogManager.trace("GRID. LoadState started");
      var lastSavedState = localStorageService.get(currentStateId + GRID_STATE_POSTFIX);
      if (lastSavedState) {
        gfLogManager.trace("GRID. LoadState. State loaded to id: " + currentStateId);
        gfGridStateService.setState(scope.gridInstanceId, lastSavedState);
        return true;
      }
      return false;
    }
    function copyHandler(event) {
      if (isCopyInvokedOnGrid && window.getSelection().toString() == "") {
        event.preventDefault();
        var clipboardData = "";
        var columnsCount = scope.gridReportSettings.columns.length;
        var gridData = isCellsSelectionMode() ? getCellsSelectionToCopy() : getRowsSelectionToCopy();
        _.forEach(gridData, function(value) {
          _.forEach(scope.gridReportSettings.columns, function(column, index) {
            if (value[column.id] == undefined) {
              clipboardData += "\t";
            } else {
              clipboardData += value[column.id];
              if (index != columnsCount - 1) {
                clipboardData += "\t";
              }
            }
          });
          clipboardData += "\r\n";
        });
        event.clipboardData.setData("text/plain", clipboardData);
        isCopyInvokedOnGrid = false;
      }
    }
    window.addEventListener("copy", copyHandler);
    if (element.keydown) {
      element.keydown(function(event) {
        if (event.ctrlKey && event.keyCode == 67) {
          isCopyInvokedOnGrid = true;
        }
      });
    }
    element.bind("$destroy", function() {
      gridAdapter.destroy();
      gfEventsAggregator.getChildAggregator(scope.gridInstanceId).removeAllHandlers();
      gfExclusions.clear(scope.gridInstanceId);
      gfStatisticsExclusions.clear(scope.gridInstanceId);
      gfGridColumnConverterService.clear(scope.gridInstanceId);
      dataService.resetProviders();
      gfGridStateService.unregister(scope.gridInstanceId);
      unregisterManagementServiceCallbacks(scope.gridInstanceId);
      window.removeEventListener("copy", copyHandler);
      dataService.destroy();
      dataService = null;
      gridAdapter = null;
      scope.$destroy();
    });
    registerGridStateCallbacksForGrid(scope.gridInstanceId);
    registerManagementServiceCallbacks(scope.gridInstanceId);
    if (!scope.gridReportSettings.isStateful || !loadState()) {
      setDefaultCommandsCallback();
    }
    var stateId = gfStateProviderService.getStateId(scope.gridInstanceId);
    if (!_.isUndefined(stateId) && !_.isNull(stateId)) {
      restoreStateCallback(stateId);
    }
    $timeout(function() {
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.gridComponentRegistered, {gridInstanceId:scope.gridInstanceId});
    }, 50);
  }};
}]);
goog.provide("gridReport.services.GroupStateRestoreService");
goog.require("gridReport.services.GridManagementService");
gridReport.Module.factory("gfGroupStateRestoreService", ["gfGridManagementService", "gfGroupableColumnsLabels", "localStorageService", "gfStateProviderService", function(gfGridManagementService, gfGroupableColumnsLabels, localStorageService, gfStateProviderService) {
  var restoreStateService = {}, services = {}, GROUPING_POSTFIX = "GRID_GROUPING";
  function GroupStateService(gridInstanceId, isAutoSaveState) {
    var self = this;
    function addCriteriaInternally(id, targetIndex) {
      var criteria = {id:id, header:gfGroupableColumnsLabels[id], editMode:false};
      if (_.isUndefined(targetIndex)) {
        self.criterias.push(criteria);
      } else {
        self.criterias[targetIndex] = criteria;
      }
    }
    function loadLocalState(isAutoSaveState, stateId) {
      if (!isAutoSaveState) {
        return null;
      }
      return localStorageService.get(stateId + GROUPING_POSTFIX);
    }
    function registerManagementSerivceCallbacks() {
      gfGridManagementService.registerCallback(gridInstanceId, gfGridManagementService.restoreState, restoreStateCallback);
    }
    function unregisterManagementSerivceCallbacks() {
      gfGridManagementService.unregisterCallback(gridInstanceId, gfGridManagementService.restoreState, restoreStateCallback);
    }
    function registerStateCallbacks() {
      gfStateProviderService.register(gridReport.services.StateProvideService.components.grouping, gridInstanceId, {getStateCallback:getState, setStateCallback:setState});
    }
    function unregisterStateCallbacks() {
      gfStateProviderService.unregister(gridReport.services.StateProvideService.components.grouping, gridInstanceId);
    }
    function restoreStateCallback(stateId) {
      if (!self.isAutoSaveState || stateId === undefined) {
        return;
      }
      self.stateId = stateId;
      self.criterias = [];
      setState(loadLocalState(self.isAutoSaveState, stateId));
      if (self.isCriteriasEnabled) {
        gfGridManagementService.setGrouping(gridInstanceId, getCriteriasIds());
      }
    }
    function getCriteriasIds() {
      return _.pluck(self.criterias, "id");
    }
    function getState() {
      return{isGroupingEnabled:self.isCriteriasEnabled, groups:getCriteriasIds()};
    }
    function setState(state) {
      if (!state) {
        return;
      }
      self.isCriteriasEnabled = state.isGroupingEnabled;
      self.criterias = [];
      _.each(state.groups, addCriteriaInternally);
    }
    function dispose() {
      unregisterManagementSerivceCallbacks();
      unregisterStateCallbacks();
    }
    function save() {
      if (!self.isAutoSaveState || self.stateId === undefined) {
        return;
      }
      localStorageService.add(self.stateId + GROUPING_POSTFIX, JSON.stringify(getState()));
    }
    self.gridInstanceId = gridInstanceId;
    self.criterias = [];
    self.isCriteriasEnabled = false;
    self.loadLocalState = loadLocalState;
    self.getCriteriasIds = getCriteriasIds;
    self.stateId = gfStateProviderService.getStateId(gridInstanceId);
    self.dispose = dispose;
    self.isAutoSaveState = isAutoSaveState;
    self.save = save;
    registerManagementSerivceCallbacks();
    registerStateCallbacks();
    if (self.stateId != undefined) {
      restoreStateCallback(self.stateId);
    }
  }
  function createService(gridInstanceId, isAutoSaveState) {
    return new GroupStateService(gridInstanceId, isAutoSaveState);
  }
  restoreStateService.instance = function(gridInstanceId, isAutoSaveState) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService(gridInstanceId, isAutoSaveState);
    }
    return services[gridInstanceId];
  };
  restoreStateService.clear = function(gridInstanceId) {
    if (services[gridInstanceId]) {
      services[gridInstanceId].dispose();
      delete services[gridInstanceId];
    }
  };
  return restoreStateService;
}]);
goog.provide("gridReport.directives.GroupingButtonDirective");
gridReport.Module.directive("gfGroupingButton", ["gfGroupStateRestoreService", function(gfGroupStateRestoreService) {
  return{restrict:"E", scope:{gridInstanceId:"=", isEnabled:"=", isAutoSaveState:"=", maxGroupsCount:"&"}, controller:["$scope", "gfEventsAggregator", "gfGroupingManagerDialogService", "gfGridManagementService", function($scope, gfEventsAggregator, gfGroupingManagerDialogService, gfGridManagementService) {
    $scope.isGridTransposed = false;
    var groupInstance = gfGroupStateRestoreService.instance($scope.gridInstanceId, $scope.isAutoSaveState), maxRowsCountExceeded = false;
    function subscribe() {
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      aggregator.addHandler(gridReport.model.GridEvents.transposed, function(args) {
        $scope.isGridTransposed = args.isTransposed;
      });
      aggregator.addHandler(gridReport.model.GridEvents.transposed, function(args) {
        if (!args.isTransposed) {
          var isCriteriasEnabled;
          if (!groupInstance.stateId) {
            groupInstance = gfGroupStateRestoreService.instance($scope.gridInstanceId, $scope.isAutoSaveState);
          }
          var groups = getCriteriasIds(groupInstance.criterias), state = groupInstance.loadLocalState(true, groupInstance.stateId);
          if (state) {
            isCriteriasEnabled = state.isGroupingEnabled;
          } else {
            isCriteriasEnabled = false;
          }
          var groupsToApply = isCriteriasEnabled ? groups : [];
          if (groupsToApply.length > 0) {
            showLoadingRows();
            setGrouping(groupsToApply);
            gfGridManagementService.loadData($scope.gridInstanceId, false);
          }
        }
      });
      aggregator.addHandler(gridReport.model.GridEvents.groupingApplied, function() {
        gfGridManagementService.endLoading($scope.gridInstanceId, gridReport.model.GridContentPlacement.Rows, gridReport.model.LoadingReasons.Grouping);
      });
      aggregator.addHandler(gridReport.model.GridEvents.loadingEnded, function() {
        var state = groupInstance.loadLocalState(true, groupInstance.stateId);
        if (state && state.isGroupingEnabled) {
          if (gfGridManagementService.getRowsCount($scope.gridInstanceId) > gfGridManagementService.getMaxRowsCount($scope.gridInstanceId)) {
            setGrouping([]);
            maxRowsCountExceeded = true;
          } else {
            if (!maxRowsCountExceeded) {
              return;
            }
            showLoadingRows();
            setGrouping(groupInstance.getCriteriasIds());
            gfGridManagementService.loadData($scope.gridInstanceId, false);
            maxRowsCountExceeded = false;
          }
        }
      });
    }
    function getCriteriasIds(criterias) {
      return _.pluck(criterias, "id");
    }
    function setGrouping(groups, isUserAction) {
      gfGridManagementService.setGrouping($scope.gridInstanceId, groups, isUserAction);
    }
    function showLoadingRows() {
      gfGridManagementService.startLoading($scope.gridInstanceId, gridReport.model.GridContentPlacement.Rows, gridReport.model.LoadingReasons.Grouping);
    }
    $scope.openGroupingManagerDialog = function() {
      gfGroupingManagerDialogService.openGroupingManagerDialog($scope.gridInstanceId, $scope.isAutoSaveState, $scope.maxGroupsCount);
    };
    $scope.$watch("gridInstanceId", function(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }
      subscribe();
    });
    if ($scope.gridInstanceId) {
      subscribe($scope.gridInstanceId);
      gfGroupStateRestoreService.instance($scope.gridInstanceId, $scope.isAutoSaveState);
    }
  }], templateUrl:"scripts/directives/groupingButton/GroupingButton.html", link:function(scope, element) {
    element.bind("$destroy", function() {
      gfGroupStateRestoreService.clear(scope.gridInstanceId);
    });
  }};
}]);
goog.provide("gridReport.model.CommandEvents");
gridReport.model.CommandEvents = {showPicker:"showPicker", showExpressionEditor:"showExpressionEditor"};
goog.provide("gridReport.services.DapsStorageProvider");
gridReport.Module.service("gfDapsStorageProvider", ["gfConfig", function(gfConfig) {
  var udipEnvironmentConfig = gfConfig.udipOptions ? gfConfig.udipOptions.udipEnvironmentConfig : undefined;
  return new scr.DAPSStorageProvider(udipEnvironmentConfig);
}]);
goog.provide("gridReport.services.CategoryServiceFactory");
gridReport.Module.factory("gfCategoryServiceFactory", ["gfConfig", function(gfConfig) {
  function createInstance() {
    var udipEnvironmentConfig = gfConfig.udipOptions ? gfConfig.udipOptions.udipEnvironmentConfig : undefined;
    return new CategoryService(udipEnvironmentConfig);
  }
  return{createInstance:createInstance};
}]);
goog.provide("gridReport.controllers.DefaultUdipOptions");
goog.require("gridReport.services.DapsStorageProvider");
goog.require("gridReport.services.CategoryServiceFactory");
gridReport.Module.service("gfDefaultUdipOptions", ["gfConfig", "$translate", "$globalEvtAgt", function(gfConfig, $translate, $globalEvtAgt) {
  var service = {};
  service.get = function() {
    var options = {uuid:gfConfig.uuid, globalEvtAgt:$globalEvtAgt, allowMultiSelect:true, showDescriptions:true, showParameterEditors:true, showDescAsTooltip:false, height:550, width:900, parameterOptions:new scr.ParameterOptions({showOutputParameters:true, allowMultiSelectOutput:true}), locale:$translate.preferredLanguage()};
    return new scr.UdipOptions(_.extend(options, gfConfig.udipOptions));
  };
  return service;
}]);
goog.provide("gridReport.controllers.DefaultMfrConfig");
goog.require("gridReport.services.DapsStorageProvider");
goog.require("gridReport.services.CategoryServiceFactory");
gridReport.Module.service("gfDefaultMfrConfig", ["gfDapsStorageProvider", "gfCategoryServiceFactory", "gfConfig", function(gfDapsStorageProvider, gfCategoryServiceFactory, gfConfig) {
  var service = {};
  service.get = function() {
    var config = {storageProvider:gfDapsStorageProvider, udipCategoryService:gfCategoryServiceFactory.createInstance()};
    return _.extend(config, gfConfig.mfrConfig);
  };
  return service;
}]);
goog.provide("gridReport.controllers.DefaultExpressionEditorConfig");
goog.require("gridReport.services.DapsStorageProvider");
goog.require("gridReport.services.CategoryServiceFactory");
gridReport.Module.service("gfDefaultExpressionEditorConfig", ["gfDapsStorageProvider", "gfCategoryServiceFactory", "gfConfig", function(gfDapsStorageProvider, gfCategoryServiceFactory, gfConfig) {
  var service = {};
  service.get = function() {
    var config = {uuid:gfConfig.uuid, storageProvider:gfDapsStorageProvider, udipCategoryService:gfCategoryServiceFactory.createInstance(), expressionId:"", isStandAlone:false, isVisible:false};
    return new scr.ExpressionEditorConfig(_.extend(config, gfConfig.expressionEditorConfig));
  };
  return service;
}]);
goog.provide("gridReport.controllers.ADCDataPickerController");
goog.require("gridReport.controllers.DefaultUdipOptions");
goog.require("gridReport.controllers.DefaultMfrConfig");
goog.require("gridReport.controllers.DefaultExpressionEditorConfig");
gridReport.Module.controller("ADCDataPickerController", ["$scope", "$timeout", "gfEventsAggregator", "gfConfig", "gfCategoryServiceFactory", "gfDapsStorageProvider", "$globalEvtAgt", "gfLogManager", "gfNotificationService", "$translate", "gfGridManagementService", "gfDefaultUdipOptions", "gfDefaultMfrConfig", "gfDefaultExpressionEditorConfig", function($scope, $timeout, gfEventsAggregator, gfConfig, gfCategoryServiceFactory, gfDapsStorageProvider, $globalEvtAgt, gfLogManager, gfNotificationService, 
$translate, gfGridManagementService, gfDefaultUdipOptions, gfDefaultMfrConfig, gfDefaultExpressionEditorConfig) {
  var defaultCommandExpression = "";
  var editActionType = "edit";
  var insertActionType = "insert";
  function broadcastSelectedCommand(command, actionType, containerId) {
    var evtAggregator = gfEventsAggregator.getChildAggregator(containerId);
    if (actionType === insertActionType || actionType === editActionType) {
      var eventType = actionType === editActionType ? gridReport.model.InternalEvents.changeCommand : gridReport.model.InternalEvents.insertCommand;
      evtAggregator.raiseEvent(eventType, {previousCommand:$scope.initialCommand, newCommand:command, isUserTriggered:true});
      $scope.initialCommand = command;
      return;
    }
    evtAggregator.raiseEvent(gridReport.model.InternalEvents.addCommand, {command:command, isUserTriggered:true, isFromUDIP:true});
  }
  function createSelectedFieldInfo(command) {
    var type;
    if (command && command.metadata) {
      switch(command.metadata.type) {
        case "field":
          type = "meta";
          break;
        case "custom":
          type = "expression";
          break;
        default:
          type = command.metadata.type;
      }
    }
    return{id:command && command.id ? command.id : "", order:command.isNewestFirst ? "DESC" : "ASC", path:getPath(command), type:type || "meta", transforms:getTransforms(command), outputColumn:getOutputColumn(command)};
  }
  function getTransforms(command) {
    return command && (command.metadata && command.metadata.transforms) ? command.metadata.transforms : [];
  }
  function getOutputColumn(command) {
    return command && (command.metadata && command.metadata.outputColumn) ? command.metadata.outputColumn : undefined;
  }
  function getPath(command) {
    if (command == undefined) {
      return defaultCommandExpression;
    }
    if (_.isEmpty(command.parameters)) {
      if (command.metadata != undefined && !_.isEmpty(command.metadata.transforms)) {
        return "";
      }
      return command.expression;
    }
    var params = _.filter(command.parameters, function(param) {
      return param.value != undefined && param.value != "";
    });
    var nameValueList = _.map(params, function(param) {
      if (param.id == scr.output.ParameterIds.RatingScope) {
        return param.id + ':"' + param.value + '"';
      } else {
        return param.id + ":" + param.value;
      }
    });
    return "_(" + nameValueList.join(",") + ")";
  }
  function showDataCloudPicker(actionType, args, containerId) {
    $scope.gridInstanceId = args.gridInstanceId;
    $scope.initialCommand = args.initialCommand;
    $scope.actionType = actionType;
    var selectedFieldInfo = actionType == editActionType || args.openAddWithCommand ? createSelectedFieldInfo(args.initialCommand) : undefined;
    var callback = function(result, selectedField) {
      if (result && selectedField) {
        var commands;
        selectedField = _.isArray(selectedField) ? selectedField : [selectedField];
        try {
          commands = _.map(selectedField, function(field) {
            return gridReport.model.Command.convert(field, gfConfig.enableAudit);
          });
        } catch (err) {
          gfLogManager.error(err);
          return;
        }
        $timeout(function() {
          _.each(commands, function(command) {
            broadcastSelectedCommand(command, actionType, containerId);
          });
          gfEventsAggregator.getChildAggregator(containerId).raiseEvent(gridReport.model.InternalEvents.hidePicker);
        });
      } else {
        gfEventsAggregator.getChildAggregator(containerId).raiseEvent(gridReport.model.InternalEvents.hidePicker);
      }
    };
    var udipOptions = new scr.UdipOptions(_.extend(gfDefaultUdipOptions.get(), {parentElement:$scope.parentElement, currentFieldInfo:selectedFieldInfo, searchText:args.text == null ? "" : args.text, includeMFRBuilder:$scope.includeMfrEditor != false, selectedCategoryId:args.selectedCategoryId, universeContext:args.universeContext || scr.UniverseType.Public, includeDataBlockBuilder:!gfGridManagementService.isTransposed(args.gridInstanceId), callback:callback, multiSelectionOfDataItems:{limit:10, addButton:actionType != 
    "edit"}}));
    (new scr.Udip).show(udipOptions);
  }
  $scope.expressionEditorConfig = gfDefaultExpressionEditorConfig.get();
  $scope.mfrConfig = gfDefaultMfrConfig.get();
  $scope.showExpressionEditor = function(expressionId) {
    $scope.$broadcast($scope.expressionEditorConfig.show, {at:"right top", collision:"flipfit", my:"left top"});
    if (expressionId && (_.isString(expressionId) && expressionId != "")) {
      $timeout(function() {
        $scope.$broadcast($scope.expressionEditorConfig.loadExpression, expressionId);
      });
    }
  };
  var showPickerSubscription = gfEventsAggregator.addHandler(gridReport.model.CommandEvents.showPicker, function(args) {
    if (args) {
      if (args.mode == editActionType && (args.initialCommand && (args.initialCommand.metadata && args.initialCommand.metadata.isGrid === false))) {
        gfNotificationService.infoDialog({title:$translate.instant("WARNING"), message:$translate.instant("DATA_ITEM_IS_NO_LONGER_SUPPORTED")});
      } else {
        showDataCloudPicker(args.mode, args, this.$containerId);
      }
    } else {
      showDataCloudPicker("", {}, this.$containerId);
    }
  });
  function onExpressionEditorLaunchClicked(event, anchorPlacement, expressionId, isSampleExpression, context, path) {
    if (!$scope.useExternalExpressionEditor) {
      $scope.$broadcast($scope.expressionEditorConfig.show, anchorPlacement);
      $timeout(function() {
        $scope.$broadcast($scope.expressionEditorConfig.loadExpression, expressionId, isSampleExpression, context, path);
      });
    }
  }
  function onMFRBuilderLaunchNewClicked() {
    $scope.$broadcast("launchPop:new");
  }
  function onMFRBuilderLaunchEditClicked(evt, id) {
    $scope.$broadcast("launchPop:edit", id);
  }
  function onCustomExpressionSaved(event, customExpression) {
    if (customExpression) {
      gfDapsStorageProvider.load({type:scr.ObjectType.Expression, id:customExpression.name}, function(data, metadata, success, errorMessage) {
        if (success && (data && data.length > 0)) {
          var command;
          try {
            command = gridReport.model.Command.convert(new scr.output.Custom(data[0], null, metadata), gfConfig.enableAudit);
          } catch (err) {
            gfLogManager.error(err);
            return;
          }
          $timeout(function() {
            var previousColumn = _.find(gfGridManagementService.getGridColumns($scope.gridInstanceId), function(gridColumn) {
              return gridColumn.command && (gridColumn.command.id === command.id && gridColumn.command.isCustom());
            });
            if (previousColumn) {
              updateCommand(previousColumn.command, command);
            }
          });
        } else {
          if (errorMessage) {
            gfLogManager.error(errorMessage);
          }
        }
      });
    }
  }
  function onMfrSaved(event, mfrObject) {
    if (mfrObject) {
      gfDapsStorageProvider.load({type:scr.ObjectType.MultiFactorRank, id:mfrObject.id}, function(data, metadata, success, errorMessage) {
        if (success && (data && data.length > 0)) {
          var command;
          try {
            command = gridReport.model.Command.convert(new scr.output.MultiFactorRank(data[0], null, metadata), gfConfig.enableAudit);
          } catch (err) {
            gfLogManager.error(err);
            return;
          }
          $timeout(function() {
            var previousColumn = _.find(gfGridManagementService.getGridColumns($scope.gridInstanceId), function(gridColumn) {
              return gridColumn.command && (gridColumn.command.id === command.id && gridColumn.command.isMultiFactorRank());
            });
            if (previousColumn) {
              updateCommand(previousColumn.command, command);
            }
          });
        } else {
          if (errorMessage) {
            gfLogManager.error(errorMessage);
          }
        }
      });
    }
  }
  function onDataBlockSaved(event, dataBlockObject) {
    if (dataBlockObject) {
      gfDapsStorageProvider.load({type:scr.ObjectType.DataBlock, id:dataBlockObject.id}, function(data, metadata, success, errorMessage) {
        if (success && (data && data.length > 0)) {
          var command;
          try {
            command = gridReport.model.Command.convert(new scr.output.DataBlock(data[0], null, metadata), gfConfig.enableAudit);
          } catch (err) {
            gfLogManager.error(err);
            return;
          }
          $timeout(function() {
            var previousColumn = _.find(gfGridManagementService.getGridColumns($scope.gridInstanceId), function(gridColumn) {
              return gridColumn.command && (gridColumn.command.id === command.id && gridColumn.command.isDataBlock());
            });
            if (previousColumn) {
              updateCommand(previousColumn.command, command);
            }
          });
        }
      });
    }
  }
  function updateCommand(previousCommand, newCommand) {
    var evtAggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
    evtAggregator.raiseEvent(gridReport.model.InternalEvents.changeCommand, {previousCommand:previousCommand, newCommand:newCommand, isUserTriggered:true});
  }
  $globalEvtAgt.on(scr.UdipCEE.EventTypes.ScreenerViews.ExpressionEditorLaunchClicked, onExpressionEditorLaunchClicked);
  $globalEvtAgt.on(scr.UdipCEE.EventTypes.ScreenerViews.MFRBuilderLaunchNewClicked, onMFRBuilderLaunchNewClicked);
  $globalEvtAgt.on(scr.UdipCEE.EventTypes.ScreenerViews.MFRBuilderLaunchEditClicked, onMFRBuilderLaunchEditClicked);
  $globalEvtAgt.on(scr.CEE.EventTypes.ExpressionEditorView.Saved, onCustomExpressionSaved);
  $globalEvtAgt.on(scr.UdipCEE.EventTypes.ScreenerViews.MFRSaved, onMfrSaved);
  $globalEvtAgt.on(scr.UdipCEE.EventTypes.DataBlockBuilder.Saved, onDataBlockSaved);
  var showExpressionEditorSubscription = gfEventsAggregator.addHandler(gridReport.model.CommandEvents.showExpressionEditor, function(args) {
    if ($scope.useExternalExpressionEditor) {
      var anchorPlacement = {at:"right top", collision:"flipfit", my:"left top"};
      $globalEvtAgt.trigger(scr.UdipCEE.EventTypes.ScreenerViews.ExpressionEditorLaunchClicked, [anchorPlacement, args.expressionId]);
    } else {
      $scope.showExpressionEditor(args.expressionId);
    }
  });
  $scope.$on("$destroy", function() {
    gfEventsAggregator.removeHandler(showExpressionEditorSubscription);
    gfEventsAggregator.removeHandler(showPickerSubscription);
    $globalEvtAgt.off(scr.UdipCEE.EventTypes.ScreenerViews.ExpressionEditorLaunchClicked, onExpressionEditorLaunchClicked);
    $globalEvtAgt.off(scr.UdipCEE.EventTypes.ScreenerViews.MFRBuilderLaunchNewClicked, onMFRBuilderLaunchNewClicked);
    $globalEvtAgt.off(scr.UdipCEE.EventTypes.ScreenerViews.MFRBuilderLaunchEditClicked, onMFRBuilderLaunchEditClicked);
    $globalEvtAgt.off(scr.CEE.EventTypes.ExpressionEditorView.Saved, onCustomExpressionSaved);
    $globalEvtAgt.off(scr.UdipCEE.EventTypes.ScreenerViews.MFRSaved, onMfrSaved);
    $globalEvtAgt.off(scr.UdipCEE.EventTypes.DataBlockBuilder.Saved, onDataBlockSaved);
  });
}]);
goog.provide("gridReport.directives.ADCDataPicker");
goog.require("gridReport.model.CommandEvents");
goog.require("gridReport.controllers.ADCDataPickerController");
gridReport.Module.directive("adcDataPicker", ["$compile", function($compile) {
  return{restrict:"E", replace:true, template:'<div style="position:absolute"></div>', scope:{includeMfrEditor:"=", useExternalExpressionEditor:"=", useExternalMfrEditor:"=", parentElement:"="}, controller:"ADCDataPickerController", link:function(scope, element) {
    if (!scope.useExternalExpressionEditor) {
      var exprEditor = $compile('<scr-expression-editor expression-editor-config="expressionEditorConfig"></scr-expression-editor>')(scope);
      $(element).first().append(exprEditor);
    }
    if (!scope.useExternalMfrEditor) {
      var mfrEditor = $compile('<scr-mfrb-popup path="Libs/UdipCEE/"></scr-mfrb-popup>')(scope);
      $(element).first().append(mfrEditor);
    }
  }};
}]);
goog.provide("gridReport.services.ObjectsImporter");
goog.require("gridReport.services.DapsStorageProvider");
gridReport.Module.factory("gfObjectsImporter", ["gfDapsStorageProvider", "$q", function(gfDapsStorageProvider, $q) {
  function createCustomExpression(command) {
    return{returnType:command.returnType, name:command.id, path:command.getExpression(false), isValid:true};
  }
  function createMfr(command) {
    return _.extend(command.metadata, {adcSyntax:command.getExpression(false)});
  }
  function createDataBlock(command) {
    return command.metadata;
  }
  function createRequest(gridState) {
    var expressions = {}, mfranks = {}, dblocks = {};
    _.each(gridState.columns, function(column) {
      var command = new gridReport.model.Command(column.command);
      if (command.isCustom()) {
        expressions[command.id] = createCustomExpression(command);
      } else {
        if (command.isMultiFactorRank()) {
          mfranks[command.id] = createMfr(command);
        } else {
          if (command.isDataBlock()) {
            dblocks[command.id] = createDataBlock(command);
            _.each(column.gridColumns, function(subColumn) {
              var subCommand = new gridReport.model.Command(subColumn.command);
              if (subCommand.isCustom()) {
                expressions[subCommand.id] = createCustomExpression(subCommand);
              } else {
                if (subCommand.isMultiFactorRank()) {
                  mfranks[subCommand.id] = createMfr(subCommand);
                }
              }
            });
          }
        }
      }
    });
    return{expressions:_.toArray(expressions), mfranks:_.toArray(mfranks), dblocks:_.toArray(dblocks)};
  }
  var service = {};
  service.importObjects = function(gridState) {
    if (!gridState) {
      throw new Error("gridState should be provided");
    }
    var deffered = $q.defer(), request = createRequest(gridState);
    gfDapsStorageProvider.importObjects(request, function(results) {
      deffered.resolve(results);
    });
    return deffered.promise;
  };
  return service;
}]);
goog.provide("gridReport.directives.ReportTemplateManagerController");
goog.require("gridReport.model.ReportTemplate");
gridReport.Module.controller("ReportTemplateManagerController", ["$scope", "$timeout", "$q", "$filter", "gfFormatsService", "gfLogManager", "gfNotificationService", "$translate", "reportTemplateManagerSettings", "gfDapsService", function($scope, $timeout, $q, $filter, gfFormatsService, gfLogManager, gfNotificationService, $translate, reportTemplateManagerSettings, gfDapsService) {
  var FORMATS_TABLE_HEADERS = ["NAME", "NUMBER_OF_FIELDS", "LAST_MODIFIED", "ACTIONS"], FIELDS_TABLE_HEADERS = ["SHARP", "FIELD_NAME"], ALL_TYPE = "All", PERSONAL_TYPE = "Personal", GLOBAL_TYPE = "Global", SHARED_TYPE = "Shared", allTypeFilteredItem = {label:$translate.instant("ALL"), type:ALL_TYPE, data:[]}, personalTypeFilteredItem = {label:$translate.instant("PERSONAL"), type:PERSONAL_TYPE, data:[]}, globalTypeFilteredItem = {label:$translate.instant("SAMPLE_TEMPLATES"), type:GLOBAL_TYPE, data:[]}, 
  sharedTypeFilteredItem = {label:$translate.instant("SHARED_TEMPLATES"), type:SHARED_TYPE, data:[]};
  function loadFormats() {
    $scope.isWorking = true;
    loadPersonalAndGlobalFormats().then(function(response) {
      $scope.globalFormats = prefilterFormat(response.formats.globalFormats, gridReport.model.ReportTemplate.types.global, reportTemplateManagerSettings.universeContext);
      $scope.personalFormats = prefilterFormat(response.formats.personalFormats, gridReport.model.ReportTemplate.types.personal, reportTemplateManagerSettings.universeContext);
      $scope.sharedFormats = prefilterFormat(response.formats.sharedFormats, gridReport.model.ReportTemplate.types.shared, reportTemplateManagerSettings.universeContext);
      allTypeFilteredItem.data = _.union($scope.globalFormats, $scope.personalFormats, $scope.sharedFormats);
      personalTypeFilteredItem.data = $scope.personalFormats;
      globalTypeFilteredItem.data = $scope.globalFormats;
      sharedTypeFilteredItem.data = $scope.sharedFormats;
      _.each(response.fails, function(fail) {
        gfLogManager.error(fail);
      });
      $scope.isWorking = false;
    }, function(fail) {
      gfLogManager.error(fail);
      $scope.isWorking = false;
    });
  }
  function prefilterFormat(formats, formatType, universeContext) {
    return _.chain(formats).map(function(format) {
      return convertFormat(format, formatType);
    }).filter(function(format) {
      return format.universeContext == universeContext;
    }).value();
  }
  function convertFormat(format, formatType) {
    var fieldsList = format.getColumnsList(), templateUniverseContext = format.getUniverseContext();
    return{id:_.uniqueId("row_id"), name:format.name, newName:format.name, numberOfFields:fieldsList.length, description:format.description, fieldsList:fieldsList, modified:format.modificationDate || format.creationDate, modified2:format.modificationDate || format.creationDate, editMode:false, shareTemplateMode:false, isObsolete:format.getIsObsolete(), type:formatType, universeContext:templateUniverseContext, canEdit:formatType == gridReport.model.ReportTemplate.types.personal, isSample:formatType == 
    gridReport.model.ReportTemplate.types.global, isShared:formatType == gridReport.model.ReportTemplate.types.shared, isGroupShared:format.isGroupShared, author:format.author, group:format.group, path:format.path};
  }
  $scope.enterEditMode = function(row) {
    if (row.entity.editMode != true) {
      row.entity.editMode = true;
      $timeout(function() {
        var rowEl = row.elm;
        var tooltip = rowEl.find(".gf-tooltip");
        var position = row.elm.offset();
        tooltip.css("top", position.top + 4);
        tooltip.css("left", position.left + 170);
      });
    }
  };
  $scope.enterShareTemplateMode = function(entity) {
    entity.shareTemplateMode = !entity.shareTemplateMode;
  };
  function loadPersonalAndGlobalFormats() {
    var deffered = $q.defer();
    gfFormatsService.loadFormats(function(response) {
      deffered.resolve(response);
    });
    return deffered.promise;
  }
  function isFormatExists(formatName) {
    return _.any($scope.personalFormats, function(f) {
      return f.name == formatName;
    });
  }
  function trySaveFormat() {
    if (isSaveDisabled()) {
      return;
    }
    var formatName = $scope.saveModeSettings.selectedFormatName;
    if (!($scope.saveModeSettings.isOverwriteWithoutConfirmation && $scope.saveModeSettings.selectedFormatName === $scope.saveModeSettings.initialSelectedFormatName) && isFormatExists(formatName)) {
      gfNotificationService.confirm($translate.instant("TEMPLATE_ALREADY_EXISTS_CONFIRMATION", {name:formatName}), saveFormat);
    } else {
      saveFormat();
    }
  }
  function saveFormat() {
    reportTemplateManagerSettings.closeDialog($scope);
    tryExecuteCallback(reportTemplateManagerSettings.onSaveFormat, $scope.saveModeSettings.selectedFormatName);
  }
  function init() {
    loadFormats();
  }
  function tryExecuteCallback(funct) {
    if (funct) {
      var params = Array.prototype.slice.call(arguments, 1);
      funct.apply(this, params);
    }
  }
  function rollbackRenaming(format) {
    format.newName = format.name;
    format.editMode = false;
  }
  function tryRenameFormat(format, needRollbackInvalid) {
    var formElement = $scope.formScope.editFormatForm.formatName;
    if (formElement.$error.objectName) {
      needRollbackInvalid && rollbackRenaming(format);
      return;
    }
    if (format.name == format.newName) {
      format.editMode = false;
      return;
    }
    if (isFormatExists(format.newName)) {
      if (needRollbackInvalid) {
        rollbackRenaming(format);
      } else {
        formElement.$setValidity("nameExists", false);
        formElement.errorMsg = $translate.instant("NAME_ALREADY_EXISTS");
      }
      return;
    } else {
      formElement.$setValidity("nameExists", true);
    }
    $scope.isWorking = true;
    gfFormatsService.renameFormat(format.name, format.newName, format.description).then(function() {
      tryExecuteCallback(reportTemplateManagerSettings.onRenameFormat, format.name, format.newName);
      format.name = format.newName;
      format.editMode = false;
      filterFormats($scope.searchText);
      $scope.isWorking = false;
    }, function(fail) {
      gfLogManager.error(fail);
      $timeout(function() {
        format.newName = format.name;
        $scope.isWorking = false;
      });
    });
  }
  function deleteFormat(format) {
    $scope.isWorking = true;
    gfFormatsService.deleteFormat(format.name).then(function() {
      $timeout(function() {
        $scope.personalFormats.splice(_.indexOf($scope.personalFormats, format), 1);
        if ($scope.currentFormat == format) {
          $scope.currentFormat = undefined;
        }
        filterFormats($scope.searchText);
        tryExecuteCallback(reportTemplateManagerSettings.onDeleteFormat, format.name);
        $scope.isWorking = false;
      });
    }, function(fail) {
      gfLogManager.error(fail);
      $scope.isWorking = false;
    });
  }
  function showFieldsList($event, format) {
    var xOffset = 0, yOffset = 0, position = {left:270, top:45};
    $scope.fieldsModal.fieldsList = format.fieldsList;
    $scope.fieldsModal.formatName = format.name;
    $scope.fieldsModal.fieldsTableHeaders = FIELDS_TABLE_HEADERS;
    $scope.fieldsModal.position = {x:position.left + xOffset, y:position.top + yOffset};
    $event.stopPropagation();
    $scope.fieldsModal.visible = true;
    $(document).on("click", closeFieldsList);
  }
  function filterFormats(searchText) {
    var filteredGlobalFormats = $filter("filter")($scope.globalFormats, {name:searchText}), filteredPersonalFormats = $filter("filter")($scope.personalFormats, {name:searchText}), filteredSharedFormats = $filter("filter")($scope.sharedFormats, {name:searchText});
    allTypeFilteredItem.data = _.union(filteredGlobalFormats, filteredPersonalFormats, filteredSharedFormats);
    personalTypeFilteredItem.data = filteredPersonalFormats;
    globalTypeFilteredItem.data = filteredGlobalFormats;
    sharedTypeFilteredItem.data = filteredSharedFormats;
  }
  function closeFieldsList() {
    $scope.fieldsModal.visible = false;
    $scope.$apply();
    $(document).off("click", closeFieldsList);
  }
  function disableEditMode(format) {
    format.editMode = false;
  }
  function closeDialog() {
    $scope.fieldsModal.visible = false;
    reportTemplateManagerSettings.closeDialog($scope);
  }
  function setFormScope(formScope) {
    $scope.formScope = formScope;
  }
  function isSaveDisabled() {
    return!$scope.formScope.saveFormatForm.formatName.$valid;
  }
  function stopPropagationByCondition($event) {
    if (!$($event.target).hasClass("modal-header-close-buttton")) {
      $event.stopPropagation();
    }
  }
  function setCurrentType(item) {
    $scope.currentType = item;
  }
  function fixTemplate(template) {
    $scope.isWorking = true;
    gfFormatsService.fixTemplate(new gridReport.model.ReportTemplate({name:template.name, type:gridReport.model.ReportTemplate.types.personal})).then(function() {
      loadFormats();
    }, function(fail) {
      gfLogManager.error(fail);
      $scope.isWorking = false;
    });
  }
  function loadFormat() {
    if (!isLoadDisabled()) {
      reportTemplateManagerSettings.closeDialog($scope);
      tryExecuteCallback(reportTemplateManagerSettings.onLoadFormat, {name:$scope.currentFormat.name, type:$scope.currentFormat.type, path:$scope.currentFormat.path});
    }
  }
  function isLoadDisabled() {
    return $scope.isWorking || $scope.currentFormat == undefined;
  }
  function setCurrentFormat(newVal, oldVal) {
    var newTemplate = _.first(newVal), oldTemplate = _.first(oldVal);
    if (newTemplate !== oldTemplate && newTemplate != undefined) {
      if ($scope.currentFormat && $scope.currentFormat.id != newTemplate.id) {
        $scope.currentFormat.shareTemplateMode = false;
      }
      $scope.currentFormat = newTemplate;
      if ($scope.saveModeSettings) {
        $scope.saveModeSettings.selectedFormatName = newTemplate.name;
      }
    }
  }
  function isSaveVisible() {
    return $scope.saveModeSettings != null;
  }
  function isLoadVisible() {
    return $scope.saveModeSettings == null;
  }
  function getInitialTemplateType() {
    switch(reportTemplateManagerSettings.templateType) {
      case gridReport.model.ReportTemplate.types.personal:
        return personalTypeFilteredItem;
      case gridReport.model.ReportTemplate.types.global:
        return globalTypeFilteredItem;
      case gridReport.model.ReportTemplate.types.shared:
        return sharedTypeFilteredItem;
      default:
        return allTypeFilteredItem;
    }
  }
  function sharedStateChanged(templateName, shared, entity) {
    entity.isGroupShared = shared;
  }
  $scope.saveModeSettings = reportTemplateManagerSettings.saveModeSettings;
  $scope.formatsTableHeaders = FORMATS_TABLE_HEADERS;
  $scope.formatsList = [];
  $scope.closeDialog = closeDialog;
  $scope.trySaveFormat = trySaveFormat;
  $scope.showFieldsList = showFieldsList;
  $scope.searchText = "";
  $scope.disableEditMode = disableEditMode;
  $scope.tryRenameFormat = tryRenameFormat;
  $scope.deleteFormat = deleteFormat;
  $scope.currentFormat = undefined;
  $scope.formScope = {};
  $scope.setFormScope = setFormScope;
  $scope.isSaveDisabled = isSaveDisabled;
  $scope.templateNameMaxLengh = gfDapsService.REPORT_TEMPLATE_NAME_MAX_LENGTH;
  $scope.onHeaderHover = reportTemplateManagerSettings.onHeaderHover;
  $scope.onHeaderMouseDown = reportTemplateManagerSettings.onHeaderMouseDown;
  $scope.rollbackRenaming = rollbackRenaming;
  $scope.stopPropagationByCondition = stopPropagationByCondition;
  $scope.fieldsModal = {visible:false, fieldsList:[], formatName:null, fieldsTableHeaders:FIELDS_TABLE_HEADERS, position:{x:null, y:null}};
  $scope.filteredData = [allTypeFilteredItem, personalTypeFilteredItem, globalTypeFilteredItem, sharedTypeFilteredItem];
  $scope.currentType = getInitialTemplateType();
  $scope.filterFormats = filterFormats;
  $scope.fixTemplate = fixTemplate;
  $scope.setCurrentType = setCurrentType;
  $scope.loadFormat = loadFormat;
  $scope.isLoadDisabled = isLoadDisabled;
  $scope.isLoadVisible = isLoadVisible;
  $scope.isSaveVisible = isSaveVisible;
  $scope.sharedStateChanged = sharedStateChanged;
  $scope.getSharedTitle = function(reportTemplate) {
    var title = [];
    if (reportTemplate.author) {
      title.push($translate.instant("AUTHOR") + ": " + reportTemplate.author.firstName + " " + reportTemplate.author.lastName);
    }
    if (reportTemplate.group) {
      title.push($translate.instant("SHARED_TO") + ": " + reportTemplate.group);
    }
    return title.join("\r\n");
  };
  var headerCellTemplate = '<div class="ngHeaderSortColumn {{col.headerClass}}" ng-style="{\'cursor\': col.cursor}" ng-class="{ \'ngSorted\': !noSortVisible }">' + '<div ng-click="col.sort($event)" ng-class="\'colt\' + col.index" title="{{col.displayName}}" class="ngHeaderText">{{col.displayName}}</div>' + '<div class="ngSortButtonDown" ng-show="col.showSortButtonDown()"></div>' + '<div class="ngSortButtonUp" ng-show="col.showSortButtonUp()"></div>' + '<div class="ngSortPriority">{{col.sortPriority}}</div>' + 
  '<div ng-class="{ ngPinnedIcon: col.pinned, ngUnPinnedIcon: !col.pinned }" ng-click="togglePin(col)" ng-show="col.pinnable"></div>' + "</div>" + '<div ng-show="col.resizable" class="ngHeaderGrip" ng-click="col.gripClick($event)" ng-mousedown="col.gripOnMouseDown($event)"></div>';
  $scope.gridOptions = {data:"currentType.data", enableRowSelection:true, enableColumnResize:true, multiSelect:false, headerRowHeight:29, rowHeight:29, selectedItems:[], columnDefs:[{field:"name", displayName:$translate.instant("NAME"), width:"61%", minWidth:160, headerCellTemplate:headerCellTemplate, cellTemplate:"<div>" + '<div title="{{row.entity.name}}" ng-if="!row.entity.editMode && !row.entity.shareTemplateMode" class="ngCellText" style="position:relative">' + "<span>{{row.entity.name}}</span>" + 
  '<span class="icon-users" ' + 'title="{{getSharedTitle(row.entity)}}" ' + 'ng-show="row.entity.isShared || row.entity.isGroupShared"></span>' + '<span class="sample" ' + 'ng-show="row.entity.isSample">SAMPLE</span>' + "</div>" + '<div title="{{row.entity.name}}" ng-if="row.entity.editMode" style="position:relative">' + '<div class="gf-texbox-error-container">' + '<input maxlength="{{templateNameMaxLengh}}" ' + "ng-class=\"{'input-error':!editFormatForm.formatName.$valid}\" " + "gf-object-name " + 
  'type="text" ' + 'on-enter="tryRenameFormat(row.entity)" ' + 'on-escape="rollbackRenaming(row.entity)" ' + 'name="formatName" ' + 'on-blur="tryRenameFormat(row.entity,true)" ' + 'focus-me="true" ' + 'selected="true" ' + 'ng-model="row.entity.newName" />' + '<div class="gf-tooltip" ng-show="!editFormatForm.formatName.$valid" style="position:fixed; z-index:1;">{{editFormatForm.formatName.errorMsg}}</div>' + '<span class="gf-textbox-erroricon"' + 'ng-show="!editFormatForm.formatName.$valid">' + "</span>" + 
  "</div>" + "</div>" + '<div ng-if="row.entity.shareTemplateMode" ' + 'class="gf-share-template-container">' + '<gf-sharing-details template-name="row.entity.name" ' + 'template-description="row.entity.description" ' + 'on-shared-state-changed="sharedStateChanged(templateName, shared, row.entity)">' + "</gf-sharing-details>" + "</div>" + "</div>"}, {field:"numberOfFields", displayName:$translate.instant("NUMBER_OF_FIELDS"), width:"12%", minWidth:80, headerCellTemplate:headerCellTemplate, cellTemplate:'<div><div class="ngCellText">' + 
  '<a href="javascript:"' + 'class="gf-fields-view-link"' + 'ng-hide="row.entity.isObsolete && row.entity.canEdit"' + "title=\"{{'CLICK_TO_VIEW_FIELDS_IN_TEMPLATE'| translate }}\"" + 'ng-click="showFieldsList($event,row.entity)">{{row.entity.numberOfFields}}</a>' + '<div ng-show="row.entity.isObsolete && row.entity.canEdit"' + 'style="padding-left: 0"' + "title=\"{{'PRESS_REFRESH_TO_DISPLAY_NUMBER_OF_FIELDS'| translate }}\"" + 'class="gf-icon icon-refresh"' + 'ng-click="fixTemplate(row.entity)"></div>' + 
  "</div></div>"}, {field:"modified2", displayName:$translate.instant("LAST_MODIFIED"), width:"14%", minWidth:95, headerCellTemplate:headerCellTemplate, cellTemplate:"<div>" + '<div class="ngCellText">' + "<span>{{row.entity.modified2 | gfDateFormatter}}</span>" + "</div>" + "</div>"}, {field:"", displayName:$translate.instant("ACTIONS"), resizable:false, sortable:false, width:"12%", minWidth:80, headerCellTemplate:headerCellTemplate, cellTemplate:'<div><div class="gf-actions-cell">' + "<span title=\"{{'SHARE'| translate}}\"" + 
  'ng-show="row.entity.canEdit"' + 'class="gf-icon icon-share"' + 'ng-click="enterShareTemplateMode(row.entity) "></span>' + "<span title=\"{{'RENAME'| translate}}\"" + 'ng-show="row.entity.canEdit"' + 'class="gf-icon icon-edit"' + 'ng-click="enterEditMode(row) "></span>' + "<span title=\"{{'DELETE'| translate}}\"" + 'ng-show="row.entity.canEdit"' + 'class="gf-icon icon-trash"' + 'ng-click="deleteFormat(row.entity)"></span>' + "</div></div>"}]};
  $scope.$watch("gridOptions.selectedItems", setCurrentFormat, true);
  $scope.$on("$destroy", function() {
    $scope.formScope = null;
  });
  init();
}]);
goog.provide("gridReport.directives.ReportTemplateManagerDialogService");
goog.require("gridReport.directives.ReportTemplateManagerController");
gridReport.Module.service("gfReportTemplateManagerDialogService", ["$rootScope", "$modal", function($rootScope, $modal) {
  var modal;
  var modalSelector = ".gf-template-manager-modal";
  function closeDialog($scope) {
    if (!modal) {
      return;
    }
    modal.close();
    if ($scope) {
      $scope.$destroy();
    }
    modal = null;
  }
  function makeModalDraggable() {
    $(modalSelector).draggable({handle:".gf-template-manager-modal-header"});
  }
  var service = {};
  service.openDialog = function(reportTemplateManagerSettings) {
    if (!reportTemplateManagerSettings) {
      throw new Error("reportTemplateManagerSettings should be provided");
    }
    reportTemplateManagerSettings.closeDialog = closeDialog;
    reportTemplateManagerSettings.onHeaderHover = makeModalDraggable;
    reportTemplateManagerSettings.onHeaderMouseDown = function() {
      $(modalSelector).focus();
    };
    modal = $modal.open({templateUrl:"scripts/directives/reportTemplateManager/ReportTemplateManagerDialog.html", controller:"ReportTemplateManagerController", windowClass:modalSelector.substring(1) + " gf-modal" + (reportTemplateManagerSettings.templateManagerCustomClass ? " " + reportTemplateManagerSettings.templateManagerCustomClass : ""), keyboard:false, resolve:{reportTemplateManagerSettings:function() {
      return reportTemplateManagerSettings;
    }}});
    modal.opened.then(function() {
      reportTemplateManagerSettings.onDialogOpen && reportTemplateManagerSettings.onDialogOpen();
    });
  };
  service.closeDialog = closeDialog;
  return service;
}]);
goog.provide("gridReport.services.MostRecentlyUsedService");
gridReport.Module.factory("gfMostRecentlyUsedService", ["$q", "gfDapsService", function($q, gfDapsService) {
  var folderName = "Settings", fileName = "mru";
  function loadMRUs() {
    var deferred = $q.defer();
    gfDapsService.loadFile({folderName:folderName, fileName:fileName}, function(response) {
      if (response) {
        var mru = JSON.parse(response);
        _.each(mru, function(type) {
          _.each(type, function(item) {
            if (item.accessDate) {
              item.accessDate = new Date(item.accessDate);
            }
          });
        });
        deferred.resolve(mru);
      } else {
        deferred.resolve();
      }
    }, function() {
      deferred.resolve();
    });
    return deferred.promise;
  }
  function addMRU(type, item) {
    if (!type) {
      throw new Error("type should be defined");
    }
    if (!item) {
      throw new Error("item should be defined");
    }
    var deferred = $q.defer();
    loadMRUs().then(function(mru) {
      mru = mru || {};
      mru[type] = _.filter(mru[type] || [], function(record) {
        return record.name != item.name;
      });
      mru[type].unshift(item);
      mru[type].length = Math.min(mru[type].length, 10);
      gfDapsService.saveFile({folderName:folderName, fileName:fileName, state:JSON.stringify(mru)}, function() {
        deferred.resolve();
      }, function() {
        deferred.reject();
      });
    }, function() {
      deferred.reject();
    });
    return deferred.promise;
  }
  return{loadMRUs:loadMRUs, addMRU:addMRU};
}]);
goog.provide("gridReport.services.TemplateStateUpdater");
goog.require("gridReport.services.GridColumnConverterService");
goog.require("gridReport.columnMath.ColumnMathColumnsUpdater");
gridReport.Module.factory("gfTemplateStateUpdater", ["$q", "gfGridColumnConverterService", "gfColumnMathColumnsUpdater", function($q, gfGridColumnConverterService, gfColumnMathColumnsUpdater) {
  function getListOfColumns(columnsState) {
    var column = [];
    _.each(columnsState, function(columnState, key) {
      column.push(gfGridColumnConverterService.createGridColumnFromState(key, columnState));
    });
    return column;
  }
  function getColumnsObject(columns) {
    var columnsState = {};
    _.each(columns, function(column) {
      var columnState = {};
      gfGridColumnConverterService.convertGridColumnToState(columnState, column);
      columnsState[column.id] = columnState;
    });
    return columnsState;
  }
  function getColumnsByNameAndType(columns, columnNameCheckFnct, typeCheckFnct) {
    var foundColumns = [];
    _.each(columns, function(column) {
      if ((typeCheckFnct || angular.noop)(column) && (columnNameCheckFnct || angular.noop)(column)) {
        foundColumns.push(column);
      }
      if (column.gridColumns) {
        var subColumns = getColumnsByNameAndType(column.gridColumns, columnNameCheckFnct, typeCheckFnct);
        if (subColumns) {
          foundColumns = foundColumns.concat(subColumns);
        }
      }
    });
    return foundColumns;
  }
  function updateCustomExpressions(columns, customExpressions) {
    _.each(customExpressions, function(customExpression, previousCustomExpressionName) {
      if (customExpression == null) {
        return;
      }
      var previousColumns = getColumnsByNameAndType(columns, function(column) {
        return column.command && column.command.name === previousCustomExpressionName;
      }, function(column) {
        return column.command && column.command.isCustom();
      });
      _.each(previousColumns, function(previousColumn) {
        var previousColumnId;
        previousColumn.header = customExpression.name;
        previousColumn.initialHeader = customExpression.name;
        previousColumn.command.id = customExpression.name;
        previousColumn.command.name = customExpression.name;
        previousColumn.command.metadata.id = customExpression.name;
        previousColumn.command.expression = customExpression.path + "/*" + customExpression.name + "*/";
        previousColumnId = previousColumn.id;
        previousColumn.id = previousColumn.command.expression;
        gfColumnMathColumnsUpdater.update(columns, previousColumnId, previousColumn.id);
      });
    });
  }
  function updateMultiFactorRanks(columns, multiFactorRanks) {
    _.each(multiFactorRanks, function(multiFactorRank, previousMfrName) {
      if (multiFactorRank == null) {
        return;
      }
      var previousColumns = getColumnsByNameAndType(columns, function(column) {
        return column.command && column.command.name === previousMfrName;
      }, function(column) {
        return column.command && column.command.isMultiFactorRank();
      });
      _.each(previousColumns, function(previousColumn) {
        previousColumn.header = multiFactorRank.name;
        previousColumn.initialHeader = multiFactorRank.name;
        previousColumn.command.id = multiFactorRank.id;
        previousColumn.command.name = multiFactorRank.name;
        previousColumn.command.metadata.id = multiFactorRank.id;
        previousColumn.command.expression = multiFactorRank.adcSyntax + "/*MfrExpression:" + multiFactorRank.name + "*/";
        previousColumn.id = previousColumn.command.expression;
      });
    });
  }
  function updateDataBlocks(columns, dataBlocks) {
    _.each(dataBlocks, function(dataBlock, previousDataBlockName) {
      if (dataBlock == null) {
        return;
      }
      var previousColumns = getColumnsByNameAndType(columns, function(column) {
        return column.command && column.command.name === previousDataBlockName;
      }, function(column) {
        return column.command && column.command.isDataBlock();
      });
      _.each(previousColumns, function(previousColumn) {
        previousColumn.header = dataBlock.name;
        previousColumn.initialHeader = dataBlock.name;
        previousColumn.command.id = dataBlock.id;
        previousColumn.command.name = dataBlock.name;
        previousColumn.command.metadata.id = dataBlock.id;
        previousColumn.id = previousColumn.command.id;
      });
    });
    _.each(columns, function(column) {
      if (column.command && column.command.isDataBlock()) {
        var subColumns = _.values(column.gridColumns);
        column.gridColumns = {};
        _.each(subColumns, function(subColumn) {
          column.gridColumns[subColumn.id] = subColumn;
        });
      }
    });
  }
  var service = {};
  service.updateState = function(templateData, request) {
    if (!templateData) {
      throw new Error("templateData should be provided");
    }
    var deffered = $q.defer();
    if (request) {
      var columns = getListOfColumns(templateData.state.gridState.columns);
      updateCustomExpressions(columns, request.expressions);
      updateMultiFactorRanks(columns, request.mfranks);
      updateDataBlocks(columns, request.dblocks);
      templateData.state.gridState.columns = getColumnsObject(columns);
    }
    deffered.resolve(templateData);
    return deffered.promise;
  };
  return service;
}]);
goog.provide("gridReport.services.ReportTemplatesModel");
goog.require("gridReport.directives.ReportTemplateManagerDialogService");
goog.require("gridReport.services.FormatsService");
goog.require("gridReport.services.StateProvideService");
goog.require("gridReport.services.MostRecentlyUsedService");
goog.require("gridReport.services.ObjectsImporter");
goog.require("gridReport.services.TemplateStateUpdater");
gridReport.services.ReportTemplatesModel = function($translate, $q, gfFormatsService, gfGridManagementService, gfNotificationService, gfEventsAggregator, localStorageService, gfLogManager, gfDefaultToolbarState, gfReportTemplateManagerDialogService, gridInstanceId, gfGridStateService, gfStateProviderService, gfMostRecentlyUsedService, gfObjectsImporter, gfTemplateStateUpdater) {
  var REPORT_TEMPLATES_STATE_POSTFIX = "REPORT_TEMPLATES";
  var BLANK_TEMPLATE = new gridReport.model.ReportTemplate({name:$translate.instant("UNSAVED_TEMPLATE"), type:gridReport.model.ReportTemplate.types.newTemplate});
  var currentStateId;
  var model = this;
  var restoredState;
  var universeContext = scr.UniverseType.Public;
  var templateManagerCustomClass = null;
  model.gridInstanceId = gridInstanceId;
  model.isTemplateSaved = false;
  model.isTemplateChanged = false;
  model.isConfirmationAllowed = true;
  gfEventsAggregator = gfEventsAggregator.getChildAggregator(gridInstanceId);
  model.setBlankTemplateSelected = function() {
    createNewTemplate();
    saveLocalState();
  };
  model.createBlankTemplate = function() {
    if (model.isTemplateChanged && model.isConfirmationAllowed) {
      gfNotificationService.confirmSave($translate.instant("FORMAT_WAS_CHANGED_CONFIRMATION", {name:getSuggestedTemplateName(model.selectedTemplate)}), function() {
        model.tryToSaveTemplate().then(function() {
          createNewTemplate();
        });
      }, createNewTemplate);
    } else {
      createNewTemplate();
    }
  };
  function createNewTemplate(supressLoadData) {
    gfGridManagementService.createNew(model.gridInstanceId, currentStateId);
    if (!supressLoadData) {
      gfGridManagementService.loadData(model.gridInstanceId, true);
    }
    model.selectedTemplate = BLANK_TEMPLATE;
    model.isTemplateSaved = false;
    model.isTemplateChanged = false;
    model.isPersonalTemplate = false;
    saveLocalState();
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateCreated);
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
  }
  model.setSelectedCustomItem = function(item) {
    var template = new gridReport.model.ReportTemplate({name:item.text, type:gridReport.model.ReportTemplate.types.custom});
    template.isCustom = true;
    template.customItem = item;
    model.selectedTemplate = template;
    model.isTemplateChanged = item.isTemplateChanged;
    model.isTemplateSaved = item.isTemplateSaved;
    saveLocalState();
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
  };
  model.resolveTemplateName = function(name, templatesNames) {
    if (!_.contains(templatesNames, name)) {
      return name;
    }
    return model.resolveTemplateName(name + " (copy)", templatesNames);
  };
  function getTemplateNames() {
    return _.pluck(_.union(model.templates.globalFormats, model.templates.personalFormats, model.templates.sharedFormats), "name");
  }
  model.saveAndSelectImportedTemplate = function(templateData) {
    checkTemplateChangesAndInvokeAction(function() {
      model.importTemplate(templateData);
    });
  };
  model.loadSelectedTemplate = function(newTemplate) {
    gfGridManagementService.startLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateLoading);
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateLoadingStarted);
    model.selectedTemplate = newTemplate;
    gfFormatsService.loadTemplate(newTemplate).then(function(state) {
      gfGridManagementService.setGridState(model.gridInstanceId, state, function() {
        gfGridManagementService.endLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateLoading);
        gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateLoadingEnded);
      });
      newTemplate.accessDate = new Date;
      model.isTemplateSaved = true;
      model.isTemplateChanged = false;
      model.isPersonalTemplate = model.selectedTemplate && !model.selectedTemplate.isGlobal();
      if (!model.isPersonalTemplate) {
        gfMostRecentlyUsedService.addMRU(gridReport.model.ReportTemplate.types.global, {name:model.selectedTemplate.name, accessDate:newTemplate.accessDate});
      }
      saveLocalState();
      gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
    }, function() {
      gfGridManagementService.endLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateLoading);
      gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateLoadingEnded);
    });
  };
  model.setSelectedTemplate = function(newTemplate) {
    var loadTemplateAction = function() {
      model.loadSelectedTemplate(newTemplate);
    };
    checkTemplateChangesAndInvokeAction(loadTemplateAction);
  };
  function checkTemplateChangesAndInvokeAction(callback) {
    if (model.isTemplateChanged && model.isConfirmationAllowed) {
      gfNotificationService.confirmSave($translate.instant("FORMAT_WAS_CHANGED_CONFIRMATION", {name:getSuggestedTemplateName(model.selectedTemplate)}), function() {
        model.tryToSaveTemplate().then(callback);
      }, callback);
    } else {
      callback();
    }
  }
  model.tryToSaveTemplate = function() {
    var deffered = $q.defer();
    if (model.selectedTemplate) {
      model.openReportTemplateManager(getSuggestedTemplateName(model.selectedTemplate), function() {
        deffered.resolve("saved");
      }, !model.selectedTemplate.isGlobal());
    } else {
      deffered.reject(new Error("template should be selected"));
    }
    return deffered.promise;
  };
  function getSuggestedTemplateName(template, preferredTemplateName) {
    if (template.isGlobal() || template.isShared()) {
      var templateName = preferredTemplateName || template.name + " (copy)";
      var existedTemplate = _.findWhere(model.templates.personalFormats, {name:templateName});
      if (existedTemplate) {
        return getSuggestedTemplateName(template, templateName + " (copy)");
      } else {
        return templateName;
      }
    } else {
      return template.name;
    }
  }
  model.saveAs = function() {
    if (model.selectedTemplate) {
      var saveAsSuccessfullAction = function(templateName) {
        selectCreatedTemplate(templateName);
      };
      model.openReportTemplateManager(getSuggestedTemplateName(model.selectedTemplate), saveAsSuccessfullAction, !model.selectedTemplate.isGlobal());
    }
  };
  function selectCreatedTemplate(templateName) {
    var tempalte = getTemplate(templateName, gridReport.model.ReportTemplate.types.personal);
    if (tempalte) {
      model.selectedTemplate = tempalte;
      model.isTemplateSaved = true;
      model.isTemplateChanged = false;
      model.isPersonalTemplate = model.selectedTemplate && !model.selectedTemplate.isGlobal();
    }
  }
  function setTemplateManagerDialogClassCallback(customClass) {
    templateManagerCustomClass = customClass;
  }
  model.save = function() {
    if (model.selectedTemplate && !model.selectedTemplate.isGlobal()) {
      saveFormatHandler(model.selectedTemplate.name);
    }
  };
  model["export"] = function() {
    if (model.selectedTemplate) {
      exportFormatHandler();
    }
  };
  model.openReportTemplateManager = function(formatName, successCallback, isOverwriteWithoutConfirmation, templateType) {
    var settings = {universeContext:universeContext, templateType:templateType, saveModeSettings:formatName ? {selectedFormatName:formatName, initialSelectedFormatName:formatName, isOverwriteWithoutConfirmation:isOverwriteWithoutConfirmation} : null, onDeleteFormat:templateDeletedHandler, onRenameFormat:templateRenamedHandler, onSaveFormat:function(templateName) {
      saveFormatHandler(templateName, successCallback);
    }, onLoadFormat:function(format) {
      if (format) {
        var template = getTemplate(format.name, format.type);
        if (!template) {
          template = new gridReport.model.ReportTemplate({type:format.type, name:format.name, path:format.path, accessDate:new Date});
          model.templates.personalFormats.push(template);
        }
        gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateManagerTemplateSelected);
        model.setSelectedTemplate(template);
      }
    }};
    if (templateManagerCustomClass) {
      settings.templateManagerCustomClass = templateManagerCustomClass;
    }
    gfReportTemplateManagerDialogService.openDialog(settings);
  };
  model.setUniverseContext = function(newUniverseContext) {
    if (newUniverseContext && universeContext != newUniverseContext) {
      universeContext = newUniverseContext;
      loadTemplates();
    }
  };
  model.getUniverseContext = function() {
    return universeContext || scr.UniverseType.Public;
  };
  model.importTemplate = function(templateData) {
    if (!templateData) {
      throw new Error("templateData should be provided");
    }
    gfGridManagementService.startLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateSaving);
    var allTemplatesNames = getTemplateNames();
    templateData.name = model.resolveTemplateName(templateData.name + " Imported", allTemplatesNames);
    return gfObjectsImporter.importObjects(templateData.state.gridState).then(function(response) {
      return gfTemplateStateUpdater.updateState(templateData, response).then(function() {
        return gfFormatsService.saveTemplate(templateData.name, templateData.state, templateData.description).then(function() {
          gfGridManagementService.endLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateSaving);
          if (!_.contains(getTemplateNames(), templateData.name)) {
            loadTemplates();
          }
          gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateImported, {templateName:templateData.name});
        }).then(function() {
          model.loadSelectedTemplate(new gridReport.model.ReportTemplate(templateData));
        }, function() {
          throw new Error("Imported template wasn't saved because of some server error");
        });
      });
    });
  };
  function getState() {
    return{isTemplateSaved:model.isTemplateSaved, isTemplateChanged:model.isTemplateChanged, selectedTemplate:model.selectedTemplate};
  }
  function setState(state, forceLoad) {
    if (!state || !state.selectedTemplate) {
      state = getEmptyState();
    }
    if (state.selectedTemplate.name == BLANK_TEMPLATE.name) {
      model.selectedTemplate = BLANK_TEMPLATE;
    } else {
      if (state.selectedTemplate.isCustom) {
        model.setSelectedCustomItem(state.selectedTemplate.customItem);
      } else {
        if (forceLoad && (state.selectedTemplate && state.selectedTemplate.type == gridReport.model.ReportTemplate.types.global)) {
          model.loadSelectedTemplate(new gridReport.model.ReportTemplate(state.selectedTemplate));
        }
        if (model.templates) {
          var template = getTemplate(state.selectedTemplate.name, state.selectedTemplate.type);
          if (template) {
            model.selectedTemplate = template;
          } else {
            model.selectedTemplate = BLANK_TEMPLATE;
            state.isTemplateSaved = false;
            state.isTemplateChanged = true;
          }
        }
      }
    }
    model.isTemplateSaved = state.isTemplateSaved;
    model.isTemplateChanged = state.isTemplateChanged;
    if (model.selectedTemplate != BLANK_TEMPLATE) {
      model.isPersonalTemplate = model.selectedTemplate && !model.selectedTemplate.isGlobal();
    }
  }
  function loadLocalState() {
    return localStorageService.get(currentStateId + REPORT_TEMPLATES_STATE_POSTFIX);
  }
  function saveLocalState() {
    if (!model.isAutoSaveState) {
      gfLogManager.trace("REPORT_TEMPLATE. unable to save state for isAutoSaveState == false");
      return;
    }
    if (currentStateId === undefined) {
      gfLogManager.trace("REPORT_TEMPLATE. trying to save state with undefined id");
      return;
    }
    var state = getState();
    localStorageService.add(currentStateId + REPORT_TEMPLATES_STATE_POSTFIX, JSON.stringify(state));
    gfLogManager.trace("REPORT_TEMPLATE. Request to save state [id: " + (currentStateId + REPORT_TEMPLATES_STATE_POSTFIX) + "]");
  }
  function getIsTemplateSavedCallback() {
    return model.isTemplateSaved;
  }
  function getIsTemplateChangedCallback() {
    return model.isTemplateChanged;
  }
  function restoreStateCallback(stateId) {
    if (stateId == undefined) {
      gfLogManager.trace("REPORT_TEMPLATE. trying to restore state with undefined id");
      return;
    }
    currentStateId = stateId;
    gfLogManager.trace("REPORT_TEMPLATE. restore state id: " + stateId);
    restoredState = loadLocalState();
    if (!model.selectedTemplate) {
      if (restoredState && restoredState.selectedTemplate) {
        setState(restoredState);
      } else {
        var state = getEmptyState();
        setState(state, true);
        if (state.selectedTemplate == BLANK_TEMPLATE) {
          gfGridManagementService.createNew(model.gridInstanceId, currentStateId);
          gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.newStateApplied);
        }
      }
    }
  }
  function getEmptyState() {
    var state = {};
    state.isTemplateChanged = false;
    state.isTemplateSaved = false;
    state.selectedTemplate = BLANK_TEMPLATE;
    if (gfDefaultToolbarState && gfDefaultToolbarState.selectedTemplate) {
      state.isTemplateChanged = gfDefaultToolbarState.isTemplateChanged;
      state.isTemplateSaved = gfDefaultToolbarState.isTemplateSaved;
      state.selectedTemplate = gfDefaultToolbarState.selectedTemplate;
    }
    return state;
  }
  function createNewCallback(newStateId) {
    if (model.isAutoSaveState) {
      currentStateId = newStateId;
    }
    model.isTemplateSaved = false;
    model.isTemplateChanged = false;
    saveLocalState();
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
  }
  function getSelectedTemplateCalback() {
    return new gridReport.model.ReportTemplate(model.selectedTemplate);
  }
  function setSelectedTemplateCallback(template) {
    model.loadSelectedTemplate(new gridReport.model.ReportTemplate(template));
  }
  function setSelectedCustomItemCallback(item) {
    model.setSelectedCustomItem(item);
  }
  function setSelectedNewTemplateCallback(needLoadData) {
    createNewTemplate(!needLoadData);
  }
  function saveFormatCallback(templateName, successCallback, failCallback) {
    saveFormatHandler(templateName, successCallback, failCallback);
  }
  function saveSelectedTemplateAsCallback(templateName, successCallback, failCallback) {
    saveFormatHandler(templateName, function() {
      selectCreatedTemplate(templateName);
      (successCallback || angular.noop)();
    }, failCallback);
  }
  function getIsTemplateExistsCallback(templateName, templateType) {
    return getTemplate(templateName, templateType) != null;
  }
  var callbacksArray = [[gfGridManagementService.getIsTemplateSaved, getIsTemplateSavedCallback], [gfGridManagementService.getIsTemplateChanged, getIsTemplateChangedCallback], [gfGridManagementService.restoreState, restoreStateCallback], [gfGridManagementService.createNew, createNewCallback], [gfGridManagementService.getSelectedTemplate, getSelectedTemplateCalback], [gfGridManagementService.saveTemplate, saveFormatCallback], [gfGridManagementService.saveTemplateAs, saveSelectedTemplateAsCallback], 
  [gfGridManagementService.getIsTemplateExists, getIsTemplateExistsCallback], [gfGridManagementService.setSelectedTemplate, setSelectedTemplateCallback], [gfGridManagementService.setSelectedCustomItem, setSelectedCustomItemCallback], [gfGridManagementService.setSelectedNewTemplate, setSelectedNewTemplateCallback], [gfGridManagementService.setTemplateManagerDialogClass, setTemplateManagerDialogClassCallback]];
  function registerManagementSerivceCallbacks(gridId) {
    gfGridManagementService.registerCallbacks(gridId, callbacksArray);
  }
  function unregisterManagementSerivceCallbacks(gridId) {
    gfGridManagementService.unregisterCallbacks(gridId, callbacksArray);
  }
  model.destroy = function() {
    unregisterManagementSerivceCallbacks(model.gridInstanceId);
    unregisterStateCallbacks(model.gridInstanceId);
  };
  function registerStateCallbacks(gridId) {
    gfStateProviderService.register(gridReport.services.StateProvideService.components.templates, gridId, {getStateCallback:getState, setStateCallback:function(state) {
      restoredState = state;
      setState(state);
    }});
  }
  function unregisterStateCallbacks(gridId) {
    gfStateProviderService.unregister(gridReport.services.StateProvideService.components.templates, gridId);
  }
  gfEventsAggregator.addHandler(gridReport.model.GridEvents.stateChanged, function(cause) {
    if (cause == gridReport.model.StateChangesCause.ColumnProgrammaticallyAddedToSavedTemplate) {
      if (model.isTemplateSaved) {
        model.isTemplateChanged = true;
        saveLocalState();
        gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
      }
    } else {
      model.isTemplateChanged = true;
      saveLocalState();
      gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
    }
  }, true);
  gfEventsAggregator.addHandler(gridReport.model.InternalEvents.gridStateNotFound, function() {
    setState(getEmptyState(), true);
  });
  function getTemplate(name, type) {
    switch(type) {
      case gridReport.model.ReportTemplate.types.global:
        return _.findWhere(model.templates.globalFormats, {name:name});
      case gridReport.model.ReportTemplate.types.personal:
        return _.findWhere(model.templates.personalFormats, {name:name});
      case gridReport.model.ReportTemplate.types.shared:
        return _.findWhere(model.templates.sharedFormats, {name:name});
      default:
        return undefined;
    }
  }
  function filterTemplates(templates) {
    return _.filter(templates, function(template) {
      return template.getUniverseContext() == universeContext;
    });
  }
  function filterTemplatesGroups(templatesGroups) {
    return{globalFormats:filterTemplates(templatesGroups.globalFormats), personalFormats:filterTemplates(templatesGroups.personalFormats), sharedFormats:filterTemplates(templatesGroups.sharedFormats)};
  }
  function loadTemplates() {
    model.isTemplatesLoading = true;
    var deffered = $q.defer();
    gfMostRecentlyUsedService.loadMRUs().then(function(mrus) {
      gfFormatsService.loadFormats(function(response) {
        model.templates = filterTemplatesGroups(response.formats);
        if (mrus && mrus.global) {
          _.each(model.templates.globalFormats, function(format) {
            var t = _.findWhere(mrus.global, {name:format.name});
            if (t) {
              format.accessDate = t.accessDate;
            }
          });
        }
        _.each(response.fails, function(fail) {
          gfLogManager.error(fail);
        });
        model.isTemplatesLoading = false;
        deffered.resolve();
        gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateSelectorComponentInitialized);
      });
    }, function() {
    });
    return deffered.promise;
  }
  function templateDeletedHandler(templateName) {
    var deletedTemplate = getTemplate(templateName, gridReport.model.ReportTemplate.types.personal);
    if (_.isEqual(model.selectedTemplate, deletedTemplate)) {
      model.createBlankTemplate();
    }
    model.templates.personalFormats.splice(model.templates.personalFormats.indexOf(deletedTemplate), 1);
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateDeleted, {templateName:templateName});
  }
  function templateRenamedHandler(oldName, newName) {
    var renamedTemplate = getTemplate(oldName, gridReport.model.ReportTemplate.types.personal);
    if (renamedTemplate) {
      renamedTemplate.name = newName;
    }
    saveLocalState();
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateRenamed, {oldName:oldName, newName:newName});
    gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.templates});
  }
  function exportFormatHandler() {
    var templateData = gfGridManagementService.exportSelectedTemplate(model.gridInstanceId);
    var text = JSON.stringify(templateData);
    var blob = new Blob([text], {type:"text/plain;charset=utf-8"});
    saveAs(blob, model.selectedTemplate.name + ".ugrf");
  }
  function saveFormatHandler(templateName, successCallback, failCallback) {
    model.isSaving = true;
    gfGridManagementService.startLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateSaving);
    gfFormatsService.saveTemplate(templateName, gfGridStateService.getState(model.gridInstanceId), gfGridStateService.getGridDescription(model.gridInstanceId)).then(function() {
      model.isTemplateSaved = true;
      model.isTemplateChanged = false;
      updateSavedTemplate(templateName);
      model.isSaving = false;
      gfGridManagementService.endLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateSaving);
      gfReportTemplateManagerDialogService.closeDialog();
      (successCallback || angular.noop)(templateName);
      saveLocalState();
    }, function(error) {
      model.isSaving = false;
      gfGridManagementService.endLoading(model.gridInstanceId, gridReport.model.GridContentPlacement.All, gridReport.model.LoadingReasons.TemplateSaving);
      (failCallback || angular.noop)(error);
    });
  }
  function updateSavedTemplate(templateName) {
    var savedTemplate = getTemplate(templateName, gridReport.model.ReportTemplate.types.personal);
    if (savedTemplate) {
      savedTemplate.accessDate = new Date;
    } else {
      model.templates.personalFormats.push(new gridReport.model.ReportTemplate({type:gridReport.model.ReportTemplate.types.personal, name:templateName, accessDate:new Date}));
    }
  }
  registerManagementSerivceCallbacks(model.gridInstanceId);
  registerStateCallbacks(model.gridInstanceId);
  gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.templateSelectorComponentRegistered, {gridInstanceId:model.gridInstanceId});
  var stateId = gfStateProviderService.getStateId(model.gridInstanceId);
  if (!_.isUndefined(stateId) && !_.isNull(stateId)) {
    restoreStateCallback(stateId);
  }
  loadTemplates().then(function() {
    if (model.selectedTemplate && (model.selectedTemplate.type == gridReport.model.ReportTemplate.types.global || (model.selectedTemplate.type == gridReport.model.ReportTemplate.types.personal || model.selectedTemplate.type == gridReport.model.ReportTemplate.types.shared))) {
      model.selectedTemplate = getTemplate(model.selectedTemplate.name, model.selectedTemplate.type);
    }
    if (restoredState && !model.selectedTemplate) {
      setState(restoredState);
    }
  });
};
gridReport.services.ReportTemplatesModel["$inject"] = ["$translate", "$q", "gfFormatsService", "gfGridManagementService", "gfNotificationService", "gfEventsAggregator", "localStorageService", "gfLogManager", "gfDefaultToolbarState", "gfReportTemplateManagerDialogService", "gridInstanceId", "gfGridStateService", "gfStateProviderService", "gfMostRecentlyUsedService", "gfObjectsImporter", "gfTemplateStateUpdater"];
goog.provide("gridReport.services.ReportTemplatesModelFactory");
goog.require("gridReport.services.ReportTemplatesModel");
gridReport.Module.service("gfReportTemplatesModelFactory", ["$injector", function($injector) {
  var models = {};
  var service = {getReportTemplateModel:function(gridInstanceId) {
    if (!models[gridInstanceId]) {
      models[gridInstanceId] = $injector.instantiate(gridReport.services.ReportTemplatesModel, {gridInstanceId:gridInstanceId});
    }
    return models[gridInstanceId];
  }, destroyReportTemplateModel:function(gridInstanceId) {
    if (models[gridInstanceId]) {
      models[gridInstanceId].destroy();
      models[gridInstanceId].templates = null;
      models[gridInstanceId] = undefined;
    }
  }};
  return service;
}]);
goog.provide("gridReport.directives.ReportTemplateSelectorController");
goog.require("gridReport.services.ReportTemplatesModelFactory");
goog.require("gridReport.services.NotificationService");
goog.require("gridReport.utils.LogManager");
gridReport.Module.controller("ReportTemplateSelectorController", ["$scope", "$translate", "gfReportTemplatesModelFactory", "gfEventsAggregator", "gfNotificationService", "gfGridManagementService", "gfLogManager", function($scope, $translate, gfReportTemplatesModelFactory, gfEventsAggregator, gfNotificationService, gfGridManagementService, gfLogManager) {
  $scope.onFileUploaded = function(fileName, fileData) {
    if (fileData) {
      try {
        var templateData = JSON.parse(fileData);
        $scope.model.saveAndSelectImportedTemplate(templateData);
      } catch (e) {
        gfLogManager.error(e, true);
      }
    }
  };
  function setSelectedTemplateByNameCallback(name, type) {
    var template = new gridReport.model.ReportTemplate({name:name, type:type});
    $scope.model.setSelectedTemplate(template);
  }
  function importTemplateCallback(templateData) {
    return $scope.model.importTemplate(templateData);
  }
  $scope.mruOptions = {filter:function(template) {
    return template.accessDate != undefined;
  }};
  $scope.numberOfItemsPerCategory = angular.isDefined($scope.numberOfItemsPerCategory) ? $scope.numberOfItemsPerCategory : 10;
  $scope.canCreateBlankTemplate = angular.isDefined($scope.canCreateBlankTemplate) ? $scope.canCreateBlankTemplate : true;
  $scope.canImportTemplate = angular.isDefined($scope.canImportTemplate) ? $scope.canImportTemplate : true;
  $scope.canOpenTemplateManager = angular.isDefined($scope.canOpenTemplateManager) ? $scope.canOpenTemplateManager : true;
  $scope.isConfirmationAllowed = angular.isDefined($scope.isConfirmationAllowed) ? $scope.isConfirmationAllowed : true;
  $scope.useDateSortingForGlobals = angular.isDefined($scope.useDateSortingForGlobals) ? $scope.useDateSortingForGlobals : true;
  $scope.getGlobalText = function() {
    if ($scope.globalSectionText) {
      return $scope.globalSectionText;
    }
    return $translate.instant("SAMPLE_TEMPLATES");
  };
  $scope.getPersonalText = function() {
    if ($scope.personalSectionText) {
      return $scope.personalSectionText;
    }
    return $translate.instant("PERSONAL");
  };
  $scope.getRecentText = function() {
    if ($scope.recentSectionText) {
      return $scope.recentSectionText;
    }
    return $translate.instant("RECENT");
  };
  $scope.getSharedText = function() {
    return $scope.sharedSectionText ? $scope.sharedSectionText : $translate.instant("SHARED_TEMPLATES");
  };
  $scope.getFormattedTemplateName = function() {
    var getSelectedTemplateNameCallback = $scope.getSelectedTemplateName();
    if (getSelectedTemplateNameCallback) {
      return getSelectedTemplateNameCallback($scope.model.selectedTemplate);
    }
    return $scope.model.selectedTemplate ? $scope.model.selectedTemplate.name : "";
  };
  $scope.createBlankTemplate = function() {
    var onCreateBlankCallback = $scope.onCreateBlank();
    if (onCreateBlankCallback) {
      var promise = onCreateBlankCallback();
      promise && promise.then($scope.model.setBlankTemplateSelected);
    } else {
      $scope.model.createBlankTemplate();
    }
  };
  $scope.setSelectedCustomItem = function(event, item) {
    var selectCustomItem = function() {
      if (item.isItem() || item.isDefaultAction()) {
        $scope.model.setSelectedCustomItem(item);
      }
    };
    if (item.action) {
      var promise = item.action($scope.model.selectedTemplate, item);
      promise && promise.then(selectCustomItem);
    } else {
      selectCustomItem();
    }
  };
  $scope.setSelectedTemplate = function(template) {
    if (template == $scope.model.selectedTemplate) {
      return;
    }
    var onTemplateSelectedCallback = $scope.onTemplateSelected();
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.templateSelectorTemplateSelected);
    if (onTemplateSelectedCallback) {
      var oldTemplate = $scope.model.selectedTemplate;
      var promise = onTemplateSelectedCallback(oldTemplate, template);
      promise && promise.then(function() {
        $scope.model.loadSelectedTemplate(template);
      });
    } else {
      $scope.model.setSelectedTemplate(template);
    }
  };
  $scope.$watch("gridInstanceId", function(newValue, oldValue) {
    if (oldValue == newValue) {
      return;
    }
    if (oldValue) {
      gfReportTemplatesModelFactory.destroyReportTemplateModel(oldValue);
    }
    setModel($scope.gridInstanceId);
  });
  $scope.$watch("isAutoSaveState", function() {
    if ($scope.model) {
      $scope.model.isAutoSaveState = $scope.isAutoSaveState;
    }
  });
  $scope.$watch("isConfirmationAllowed", function() {
    if ($scope.model) {
      $scope.model.isConfirmationAllowed = $scope.isConfirmationAllowed;
    }
  });
  $scope.$watch("universeContext", function() {
    if ($scope.model) {
      $scope.model.setUniverseContext($scope.universeContext);
    }
  });
  $scope.getGlobalViewMoreText = function() {
    return $translate.instant("VIEW_MORE", {count:$scope.model.templates.globalFormats.length - $scope.numberOfItemsPerCategory});
  };
  $scope.getPersonalViewMoreText = function() {
    return $translate.instant("VIEW_MORE", {count:$scope.model.templates.personalFormats.length - $scope.numberOfItemsPerCategory});
  };
  $scope.getSharedViewMoreText = function() {
    return $translate.instant("VIEW_MORE", {count:$scope.model.templates.sharedFormats.length - $scope.numberOfItemsPerCategory});
  };
  function setModel(gridInstanceId) {
    if (gridInstanceId) {
      $scope.model = gfReportTemplatesModelFactory.getReportTemplateModel($scope.gridInstanceId);
      $scope.model.setUniverseContext($scope.universeContext);
    }
  }
  $scope.showReportTemplateManager = function(templateType) {
    $scope.model.openReportTemplateManager(undefined, undefined, undefined, templateType);
  };
  setModel($scope.gridInstanceId);
  $scope.model.isAutoSaveState = $scope.isAutoSaveState;
  $scope.model.isConfirmationAllowed = $scope.isConfirmationAllowed;
  $scope.$on("$destroy", function() {
    gfReportTemplatesModelFactory.destroyReportTemplateModel($scope.gridInstanceId);
  });
  var callbackArray = [[gfGridManagementService.setSelectedTemplateByName, setSelectedTemplateByNameCallback], [gfGridManagementService.importTemplate, importTemplateCallback]];
  gfGridManagementService.registerCallbacks($scope.model.gridInstanceId, callbackArray);
}]);
goog.provide("gridReport.model.TemplateSelectorCustomItem");
gridReport.model.TemplateSelectorCustomItem = function(options) {
  if (options) {
    if (options.hasOwnProperty("itemType")) {
      this.itemType = options.itemType;
    }
    if (options.hasOwnProperty("text")) {
      this.text = options.text;
    }
    if (options.hasOwnProperty("action")) {
      this.action = options.action;
    }
    if (options.hasOwnProperty("isTemplateSaved")) {
      this.isTemplateSaved = options.isTemplateSaved;
    }
    if (options.hasOwnProperty("isTemplateChanged")) {
      this.isTemplateChanged = options.isTemplateChanged;
    }
  }
};
gridReport.model.TemplateSelectorCustomItem.itemTypes = {header:"header", link:"link", item:"item", defaultAction:"default"};
gridReport.model.TemplateSelectorCustomItem.prototype.itemType = gridReport.model.TemplateSelectorCustomItem.itemTypes.item;
gridReport.model.TemplateSelectorCustomItem.prototype.text = "";
gridReport.model.TemplateSelectorCustomItem.prototype.action = null;
gridReport.model.TemplateSelectorCustomItem.prototype.isHeader = function() {
  return this.itemType === gridReport.model.TemplateSelectorCustomItem.itemTypes.header;
};
gridReport.model.TemplateSelectorCustomItem.prototype.isLink = function() {
  return this.itemType === gridReport.model.TemplateSelectorCustomItem.itemTypes.link;
};
gridReport.model.TemplateSelectorCustomItem.prototype.isItem = function() {
  return this.itemType === gridReport.model.TemplateSelectorCustomItem.itemTypes.item;
};
gridReport.model.TemplateSelectorCustomItem.prototype.isDefaultAction = function() {
  return this.itemType === gridReport.model.TemplateSelectorCustomItem.itemTypes.defaultAction;
};
goog.provide("gridReport.services.FileUploadService");
gridReport.Module.factory("gfFileUploadService", function() {
  var service = {};
  function createInput(triggerEl, accept, dataUploadedCallback) {
    var fileEl = $("<input type='file'>").attr("accept", accept);
    triggerEl.parent().append(fileEl);
    fileEl.hide();
    fileEl.change(getInputnChangeHandler(dataUploadedCallback));
    triggerEl.data("gfFileUploadService", fileEl);
    return fileEl;
  }
  function getInputnChangeHandler(dataUploadedCallback) {
    return function(e) {
      var inputEl = $(e.target);
      var files = inputEl.get(0).files;
      if (files.length != 1) {
        return;
      }
      var reader = new FileReader;
      reader.onload = function(e) {
        var name = files[0].name;
        var fileData = e.target.result;
        dataUploadedCallback(name, fileData);
        inputEl.val("");
      };
      reader.readAsText(files[0]);
    };
  }
  service.applyTo = function(triggerEl, dataUploadedCallback, accept) {
    triggerEl.on("remove", function() {
      var fileEl = triggerEl.data("gfFileUploadService");
      if (fileEl && _.isFunction(fileEl.remove)) {
        fileEl.remove();
      }
    });
    triggerEl.click(function() {
      var fileEl = triggerEl.data("gfFileUploadService") || createInput(triggerEl, accept, dataUploadedCallback);
      fileEl.click();
    });
  };
  return service;
});
goog.provide("gridReport.directives.ReportTemplateSelectorDirective");
goog.require("gridReport.model.TemplateSelectorCustomItem");
goog.require("gridReport.directives.ReportTemplateSelectorController");
goog.require("gridReport.services.FileUploadService");
gridReport.Module.directive("gfReportTemplateSelector", ["gfFileUploadService", function(gfFileUploadService) {
  return{restrict:"E", replace:true, transclude:false, templateUrl:"scripts/directives/reportTemplateSelector/ReportTemplateSelector.html", scope:{globalSectionText:"=", personalSectionText:"=", sharedSectionText:"=", recentSectionText:"=", isEnabled:"=", isAutoSaveState:"=", customItems:"=", gridInstanceId:"=", getSelectedTemplateName:"&", universeContext:"=", numberOfItemsPerCategory:"=?", onTemplateSelected:"&", onCreateBlank:"&", canCreateBlankTemplate:"=?", canImportTemplate:"=?", canOpenTemplateManager:"=?", 
  isConfirmationAllowed:"=?", useDateSortingForGlobals:"=?"}, controller:"ReportTemplateSelectorController", link:function(scope, element) {
    var listener = function(event) {
      event.preventDefault();
      event.stopPropagation();
    };
    gfFileUploadService.applyTo(element.find("#gfRTS_importTempalteLink"), scope.onFileUploaded, ".ugrf");
    scope.element = element;
    function scollToTop() {
      element.find(".gf-template-selector-list-container").scrollTop(0);
    }
    var isOpen = false;
    function closeMenu(e) {
      $(document).off("mousedown", closeMenu);
      if ($(e.target).closest(element.find(".dropdown-menu")).length > 0) {
        isOpen = false;
        return;
      }
      if ($(e.target).closest(element).length > 0) {
        return;
      }
      element.find(".dropdown-toggle").trigger("click");
    }
    element.find(".dropdown-toggle").on("click", function() {
      if (!isOpen) {
        scollToTop();
        $(document).on("mousedown", closeMenu);
      }
      isOpen = !isOpen;
    });
    element.find(".gf-template-selector-item-header").on("click", listener);
    element.on("$destroy", function() {
      element.find(".gf-template-selector-item-header").off("click", listener);
      element.find(".dropdown-toggle").off("click", scollToTop);
      scope.onCreateBlank = null;
      scope.onTemplateSelected = null;
      scope.getSelectedTemplateName = null;
      scope.$destroy();
    });
  }};
}]);
goog.provide("gridReport.datacloud.service.DataCloudCommandService");
goog.require("gridReport.services.CategoryServiceFactory");
gridReport.Module.factory("gfDataCloudCommandService", ["gfCategoryServiceFactory", "gfDapsStorageProvider", "$timeout", "$q", "$rootScope", "gfConditionalValueFormattingService", function(gfCategoryServiceFactory, gfDapsStorageProvider, $timeout, $q, $rootScope, gfConditionalValueFormattingService) {
  function get() {
    var cache = {}, requests = [], categoryService = gfCategoryServiceFactory.createInstance();
    function updateField(command, metadata) {
      command.name = metadata.name;
      command.expression = gridReport.model.Command.getExpression(command, metadata);
      command.description = metadata.description;
      command.defaultOrder = metadata.defaultOrder;
      command.enableHeatMap = metadata.enableHeatMap;
      command.isTimeSeriesable = metadata.isTimeSeriesable;
      command.isAbsComp = metadata.isAbsComp;
      if (command.outputColumn && (!_.isArray(command.outputColumn) && !command.outputColumn.isValueOutputColumn())) {
        if (metadata.outputColumns && metadata.outputColumns.columns) {
          var out = _.findWhere(metadata.outputColumns.columns, {id:command.outputColumn.id});
          if (out) {
            command.outputColumn.name = out.name;
          }
        }
      } else {
        command.returnType = metadata.dataType;
      }
      if (command.metadata) {
        command.metadata.isGrid = metadata.isGrid;
      }
      if (metadata.parameterSet != undefined) {
        command.pSetId = metadata.parameterSet.pSetId;
        if (command.parameters != undefined && metadata.parameterSet.parameters != undefined) {
          _.each(metadata.parameterSet.parameters, function(parameter) {
            var cmdParam = _.findWhere(command.parameters, {id:parameter.id});
            if (cmdParam != undefined) {
              cmdParam.defaultValue = parameter["default"];
            }
          });
        }
      }
    }
    function updateExpression(command, expression) {
      command.description = expression.description;
      command.returnType = expression.returnType;
      command.expression = expression.path + "/*" + expression.name + "*/";
    }
    function updateColumn(column, command) {
      if (column.header == column.initialHeader) {
        column.header = command.name;
      }
      column.initialHeader = command.name;
      column.conditionalValueFormatting = gfConditionalValueFormattingService.create(column);
      if (column.command == null || column.command.isDataBlock() == false) {
        column.id = command.expression;
      }
    }
    function getFromCache(commandId) {
      var val = null;
      if (commandId) {
        val = cache[commandId];
        if (!val) {
          val = cache[commandId.toUpperCase()];
        }
      }
      return val;
    }
    function getRequest(columns) {
      var fieldIds = [], expressionNames = [], mfrIds = [], dataBlockIds = [];
      _.each(columns, function(column) {
        var command = column.command;
        if (command == undefined || (command.id == undefined || command.id == "")) {
          return;
        }
        if (command.isCustom()) {
          expressionNames.push(command.id);
        } else {
          if (command.isMultiFactorRank()) {
            mfrIds.push(command.id);
          } else {
            if (command.isDataBlock()) {
              dataBlockIds.push(command.id);
            } else {
              fieldIds.push(command.id);
            }
          }
        }
      });
      return{fieldIds:fieldIds, expressionNames:expressionNames, mfrIds:mfrIds, dataBlockIds:dataBlockIds};
    }
    function updateMfr(command, mfr, fields) {
      command.expression = mfr.adcSyntax + "/*MfrExpression:" + mfr.name + "*/";
      command.metadata = mfr;
      command.defaultOrder = mfr.nTileOrder == scr.mfr.MFNTileOrder.Ascending ? scr.mfr.Order.LowerIsBetter : scr.mfr.Order.HigherIsBetter;
      command.name = mfr.name;
      var formattingInfo = gridReport.services.MultiFactorRankToCommandConverter.getFormattingInfo(mfr);
      command.returnType = formattingInfo.returnType;
      command.decimalDigits = formattingInfo.decimalDigits;
      var removedFactors = [];
      _.each(command.factors, function(f) {
        var mfrFactor = _.find(mfr.factors, function(fc) {
          return fc.field.id == f.id;
        });
        if (mfrFactor === undefined) {
          removedFactors.push(f);
        } else {
          f.metadata = mfrFactor;
        }
      });
      _.each(removedFactors, function(f) {
        var indexOfFactor = _.indexOf(command.factors, f);
        command.factors.splice(indexOfFactor, 1);
      });
      var addedFactors = _.filter(mfr.factors, function(mfrFactor) {
        return _.find(command.factors, function(f) {
          return f.id == mfrFactor.field.id;
        }) == undefined;
      });
      var addedConvertedFactors = [];
      _.each(addedFactors, function(newFactor) {
        if (!fields[newFactor.field.id]) {
          return;
        }
        var factor = gridReport.model.Command.convert(new scr.output.Field(fields[newFactor.field.id]));
        factor.metadata = newFactor;
        command.factors.push(factor);
        addedConvertedFactors.push(factor);
      });
      return{addedFactors:addedConvertedFactors, removedFactors:removedFactors};
    }
    function updateColumns(columns, response) {
      var removedColumns = [];
      _.each(columns, function(column) {
        if (column.command == undefined || (column.command.id == undefined || column.command.id == "")) {
          return;
        }
        response = response || {};
        var expressions = response.expressions, mfrs = response.mfrs ? response.mfrs.results : [], fields = response.fields ? response.fields.fields : [];
        if (column.command.isCustom()) {
          var expression = _.findWhere(expressions, {name:column.command.id});
          if (expression) {
            updateExpression(column.command, expression);
            delete column.command.metadata.deleted;
          } else {
            column.command.metadata.deleted = true;
          }
        } else {
          if (column.command.isMultiFactorRank()) {
            var mfr = _.findWhere(mfrs, {id:column.command.id});
            var removeRanks = false;
            if (mfr && mfr.value != null) {
              updateMfr(column.command, JSON.parse(mfr.value), response.mfrs.metadata.fields);
              if (column.id != column.command.expression) {
                removeRanks = true;
              }
            } else {
              if (!column.command.metadata.isBasedOnColumn) {
                removeRanks = true;
                column.command.metadata.deleted = true;
              }
            }
            if (removeRanks) {
              removedColumns = removedColumns.concat(_.filter(columns, function(c) {
                return c.parentColumn == column.id;
              }));
            }
          } else {
            var field = _.findWhere(fields, {id:column.command.id});
            if (field) {
              updateField(column.command, field);
            }
          }
        }
        updateColumn(column, column.command);
      });
      _.each(removedColumns, function(removedCol) {
        var ind = _.indexOf(columns, removedCol);
        columns.splice(ind, 1);
      });
    }
    var service = {};
    function putMetadatasToCache(fields) {
      _.each(fields, function(field) {
        service.putMetadataToCache(field.id, field);
      });
    }
    service.getCommandById = function(id, successCallback, failCallback) {
      if (!id) {
        throw new Error("id should be provided");
      }
      var cachedCommand = getFromCache(id);
      if (cachedCommand) {
        (successCallback || angular.noop)(cachedCommand);
      }
      var gfCategoryService = gfCategoryServiceFactory.createInstance();
      gfCategoryService.getField(id, function(response) {
        if (response) {
          service.putMetadataToCache(id, response);
          (successCallback || angular.noop)(response);
        } else {
          if (failCallback) {
            failCallback();
          }
        }
      });
    };
    service.updateGridColumns = function(columns) {
      if (!columns) {
        throw new Error("columns should be provided.");
      }
      var deffered = $q.defer(), request;
      request = getRequest(columns);
      requests.push(request);
      categoryService.getObjects(request.fieldIds, request.expressionNames, request.mfrIds, request.dataBlockIds, function(response) {
        if (requests.indexOf(request) == -1) {
          deffered.reject();
        } else {
          if (response) {
            putMetadatasToCache(response.fields ? response.fields.fields : []);
            updateColumns(columns, response);
          }
          deffered.resolve(columns);
        }
      }, undefined, false);
      return deffered.promise;
    };
    service.abortUpdateGridColumns = function() {
      requests = [];
    };
    service.clearCache = function() {
      cache = {};
    };
    service.putMetadataToCache = function(commandId, metadata) {
      cache[commandId] = metadata;
    };
    service.getSavedMultiFactorRankById = function(commandId) {
      if (!commandId) {
        throw new Error("commandId should be provided");
      }
      var deffered = $q.defer();
      gfDapsStorageProvider.load({id:commandId, type:scr.ObjectType.MultiFactorRank}, function(items, metadata, success) {
        if (success && !_.isEmpty(items)) {
          deffered.resolve(items[0]);
        } else {
          deffered.reject(new Error("Unable to get command metadata"));
        }
        $timeout(angular.noop);
      });
      return deffered.promise;
    };
    service.getExpressionByName = function(name) {
      if (!name) {
        throw new Error("name should be provided");
      }
      var deffered = $q.defer();
      gfDapsStorageProvider.load({name:name, type:scr.ObjectType.Expression}, function(items, metadata, success) {
        if (success && !_.isEmpty(items)) {
          deffered.resolve(items[0]);
        } else {
          deffered.reject(new Error("Unable to get command metadata"));
        }
        $timeout(angular.noop);
      });
      return deffered.promise;
    };
    service.getCommandMetadataById = function(commandId) {
      if (!commandId) {
        throw new Error("commandId should be provided");
      }
      var deffered = $q.defer();
      var cachedCommand = getFromCache(commandId);
      if (cachedCommand) {
        deffered.resolve(cachedCommand);
        if (!$rootScope.$$phase) {
          $rootScope.$apply();
        }
      } else {
        var gfCategoryService = gfCategoryServiceFactory.createInstance();
        gfCategoryService.getField(commandId, function(response) {
          if (response) {
            service.putMetadataToCache(commandId, response);
            deffered.resolve(response);
          } else {
            deffered.reject(new Error("Unable to get command metadata"));
          }
          if (!$rootScope.$$phase) {
            $rootScope.$apply();
          }
        });
      }
      return deffered.promise;
    };
    return service;
  }
  var services = {};
  return{get:function(id) {
    return services[id] || (services[id] = get());
  }, putMetadataToCache:function(commandId, metadata) {
    _.values(services).forEach(function(service) {
      service.putMetadataToCache(commandId, metadata);
    });
  }};
}]);
goog.provide("gridReport.model.MenuItem");
gridReport.model.MenuItem = function(options) {
  gridReport.jsUtils.mergeProperties(this, options, ["label", "action", "isDisabled", "subitems"]);
};
gridReport.model.MenuItem.prototype.label = null;
gridReport.model.MenuItem.prototype.action = null;
gridReport.model.MenuItem.prototype.isDisabled = null;
gridReport.model.MenuItem.prototype.isGrayed = function() {
  if (!this.subitems || !this.subitems.length) {
    return false;
  }
  return _(this.subitems).every(function(s) {
    return gridReport.jsUtils.getResultOrValue(s.isDisabled) || s.isGrayed();
  });
};
gridReport.model.MenuItem.prototype.subitems = [];
goog.provide("gridReport.directives.GroupingManagerController");
goog.require("gridReport.model.MenuItem");
gridReport.Module.controller("GroupingManagerController", ["$scope", "$timeout", "gfGroupableColumnsLabels", "gfGridManagementService", "gfGroupingManagerDialogService", "gfGroupStateRestoreService", "gfEventsAggregator", "$translate", function($scope, $timeout, gfGroupableColumnsLabels, gfGridManagementService, gfGroupingManagerDialogService, gfGroupStateRestoreService, gfEventsAggregator, $translate) {
  var DEFAULT_MAX_GROUPS_COUNT = 3;
  var INITIAL_MENU_MODEL = {items:[], isVisible:true, options:{position:{x:0, y:0}, width:230}};
  var selectors = {tableBody:".table-container .body"};
  var previousIsEnabledState;
  var previousGroups;
  var groupInstance;
  function initMenuItems() {
    createMenuItem("Region", "TR.HeadquartersRegion");
    var countryItem = createMenuItem("Country");
    createMenuItem("Country of Headquarters", "TR.HeadquartersCountry", countryItem);
    createMenuItem("Country of Exchange", "TR.ExchangeCountry", countryItem);
    var industryItem = createMenuItem("Industry");
    var gicsItem = createMenuItem("GICS", null, industryItem);
    var trbcItem = createMenuItem("TRBC", null, industryItem);
    createMenuItem("Business Sector", "TR.TRBCBusinessSector", trbcItem);
    createMenuItem("Economic Sector", "TR.TRBCEconomicSector", trbcItem);
    createMenuItem("Industry Group", "TR.TRBCIndustryGroup", trbcItem);
    createMenuItem("Industry Name", "TR.TRBCIndustry", trbcItem);
    createMenuItem("Sector Name", "TR.GICSSector", gicsItem);
    createMenuItem("Industry Group", "TR.GICSIndustryGroup", gicsItem);
    createMenuItem("Industry Name", "TR.GICSIndustry", gicsItem);
    createMenuItem("Sub-Industry Name", "TR.GICSSubIndustry", gicsItem);
  }
  function setGrouping(groups, isUserAction) {
    gfGridManagementService.setGrouping($scope.gridInstanceId, groups, isUserAction);
  }
  function close() {
    $scope.addCriteriaMenu.isVisible = false;
    gfGroupingManagerDialogService.closeDialog();
  }
  function save() {
    applyGroupingToGrid(true);
    groupInstance.isCriteriasEnabled = $scope.isCriteriasEnabled;
    groupInstance.criterias = $scope.criterias;
    groupInstance.save();
    if ($scope.isCriteriasEnabled) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.beginGroupApply);
    }
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.grouping});
    close();
  }
  function onAdd() {
    if (isAddCriteriaDisabled()) {
      return;
    }
    tryOffEditMode();
    $scope.addCriteriaMenu.isVisible = true;
  }
  function onEdit($event, index) {
    tryOffEditMode();
    $scope.addCriteriaMenu.isVisible = false;
    $event.stopPropagation();
    $scope.criterias[index].editMode = true;
  }
  function tryOffEditMode() {
    var criteriaInEditMode = getCriteriaInEditMode();
    if (criteriaInEditMode) {
      criteriaInEditMode.editMode = false;
    }
  }
  function onClickOutsideEditMenu() {
    tryOffEditMode();
  }
  function getCriteriasIds() {
    return _.pluck($scope.criterias, "id");
  }
  function showLoadingRows() {
    gfGridManagementService.startLoading($scope.gridInstanceId, gridReport.model.GridContentPlacement.Rows, gridReport.model.LoadingReasons.Grouping);
  }
  function applyGroupingToGrid(isUserAction) {
    var groups = getCriteriasIds();
    var hasChanges = previousIsEnabledState != $scope.isCriteriasEnabled || !_.isEqual(groups, previousGroups) && $scope.isCriteriasEnabled;
    if (hasChanges) {
      showLoadingRows();
    }
    var groupsToApply = $scope.isCriteriasEnabled ? groups : [];
    if (hasChanges) {
      setGrouping(groupsToApply, isUserAction);
      gfGridManagementService.loadData($scope.gridInstanceId, false);
    }
    previousIsEnabledState = $scope.isCriteriasEnabled;
    previousGroups = groups;
  }
  function deleteCriteria(index) {
    $scope.criterias.splice(index, 1);
    if ($scope.criterias.length == 0) {
      $scope.isCriteriasEnabled = false;
    }
  }
  function addCriteriaInternally(id, targetIndex) {
    var criteria = {id:id, header:gfGroupableColumnsLabels[id], editMode:false};
    if (_.isUndefined(targetIndex)) {
      $scope.criterias.push(criteria);
    } else {
      $scope.criterias[targetIndex] = criteria;
    }
  }
  function addCriteria(id, targetIndex) {
    addCriteriaInternally(id, targetIndex);
    if (!$scope.isCriteriasEnabled && ($scope.isCriteriasEnabled == previousIsEnabledState && (!previousGroups || previousGroups.length == 0))) {
      $scope.isCriteriasEnabled = true;
    }
  }
  function getCriteriaIndexById(id) {
    var criteria = getCriteriaById(id);
    return criteria ? _.indexOf($scope.criterias, criteria) : -1;
  }
  function getCriteriaById(id) {
    return _.findWhere($scope.criterias, {id:id});
  }
  function getCriteriaInEditMode() {
    return _.findWhere($scope.criterias, {editMode:true});
  }
  function getMenuItemAction(id) {
    return function() {
      var criterriaInEditMode = getCriteriaInEditMode();
      if (criterriaInEditMode) {
        addCriteria(id, getCriteriaIndexById(criterriaInEditMode.id));
      } else {
        addCriteria(id);
      }
    };
  }
  function createMenuItem(label, id, parentItem) {
    var action = id ? getMenuItemAction(id) : angular.noop;
    var destination = parentItem ? parentItem.subitems : $scope.menu.items;
    destination.push(new gridReport.model.MenuItem({label:label, action:action, isDisabled:function() {
      return id && getCriteriaById(id);
    }, subitems:[]}));
    return destination[destination.length - 1];
  }
  function onSortableStop(event, ui) {
    var criteriaId = ui.item.data("id");
    var oldIndex = getCriteriaIndexById(criteriaId);
    var newIndex = $scope.element.find(selectors.tableBody).children().index(ui.item);
    var criteria = $scope.criterias[oldIndex];
    deleteCriteria(oldIndex);
    $scope.criterias.splice(newIndex, 0, criteria);
    $scope.$apply();
  }
  function initSortable() {
    $scope.element.find(selectors.tableBody).sortable({axis:"y", cancel:".gf-icon, .additional", stop:onSortableStop});
  }
  function init() {
    initSortable();
    $scope.$on("$destroy", function() {
      $scope.element.find(selectors.tableBody).sortable("destroy");
    });
    if ($scope.gridInstanceId) {
      groupInstance = gfGroupStateRestoreService.instance($scope.gridInstanceId, $scope.isAutoSaveState);
      $scope.isCriteriasEnabled = groupInstance.isCriteriasEnabled;
      $scope.criterias = angular.copy(groupInstance.criterias);
    }
    previousIsEnabledState = $scope.isCriteriasEnabled;
    previousGroups = getCriteriasIds();
    initMenuItems();
  }
  function isAddCriteriaDisabled() {
    return $scope.criterias.length >= getMaxGroupsCount();
  }
  function getMaxGroupCountMessage() {
    return $translate.instant("SELECT_UP_TO_MAX_GROUPS_COUNT", {maxGroupsCount:getMaxGroupsCount()});
  }
  function getMaxGroupsCount() {
    return $scope.maxGroupsCount() || DEFAULT_MAX_GROUPS_COUNT;
  }
  function openGroupingManagerDialog() {
    gfGroupingManagerDialogService.openGroupingManagerDialog();
  }
  $scope.close = function() {
    close();
  };
  $scope.criterias = [];
  $scope.deleteCriteria = deleteCriteria;
  $scope.save = save;
  $scope.menu = angular.copy(INITIAL_MENU_MODEL);
  $scope.onEdit = onEdit;
  $scope.onClickOutsideEditMenu = onClickOutsideEditMenu;
  $scope.onAdd = onAdd;
  $scope.initSortable = initSortable;
  $scope.addCriteriaMenu = {isVisible:false};
  $scope.getMaxGroupCountMessage = getMaxGroupCountMessage;
  $scope.isAddCriteriaDisabled = isAddCriteriaDisabled;
  $scope.openGroupingManagerDialog = openGroupingManagerDialog;
  $scope.init = init;
}]);
goog.provide("gridReport.directives.GroupingManagerDirective");
goog.require("gridReport.directives.GroupingManagerController");
gridReport.Module.directive("gfGroupingManager", [function() {
  return{restrict:"E", scope:{gridInstanceId:"=", isAutoSaveState:"=", maxGroupsCount:"&"}, controller:"GroupingManagerController", templateUrl:"scripts/directives/groupingManager/GroupingManager.html", link:function(scope, element) {
    scope.element = $(element);
    scope.element.find(".gf-grouping-manager-modal").draggable({handle:".modal-header"});
    scope.init();
  }};
}]);
goog.provide("gridReport.localization.en");
gridReport.localization = gridReport.localization || {};
gridReport.localization.en = {TOGGLE:"Toggle", GROUPING:"Grouping", PRECISION:"Precision", DEFAULT:"Default", FORMAT_NO_SYMBOLS:"0", FORMAT_ONE_SYMBOLS:"0.0", FORMAT_TWO_SYMBOLS:"0.00", FORMAT_THREE_SYMBOLS:"0.000", FORMAT_FOUR_SYMBOLS:"0.0000", STATISTICS:"Statistics", ADD_COLUMN:"Add Column", EDIT_COLUMN:"Edit", REMOVE_COLUMN:"Remove", RENAME_COLUMN:"Rename", REVERT_RENAMING:"Revert Renaming", PIN:"Pin Column", UNPIN:"Unpin Column", HIDE_PARAMETERS:"Hide Parameters", SHOW_PARAMETERS:"Show Parameters", 
SELECT_ALL:"Select All", DESELECT_ALL:"Deselect All", UNGROUP:"Ungroup", NEW:"New", OBJECT_MANAGER:"Object Manager", SAVE:"Save", REVERT:"Revert", EXCLUDE:"Exclude", INCLUDE:"Include", ADDITIONAL_ACTIONS:"Additional Actions", ACTIONS:"Actions", ADD_ALL_TO_LIST:"Add All to List", ADD_SELECTED_TO_LIST:"Add Selected to List", WARNING:"Warning", OK:"OK", CANCEL:"Cancel", DONT_ASK_AGAIN:"Don't ask again", RECALL:"Recall", CLOSE:"Close", PERSONAL:"Personal Templates", GLOBAL:"Thomson Reuters Templates", 
RECENT:"Recent Templates", CUSTOM_EXPRESSIONS:"Custom Expressions", FORMAT_WAS_CHANGED_CONFIRMATION:"Would you like to save your changes to '{{name}}'?", RESULTS_WITH_COUNT:"Results ({{count}})", EXCLUDED_WITH_COUNT:"Excluded ({{count}})", ALL_SECURITIES_WITH_COUNT:"All Securities ({{count}})", IDENTIFIERS_ADDED_WITH_COUNT_INFO_MSG:"{{count}} identifier(s) added to exclusions.", IDENTIFIERS_REMOVED_WITH_COUNT_INFO_MSG:"{{count}} identifier(s) removed from exclusions.", FORMAT_WILL_BE_REVERTED_CONFIRMATION:"Format will be reverted to its initial state.", 
SEARCH:"Search", NAME:"Name", NUMBER_OF_FIELDS:"# of Fields", SHARP:"#", FIELD_NAME:"Field Name", PREVIEW:"Preview", LAST_MODIFIED:"Last Modified", IDENTIFIER:"Identifier", ERROR:"Error", INFORMATION:"Information", GROUPED_BY:"Grouped by:", SUM:"Sum", AVERAGE:"Average", MEDIAN:"Median", SERVER_SIDE:"Server side", NONE:"None", TEMPLATE_MANAGER:"Template Manager", REPORT_TEMPLATE_MANAGER:"Report Template Manager", SERVICE_UNAVAILABLE:"Service unavailable.", UNABLE_TO_LOAD_TEMPLATE:"Unable to load template.", 
UNABLE_TO_LOAD_GLOBAL_TEMPLATES:"Unable to load global templates.", UNABLE_TO_SAVE_TEMPLATE:"Unable to save template.", UNABLE_TO_LOAD_PERSONAL_TEMPLATES:"Unable to load personal templates.", UNABLE_TO_DELETE_TEMPLATE:"Unable to delete template.", UNABLE_TO_RENAME_TEMPLATE:"Unable to rename template.", UNABLE_TO_COPY_TEMPLATE:"Unable to copy template.", INVALID_CHARACTER:"Invalid character", NAME_IS_REQUIRED:"A name is required.", NEW_TEMPLATE:"New Template", SAVE_TEMPLATE:"Save Template", SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST:"Service unavailable. Please resubmit your request.", 
FAILED_TO_RESOLVE_UNIVERSE:"Failed to resolve universe.", THERE_ARE_NO_ITEMS_TO_DISPLAY:"There are no items to display.", MAX_ROWS_COUNT_EXCEEDED:"Max rows count exceeded. Expected not more than {{maxRowsCount}}.", MAX_ROWS_COUNT_EXCEEDED_INDUSTRY_MESSAGE:"The selected universe contains greater than {{maxRowsCount}} securities. Please select a more detailed universe parameter in order to view additional metrics.", RENAME:"Rename", DUPLICATE:"Duplicate", DELETE:"Delete", COLUMN_ALREADY_EXISTS:'The column "{{name}}" cannot be used because it is identical to an already existing one', 
NOT_AVAILABLE:"Not Available", NOT_AVAILABLE_ABBREVIATION:"N/A", NO_MATCHING_DATA_ITEMS:"No Matching Data Items", SEARCH_RESULTS:"Search Result", PRINT:"Print", LOAD:"Load", CREATE_TEMPLATE:"Create Template", MANAGE_TEMPLATES:"Manage Templates", UNSAVED_TEMPLATE:"Unsaved Template", CLICK_TO_VIEW_FIELDS_IN_TEMPLATE:"Click to view fields in template", SEARCH_FOR_TEMPLATES:"Search for Templates", TEMPLATE_NAME:"Template Name", NAME_ALREADY_EXISTS:"Name already exists", DO_NOT_SAVE:"Don't Save", EXPORT_ALL_AS_VALUES:"Export All as Values", 
EXPORT_ALL_AS_FORMULAS:"Export All as Formulas", EXPORT_SELECTED_AS_VALUES:"Export Selected as Values", EXPORT_SELECTED_AS_FORMULAS:"Export Selected as Formulas", OPEN_ALL_IN_QUOTE_OBJECT:"Open All in Quote Object", OPEN_SELECTED_IN_QUOTE_OBJECT:"Open Selected in Quote Object", SAVE_AS:"Save As", TEMPLATE_ALREADY_EXISTS_CONFIRMATION:"Template '{{name}}' already exists. Do you want to replace this report template?", REPORT_TEMPLATE:"Report Template", SEE_ERROR_DETAILS:"See error details", REPORT_TEMPLATE_SUCCESSFULLY_SAVED_INFO_MSG:"The report template was successfully saved.", 
MAX_LENGTH_EXCEEDED:"Max length exceeded.", ADD_SECURITY:"Add Security", TEMPLATE_DETAILS:"Template Details", CRITERIA_FOR_GROUPING_ROWS:"Criteria for grouping rows", ORDER:"Order", CRITERIA:"Criteria", ENABLE_GROUPING:"Enable Grouping", REGION:"Region", COUNTRY:"Country", INDUSTRY:"Industry", GICS:"GICS", TRBC:"TRBS", BUSINESS_SECTOR:"Business Sector", ECONOMIC_SECTROR:"Economic Sector", INDUSTRY_GROUP:"Industry Group", INDUSTRY_NAME:"Industry Name", SECTOR_NAME:"Sector Name", SUBINDUSTRY_NAME:"Sub-Industry Name", 
COUNTRY_OF_EXCHANGE:"Country of Exchange", COUNTRY_OF_HEADQURTERS:"Country of Headquarters", SELECT_FIELD:"Select field", EDIT:"Edit", GROUP_ROWS:"Group", REMOVE_ROW:"Remove", ADVANCED_SETTINGS_BUTTON_TITLE:"Advanced Settings", ADVANCED_SETTINGS_DEFAULT_CURRENCY:"Default Currency", ADVANCED_SETTINGS_NO_DEFAULT_CURRENCY:"None", ADVANCED_SETTINGS_UPDATE:"Update Report", ADVANCED_SETTINGS_CANCEL:"Cancel", STATISTICS_CONTROL_COLUMN_STATISTICS:"Statistics", STATISTICS_CONTROL_COLUMN_PREMIUM_DISCOUNT:"Premium/Discount", 
FOCUS_STOCK_FINANCIALS:"Focus Stock (Financials: {{currencyId}})", FOCUS_STOCK_PRICING:"Focus Stock (Pricing: {{currencyId}})", PRESS_REFRESH_TO_DISPLAY_NUMBER_OF_FIELDS:"Press refresh button to display number of fields.", SECURITY_ALREADY_ADDED:'The security "{{ric}}" already presents in the grid', SECURITIES_ALREADY_ADDED:'The securities "{{rics}}" already present in the grid', ADD_RANK:"Add Rank", SHOW_FACTOR_RANKS:"Show Factor Ranks", FIELD_DEFINITION:"Field Definition", THOMSON_REUTERS_EIKON_EXCEL_FUNCTION:"Thomson Reuters Eikon Excel Function", 
SUM_SYMBOL:"\u03a3", EXCLUDED:"Excluded", INCLUDE_ALL:"Include All", COMPANY_NAME:"Company Name", EXPAND_ALL:"Expand All", COLLAPSE_ALL:"Collapse All", NATIVE_CURRENCY:"Native Currency", MULTIPLE_VALUES:"Multiple values", COLUMNS_RETURN_MULTIPLE_VALUES:"The column chosen returns multiple values that cannot be rendered in a grid format", DATA_ITEM_IS_NO_LONGER_SUPPORTED:"This data item is no longer supported.", PREMIUM_DISCOUNT_TITLE:"vs. {{statisticsName}}", DISPLAY_OPTIONS:"Display Options", SMALL:"Small", 
LARGE:"Large", MEDIUM:"Medium", FONT_SIZE_AND_ROW_HEIGHT:"Font Size and Row Height", CURRENCY:"Currency", SELECT_UP_TO_MAX_GROUPS_COUNT:"Select up to {{maxGroupsCount}} items", HIGH:"High", LOW:"Low", FIRST_QAURTILE:"1st Quartile", THIRD_QAURTILE:"3rd Quartile", DISPLAYING_FACTOR_RANKS:"Displaying Factor Ranks", ADD_ALL_TO_EXISTING_LIST:"Add All to Existing List", ADD_SELECTED_TO_EXISTING_LIST:"Add Selected to Existing List", WATCHLIST_WAS_SUCCESSFULLY_UPDATED:'The watchlist "{{watchlistName}}" was successfully updated.', 
WATCHLIST_FAILED_UPDATE:'The watchlist "{{watchlistName}}" update failed.', PERSONAL_WATCHLIST_SHOULD_BE_SELECTED:"A personal watchlist should be selected.", CLEAR_ALL:"Clear All", SHOW_FACTOR_RANK:"Show Factor Rank", ADD_FIELD:"Add Field", TRANSPOSE:"Transpose", SUMMARY:"Summary", SUMMARY_STATISTICS:"Summary Statistics", VECTOR_NOT_SUPPORTED:"Is not supported in Transposed View", EXCLUDE_ALL_SELECTED:"Exclude All Selected", ENABLE_TRANSPOSE:"Enable Transpose", DISABLE_TRANSPOSE:"Disable Transpose", 
ALL:"All", SAMPLE_TEMPLATES:"Sample Templates", VIEW_MORE:"View {{count}} more", VIEW_AND_MANAGE_ALL_TEMPLATES:"View and Manage all Templates", CREATE_NEW_TEMPLATE:"Create New Template", ADVANCED_SORT:"Advanced Sort", ENABLE_ADVANCED_SORT:"Enable Advanced Sort", SORT_BY:"Sort by", ASCENDING:"Ascending", DESCENDING:"Descending", SUMMARY_ROW:"Summary Row", ELLIPSIS:"...", HEAT_MAP:"Highlight Top/Bottom Values", ADD_RANK_FOR_THIS_COLUMN:"Add rank for this column", PERCENTILE:"Percentile", DECILE:"Decile", 
QUINTILE:"Quintile", QUARTILE:"Quartile", RANK:"Rank", ZSCORE:"Z-Score", SORTING_TYPE:"Sorting Type", BY_VALUE:"By Value", BY_ABSOLUTE_VALUE:"By Absolute Value", TIME_SERIES_CHART:"Time Series Chart", TORNADO_CHART:"Tornado Chart", EXCLUDE_FROM_STATISTICS:"Exclude from Statistics", EXCLUDED_FROM_STATISTICS:"Excluded from Statistics", EXCLUDE_ALL_SELECTED_FROM_STATISTICS:"Exclude All Selected from Statistics", IMPORT_TEMPLATE:"Import Template", EXPORT_TEMPLATE:"Export Template", APPLY:"Apply", REMOVE_ALL_FILTERS:"Remove All Filters", 
UNIQUE_VALUE:"Unique Value", DEFINE_RANGE:"Define Range", TOP_BOTTOM:"Top/Bottom", CLEAR:"Clear", FROM:"From", TO:"To", NUMBER_OF_ROWS:"# of Rows", KEYWORD_SEARCH:"Keyword Search", FILTER_RESULTS:"Filter Results", INPUT_DATE:"Input date", INPUT_NUMBER:"Input number", FREEZE_FOCUS_STOCK_ON_TOP:"Freeze Focus Stock on Top", CLICK_ON_ANY_COLUMN:"Click on any column in the report to reference it in the formula", ADD_FORMULA:"Add Column Using Formula", FORMULA_EDITOR:"Formula Editor", COLUMN_N:"Column {{columnNumber}}", 
FACTOR:"Factor", LANDSCAPE:"Landscape", PORTRAIT:"Portrait", TR_COPYRIGHT:"\u00a9 {{year}} Thomson Reuters. All rights reserved.", FORMAT_CELLS:"Format Cells", DATE:"Date", NUMBER:"Number", PERCENTAGE:"Percentage", THOUSANDS_SEPARATOR:"Thousands separator", DAY_MONTHDATE_YEAR:"Day, Month Date, Year", DATE_ABBREVIATEDMONTH:"Date - Abbreviated Month", DATE_ABBREVIATEDMONYH_YEARE:"Date - Abbreviated Month - Year", MONTH_YEAR:"Month - Year", ABBREVIATEMONYH_ABBREVIATEDYEAR:"Abbreviated Month - Abbreviated Year", 
EXPORT_PDF_LANDSCAPE:"Export To PDF (Landscape)", EXPORT_PDF_PORTRAIT:"Export To PDF (Portrait)", EXPORT_PDF_FAILED:"Export to PDF failed", SHOW_ABBREVIATIONS:"true", DD_MM_YYYY:"DD/MM/YYYY", DD_MM_YYYY_F:"dd/MM/yyyy", DD_MM_YY:"DD/MM/YY", DD_MM_YY_F:"dd/MM/yy", DD_MM:"DD/MM", DD_MM_F:"dd/MM", MM_DD_YYYY:"MM/DD/YYYY", MM_DD_YYYY_F:"MM/dd/yyyy", MM_DD_YY:"MM/DD/YY", MM_DD_YY_F:"MM/dd/yy", MM_DD:"MM/DD", MM_DD_F:"MM/dd", MM_YYYY:"MM/YYYY", MM_YYYY_F:"MM/yyyy", MM_YY:"MM/YY", MM_YY_F:"MM/yy", COPY_TO_CLIPBOARD:"Copy to clipboard", 
ERROR_MESSAGE_HAS_BEEN_COPIED:"Error message has been copied to clipboard", NOTIFY_PRINT_MESSAGE:"You will also need to set your printer's local settings in order to define the layout orientation when printing.", SHARE:"Share", SHARE_WITH:"Share with", SHARED_TEMPLATES:"Shared Templates", UNABLE_TO_LOAD_SHARED_TEMPLATES:"Unable to load shared templates.", AUTHOR:"Author", SHARED_TO:"Shared to", INSER_BLANK_ROW:"Insert Blank Row", NUMBER_INPUT_VALIDATION_MESSAGE:"Value must be a number", NUMBER_OUT_OF_RANGE_VALIDATION_MESSAGE:"Value must be a number in range 0 - 100", 
T_B_FILTER_TOP_VALUE:"In Top #", T_B_FILTER_BOTTOM_VALUE:"In Bottom #", T_B_FILTER_TOP_PER:"In Top %", T_B_FILTER_BOTTOM_PER:"In Bottom %", T_B_FILTER_DEFAULT_FIELD:"Choose filter type"};
goog.provide("gridReport.directives.onEscapeDirective");
gridReport.Module.directive("onEscape", function() {
  return{link:function(scope, element, attrs) {
    element.bind("keydown", function(event) {
      if (event.which === 27) {
        scope.$apply(function() {
          scope.$eval(attrs.onEscape);
        });
        event.preventDefault();
        event.stopPropagation();
      }
    });
  }};
});
goog.provide("gridReport.directives.DatepickerDirective");
gridReport.Module.directive("gfDatepicker", ["$translate", function($translate) {
  return{restrict:"E", scope:{isEnabled:"=", date:"=", selected:"=", placeholder:"=?", dateFormat:"=?", min:"=?", max:"=?"}, template:'<input type="text" ' + 'class="gf-datepicker-container" ' + 'ng-attr-placeholder="{{placeholder}}" ' + 'style="width:100px"></input>', link:function(scope, element) {
    var $datepicker = element.find(".gf-datepicker-container");
    scope.placeholder = scope.placeholder || $translate.instant("INPUT_DATE");
    scope.dateFormat = scope.dateFormat || "mm/dd/yy";
    $datepicker.datepicker({showOn:"both", dateFormat:scope.dateFormat, firstDay:0, minDate:scope.min, maxDate:scope.max, onSelect:function() {
      scope.$apply(function() {
        scope.date = $datepicker.datepicker("getDate");
        (scope.selected || angular.noop)({date:scope.date});
      });
    }});
    scope.$watch("isEnabled", function() {
      if (scope.isEnabled !== false) {
        $datepicker.datepicker("enable");
      } else {
        $datepicker.datepicker("disable");
      }
    });
    scope.$watch("date", function() {
      $datepicker.datepicker("setDate", $.datepicker.formatDate(scope.dateFormat, scope.date));
    });
    scope.$on("$destroy", function() {
      $datepicker.datepicker("destroy");
    });
  }};
}]);
goog.provide("gridReport.model.Currency");
gridReport.model.Currency = function(currencyId, format, uid) {
  var self = this, curId = currencyId, formatCurrency = format || function(id) {
    return id;
  }, isDisabled = function(id) {
    return!id || id.length === 0;
  };
  this.disabled = isDisabled(curId);
  this.displayText = formatCurrency(curId);
  this.uid = uid;
  Object.defineProperty(this, "id", {get:function() {
    return curId;
  }, set:function(value) {
    curId = value;
    self.disabled = isDisabled(curId);
    self.displayText = formatCurrency(curId);
  }});
};
goog.provide("gridReport.services.AutoSuggestAdapterFactory");
goog.require("gridReport.Module");
gridReport.Module.service("gfAutoSuggestAdapterFactory", ["$globalFactory", function($globalFactory) {
  var service = {};
  service.create = function(query, getCurrentUniverseFunc) {
    if (scr.MetadataToAutoSuggestAdapter2 && _.isObject(query)) {
      return new scr.MetadataToAutoSuggestAdapter2($globalFactory.resolveMetadataService(), query.profile, query.apiKey, query.assetClass, getCurrentUniverseFunc);
    }
    return new scr.MetadataToAutoSuggestAdapter($globalFactory.resolveMetadataService(), query, getCurrentUniverseFunc);
  };
  return service;
}]);
goog.provide("gridReport.services.AutoSuggestServiceFactory");
goog.require("gridReport.Module");
goog.require("gridReport.services.AutoSuggestAdapterFactory");
gridReport.Module.factory("gfAutosuggestServiceFactory", ["gfAutoSuggestAdapterFactory", "gfConfig", "$translate", function(gfAutoSuggestAdapterFactory, gfConfig, $translate) {
  var service = {};
  service.createInstance = function(getCurrentUniverseContextFunc) {
    var autoSuggestAdapter = gfAutoSuggestAdapterFactory.create(gfConfig.defaultAutosuggestQueryParams, getCurrentUniverseContextFunc);
    function createTooltip(item) {
      if (item.tooltip) {
        return item.tooltip;
      }
      var tooltip = '<div style="white-space: nowrap;">' + item.name + " (" + item.path + ")" + "</div>";
      if (item.description) {
        tooltip += '<br><div style="white-space: normal;">' + item.description + "</div>";
      }
      return tooltip;
    }
    function getItems(response) {
      if (_.isArray(response)) {
        return response;
      } else {
        return response != undefined ? response.items : [];
      }
    }
    var autosuggestService = {};
    autosuggestService.search = function(keyword, callback) {
      if (keyword != null && (keyword.length !== undefined && keyword.length > 0)) {
        autoSuggestAdapter.getAutoSuggest(keyword, function(response) {
          var group = {groupName:$translate.instant("SEARCH_RESULTS"), items:[]};
          _.each(getItems(response), function(item) {
            group.items.push({text:item.name, tooltip:createTooltip(item), value:item.id, path:item.path, description:"", dataType:item.dataType});
          });
          (callback || angular.noop)([group]);
        });
      } else {
        (callback || angular.noop)([]);
      }
    };
    return autosuggestService;
  };
  return service;
}]);
goog.provide("gridReport.directives.ButtonWithContextMenuController");
gridReport.Module.controller("ButtonWithContextMenuController", ["$scope", "$timeout", function($scope, $timeout) {
  var DEFAULT_OPTIONS = {openDirection:"left"};
  function executeMenuAction($event, item) {
    if (getResultOrValue(item.disabled)) {
      $event.stopPropagation();
    } else {
      item.action();
      if ($scope.isMenuOpened()) {
        $timeout(function() {
          $(document.body).click();
        });
      }
    }
  }
  function getResultOrValue(f) {
    return _.isFunction(f) ? f() : f;
  }
  $scope.options = $.extend({}, DEFAULT_OPTIONS, $scope.options);
  $scope.executeMenuAction = executeMenuAction;
  $scope.getResultOrValue = getResultOrValue;
  $scope.buttonSelectClass = $scope.isSingleButton == true ? "button-single-select" : "button-select";
}]);
goog.provide("gridReport.controllers.DropDownFakeController");
gridReport.Module.controller("DropDownFakeController", [function() {
}]);
goog.provide("gridReport.directives.ButtonWithContextMenuDirective");
goog.require("gridReport.directives.ButtonWithContextMenuController");
goog.require("gridReport.controllers.DropDownFakeController");
gridReport.Module.directive("gfButtonWithContextMenu", [function() {
  return{restrict:"E", scope:{buttonText:"=", buttonIconClass:"=", menuItems:"=", defaultMenuItem:"=", isDisabled:"=", isSingleButton:"=", options:"="}, controller:"ButtonWithContextMenuController", templateUrl:"scripts/directives/buttonWithContextMenu/ButtonWithContextMenu.html", link:function(scope, element) {
    scope.isMenuOpened = function() {
      return $(element).find(".dropdown").hasClass("open");
    };
  }};
}]);
goog.provide("gridReport.directives.ExportToPdfContextMenuOptions");
gridReport.directives.ExportToPdfContextMenuOptions = function(options) {
  gridReport.jsUtils.mergeProperties(this, options, ["canPrintLandscape", "canPrintPortrait"]);
};
gridReport.directives.ExportToPdfContextMenuOptions.prototype.canExportLandscape = true;
gridReport.directives.ExportToPdfContextMenuOptions.prototype.canExportPortrait = true;
goog.provide("gridReport.directives.ExportToPdfDirective");
goog.require("gridReport.directives.ButtonWithContextMenuDirective");
goog.require("gridReport.directives.ExportToPdfContextMenuOptions");
gridReport.Module.directive("gfExportToPdf", [function() {
  return{restrict:"E", transclude:false, scope:{gridInstanceId:"=", isEnabled:"=", options:"=?", allTickers:"=", buttonWithMenuOptions:"=?", headerDescription:"=?", header:"=?", footer:"=?"}, replace:true, templateUrl:"scripts/directives/exportToPdf/ExportToPdf.html", controller:["$scope", "$translate", "gfGridManagementService", "gfEventsAggregator", "gfNotificationService", function($scope, $translate, gfGridManagementService, gfEventsAggregator, gfNotificationService) {
    function subscribe() {
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      aggregator.addHandler(gridReport.model.GridEvents.loadingStarted, function() {
        $scope.isDataLoading = true;
      });
      aggregator.addHandler(gridReport.model.GridEvents.loadingEnded, function() {
        $scope.isDataLoading = false;
      });
    }
    function getExportFilename() {
      var date = new Date;
      var dateString = [date.getMonthName(), date.getDate(), date.getFullYear(), date.getHours(), date.getMinutes(), date.getSeconds()].join("_");
      return "GridExport_" + dateString;
    }
    function getTitle() {
      var selectedTemplate = gfGridManagementService.getSelectedTemplate($scope.gridInstanceId), timePattern = "MMMM dd, yyyy HH:mm:ss", date;
      date = Date.now().toString(timePattern);
      return selectedTemplate ? selectedTemplate.name + " - " + date : date;
    }
    function exportToPdfAction(pageOrientation) {
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      if (pageOrientation === pdfExporter.models.PageOrientation.Landscape) {
        aggregator.raiseEvent(gridReport.model.GridEvents.exportToPdfLandscape);
      } else {
        aggregator.raiseEvent(gridReport.model.GridEvents.exportToPdfPortrait);
      }
      var title = getTitle();
      gfGridManagementService.exportToPdf($scope.gridInstanceId, {fileName:getExportFilename(), title:title, exportAll:true, printingOptions:new pdfExporter.models.PrintingOptions({pageOrientation:pageOrientation, header:$scope.header || title, headerDescription:$scope.headerDescription, footer:$scope.footer || $translate.instant("TR_COPYRIGHT", {year:(new Date).getFullYear()}), printCollapsedGroups:false, usePagedMedia:true})}).then(null, function() {
        gfNotificationService.error($translate.instant("EXPORT_PDF_FAILED"));
      });
    }
    var options = $scope.options || new gridReport.directives.ExportToPdfContextMenuOptions;
    $scope.menuItems = [{label:$translate.instant("EXPORT_PDF_LANDSCAPE"), action:function() {
      exportToPdfAction(pdfExporter.models.PageOrientation.Landscape);
    }, disabled:function() {
      return!$scope.isEnabled && $scope.isDataLoading;
    }, visible:function() {
      return options.canExportLandscape;
    }}, {label:$translate.instant("EXPORT_PDF_PORTRAIT"), action:function() {
      exportToPdfAction(pdfExporter.models.PageOrientation.Portrait);
    }, disabled:function() {
      return!$scope.isEnabled && $scope.isDataLoading;
    }, visible:function() {
      return options.canExportPortrait;
    }}];
    $scope.getDefaultMenuItem = function() {
      return $scope.menuItems[0];
    };
    $scope.isExportEnabled = function() {
      return $scope.isEnabled && (!$scope.isDataLoading && !_.isEmpty($scope.allTickers));
    };
    if ($scope.gridInstanceId) {
      subscribe();
    }
    $scope.$watch("gridInstanceId", function(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }
      subscribe();
    });
    $scope.$watch("options", function() {
      options = $scope.options || new gridReport.directives.ExportToPdfContextMenuOptions;
    });
  }]};
}]);
goog.provide("gridReport.directives.SliderDirective");
gridReport.Module.directive("gfSlider", [function() {
  return{restrict:"E", scope:{isEnabled:"=", min:"=", max:"=", slid:"&", minValue:"=?", maxValue:"=?"}, template:'<div class="gf-slider-container" style="width: 400px"></div>', link:function(scope, element) {
    var $slider = element.find(".gf-slider-container");
    var initialzied = false;
    function initSlider() {
      if (!initialzied && (scope.min != null && (scope.max != null && (scope.min != undefined && scope.max != undefined)))) {
        var values = scope.minValue != null && scope.maxValue != null ? [scope.minValue, scope.maxValue] : [scope.min, scope.max];
        $slider.slider({range:true, min:scope.min, max:scope.max, values:values, slide:function(event, ui) {
          scope.$apply(function() {
            (scope.slid || angular.noop)({values:ui.values});
          });
        }});
        initialzied = true;
        enable();
      }
    }
    function enable() {
      if (scope.isEnabled !== false) {
        $slider.slider("enable");
      } else {
        $slider.slider("disable");
      }
    }
    scope.$watch("isEnabled", function() {
      if (!initialzied) {
        return;
      }
      enable();
    });
    scope.$watch("minValue", function() {
      if (initialzied && (scope.minValue != undefined && scope.maxValue != undefined)) {
        $slider.slider("option", "values", [scope.minValue, scope.maxValue]);
      }
    });
    scope.$watch("maxValue", function() {
      if (initialzied && (scope.minValue != undefined && scope.maxValue != undefined)) {
        $slider.slider("option", "values", [scope.minValue, scope.maxValue]);
      }
    });
    scope.$watch("min", function() {
      if (scope.min != undefined) {
        initSlider();
      }
    });
    scope.$watch("max", function() {
      if (scope.max != undefined) {
        initSlider();
      }
    });
    scope.$on("$destroy", function() {
      $slider.slider("destroy");
    });
  }};
}]);
goog.provide("gridReport.directives.focusMeDirective");
gridReport.Module.directive("focusMe", ["$timeout", "$parse", function($timeout, $parse) {
  return{link:function(scope, element, attrs) {
    var model = $parse(attrs.focusMe);
    var needSelect = attrs.selected;
    scope.$watch(model, function(value) {
      if (value === true) {
        $timeout(function() {
          element[0].focus();
          if (needSelect && element.select) {
            element.select();
          }
        });
      }
    });
  }};
}]);
goog.provide("gridReport.directives.MultiFactorRankButtonDirective");
gridReport.Module.directive("gfMultiFactorRankButton", ["gfEventsAggregator", function(gfEventsAggregator) {
  return{restrict:"E", scope:{isEnabled:"=", universeContext:"=", gridInstanceId:"="}, templateUrl:"scripts/directives/multiFactorRankButton/MultiFactorRankButton.html", link:function(scope) {
    scope.openMfr = function() {
      gfEventsAggregator.getChildAggregator(scope.gridInstanceId).raiseEvent(gridReport.model.CommandEvents.showPicker, {selectedCategoryId:scr.ObjectType.MultiFactorRanks, universeContext:scope.universeContext});
    };
  }};
}]);
goog.provide("gridReport.services.gfPrintingLandscapeDialogService");
gridReport.Module.service("gfPrintingLandscapeDialogService", ["$modal", "$log", "$translate", function($modal, $log, $translate) {
  var service = {}, popup;
  service.closeDialog = function() {
    if (popup) {
      try {
        popup.close();
        popup = null;
      } catch (e) {
      }
    }
  };
  service.openDialog = function(okCallback, callbackParams) {
    var settings = {message:$translate.instant("NOTIFY_PRINT_MESSAGE"), title:$translate.instant("PRINT"), okCallback:okCallback, callbackParams:callbackParams, checkboxTitle:$translate.instant("DONT_ASK_AGAIN"), showCheckbox:true};
    service.closeDialog();
    popup = $modal.open({windowClass:"gf-notification gf-modal", templateUrl:"scripts/services/printingLandscapeDialog/PrintingLandscapeDialog.html", controller:["$scope", "$modalInstance", "settings", function($scope, $modalInstance, settings) {
      function execCallbackAndClose(callback) {
        if (callback) {
          callback(settings.callbackParams, $scope.settings.showCheckbox ? $scope.viewModel.doNotShowThisMessageAgain : undefined);
        }
        $modalInstance.close();
      }
      $scope.ok = _.partial(execCallbackAndClose, settings.okCallback);
      $scope.closeDialog = function() {
        service.closeDialog();
      };
      $scope.settings = settings;
      $scope.viewModel = {doNotShowThisMessageAgain:false};
    }], resolve:{settings:function() {
      return settings;
    }}});
    return popup;
  };
  return service;
}]);
goog.provide("gridReport.dataProvider.BaseDataProvider");
gridReport.dataProvider.BaseDataProvider = function() {
};
gridReport.dataProvider.BaseDataProvider.prototype.subscribe = function(columns) {
};
gridReport.dataProvider.BaseDataProvider.prototype.unsubscribe = function(columns) {
};
gridReport.dataProvider.BaseDataProvider.prototype.dataLoaded = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.dataLoading = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.clearData = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.startLoading = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.endLoading = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.suspend = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.resume = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.abort = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.loadData = undefined;
gridReport.dataProvider.BaseDataProvider.prototype.loadPartialData = undefined;
goog.provide("gridReport.directives.ExclusionsManagerController");
gridReport.Module.controller("ExclusionsManagerController", ["$scope", "gfExclusions", "gfStatisticsExclusions", "gfGridManagementService", "gfExclusionManagerDialogService", "$translate", function($scope, gfExclusions, gfStatisticsExclusions, gfGridManagementService, gfExclusionManagerDialogService, $translate) {
  function init() {
    updateModel();
  }
  function getService() {
    return $scope.exclusionsType == gridReport.model.ExclusionsTypes.StatisticsExclusions ? gfStatisticsExclusions.instance($scope.gridInstanceId) : gfExclusions.instance($scope.gridInstanceId);
  }
  function updateModel() {
    $scope.isWorking = true;
    var rawGridData = gfGridManagementService.getRawData($scope.gridInstanceId);
    var identifiers = _.map(rawGridData[0].values, function(v) {
      return v.rowKey;
    });
    getService().filterExclusions(identifiers);
    function getCompanyName(id) {
      return _.findWhere(rawGridData, {id:"TR.CommonName"}).values[id].value;
    }
    $scope.exclusions = _.map(getService().getExcludedIdentifiers(), function(id) {
      return{id:id, companyName:getCompanyName(id), isSelected:false};
    });
    $scope.isWorking = false;
  }
  function areEveryIdentifiersSelected() {
    return _.every($scope.exclusions, function(e) {
      return e.isSelected;
    });
  }
  function toogleSelectionForAllIdentifiers() {
    var val = !anyExclusionsSelected();
    _.each($scope.exclusions, function(e) {
      e.isSelected = val;
    });
  }
  function anyExclusionsSelected() {
    return _.some($scope.exclusions, function(e) {
      return e.isSelected;
    });
  }
  function save() {
    if (anyExclusionsSelected()) {
      var unselectedExclusions = _.where($scope.exclusions, {isSelected:false});
      getService().setExclusions(_.pluck(unselectedExclusions, "id"));
    }
    close();
  }
  function close() {
    gfExclusionManagerDialogService.closeDialog();
  }
  function getExcludedMessage() {
    return $scope.exclusionsType == gridReport.model.ExclusionsTypes.Exclusions ? $translate.instant("EXCLUDED") : $translate.instant("EXCLUDED_FROM_STATISTICS");
  }
  $scope.getExcludedMessage = getExcludedMessage;
  $scope.isWorking = false;
  $scope.exclusions = null;
  $scope.toogleSelectionForAllIdentifiers = toogleSelectionForAllIdentifiers;
  $scope.areEveryIdentifiersSelected = areEveryIdentifiersSelected;
  $scope.save = save;
  $scope.close = close;
  $scope.anyExclusionsSelected = anyExclusionsSelected;
  init();
}]);
goog.provide("gridReport.directives.ExclusionsManagerDirective");
goog.require("gridReport.directives.ExclusionsManagerController");
goog.require("gridReport.model.ExclusionsTypes");
gridReport.Module.directive("gfExclusionsManager", [function() {
  return{restrict:"E", templateUrl:"scripts/directives/exclusionsManager/ExclusionsManager.html", scope:{gridInstanceId:"=", identifiers:"=", isVisible:"=", exclusionsType:"="}, controller:"ExclusionsManagerController", link:function(scope, element) {
    scope.element = $(element).closest(".modal-dialog");
    scope.element.draggable({handle:".modal-header"});
  }};
}]);
goog.provide("gridReport.services.Exclusions");
goog.require("gridReport.model.GridEvents");
gridReport.Module.factory("gfExclusions", ["gfEventsAggregator", function(gfEventsAggregator) {
  function createService(id) {
    var exclusions = {};
    var excludedIdentifiers = [];
    function isExclusionsNotChanged(identifiers) {
      return excludedIdentifiers.length == identifiers.length && (_.difference(excludedIdentifiers, identifiers).length == 0 && _.difference(identifiers, excludedIdentifiers).length == 0);
    }
    var service = {};
    service.isHidden = function(identifier) {
      return!!exclusions[identifier];
    };
    service.setExclusions = function(identifiers) {
      if (isExclusionsNotChanged(identifiers)) {
        return;
      }
      excludedIdentifiers = identifiers;
      exclusions = _.reduce(identifiers, function(map, item) {
        map[item] = true;
        return map;
      }, {});
      gfEventsAggregator.getChildAggregator(id).raiseEvent(gridReport.model.GridEvents.identifiersExcluded, identifiers, gridReport.model.ExclusionsTypes.Exclusions);
    };
    service.getExcludedIdentifiers = function() {
      return excludedIdentifiers;
    };
    service.exclude = function(identifiers) {
      var addedToExclusion = _.difference(identifiers, excludedIdentifiers);
      if (addedToExclusion.length == 0) {
        return addedToExclusion;
      }
      service.setExclusions(_.union(excludedIdentifiers, addedToExclusion));
      return addedToExclusion;
    };
    service.removeFromExcluded = function(identifiers) {
      service.setExclusions(_.difference(excludedIdentifiers, identifiers));
    };
    service.filterExclusions = function(identifiers) {
      var currentExclusions = _.sortBy(excludedIdentifiers);
      var identifiersToExclude = _.sortBy(_.intersection(excludedIdentifiers, identifiers));
      if (_.isEqual(currentExclusions, identifiersToExclude)) {
        return;
      }
      service.setExclusions(_.intersection(excludedIdentifiers, identifiers));
    };
    return service;
  }
  var services = {};
  return{instance:function(gridInstanceId) {
    if (!services[gridInstanceId]) {
      services[gridInstanceId] = createService(gridInstanceId);
    }
    return services[gridInstanceId];
  }, clear:function(gridInstanceId) {
    if (services[gridInstanceId]) {
      delete services[gridInstanceId];
    }
  }};
}]);
goog.provide("gridReport.controllers.ExportControllerBase");
goog.require("gridReport.services.Exclusions");
gridReport.Module.controller("ExportControllerBase", ["$scope", "$translate", "gfExclusions", "gfGridManagementService", function($scope, $translate, gfExclusions, gfGridManagementService) {
  function getIdentifiersForExport(isActionForAll) {
    return isActionForAll ? gfGridManagementService.getVisibleIdentifiers($scope.gridInstanceId) : $scope.getSelectedIdentifiers();
  }
  function getDisabledFuncByCondition(isActionForAll, isDisabled) {
    return function() {
      var disabledValue = isDisabled ? isDisabled() : false;
      return disabledValue || !isActionForAll && !anyIdentifiersChecked();
    };
  }
  function getMenuItemByLabel(label) {
    return _.find($scope.menuItems, function(item) {
      return item.label == $translate.instant(label);
    });
  }
  function isDisabled() {
    var visibleIds = $scope.getVisibleIdentifiers();
    return!visibleIds || !visibleIds.length;
  }
  function anyIdentifiersChecked() {
    var selected = $scope.getSelectedIdentifiers();
    var selectedLength = selected ? selected.length : 0;
    return selectedLength > 0;
  }
  function getVisibleIdentifiers() {
    return _.filter($scope.allTickers, function(ticker) {
      return!gfExclusions.instance($scope.gridInstanceId).isHidden(ticker);
    });
  }
  function getSelectedIdentifiers() {
    return _.pluck($scope.selectedRows, "rowKey");
  }
  $scope.menuItems = [];
  $scope.getIdentifiersForExport = getIdentifiersForExport;
  $scope.getDisabledFuncByCondition = getDisabledFuncByCondition;
  $scope.addMenuItem = function(label, getAction, isActionForAll, isDisabled, isVisible) {
    $scope.menuItems.push({label:$translate.instant(label), action:getAction(isActionForAll), disabled:getDisabledFuncByCondition(isActionForAll, isDisabled), visible:isVisible});
  };
  $scope.getMenuItemByLabel = getMenuItemByLabel;
  $scope.isDisabled = isDisabled;
  $scope.anyIdentifiersChecked = anyIdentifiersChecked;
  $scope.getVisibleIdentifiers = getVisibleIdentifiers;
  $scope.getSelectedIdentifiers = getSelectedIdentifiers;
}]);
goog.provide("gridReport.directives.ExportContextMenuOptions");
gridReport.directives.ExportContextMenuOptions = function(options) {
  gridReport.jsUtils.mergeProperties(this, options, ["canExportAllAsValues", "canExportAllAsFormulas", "canExportSelectedAsFormulas", "canExportSelectedAsValues"]);
};
gridReport.directives.ExportContextMenuOptions.prototype.canExportAllAsValues = true;
gridReport.directives.ExportContextMenuOptions.prototype.canExportAllAsFormulas = true;
gridReport.directives.ExportContextMenuOptions.prototype.canExportSelectedAsFormulas = true;
gridReport.directives.ExportContextMenuOptions.prototype.canExportSelectedAsValues = true;
goog.provide("gridReport.directives.ExportToExcelController");
gridReport.Module.controller("ExportToExcelController", ["$scope", "$translate", "gfGridManagementService", "gfEventsAggregator", function($scope, $translate, gfGridManagementService, gfEventsAggregator) {
  function getExportFilename() {
    var date = new Date;
    var dateString = [date.getMonthName(), date.getDate(), date.getFullYear(), date.getHours(), date.getMinutes(), date.getSeconds()].join("_");
    return "GridExport_" + dateString;
  }
  function getTitle() {
    var selectedTemplate = gfGridManagementService.getSelectedTemplate($scope.gridInstanceId);
    return selectedTemplate ? selectedTemplate.name : undefined;
  }
  function getExportToExcelAsValuesAction(exportAll) {
    return function() {
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      if (exportAll) {
        aggregator.raiseEvent(gridReport.model.GridEvents.exportAllAsValuesToExcel);
      } else {
        aggregator.raiseEvent(gridReport.model.GridEvents.exportSelectedAsValuesToExcel);
      }
      if ($scope.overrideExportAsValues) {
        $scope.overrideExportAsValues(exportAll);
      } else {
        gfGridManagementService.exportToExcel($scope.gridInstanceId, {fileName:getExportFilename(), title:getTitle(), exportAll:exportAll});
      }
    };
  }
  function getExportToExcelAsFormulaAction(exportAll) {
    return function() {
      var selectedIdentifiersUniverse = exportAll ? null : $scope.getSelectedIdentifiers().join(",");
      var isTransposed = gfGridManagementService.isTransposed($scope.gridInstanceId);
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      if (exportAll) {
        aggregator.raiseEvent(gridReport.model.GridEvents.exportAllAsFormulaToExcel);
      } else {
        aggregator.raiseEvent(gridReport.model.GridEvents.exportSelectedAsFormulaToExcel);
      }
      if ($scope.overrideExportAsFormula) {
        $scope.overrideExportAsFormula(exportAll);
      } else {
        gfGridManagementService.exportToExcelAsFormula($scope.gridInstanceId, {fileName:getExportFilename(), universe:selectedIdentifiersUniverse, isTransposed:isTransposed});
      }
    };
  }
  function getDefaultItem() {
    if ($scope.options.canExportAllAsValues && $scope.options.canExportSelectedAsValues) {
      return $scope.anyIdentifiersChecked() ? $scope.getMenuItemByLabel("EXPORT_SELECTED_AS_VALUES") : $scope.getMenuItemByLabel("EXPORT_ALL_AS_VALUES");
    } else {
      if ($scope.options.canExportAllAsFormulas && $scope.options.canExportSelectedAsFormulas) {
        return $scope.anyIdentifiersChecked() ? $scope.getMenuItemByLabel("EXPORT_SELECTED_AS_FORMULAS") : $scope.getMenuItemByLabel("EXPORT_ALL_AS_FORMULAS");
      } else {
        return undefined;
      }
    }
  }
  function initMenu() {
    $scope.isDataLoading = false;
    $scope.addMenuItem("EXPORT_ALL_AS_VALUES", getExportToExcelAsValuesAction, true, function() {
      return $scope.isDataLoading;
    }, function() {
      return $scope.options.canExportAllAsValues;
    });
    $scope.addMenuItem("EXPORT_ALL_AS_FORMULAS", getExportToExcelAsFormulaAction, true, null, function() {
      return $scope.options.canExportAllAsFormulas;
    });
    $scope.addMenuItem("EXPORT_SELECTED_AS_VALUES", getExportToExcelAsValuesAction, false, function() {
      return $scope.isDataLoading;
    }, function() {
      return $scope.options.canExportSelectedAsValues;
    });
    $scope.addMenuItem("EXPORT_SELECTED_AS_FORMULAS", getExportToExcelAsFormulaAction, false, null, function() {
      return $scope.options.canExportSelectedAsFormulas;
    });
  }
  function subscribe() {
    var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
    aggregator.addHandler(gridReport.model.GridEvents.loadingStarted, function() {
      $scope.isDataLoading = true;
    });
    aggregator.addHandler(gridReport.model.GridEvents.loadingEnded, function() {
      $scope.isDataLoading = false;
    });
  }
  $scope.getDefaultItem = getDefaultItem;
  initMenu();
  if ($scope.gridInstanceId) {
    subscribe();
  }
  $scope.$watch("gridInstanceId", function(newVal, oldVal) {
    if (newVal === oldVal) {
      return;
    }
    subscribe();
  });
}]);
goog.provide("gridReport.directives.ExportToExcelDirective");
goog.require("gridReport.directives.ButtonWithContextMenuDirective");
goog.require("gridReport.controllers.ExportControllerBase");
goog.require("gridReport.directives.ExportToExcelController");
goog.require("gridReport.directives.ExportContextMenuOptions");
gridReport.Module.directive("gfExportToExel", [function() {
  return{restrict:"E", transclude:false, scope:{gridInstanceId:"=", buttonWithMenuOptions:"=", allTickers:"=", selectedRows:"=", isEnabled:"=", options:"=", isVisible:"=", overrideExportAsFormula:"=?", overrideExportAsValues:"=?"}, replace:true, controller:"ExportControllerBase", templateUrl:"scripts/directives/exportToExcel/ExportToExcel.html", link:function($scope, $element, attr) {
    if (attr.hasOwnProperty("isVisible")) {
      $scope.$watch("isVisible", function(value) {
        if (value) {
          $element.show();
        } else {
          $element.hide();
        }
      });
    }
  }};
}]);
goog.provide("gridReport.directives.SharingService");
gridReport.Module.service("gfSharingService", ["$q", "$http", "gfConfig", function($q, $http, gfConfig) {
  function wrapCall(call) {
    var canceller = $q.defer();
    var cancel = function(reason) {
      canceller.resolve(reason);
    };
    var promise = call({timeout:canceller.promise});
    return angular.extend(promise, {cancel:cancel});
  }
  function createGroup(groupItem) {
    return{id:groupItem.Id, name:groupItem.Name, text:groupItem.Name, shared:groupItem.Shared, sharedLabel:groupItem.ShareLabel};
  }
  function getSharingFolderName() {
    return gfConfig.sharingFolderName || "GridReportFormats";
  }
  var service = {};
  service.getGroupsToShare = function(request) {
    if (!request) {
      throw new Error("request should be provided");
    }
    return wrapCall(function(options) {
      return $http.get(gfConfig.host + "State/GroupsToShare/" + getSharingFolderName() + "/" + encodeURIComponent(request.templateName), options).then(function(data) {
        return _.map(data.data.Groups, createGroup);
      });
    });
  };
  service.share = function(request) {
    if (!request) {
      throw new Error("request should be provided");
    }
    return wrapCall(function(options) {
      var parameters = {GroupId:request.groupId};
      if (!_.isEmpty(request.templateDescription)) {
        parameters.Metadata = [{Key:"description", Value:request.templateDescription}];
      }
      return $http.post(gfConfig.host + "State/Share/" + getSharingFolderName() + "/" + encodeURIComponent(request.templateName), parameters, options).then(function(response) {
        if (response && response.data) {
          if (response.data.ErrorCode === 0) {
            return response.data.Message;
          } else {
            return $q.reject({code:response.data.ErrorCode, message:response.data.Message});
          }
        } else {
          return $q.reject();
        }
      });
    });
  };
  service.unshare = function(request) {
    if (!request) {
      throw new Error("request should be provided");
    }
    return wrapCall(function(options) {
      var parameters = {GroupId:request.groupId};
      return $http.post(gfConfig.host + "/State/Unshare/" + getSharingFolderName() + "/" + encodeURIComponent(request.templateName), parameters, options).then(function(response) {
        if (response && response.data) {
          if (response.data.ErrorCode === 0) {
            return response.data.Message;
          } else {
            return $q.reject(response.data.Message);
          }
        } else {
          return $q.reject();
        }
      });
    });
  };
  return service;
}]);
goog.provide("gridReport.directives.SharingDetailsController");
goog.require("gridReport.directives.SharingService");
gridReport.Module.controller("gfSharingDetailsController", ["$scope", "$element", "gfSharingService", "gfLogManager", function($scope, $element, gfSharingService, gfLogManager) {
  function refreshSelection() {
    $element.find(".group-selector").select2("val", _.map($scope.sharedGroups, "id"));
  }
  function stopAndRefresh() {
    $scope.stopLoading();
    refreshSelection();
  }
  function logError(error) {
    if (error != null) {
      gfLogManager.error(error);
    }
  }
  $scope.isLoading = false;
  $scope.groupsList = [];
  $scope.sharedGroups = [];
  $scope.startLoading = function() {
    $scope.isLoading = true;
  };
  $scope.stopLoading = function() {
    $scope.isLoading = false;
  };
  $scope.removeGroup = function(group) {
    $scope.startLoading();
    gfSharingService.unshare({templateName:$scope.templateName, groupId:group.id}).then(function() {
      $scope.sharedGroups = _.without($scope.sharedGroups, group);
      ($scope.onSharedStateChanged || angular.noop)({templateName:$scope.templateName, shared:!_.isEmpty($scope.sharedGroups)});
    }, function(error) {
      logError(error);
    })["finally"](function() {
      stopAndRefresh();
    });
  };
  $scope.addGroup = function(group) {
    $scope.startLoading();
    gfSharingService.share({templateName:$scope.templateName, templateDescription:$scope.templateDescription, groupId:group.id}).then(function() {
      $scope.sharedGroups.push(group);
      ($scope.onSharedStateChanged || angular.noop)({templateName:$scope.templateName, shared:!_.isEmpty($scope.sharedGroups)});
    }, function(error) {
      logError(error);
    })["finally"](function() {
      stopAndRefresh();
    });
  };
  $scope.startLoading();
  gfSharingService.getGroupsToShare({templateName:$scope.templateName}).then(function(groups) {
    _.each(groups, function(group) {
      $scope.groupsList.push(group);
      if (group.shared) {
        $scope.sharedGroups.push(group);
      }
    });
  }, function(error) {
    logError(error);
  })["finally"](function() {
    stopAndRefresh();
  });
}]);
goog.provide("gridReport.directives.SharingDetailsDirective");
goog.require("gridReport.directives.SharingDetailsController");
gridReport.Module.directive("gfSharingDetails", ["$translate", function($translate) {
  return{restrict:"E", scope:{templateName:"=", templateDescription:"=", onSharedStateChanged:"&?"}, templateUrl:"scripts/directives/sharingDetails/SharingDetails.html", controller:"gfSharingDetailsController", link:function(scope, element) {
    var select = element.find(".group-selector");
    select.select2({data:scope.groupsList, multiple:true, placeholder:$translate.instant("SHARE_WITH")});
    select.on("change", function(e) {
      if (e.added) {
        scope.addGroup(e.added);
      }
      if (e.removed) {
        scope.removeGroup(e.removed);
      }
      scope.$apply();
    });
    scope.$watch("isLoading", function() {
      select.select2(scope.isLoading == true ? "disable" : "enable");
    });
  }};
}]);
goog.provide("gridReport.filters.ValueFormatter");
gridReport.Module.filter("gfValueFormatter", [function() {
  return function(value, format) {
    if ($.jqx.dataFormat.isDate(value)) {
      return $.jqx.dataFormat.formatdate(value, format, undefined);
    } else {
      if ($.jqx.dataFormat.isNumber(value)) {
        return $.jqx.dataFormat.formatnumber(value, format, undefined);
      }
    }
    return value;
  };
}]);
goog.provide("gridReport.directives.SaveControlController");
goog.require("gridReport.services.ReportTemplatesModelFactory");
gridReport.Module.controller("gfSaveControlController", ["$scope", "$translate", "gfReportTemplatesModelFactory", function($scope, $translate, gfReportTemplatesModelFactory) {
  var defaultIcon = "gf-icon-save-template";
  var activeIcon = "gf-icon-save-template-active";
  $scope.isSaveDisabled = false;
  $scope.isSaveAsDisabled = false;
  $scope.buttonIconClass = defaultIcon;
  $scope.menuItemOptions = {openDirection:"right"};
  $scope.$watch("model.isTemplateChanged", function() {
    if ($scope.model) {
      $scope.buttonIconClass = $scope.model.isTemplateChanged ? activeIcon : defaultIcon;
      $scope.buttonIconClass += " icon-save";
    }
    updateIsSaveDisabledFlag();
  });
  $scope.$watch("model.isPersonalTemplate", function() {
    updateIsSaveDisabledFlag();
  });
  function updateIsSaveDisabledFlag() {
    if ($scope.model) {
      $scope.isSaveDisabled = !$scope.model.isPersonalTemplate || !$scope.model.isTemplateChanged;
    }
  }
  $scope.saveMenuItemClicked = function() {
    callSaveAction();
  };
  $scope.saveAsMenuItemClicked = function() {
    callSaveAsAction();
  };
  $scope.exportTemplate = function() {
    $scope.model && $scope.model["export"]();
  };
  $scope.menuItems = [{label:$translate.instant("SAVE"), action:$scope.saveMenuItemClicked, disabled:function() {
    return $scope.isSaveDisabled;
  }, visible:true}, {label:$translate.instant("SAVE_AS"), action:$scope.saveAsMenuItemClicked, disabled:function() {
    return $scope.isSaveAsDisabled;
  }, bottomDelimiter:true, visible:true}, {label:$translate.instant("EXPORT_TEMPLATE"), action:$scope.exportTemplate, disabled:function() {
    return $scope.isSaveAsDisabled;
  }, visible:true}];
  function callSaveAction() {
    var onSaveCallback = $scope.onSave();
    if (onSaveCallback) {
      onSaveCallback();
    } else {
      if ($scope.model) {
        $scope.model.save();
      }
    }
  }
  function callSaveAsAction() {
    var onSaveAsCallback = $scope.onSaveAs();
    if (onSaveAsCallback) {
      onSaveAsCallback();
    } else {
      if ($scope.model) {
        $scope.model.saveAs();
      }
    }
  }
  function getMenuItemByLabel(label) {
    return _.find($scope.menuItems, function(item) {
      return item.label == $translate.instant(label);
    });
  }
  $scope.getDefaultMenuItem = function() {
    if ($scope.model) {
      if ($scope.isSaveDisabled && !$scope.isSaveAsDisabled) {
        return getMenuItemByLabel("SAVE_AS");
      } else {
        if (!$scope.isSaveDisabled) {
          return getMenuItemByLabel("SAVE");
        }
      }
    }
    return undefined;
  };
  $scope.$watch("gridInstanceId", function() {
    setModel($scope.gridInstanceId);
  });
  $scope.$watch("universeContext", function() {
    if ($scope.model) {
      $scope.model.setUniverseContext($scope.universeContext);
    }
  });
  function setModel(gridInstanceId) {
    if (gridInstanceId) {
      $scope.model = gfReportTemplatesModelFactory.getReportTemplateModel($scope.gridInstanceId);
      $scope.model.setUniverseContext($scope.universeContext);
    }
  }
  setModel($scope.gridInstanceId);
}]);
goog.provide("gridReport.directives.SaveControlDirective");
goog.require("gridReport.directives.SaveControlController");
gridReport.Module.directive("gfSaveControl", [function() {
  return{restrict:"E", scope:{gridInstanceId:"=", isEnabled:"=", onSave:"&", onSaveAs:"&", universeContext:"="}, templateUrl:"scripts/directives/saveControl/SaveControl.html", controller:"gfSaveControlController"};
}]);
goog.provide("gridReport.directives.ObjectNameDirective");
gridReport.Module.directive("gfObjectName", ["$compile", "gfDapsService", "gfConfig", function($compile, gfDapsService, gfConfig) {
  return{restrict:"AC", require:"ngModel", link:function(scope, elm, attrs, ctrl) {
    var forbiddenNames = gfConfig.reservedTemplateNames || [];
    function checkValue(viewValue) {
      var errMsg = "";
      if (!_.isString(viewValue)) {
        viewValue = "";
      }
      var lcText = viewValue.toLowerCase();
      var fn = $.extend([], forbiddenNames);
      for (var i = 0;i < fn.length;++i) {
        var fname = fn[i].toLowerCase();
        if (lcText == fname) {
          errMsg = "Name" + " '" + viewValue + "' is a reserved name.";
        }
      }
      if (!errMsg) {
        errMsg = gfDapsService.getNameValidationMessage(viewValue);
      }
      if (errMsg) {
        ctrl.$setValidity("objectName", false);
        ctrl.errorMsg = errMsg;
        return undefined;
      }
      ctrl.$setValidity("objectName", true);
      return viewValue;
    }
    ctrl.$parsers.unshift(function(viewValue) {
      return checkValue(viewValue);
    });
    ctrl.$formatters.push(function(value) {
      var result = checkValue(value);
      if (result == undefined) {
        return value;
      }
      return result;
    });
  }};
}]);
goog.provide("gridReport.services.gfGroupingManagerDialogService");
gridReport.Module.service("gfGroupingManagerDialogService", ["$modal", "$log", "$translate", function($modal, $log, $translate) {
  var service = {}, popup;
  service.closeDialog = function() {
    if (popup) {
      try {
        popup.close();
        popup = null;
      } catch (e) {
      }
    }
  };
  service.openGroupingManagerDialog = function(gridInstanceId, isAutoSaveState, maxGroupsCount) {
    var settings = {gridInstanceId:gridInstanceId, isAutoSaveState:isAutoSaveState, maxGroupsCount:maxGroupsCount};
    service.closeDialog();
    popup = $modal.open({windowClass:"gf-grouping-manager-modal gf-modal", templateUrl:"scripts/services/groupingManagerDialog/GroupingManagerDialog.html", controller:["$scope", "$modalInstance", "settings", function($scope, $modalInstance, settings) {
      $scope.settings = settings;
    }], resolve:{settings:function() {
      return settings;
    }}});
    return popup;
  };
  return service;
}]);
goog.provide("gridReport.model.RowSectorData");
gridReport.model.RowSectorData = function(classificationId, sectorId) {
  this.classificationId = classificationId;
  this.sectorId = sectorId;
};
goog.provide("gridReport.model.ColumnValue");
goog.require("gridReport.model.RowSectorData");
gridReport.model.ColumnValue = function(rowKey, value, sectors, curn, properties, isPublic) {
  this.rowKey = rowKey;
  this.value = value;
  this.sectors = sectors || [];
  this.curn = curn;
  this.properties = properties;
  this.isPublic = isPublic;
};
gridReport.model.ColumnValue.prototype.rowKey = undefined;
gridReport.model.ColumnValue.prototype.value = undefined;
gridReport.model.ColumnValue.prototype.sectors = undefined;
gridReport.model.ColumnValue.prototype.curn = undefined;
gridReport.model.ColumnValue.prototype.properties = undefined;
gridReport.model.ColumnValue.prototype.isPublic = undefined;
goog.provide("gridReport.directives.AutosuggestDirective");
goog.require("gridReport.services.AutoSuggestServiceFactory");
goog.require("gridReport.services.CategoryServiceFactory");
gridReport.Module.directive("gfAutosuggest", ["$translate", "gfCategoryServiceFactory", "gfAutosuggestServiceFactory", "gfEventsAggregator", "gfDataCloudCommandService", "gfConfig", function($translate, gfCategoryServiceFactory, gfAutosuggestServiceFactory, gfEventsAggregator, gfDataCloudCommandService, gfConfig) {
  return{restrict:"E", replace:true, template:"<div></div>", scope:{isEnabled:"=", universeContext:"=", gridInstanceId:"=", attachToBody:"=?", onGetFocus:"&?", onLostFocus:"&?"}, link:function(scope, element, attrs) {
    function getCurrentUniverseContext() {
      return scope.universeContext == scr.UniverseType.Private ? "&u=PVT" : scr.UniverseType.Public ? "&u=PUB" : "&u=PUB&u=PVT";
    }
    var categoryService = gfCategoryServiceFactory.createInstance();
    var autosuggestService = gfAutosuggestServiceFactory.createInstance(getCurrentUniverseContext);
    var control = new scr.control.GroupComboBox({showItemsOnButtonClick:false, width:167, placeHolderText:attrs.placeHolderText || $translate.instant("ADD_COLUMN"), dataRequestOnEveryKey:true, popUpOffsetY:6, popUpHeight:100, popUpWidth:300, showEllipsis:true, emptyMessage:$translate.instant("NO_MATCHING_DATA_ITEMS"), renderAsSibling:!scope.attachToBody});
    control.isScreenFilterCombo = true;
    control.render(element);
    element.addClass(attrs["class"]);
    control.getDataRequestEvent().listen(function() {
      autosuggestService.search(control.getText(), function(data) {
        control.setData(data, true);
      });
    }, this);
    var throttledFieldSelection = _.throttle(function() {
      var selecteItem = control.getSelectedItem().originalItem;
      var addField = function(currentField) {
        if (currentField.isBrokerWithoutValue && currentField.isBrokerWithoutValue()) {
          gfEventsAggregator.getChildAggregator(scope.gridInstanceId).raiseEvent(gridReport.model.CommandEvents.showPicker, {mode:"search", universeContext:scope.universeContext, initialCommand:gridReport.model.Command.convert(currentField, gfConfig.enableAudit), openAddWithCommand:true, gridInstanceId:scope.gridInstanceId});
          return;
        }
        gfEventsAggregator.getChildAggregator(scope.gridInstanceId).raiseEvent(gridReport.model.InternalEvents.addCommand, {command:gridReport.model.Command.convert(currentField, gfConfig.enableAudit), isUserTriggered:true, isFromUDIP:false});
      };
      switch(selecteItem.dataType) {
        case scr.ObjectType.Expression:
          gfDataCloudCommandService.get(scope.gridInstanceId).getExpressionByName(selecteItem.value).then(function(field) {
            addField(new scr.output.Custom(field));
          });
          break;
        case scr.ObjectType.MultiFactorRank:
          gfDataCloudCommandService.get(scope.gridInstanceId).getSavedMultiFactorRankById(selecteItem.value).then(function(field) {
            addField(field);
          });
          break;
        default:
          var code = selecteItem.value;
          categoryService.getField(code, function(fieldMetadata) {
            var field = new scr.output.Field(fieldMetadata);
            if (scope.universeContext === scr.UniverseType.PublicPrivate) {
              (scr.output.Item.applyAvailTransform || angular.noop)(field);
            }
            addField(field);
          });
      }
      control.clearSearch();
    }, 2E3);
    control.getSelectedIndexChangedEvent().listen(function() {
      throttledFieldSelection();
    }, this);
    control.getButtonClickedEvent().listen(function() {
      gfEventsAggregator.getChildAggregator(scope.gridInstanceId).raiseEvent(gridReport.model.CommandEvents.showPicker, {mode:"search", text:control.getText(), universeContext:scope.universeContext, gridInstanceId:scope.gridInstanceId});
    }, this);
    control.getInputClickedEvent().listen(function() {
      control.focusInput();
    }, this);
    control.getInputFocusedEvent().listen(function() {
      control.hidePopUp();
      (scope.onGetFocus || angular.noop)({});
    }, this);
    control.getCancelEditEvent().listen(function() {
      control.clearSearch();
      control.clearError();
    }, this);
    control.getBluredEvent().listen(function() {
      control.clearSearch();
      control.clearError();
      (scope.onLostFocus || angular.noop)({});
    });
    control.getTextChangedEvent().listen(function() {
      gfEventsAggregator.getChildAggregator(scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.qdipTextChanged);
    });
    scope.$on("$destroy", function() {
      control.dispose();
    });
    scope.$watch("isEnabled", function(newValue) {
      control.setIsEnabled(newValue);
    });
    element.css("float", "initial");
  }};
}]);
goog.provide("gridReport.directives.AdvancedControlsContextMenuOptions");
gridReport.directives.AdvancedControlsContextMenuOptions = function(options) {
  gridReport.jsUtils.mergeProperties(this, options);
};
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeStatistics = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeCurrency = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeDisplayOptions = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeTotalsRowSwitch = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeTransposeSwitch = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeAdvancedSortingManager = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeHeatMapSwitch = true;
gridReport.directives.AdvancedControlsContextMenuOptions.prototype.canSeeRemoveAllFilters = true;
goog.provide("gridReport.model.CustomAdvancedMenuOption");
gridReport.model.CustomAdvancedMenuOptionType = {switchBtn:"switch", mainBtn:"main", menuBtn:"menu"};
gridReport.model.CustomAdvancedMenuOption = function(options) {
  _.extend(this, options);
};
gridReport.model.CustomAdvancedMenuOption.prototype.type = gridReport.model.CustomAdvancedMenuOptionType.switchBtn;
gridReport.model.CustomAdvancedMenuOption.prototype.label = "";
gridReport.model.CustomAdvancedMenuOption.prototype.inEnabledState = false;
gridReport.model.CustomAdvancedMenuOption.prototype.visible = true;
gridReport.model.CustomAdvancedMenuOption.prototype.action = null;
gridReport.model.CustomAdvancedMenuOption.prototype.bottomDelimiter = false;
gridReport.model.CustomAdvancedMenuOption.prototype.disabled = false;
goog.provide("gridReport.directives.CurrencyDialogController");
gridReport.Module.controller("gfCurrencyDialogController", ["$scope", "$timeout", "$modalInstance", "gfGridManagementService", "gridInstanceId", "options", function($scope, $timeout, $modalInstance, gfGridManagementService, gridInstanceId, options) {
  $scope.gridInstanceId = gridInstanceId;
  $scope.model = {customCurrencies:options.customCurrencies};
  $scope.model.currency = getSelectedCurrencyFromGrid();
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.ok = function() {
    $scope.closeDialog();
    $timeout(function() {
      updateCurrency($scope.model.currency);
    });
  };
  function updateCurrency(currency) {
    var globalParams = gfGridManagementService.getGlobalParameters($scope.gridInstanceId) || [];
    globalParams = _.filter(globalParams, function(p) {
      return p.name != "curn";
    });
    if (currency) {
      globalParams.push({name:"curn", value:currency.id, uid:currency.uid, displayName:currency.name});
    }
    gfGridManagementService.setGlobalParameters($scope.gridInstanceId, globalParams);
    gfGridManagementService.loadData($scope.gridInstanceId, true);
  }
  function getSelectedCurrencyFromGrid() {
    var globalParams = gfGridManagementService.getGlobalParameters($scope.gridInstanceId) || [];
    var currencyParameter = _.findWhere(globalParams, {name:"curn"});
    return currencyParameter ? {id:currencyParameter.value, uid:currencyParameter.uid} : null;
  }
}]);
goog.provide("gridReport.directives.CurrencyDialogService");
goog.require("gridReport.directives.CurrencyDialogController");
gridReport.Module.service("gfCurrencyDialogService", ["$modal", function($modal) {
  var service = {};
  service.openDialog = function(gridInstanceId, options) {
    return $modal.open({templateUrl:"scripts/directives/advancedControls/currencyDialog/CurrencyDialog.html", controller:"gfCurrencyDialogController", windowClass:"gf-modal", resolve:{gridInstanceId:function() {
      return gridInstanceId;
    }, options:function() {
      return options;
    }}});
  };
  return service;
}]);
goog.provide("gridReport.directives.Themes");
gridReport.Module.factory("gfThemes", ["$translate", function($translate) {
  var themes = [{name:$translate.instant("SMALL"), value:new gridReport.model.GridTheme({theme:"solar-small", rowsHeight:18})}, {name:$translate.instant("MEDIUM"), value:new gridReport.model.GridTheme({theme:"solar-medium", rowsHeight:27})}, {name:$translate.instant("LARGE"), value:new gridReport.model.GridTheme({theme:"solar-large", rowsHeight:32})}];
  var service = {};
  service.getThemes = function() {
    return themes;
  };
  service.setThemes = function(th) {
    themes = th;
  };
  return service;
}]);
goog.provide("gridReport.directives.DisplayOptionsDialogController");
goog.require("gridReport.directives.Themes");
gridReport.Module.controller("gfDisplayOptionsDialogController", ["$scope", "$timeout", "$modalInstance", "gridInstanceId", "gfGridManagementService", "gfThemes", "gfEventsAggregator", function($scope, $timeout, $modalInstance, gridInstanceId, gfGridManagementService, gfThemes, gfEventsAggregator) {
  $scope.model = {theme:gfGridManagementService.getTheme(gridInstanceId), themes:gfThemes.getThemes()};
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.ok = function() {
    $scope.closeDialog();
    $timeout(function() {
      gfGridManagementService.setTheme(gridInstanceId, $scope.model.theme);
      gfEventsAggregator.getChildAggregator(gridInstanceId).raiseEvent(gridReport.model.GridEvents.displayOptionsChanged);
    }, 200);
  };
  $scope.selectTheme = function(theme) {
    $scope.model.theme = theme;
  };
}]);
goog.provide("gridReport.directives.DisplayOptionsDialogService");
goog.require("gridReport.directives.DisplayOptionsDialogController");
gridReport.Module.service("gfDisplayOptionsDialogService", ["$modal", function($modal) {
  var service = {};
  service.openDialog = function(gridInstanceId) {
    return $modal.open({templateUrl:"scripts/directives/advancedControls/displayOptionsDialog/DisplayOptionsDialog.html", controller:"gfDisplayOptionsDialogController", windowClass:"gf-modal", resolve:{gridInstanceId:function() {
      return gridInstanceId;
    }}});
  };
  return service;
}]);
goog.provide("gridReport.directives.StatisticsDialogController");
gridReport.Module.controller("gfStatisticsDialogController", ["$scope", "$timeout", "$modalInstance", "gridInstanceId", "options", "gfGridManagementService", function($scope, $timeout, $modalInstance, gridInstanceId, options, gfGridManagementService) {
  $scope.gridInstanceId = gridInstanceId;
  $scope.model = {algorithms:null, showPremiumDiscount:options.showPremiumDiscount};
  function getSelectedAlgorithms(algorithms) {
    var result = [];
    angular.forEach(algorithms, function(algorithm) {
      if (algorithm.selected) {
        result.push(algorithm);
      }
    });
    return result;
  }
  function updateStatistics(algorithms) {
    gfGridManagementService.setStatistics($scope.gridInstanceId, algorithms);
  }
  $scope.ok = function() {
    $scope.closeDialog();
    $timeout(function() {
      updateStatistics(getSelectedAlgorithms($scope.model.algorithms));
    });
  };
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
}]);
goog.provide("gridReport.directives.StatisticsDialogService");
goog.require("gridReport.directives.StatisticsDialogController");
gridReport.Module.service("gfStatisticsDialogService", ["$modal", function($modal) {
  var service = {};
  service.openDialog = function(gridInstanceId, options) {
    return $modal.open({templateUrl:"scripts/directives/advancedControls/statisticsDialog/StatisticsDialog.html", controller:"gfStatisticsDialogController", windowClass:"gf-modal", resolve:{gridInstanceId:function() {
      return gridInstanceId;
    }, options:function() {
      return options;
    }}});
  };
  return service;
}]);
goog.provide("gridReport.directives.AdvancedControlsController");
goog.require("gridReport.Module");
goog.require("gridReport.services.AggregatesAlgorithmsService");
goog.require("gridReport.directives.CurrencyDialogService");
goog.require("gridReport.directives.StatisticsDialogService");
goog.require("gridReport.directives.DisplayOptionsDialogService");
goog.require("gridReport.model.CustomAdvancedMenuOption");
gridReport.Module.controller("gfAdvancedControlsController", ["$scope", "$translate", "gfCurrencyDialogService", "gfDisplayOptionsDialogService", "gfStatisticsDialogService", "gfGridManagementService", "gfEventsAggregator", "gfAdvancedSortingManagerService", "$timeout", function($scope, $translate, gfCurrencyDialogService, gfDisplayOptionsDialogService, gfStatisticsDialogService, gfGridManagementService, gfEventsAggregator, gfAdvancedSortingManagerService, $timeout) {
  $scope.menuItemOptions = {openDirection:"left"};
  $scope.statisticsMenuItemClicked = function() {
    gfStatisticsDialogService.openDialog($scope.gridInstanceId, {showPremiumDiscount:$scope.showPremiumDiscount});
  };
  $scope.currencyMenuItemClicked = function() {
    gfCurrencyDialogService.openDialog($scope.gridInstanceId, {customCurrencies:$scope.customCurrencies});
  };
  $scope.displayOptionsMenuItemClicked = function() {
    gfDisplayOptionsDialogService.openDialog($scope.gridInstanceId);
  };
  $scope.getResultOrValue = function(f) {
    return gridReport.jsUtils.getResultOrValue(f);
  };
  var menuBtns = getMenuMainButtons().concat(getMenuSwitches(), getMenuButtons());
  if ($scope.beforeItemsAppliedCallback && $scope.beforeItemsAppliedCallback()) {
    $scope.beforeItemsAppliedCallback()(menuBtns);
  }
  $scope.menuButtons = menuBtns;
  $scope.executeItemAction = executeItemAction;
  function executeItemAction($event, item, isSwitch) {
    if (gridReport.jsUtils.getResultOrValue(item.disabled)) {
      $event.stopPropagation();
    } else {
      if (isSwitch && item.inEnabledState) {
        item.action(!item.inEnabledState());
      } else {
        item.action();
      }
      if ($scope.isMenuOpened()) {
        $timeout(function() {
          $(document.body).click();
        });
      }
    }
  }
  function isTotalsRowVisible() {
    return gfGridManagementService.totalsRowVisible($scope.gridInstanceId);
  }
  function isTransposed() {
    return gfGridManagementService.isTransposed($scope.gridInstanceId);
  }
  function transposeGrid() {
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.beginTranspose);
    $timeout(function() {
      gfGridManagementService.transpose($scope.gridInstanceId);
    });
  }
  function openAdvancedSortingManager() {
    gfAdvancedSortingManagerService.openDialog($scope.gridInstanceId);
  }
  function getMenuSwitches() {
    var res = [];
    res.push({label:$translate.instant("SUMMARY_ROW"), inEnabledState:isTotalsRowVisible, disabled:function() {
      return!$scope.options.canSeeTotalsRowSwitch;
    }, visible:function() {
      return $scope.options.canSeeTotalsRowSwitch;
    }, action:function(value) {
      gfGridManagementService.totalsRowVisible($scope.gridInstanceId, value);
    }, bottomDelimiter:!$scope.options.canSeeHeatMapSwitch && !$scope.options.canSeeTransposeSwitch});
    res.push({label:$translate.instant("TRANSPOSE"), inEnabledState:isTransposed, disabled:false, visible:$scope.options.canSeeTransposeSwitch, action:transposeGrid, bottomDelimiter:!$scope.options.canSeeHeatMapSwitch});
    res.push({label:$translate.instant("HEAT_MAP"), inEnabledState:isHeatMapEnabled, disabled:false, visible:function() {
      return $scope.options.canSeeHeatMapSwitch;
    }, action:switchHeatMap, bottomDelimiter:$scope.options.canSeeHeatMapSwitch && !$scope.options.canSeeRemoveAllFilters});
    res.push({label:$translate.instant("REMOVE_ALL_FILTERS"), disabled:isRemoveAllFiltersDisabled, visible:function() {
      return $scope.options.canSeeRemoveAllFilters;
    }, action:removeAllFilters, bottomDelimiter:$scope.options.canSeeRemoveAllFilters});
    return res;
  }
  function isHeatMapEnabled() {
    var heatMapState = gfGridManagementService.heatMapState($scope.gridInstanceId);
    return heatMapState && heatMapState.isEnabled;
  }
  function isRemoveAllFiltersDisabled() {
    return!_.any(gfGridManagementService.getColumns($scope.gridInstanceId), function(column) {
      return column.isFilterApplied();
    });
  }
  function switchHeatMap(value) {
    var state = gfGridManagementService.heatMapState($scope.gridInstanceId);
    if (state) {
      state.isEnabled = value;
    }
    gfGridManagementService.heatMapState($scope.gridInstanceId, state);
    gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.heatMapChanged, state);
  }
  function removeAllFilters() {
    $timeout(function() {
      gfGridManagementService.removeAllFilters($scope.gridInstanceId);
    });
  }
  function traslateWithEllipsis(key) {
    return $translate.instant(key) + $translate.instant("ELLIPSIS");
  }
  function getMenuButtons() {
    var menuButtons = [];
    menuButtons.push({label:traslateWithEllipsis("STATISTICS"), action:$scope.statisticsMenuItemClicked, disabled:function() {
      return $scope.isStatisticsDisabled;
    }, visible:function() {
      return $scope.options.canSeeStatistics;
    }});
    menuButtons.push({label:traslateWithEllipsis("CURRENCY"), action:$scope.currencyMenuItemClicked, disabled:function() {
      return $scope.isCurrencyDisabled;
    }, visible:function() {
      return $scope.options.canSeeCurrency;
    }});
    menuButtons.push({label:traslateWithEllipsis("DISPLAY_OPTIONS"), action:$scope.displayOptionsMenuItemClicked, disabled:function() {
      return $scope.isDisplayOptionsDisabled;
    }, visible:function() {
      return $scope.options.canSeeDisplayOptions;
    }});
    return menuButtons;
  }
  function getMenuMainButtons() {
    var menuMainButtons = [];
    menuMainButtons.push({label:traslateWithEllipsis("ADVANCED_SORT"), action:openAdvancedSortingManager, disabled:function() {
      return isTransposed() || !$scope.options.canSeeAdvancedSortingManager;
    }, visible:function() {
      return $scope.options.canSeeAdvancedSortingManager;
    }, bottomDelimiter:true});
    return menuMainButtons;
  }
}]);
goog.provide("gridReport.directives.AdvancedControls");
goog.require("gridReport.Module");
goog.require("gridReport.directives.AdvancedControlsController");
goog.require("gridReport.directives.AdvancedControlsContextMenuOptions");
gridReport.Module.directive("gfAdvancedControls", [function() {
  return{restrict:"E", replace:true, scope:{gridInstanceId:"=", customCurrencies:"=", showPremiumDiscount:"=", isEnabled:"=", beforeItemsAppliedCallback:"&", options:"="}, templateUrl:"scripts/directives/advancedControls/AdvancedControls.html", controller:"gfAdvancedControlsController", link:function(scope, element) {
    scope.isMenuOpened = function() {
      return $(element).find(".dropdown").hasClass("open");
    };
  }};
}]);
goog.provide("gridReport.directives.NumberInputDirective");
gridReport.Module.directive("gfNumberInput", ["$translate", function($translate) {
  return{restrict:"E", scope:{value:"=", max:"=", min:"=", placeholder:"=?", isEnabled:"="}, template:"<input gf-number-input-format " + 'ng-disabled="{{!isEnabled}}"' + 'class="gf-number-input" ' + 'type="text" ' + 'gf-decimals="2" ' + 'gf-min="min" ' + 'gf-max="max" ' + 'ng-attr-placeholder="{{placeholder}}" ' + 'ng-model="value"></input>', link:function(scope) {
    scope.placeholder = scope.placeholder || $translate.instant("INPUT_NUMBER");
  }};
}]);
goog.provide("gridReport.services.MultiFactorRankConverter");
goog.require("gridReport.utils.CommandHelper");
gridReport.Module.factory("gfMultiFactorRankConverter", ["$translate", "gfCommandHelper", function($translate, gfCommandHelper) {
  var service = {};
  service.createMultiFactorRankCommand = function(gridColumn, options) {
    var metadata = getMetadata(gridColumn, options.methodology), formattingInfo = gridReport.services.MultiFactorRankToCommandConverter.getFormattingInfo(options);
    if (options.hasOwnProperty("isBasedOnColumn")) {
      metadata.isBasedOnColumn = options.isBasedOnColumn;
    }
    return new gridReport.model.Command({id:metadata.id, name:metadata.name, expression:metadata.adcSyntax + "/*" + metadata.name + "*/", dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, metadata:metadata, defaultOrder:scr.mfr.Order.LowerIsBetter, parameters:[], returnType:formattingInfo.returnType, decimalDigits:formattingInfo.decimalDigits, factors:[getFactor(gridColumn.command)]});
  };
  return service;
  function getMethodologyName(methodology) {
    switch(methodology) {
      case scr.mfr.MFMethodology.PercentileScoring:
        return $translate.instant("PERCENTILE");
      case scr.mfr.MFMethodology.DecileScoring:
        return $translate.instant("DECILE");
      case scr.mfr.MFMethodology.QuintileScoring:
        return $translate.instant("QUINTILE");
      case scr.mfr.MFMethodology.OuartileScoring:
        return $translate.instant("QUARTILE");
      case scr.mfr.MFMethodology.NScoring:
        return $translate.instant("RANK");
      case scr.mfr.MFMethodology.ZScores:
        return $translate.instant("ZSCORE");
      default:
        throw new Error("unknown methodology");;
    }
  }
  function getExpressionWithoutName(expression, methodology, returnType) {
    return "GRANK(Factor(" + gfCommandHelper.getDecoratedExpression(expression, returnType) + ", SortOrder=desc, optionIfNullFactor=ExclEntity, weight=1, UseRawAsFactor=False), RankType=" + getAdcMethodologyCode(methodology) + ', Universe="univ")';
  }
  function getAdcMethodologyCode(methodology) {
    switch(methodology) {
      case scr.mfr.MFMethodology.PercentileScoring:
        return scr.mfr.ADC.MFMethodology.PercentileScoring;
      case scr.mfr.MFMethodology.DecileScoring:
        return scr.mfr.ADC.MFMethodology.DecileScoring;
      case scr.mfr.MFMethodology.QuintileScoring:
        return scr.mfr.ADC.MFMethodology.QuintileScoring;
      case scr.mfr.MFMethodology.OuartileScoring:
        return scr.mfr.ADC.MFMethodology.OuartileScoring;
      case scr.mfr.MFMethodology.NScoring:
        return scr.mfr.ADC.MFMethodology.NScoring;
      case scr.mfr.MFMethodology.ZScores:
        return scr.mfr.ADC.MFMethodology.ZScores;
      default:
        throw new Error("unknown methodology");;
    }
  }
  function getMetadata(gridColumn, methodology) {
    return{adcSyntax:getExpressionWithoutName(gridColumn.command.expression, methodology, gridColumn.command.returnType), currency:"Default", methodology:methodology, nTileOrder:scr.mfr.MFNTileOrder.Ascending, name:gridColumn.header + " " + getMethodologyName(methodology), partitionBy:"None", type:"multifactorrank", universe:scr.mfr.RankAgainst.CurrentUniverse, universeMetadata:null, factors:[{field:angular.copy(gridColumn.command.metadata), ifNotAvailable:scr.mfr.FactorIfNA.ExcludeSecurities, order:scr.mfr.Order.LowerIsBetter, 
    useRaw:false, weight:1}]};
  }
  function getFactor(command) {
    return new gridReport.model.Command({dataProviderId:command.dataProviderId, defaultOrder:command.defaultOrder, expression:command.expression, id:command.id, name:command.name, returnType:command.returnType, parameters:_.map(command.parameters, function(param) {
      return new gridReport.model.CommandParameter(param);
    }), metadata:{field:angular.copy(command.metadata), ifNotAvailable:scr.mfr.FactorIfNA.ExcludeSecurities, order:command.defaultOrder, useRaw:false, weight:1}});
  }
}]);
goog.provide("gridReport.directives.Select2Directive");
goog.require("gridReport.Module");
gridReport.Module.directive("gfSelect2", ["$timeout", function($timeout) {
  return{restrict:"E", scope:{selectList:"=", isEnabled:"=?", value:"=?", placeholder:"@?", onChange:"&?", resetOnChange:"=?"}, template:'<div class="selector"  style="width: 100%;"></div>', link:function(scope, element) {
    var select = element.find(".selector");
    select.select2({placeholder:scope.placeholder, data:scope.selectList});
    select.on("change", function(event) {
      if (scope.onChange && (_.isFunction(scope.onChange) && (_.isFunction(scope.onChange()) && event.added))) {
        scope.onChange()(event.added);
        if (scope.resetOnChange) {
          select.select2("val", "");
        }
        $timeout(angular.noop);
      }
    });
    scope.$watch("selectList", function(newValue, oldValue) {
      select.select2({placeholder:scope.placeholder, data:newValue});
    });
    scope.$watch("value", function(newValue, oldValue) {
      select.select2("val", newValue);
    });
  }};
}]);
goog.provide("gridReport.directives.CurrencyController");
goog.require("gridReport.Module");
gridReport.Module.controller("gfCurrencyController", ["$scope", "gfCurrencies", "gfSystemCurrenciesService", function($scope, gfCurrencies, gfSystemCurrenciesService) {
  var favorites = ["USD", "EUR", "GBP", "CAD", "CNY", "JPY"];
  var state = {};
  function init() {
    $scope.refresh();
  }
  function loadingStarted() {
    $scope.isLoading = true;
  }
  function loadingCompleted() {
    $scope.isLoading = false;
  }
  function saveState() {
    state = state || {};
    state.customItems = $scope.customItems;
    state.favorites = $scope.favorites;
    state.systemItems = $scope.systemItems;
    state.currencies = $scope.currencies;
  }
  function restoreState() {
    if (!state) {
      return;
    }
    $scope.customItems = state.customItems || $scope.customItems;
    $scope.favorites = state.favorites || $scope.favorites;
    $scope.systemItems = state.systemItems || $scope.systemItems;
    $scope.currencies = state.currencies || $scope.currencies;
  }
  function escapeRegExp(string) {
    return string.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
  }
  function isMatch(currency, regExp) {
    return regExp.test(currency.id) || (regExp.test(currency.name) || regExp.test(currency.displayText));
  }
  function filterCurrencies(currencies, searchText) {
    var searchRegExp = new RegExp(escapeRegExp(searchText), "i");
    return _.filter(currencies, function(currency) {
      return isMatch(currency, searchRegExp);
    });
  }
  function formatDisplayText(currency) {
    return currency.name + " (" + currency.id + ")";
  }
  $scope.isLoading = false;
  $scope.populate = function(currencies) {
    $scope.favorites = [];
    $scope.currencies = [];
    $scope.systemItems = gfSystemCurrenciesService.list();
    for (var i = 0, len = currencies.length;i < len;i++) {
      var currency = currencies[i];
      currency.displayText = formatDisplayText(currency);
      var isFavorite = favorites.indexOf(currency.id) !== -1;
      if (isFavorite) {
        $scope.favorites[favorites.indexOf(currency.id)] = currency;
      } else {
        $scope.currencies.push(currency);
      }
    }
    if ($scope.currency && $scope.currency.id) {
      var allItems = _.union($scope.currencies, $scope.favorites, $scope.systemItems, $scope.customItems);
      $scope.currency = _.find(allItems, function(cur) {
        return cur.id == $scope.currency.id && (!$scope.currency.uid || cur.uid == $scope.currency.uid);
      });
    }
    saveState();
  };
  $scope.isSelectedCurrency = function(cur) {
    if (cur && !$scope.currency) {
      return false;
    }
    return cur.id == $scope.currency.id && cur.uid == $scope.currency.uid;
  };
  $scope.refresh = function() {
    loadingStarted();
    gfCurrencies.listAsync().then(function(currencies) {
      $scope.populate(currencies);
      loadingCompleted();
    }, function() {
      loadingCompleted();
    });
  };
  $scope.customItems = $scope.customItems || [];
  $scope.favorites = [];
  $scope.currencies = [];
  $scope.select = function(currency) {
    if (currency && currency.disabled) {
      return;
    }
    if (_.isEmpty(currency) || _.isNull(currency.id)) {
      currency = null;
    }
    $scope.currency = currency;
    $scope.clearSearch();
  };
  $scope.search = function(searchText) {
    if (searchText && searchText.length > 0) {
      $scope.customItems = filterCurrencies(state.customItems, searchText);
      $scope.favorites = filterCurrencies(state.favorites, searchText);
      $scope.systemItems = filterCurrencies(state.systemItems, searchText);
      $scope.currencies = filterCurrencies(state.currencies, searchText);
    } else {
      $scope.clearSearch();
    }
  };
  $scope.clearSearch = function() {
    $scope.model.searchText = "";
    restoreState();
  };
  $scope.model = {searchText:""};
  init();
}]);
goog.provide("gridReport.directives.CurrencyDirective");
goog.require("gridReport.Module");
goog.require("gridReport.directives.CurrencyController");
gridReport.Module.directive("gfCurrency", [function() {
  return{restrict:"E", replace:true, scope:{currency:"=", customItems:"=", noSelectionText:"@", isEnabled:"="}, controller:"gfCurrencyController", templateUrl:"scripts/directives/currency/Currency.html", link:function(scope, element) {
    scope.customItems = scope.customItems || [];
    function makeSearchFocus() {
      $(".search INPUT", element).focus().val("");
    }
    $(".gf-select-button", element).on("click", function(e) {
      e.stopPropagation();
      makeSearchFocus();
      scope.clearSearch();
      scope.$apply();
    });
    scope.element = $(element).closest(".modal-dialog");
    scope.element.draggable({handle:".modal-header"});
    scope.$on("$destroy", function() {
      $(".gf-select-button", element).off("click");
    });
  }};
}]);
goog.provide("gridReport.directives.GroupingToolbarController");
goog.require("gridReport.model.GridReportExpandCollapseState");
goog.require("gridReport.model.GridEvents");
gridReport.Module.controller("GroupingToolbarController", ["$scope", "gfGridManagementService", "gfEventsAggregator", "$timeout", function($scope, gfGridManagementService, gfEventsAggregator, $timeout) {
  var expandCollapseState = gridReport.model.GridReportExpandCollapseState.allCollapsed;
  var currentGroups;
  function allGroupsExpanded() {
    return expandCollapseState == gridReport.model.GridReportExpandCollapseState.allExpanded;
  }
  function allGroupsCollapsed() {
    return expandCollapseState == gridReport.model.GridReportExpandCollapseState.allCollapsed;
  }
  function expandAll() {
    gfGridManagementService.toggleAllGroups($scope.gridInstanceId, true);
  }
  function collapseAll() {
    gfGridManagementService.toggleAllGroups($scope.gridInstanceId, false);
  }
  function expandCollapseStateChanged() {
    var prevState = expandCollapseState;
    expandCollapseState = gfGridManagementService.getExpandCollapseState($scope.gridInstanceId);
    if (prevState != expandCollapseState) {
      $timeout(angular.noop);
    }
  }
  function refreshModel() {
    currentGroups = gfGridManagementService.getGrouping($scope.gridInstanceId);
    expandCollapseStateChanged();
  }
  var oldIsVisible = false;
  function isVisible() {
    var newValue = currentGroups && (currentGroups.length && gfGridManagementService.getVisibleIdentifiers($scope.gridInstanceId).length);
    if (newValue != oldIsVisible) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.InternalEvents.groupingToolbarVisibilityChanged, {isVisible:newValue});
      oldIsVisible = newValue;
    }
    return newValue;
  }
  function init() {
    var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
    aggregator.addHandler(gridReport.model.GridEvents.groupingApplied, refreshModel);
    aggregator.addHandler(gridReport.model.GridEvents.groupsStateRestored, expandCollapseStateChanged);
    aggregator.addHandler(gridReport.model.GridEvents.groupExpanded, expandCollapseStateChanged);
    aggregator.addHandler(gridReport.model.GridEvents.groupCollapsed, expandCollapseStateChanged);
    aggregator.addHandler(gridReport.model.GridEvents.allGroupsCollapsed, expandCollapseStateChanged);
    aggregator.addHandler(gridReport.model.GridEvents.allGroupsExpanded, expandCollapseStateChanged);
  }
  $scope.allGroupsExpanded = allGroupsExpanded;
  $scope.allGroupsCollapsed = allGroupsCollapsed;
  $scope.expandAll = expandAll;
  $scope.collapseAll = collapseAll;
  $scope.isVisible = isVisible;
  if ($scope.gridInstanceId) {
    init();
  }
  $scope.$watch("gridInstanceId", function(newVal, oldVal) {
    if (newVal === oldVal) {
      return;
    }
    init();
  });
}]);
goog.provide("gridReport.directives.GroupingToolbarDirective");
goog.require("gridReport.directives.GroupingToolbarController");
gridReport.Module.directive("gfGroupingToolbar", [function() {
  return{restrict:"E", templateUrl:"scripts/directives/groupingToolbar/GroupingToolbar.html", scope:{gridInstanceId:"="}, controller:"GroupingToolbarController"};
}]);
goog.provide("gridReport.services.SystemCurrenciesService");
gridReport.Module.factory("gfSystemCurrenciesService", ["$translate", function($translate) {
  var systemCurrencies = [], service = {};
  service.add = function(newCurrency) {
    if (_.isEmpty(newCurrency)) {
      throw new Error("No currency was specified.");
    }
    systemCurrencies.push(newCurrency);
  };
  service.remove = function(id) {
    var index = systemCurrencies.length;
    while (index--) {
      if (systemCurrencies.id === id) {
        systemCurrencies.splice(index, 1);
      }
    }
  };
  service.list = function() {
    return systemCurrencies;
  };
  service.clear = function() {
    systemCurrencies = [];
  };
  angular.forEach([{id:null, displayText:$translate.instant("NONE")}, {id:"Native", displayText:$translate.instant("NATIVE_CURRENCY")}], service.add);
  return service;
}]);
goog.provide("gridReport.constants.CurrencySymbols");
gridReport.Module.constant("gfCurrencySymbols", {USD:"$", GBP:"\u00a3", JPY:"\u00a5", EUR:"\u20ac"});
goog.provide("gridReport.services.gfExclusionManagerDialogService");
gridReport.Module.service("gfExclusionManagerDialogService", ["$modal", "$log", "$translate", function($modal, $log, $translate) {
  var service = {}, popup;
  service.closeDialog = function() {
    if (popup) {
      try {
        popup.close();
        popup = null;
      } catch (e) {
      }
    }
  };
  service.openExclusionManagerDialog = function(gridInstanceId, identifiers, exclusionsType) {
    var settings = {gridInstanceId:gridInstanceId, identifiers:identifiers, exclusionsType:exclusionsType};
    service.closeDialog();
    popup = $modal.open({windowClass:"gf-exclusions-manager-modal gf-modal modal", templateUrl:"scripts/services/exclusionDialog/ExclusionManagerDialog.html", controller:["$scope", "$modalInstance", "settings", function($scope, $modalInstance, settings) {
      $scope.settings = settings;
    }], resolve:{settings:function() {
      return settings;
    }}});
    return popup;
  };
  return service;
}]);
goog.provide("gridReport.model.SectorLevelValue");
gridReport.model.SectorLevelValue = function(classificationId, sectorId, sectorName, value) {
  this.sectorId = sectorId;
  this.classificationId = classificationId;
  this.sectorName = sectorName;
  this.value = value;
};
goog.provide("gridReport.services.BaseCommandConverter");
(function() {
  gridReport.services.BaseCommandConverter = function() {
  };
  gridReport.services.BaseCommandConverter.prototype.convert = function() {
    throw new Error("Not implemented");
  };
})();
goog.provide("gridReport.services.MultiFactorRankToCommandConverter");
goog.require("gridReport.services.BaseCommandConverter");
(function() {
  function convertField(field) {
    return(new gridReport.services.ConverterFactory).get(field.type).convert(field);
  }
  function convertScrFactor(factor) {
    if (!factor) {
      throw new Error("factor should be provided");
    }
    var command = convertField(factor.field_);
    command.metadata = factor.serialize();
    return command;
  }
  gridReport.services.MultiFactorRankToCommandConverter = function() {
  };
  goog.inherits(gridReport.services.MultiFactorRankToCommandConverter, gridReport.services.BaseCommandConverter);
  gridReport.services.MultiFactorRankToCommandConverter.getFormattingInfo = function(mfr) {
    switch(mfr.methodology) {
      case scr.mfr.MFMethodology.PercentileScoring:
      ;
      case scr.mfr.MFMethodology.OuartileScoring:
      ;
      case scr.mfr.MFMethodology.QuintileScoring:
      ;
      case scr.mfr.MFMethodology.DecileScoring:
      ;
      case scr.mfr.MFMethodology.NScoring:
        return{returnType:scr.DataTypes.Integer, decimalDigits:0};
      case scr.mfr.MFMethodology.ZScores:
        return{returnType:scr.DataTypes.Float, decimalDigits:2};
      default:
        throw new Error("unknown methodology");;
    }
  };
  gridReport.services.MultiFactorRankToCommandConverter.prototype.convert = function(mfr) {
    if (!mfr) {
      throw new Error("mfr should be provided");
    }
    var formattingInfo = gridReport.services.MultiFactorRankToCommandConverter.getFormattingInfo(mfr);
    return new gridReport.model.Command({id:mfr.id, expression:mfr.getTransformedPath().trim(), name:mfr.name, defaultOrder:mfr.nTileOrder == scr.mfr.MFNTileOrder.Ascending ? scr.mfr.Order.LowerIsBetter : scr.mfr.Order.HigherIsBetter, dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, metadata:mfr.serialize(), parameters:[], returnType:formattingInfo.returnType, decimalDigits:formattingInfo.decimalDigits, factors:_.map(mfr.factors, convertScrFactor)});
  };
})();
goog.provide("gridReport.services.DataBlockToCommandConverter");
(function() {
  function convertField(field) {
    return(new gridReport.services.ConverterFactory).get(field.type).convert(field);
  }
  gridReport.services.DataBlockToCommandConverter = function() {
  };
  gridReport.services.DataBlockToCommandConverter.prototype.convert = function(field) {
    if (!field) {
      throw new Error("field should be provided");
    }
    var subCommands = _.chain(field.dataBlockItems).sortBy(function(item) {
      return item.order_;
    }).map(function(item) {
      return convertField(item.field_);
    }).value();
    return new gridReport.model.Command({id:field.id, expression:field.getADCSyntax(), name:field.name, defaultOrder:null, isNewestFirst:field.order == undefined ? true : field.order === field.orderOptions.desc, enableHeatMap:false, returnType:null, dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, metadata:field.serialize(), parameters:[], isTimeSeriesable:false, isAbsComp:false, outputColumn:null, subCommands:subCommands});
  };
})();
goog.provide("gridReport.services.MetadataFieldToCommandConverter");
goog.require("gridReport.services.BaseCommandConverter");
(function() {
  gridReport.services.MetadataFieldToCommandConverter = function() {
  };
  goog.inherits(gridReport.services.MetadataFieldToCommandConverter, gridReport.services.BaseCommandConverter);
  gridReport.services.MetadataFieldToCommandConverter.prototype.convert = function(metadataField) {
    if (!metadataField) {
      throw new Error("metadataField should be provided.");
    }
    var metadata = metadataField.field_.metadata;
    return new gridReport.model.Command({id:metadataField.field_.id, expression:metadataField.getPath().trim(), name:metadataField.field_.name, defaultOrder:metadataField.field_.metadata ? metadataField.field_.metadata.defaultOrder : null, isNewestFirst:metadataField.field_.order == undefined ? true : metadataField.field_.order === metadataField.field_.orderOptions.desc, enableHeatMap:metadataField.field_.metadata ? metadataField.field_.metadata.enableHeatMap : null, returnType:metadataField.getReturnType(), 
    parameters:gridReport.model.CommandParameter.convertAdcParameters(metadataField.field_.parameters), dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, metadata:metadataField.field_.serialize(), isTimeSeriesable:metadataField.field_.metadata ? metadataField.field_.metadata.isTimeSeriesable : null, isAbsComp:metadataField.field_.metadata ? metadataField.field_.metadata.isAbsComp : null, pSetId:metadata && metadata.parameterSet ? metadata.parameterSet.pSetId : null});
  };
})();
goog.provide("gridReport.services.ColumnMathToCommandConverter");
goog.require("gridReport.services.BaseCommandConverter");
(function() {
  gridReport.services.ColumnMathToCommandConverter = function() {
  };
  goog.inherits(gridReport.services.ColumnMathToCommandConverter, gridReport.services.BaseCommandConverter);
  gridReport.services.ColumnMathToCommandConverter.prototype.convert = function(columnMath) {
    if (!columnMath) {
      throw new Error("columnMath should be provided");
    }
    var formula = new gridReport.model.Formula({expression:columnMath.formula, columnIds:columnMath.columnIds});
    var expression = columnMath.getADCSyntax();
    return new gridReport.model.Command({id:expression, expression:expression, name:columnMath.name, formula:formula, dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, returnType:scr.DataTypes.Float, decimalDigits:1, metadata:{type:"columnmath"}});
  };
})();
goog.provide("gridReport.services.CustomToCommandConverter");
goog.require("gridReport.services.BaseCommandConverter");
(function() {
  gridReport.services.CustomToCommandConverter = function() {
  };
  goog.inherits(gridReport.services.CustomToCommandConverter, gridReport.services.BaseCommandConverter);
  gridReport.services.CustomToCommandConverter.prototype.convert = function(custom) {
    if (!custom) {
      throw new Error("custom field should be provided");
    }
    return new gridReport.model.Command({id:custom.id, expression:custom.getPath().trim(), name:custom.name, returnType:custom.getReturnType(), dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, metadata:custom.serialize(), parameters:[], isTimeSeriesable:custom.isVector()});
  };
})();
goog.provide("gridReport.services.FieldToCommandConverter");
goog.require("gridReport.services.BaseCommandConverter");
(function() {
  function getDataProviderId(outputField) {
    if (gridReport.model.Command.isSTD(outputField.id) || gridReport.model.Command.isRFA(outputField.id)) {
      return gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID;
    }
    return gridReport.model.Command.ADC_DATA_PROVIDER_ID;
  }
  gridReport.services.FieldToCommandConverter = function() {
  };
  gridReport.services.FieldToCommandConverter.prototype.convert = function(field) {
    if (!field) {
      throw new Error("field should be provided");
    }
    var subCommands = null, multiSelectAsIndividualFields, outputColumn;
    if (_.isArray(field.outputColumn) && _.size(field.outputColumn) > 1) {
      subCommands = _.map(field.outputColumn, function(item) {
        var subField = field.clone();
        subField.outputColumn = item.id;
        outputColumn = gridReport.model.OutputColumn.convertAdcOutputColumn(subField);
        if (outputColumn) {
          subField.returnType = outputColumn.returnType;
          if (!outputColumn.isValueOutputColumn()) {
            subField.transforms = [];
            subField.name = "";
          }
        }
        _.each(subField.parameters, function(parameter) {
          var fieldParameter = _.find(field.parameters, {id:parameter.id});
          if (fieldParameter) {
            parameter.values_ = fieldParameter.values_;
          }
        });
        return gridReport.model.Command.convert(subField);
      });
      return new gridReport.model.Command({id:field.id, expression:_.pluck(subCommands, "expression").join(), name:field.name, defaultOrder:field.metadata.defaultOrder, isNewestFirst:field.order == undefined ? true : field.order === field.orderOptions.desc, enableHeatMap:field.metadata.enableHeatMap, returnType:field.getReturnType(), dataProviderId:getDataProviderId(field), metadata:field.serialize(), parameters:gridReport.model.CommandParameter.convertAdcParameters(field.parameters), isTimeSeriesable:field.metadata.isTimeSeriesable, 
      isAbsComp:field.metadata.isAbsComp, outputColumn:gridReport.model.OutputColumn.convertAdcOutputColumn(field), subCommands:subCommands, pSetId:field.metadata.parameterSet ? field.metadata.parameterSet.pSetId : null});
    } else {
      if (_.isArray(field.outputColumn) && _.size(field.outputColumn) > 0) {
        field.outputColumn = _.first(field.outputColumn).id;
        outputColumn = gridReport.model.OutputColumn.convertAdcOutputColumn(field);
        if (outputColumn) {
          field.returnType = outputColumn.returnType;
        }
      }
    }
    multiSelectAsIndividualFields = field.getMultiSelectAsIndividualFields();
    if (_.isArray(multiSelectAsIndividualFields) && _.size(multiSelectAsIndividualFields) > 1) {
      subCommands = _.chain(multiSelectAsIndividualFields).each(function(subField) {
        subField.outputColumn = field.outputColumn;
        outputColumn = gridReport.model.OutputColumn.convertAdcOutputColumn(subField);
        if (outputColumn) {
          subField.returnType = outputColumn.returnType;
        }
        _.each(subField.parameters, function(parameter) {
          var fieldParameter = _.find(field.parameters, {id:parameter.id});
          if (fieldParameter) {
            parameter.values_ = fieldParameter.values_;
          }
        });
      }).map(function(subField) {
        return gridReport.model.Command.convert(subField);
      }).value();
    } else {
      var subFields = field.getFieldOrSubFields();
      if (field.isVector() && _.size(subFields) > 1) {
        if (field.order === "ASC" || field.orderOptions != null && field.orderOptions.asc === field.order) {
          subFields.reverse();
        }
        subCommands = _.map(subFields, function(subField) {
          _.each(subField.parameters, function(parameter) {
            var fieldParameter = _.find(field.parameters, {id:parameter.id});
            if (fieldParameter) {
              parameter.values_ = fieldParameter.values_;
            }
          });
          return gridReport.model.Command.convert(subField);
        });
      }
    }
    return new gridReport.model.Command({id:field.id, expression:field.getTransformedPath().trim(), name:field.name, defaultOrder:field.metadata.defaultOrder, isNewestFirst:field.order == undefined ? true : field.order === field.orderOptions.desc, enableHeatMap:field.metadata.enableHeatMap, returnType:field.getReturnType(), dataProviderId:getDataProviderId(field), metadata:field.serialize(), parameters:gridReport.model.CommandParameter.convertAdcParameters(field.parameters), isTimeSeriesable:field.metadata.isTimeSeriesable, 
    isAbsComp:field.metadata.isAbsComp, outputColumn:gridReport.model.OutputColumn.convertAdcOutputColumn(field), subCommands:subCommands, pSetId:field.metadata.parameterSet ? field.metadata.parameterSet.pSetId : null});
  };
})();
goog.provide("gridReport.services.ExpressionFieldToCommandConverter");
goog.require("gridReport.services.BaseCommandConverter");
(function() {
  gridReport.services.ExpressionFieldToCommandConverter = function() {
  };
  goog.inherits(gridReport.services.ExpressionFieldToCommandConverter, gridReport.services.BaseCommandConverter);
  gridReport.services.ExpressionFieldToCommandConverter.prototype.convert = function(expressionField) {
    if (!expressionField) {
      throw new Error("expressionField should be provided.");
    }
    return new gridReport.model.Command({id:expressionField.metadata_.name, expression:expressionField.getPath().trim(), name:expressionField.metadata_.name, returnType:expressionField.getReturnType(), parameters:[], dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, metadata:expressionField.serializeCustom(), isTimeSeriesable:expressionField.isVector()});
  };
})();
goog.provide("gridReport.services.FactorToCommandConverter");
(function() {
  gridReport.services.FactorToCommandConverter = function() {
  };
  gridReport.services.FactorToCommandConverter.prototype.convert = function(factor) {
    if (!factor) {
      throw new Error("factor should be provided");
    }
    return new gridReport.model.Command({id:factor.expression, expression:factor.expression, factor:new gridReport.model.Factor({rankNumber:factor.rankNumber, showFactorRank:factor.showFactorRank, weight:factor.weight}), metadata:{type:"factor", mfr:factor.mfr}});
  };
})();
goog.provide("gridReport.services.ConverterFactory");
goog.require("gridReport.services.FieldToCommandConverter");
goog.require("gridReport.services.DataBlockToCommandConverter");
goog.require("gridReport.services.CustomToCommandConverter");
goog.require("gridReport.services.MultiFactorRankToCommandConverter");
goog.require("gridReport.services.ColumnMathToCommandConverter");
goog.require("gridReport.services.FactorToCommandConverter");
goog.require("gridReport.services.MetadataFieldToCommandConverter");
goog.require("gridReport.services.ExpressionFieldToCommandConverter");
(function() {
  var converters = {"field":new gridReport.services.FieldToCommandConverter, "datablock":new gridReport.services.DataBlockToCommandConverter, "custom":new gridReport.services.CustomToCommandConverter, "multifactorrank":new gridReport.services.MultiFactorRankToCommandConverter, "columnmath":new gridReport.services.ColumnMathToCommandConverter, "factor":new gridReport.services.FactorToCommandConverter};
  gridReport.services.ConverterFactory = function() {
  };
  gridReport.services.ConverterFactory.prototype.get = function(fieldType) {
    var converter = converters[fieldType];
    if (!converter) {
      throw new Error("Unknown field type: " + fieldType + ".");
    }
    return converter;
  };
})();
goog.provide("gridReport.model.Command");
goog.require("gridReport.model.OutputColumn");
goog.require("gridReport.model.Factor");
goog.require("gridReport.services.ConverterFactory");
(function() {
  gridReport.model.Command = function(options) {
    gridReport.jsUtils.mergeProperties(this, options);
  };
  gridReport.model.Command.prototype.id = null;
  gridReport.model.Command.prototype.defaultOrder = scr.mfr.Order.LowerIsBetter;
  gridReport.model.Command.prototype.enableHeatMap = undefined;
  gridReport.model.Command.prototype.parameters = null;
  gridReport.model.Command.prototype.name = null;
  gridReport.model.Command.prototype.expression = null;
  gridReport.model.Command.prototype.returnType = null;
  gridReport.model.Command.prototype.metadata = null;
  gridReport.model.Command.prototype.dataProviderId = null;
  gridReport.model.Command.prototype.decimalDigits = null;
  gridReport.model.Command.prototype.factors = null;
  gridReport.model.Command.prototype.isAbsComp = null;
  gridReport.model.Command.prototype.isNewestFirst = true;
  gridReport.model.Command.prototype.subCommands = null;
  gridReport.model.Command.prototype.isDataCloud = function() {
    return this.dataProviderId === gridReport.model.Command.ADC_DATA_PROVIDER_ID || this.dataProviderId === gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID;
  };
  gridReport.model.Command.prototype.isAuditable = function() {
    return!this.isDataBlock() && (this.isSTD() || this.isRFA());
  };
  gridReport.model.Command.prototype.isDataBlock = function() {
    return this.metadata != null && this.metadata.type === "datablock";
  };
  gridReport.model.Command.prototype.isMultiOutput = function() {
    return _.isArray(this.outputColumn) && _.size(this.outputColumn) > 1;
  };
  gridReport.model.Command.isSTD = function(id) {
    if (id === null || (id === undefined || !_.isString(id))) {
      return false;
    }
    return id.indexOf("I_URF_") === 0;
  };
  gridReport.model.Command.isRFA = function(id) {
    if (id === null || (id === undefined || !_.isString(id))) {
      return false;
    }
    return id.indexOf("I_TRFA_") === 0;
  };
  gridReport.model.Command.prototype.isSTD = function() {
    return gridReport.model.Command.isSTD(this.id);
  };
  gridReport.model.Command.prototype.isRFA = function() {
    return gridReport.model.Command.isRFA(this.id);
  };
  gridReport.model.Command.ADC_DATA_PROVIDER_ID = "dataCloud";
  gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID = "auditability_dataCloud";
  gridReport.model.Command.convertMetadataField = function(metadataField) {
    return(new gridReport.services.MetadataFieldToCommandConverter).convert(metadataField);
  };
  gridReport.model.Command.convertExpressionField = function(expressionField) {
    return(new gridReport.services.ExpressionFieldToCommandConverter).convert(expressionField);
  };
  function getExpressionFromField(field) {
    return field.getTransformedPath().trim();
  }
  gridReport.model.Command.convertField = function(field) {
    return(new gridReport.services.FieldToCommandConverter).convert(field);
  };
  gridReport.model.Command.convertDataBlock = function(field) {
    return(new gridReport.services.DataBlockToCommandConverter).convert(field);
  };
  gridReport.model.Command.convertColumnMath = function(columnMath) {
    return(new gridReport.services.ColumnMathToCommandConverter).convert(columnMath);
  };
  gridReport.model.Command.convertFactor = function(factor) {
    return(new gridReport.services.FactorToCommandConverter).convert(factor);
  };
  gridReport.model.Command.convertCustom = function(custom) {
    return(new gridReport.services.CustomToCommandConverter).convert(custom);
  };
  gridReport.model.Command.convertMfr = function(mfr) {
    return(new gridReport.services.MultiFactorRankToCommandConverter).convert(mfr);
  };
  gridReport.model.Command.getExpression = function(command, metadata) {
    var field = new scr.output.Field(metadata);
    field.deserialize(command.metadata);
    if (command.metadata) {
      field.outputColumn = command.metadata.outputColumn;
    }
    return getExpressionFromField(field);
  };
  gridReport.model.Command.convert = function(selectedField) {
    return(new gridReport.services.ConverterFactory).get(selectedField.type).convert(selectedField);
  };
  gridReport.model.Command.prototype.isVector = function() {
    var sDateParam, eDateParam, frqParam;
    _.each(this.parameters, function(p) {
      if (p.id == scr.output.ParameterIds.SDate) {
        sDateParam = p;
      }
      if (p.id == scr.output.ParameterIds.EDate) {
        eDateParam = p;
      }
      if (p.id == scr.output.ParameterIds.Frq) {
        frqParam = p;
      }
    });
    if (sDateParam == null || (eDateParam == null || frqParam == null)) {
      return false;
    }
    if (eDateParam.value == null || eDateParam.value == "") {
      return false;
    }
    if (sDateParam.value === eDateParam.value) {
      return false;
    }
    if (this.metadata != undefined && this.metadata.transforms != undefined) {
      for (var i = 0;i < this.metadata.transforms.length;++i) {
        var tx = this.metadata.transforms[i];
        if (tx.type == "Aggregate") {
          return false;
        }
        if (tx.type == "Trend" && (tx.stat != "MAVG" && tx.stat != "CSUM")) {
          return false;
        }
      }
    }
    return true;
  };
  gridReport.model.Command.prototype.isMultiSelect = function() {
    return _.any(this.parameters, function(param) {
      return param.isMultiSelect == true && _.size(param.getValues()) > 1;
    });
  };
  gridReport.model.Command.prototype.isMultiFactorRank = function() {
    return this.metadata != undefined && this.metadata.type == "multifactorrank";
  };
  gridReport.model.Command.prototype.isTimeSeriesable = null;
  gridReport.model.Command.prototype.isFactorRank = function() {
    return this.metadata != undefined && this.metadata.type == "factor";
  };
  gridReport.model.Command.prototype.isTimeSeries = function() {
    if (this.isCustom() === true) {
      return this.isTimeSeriesable;
    }
    var eDateParam = _.findWhere(this.parameters || [], {id:scr.output.ParameterIds.EDate});
    var sDateParam = _.findWhere(this.parameters || [], {id:scr.output.ParameterIds.SDate});
    return sDateParam != undefined && (sDateParam.value != undefined && sDateParam.value !== "") && (eDateParam != undefined && (eDateParam.value != undefined && eDateParam.value !== ""));
  };
  gridReport.model.Command.prototype.isCustom = function() {
    return this.metadata != undefined && (this.metadata.type == scr.output.ItemTypes.Custom || this.metadata.type == "expression");
  };
  gridReport.model.Command.prototype.isColumnMath = function() {
    return this.metadata != undefined && this.metadata.type == "columnmath";
  };
  gridReport.model.Command.prototype.hasParameters = function() {
    return this.parameters != undefined && this.parameters.length > 0;
  };
  gridReport.model.Command.prototype.isPercentage = function() {
    var isPercent = this.returnType === scr.DataTypes.Percentage;
    if (!isPercent && (this.metadata && (this.metadata.transforms && this.metadata.transforms.length > 0))) {
      for (var i = 0;i < this.metadata.transforms.length;i++) {
        switch(this.metadata.transforms[i].type) {
          case "PcntChange":
            isPercent = true;
            break;
          case "Trend":
            if (this.metadata.transforms[i].stat == "CGR") {
              isPercent = true;
            }
            break;
        }
      }
    }
    return isPercent;
  };
  gridReport.model.Command.prototype.isNumber = function() {
    return scr.DataTypes.isNumeric(this.returnType);
  };
  gridReport.model.Command.prototype.isDate = function() {
    return this.returnType === scr.DataTypes.Date || this.returnType === scr.DataTypes.DateTime;
  };
  gridReport.model.Command.prototype.isBoolean = function() {
    return this.returnType === scr.DataTypes.Boolean;
  };
  gridReport.model.Command.prototype.isDeleted = function() {
    return!!this.metadata && !!this.metadata.deleted;
  };
  gridReport.model.Command.prototype.getDefaultSortDirection = function() {
    if (this.isMultiFactorRank()) {
      if (this.metadata.methodology == scr.mfr.MFMethodology.PercentileScoring || (this.metadata.methodology == scr.mfr.MFMethodology.OuartileScoring || (this.metadata.methodology == scr.mfr.MFMethodology.QuintileScoring || this.metadata.methodology == scr.mfr.MFMethodology.DecileScoring))) {
        return this.metadata.nTileOrder == scr.mfr.MFNTileOrder.Ascending ? "asc" : "desc";
      } else {
        return "asc";
      }
    } else {
      return this.defaultOrder == scr.mfr.Order.LowerIsBetter ? "asc" : "desc";
    }
  };
  gridReport.model.Command.prototype.formula = null;
  gridReport.model.Command.prototype.outputColumn = null;
  gridReport.model.Command.prototype.factor = null;
  gridReport.model.Command.prototype.getExpression = function(includeName) {
    if (!includeName && (this.expression != null && (this.expression != "" && (this.isCustom() || this.isMultiFactorRank())))) {
      return this.expression.replace(/\/\*.*?\*\//g, "");
    }
    return this.expression;
  };
  gridReport.model.Command.prototype.pSetId = null;
  gridReport.model.Command.prototype.isIdentifierTimeSeries = function() {
    return this.pSetId === "IdentifierTimeSeries" && (this.parameters && (this.parameters.length > 0 && $.grep(this.parameters, function(e) {
      return e.id === "Frq";
    }).length === 0));
  };
})();
goog.provide("gridReport.model.CommandParameter");
gridReport.model.CommandParameter = function(options) {
  if (options) {
    if (options.hasOwnProperty("id")) {
      this.id = options.id;
    }
    if (options.hasOwnProperty("name")) {
      this.name = options.name;
    }
    if (options.hasOwnProperty("value")) {
      this.value = options.value;
    }
    if (options.hasOwnProperty("defaultValue")) {
      this.defaultValue = options.defaultValue;
    }
    if (options.hasOwnProperty("isVisible")) {
      this.isVisible = options.isVisible;
    }
    if (options.hasOwnProperty("isMultiSelect")) {
      this.isMultiSelect = options.isMultiSelect;
    }
    if (options.hasOwnProperty("values")) {
      this.values = options.values;
    }
  }
};
gridReport.model.CommandParameter.prototype.id = null;
gridReport.model.CommandParameter.prototype.name = null;
gridReport.model.CommandParameter.prototype.value = null;
gridReport.model.CommandParameter.prototype.isVisible = true;
gridReport.model.CommandParameter.prototype.defaultValue = null;
gridReport.model.CommandParameter.prototype.isMultiSelect = false;
gridReport.model.CommandParameter.prototype.values = null;
gridReport.model.CommandParameter.prototype.getValues = function() {
  return this.values;
};
gridReport.model.CommandParameter.prototype.getValue = function() {
  return this.value;
};
gridReport.model.CommandParameter.prototype.getDefaultValue = function() {
  return this.defaultValue;
};
gridReport.model.CommandParameter.prototype.getValueOrDefault = function() {
  return this.value != undefined && this.value != "" ? this.value : this.defaultValue;
};
gridReport.model.CommandParameter.convertAdcParameter = function(adcParameter) {
  if (!adcParameter) {
    throw "adcParameter should be provided.";
  }
  var isMultiSelect = !adcParameter.metadata ? false : adcParameter.metadata.isMultiSelection;
  var getSelectedValues = function(adcParameter, isMultiSelect) {
    if (!isMultiSelect) {
      return null;
    }
    if (_.isEmpty(adcParameter.getValue())) {
      return[];
    }
    var values = [];
    var valIds = adcParameter.getValue().split(",");
    for (var i = 0;i < valIds.length;i++) {
      values.push({id:valIds[i], value:_.findWhere(adcParameter.getValues(), {id:valIds[i]}).name});
    }
    return values;
  };
  return new gridReport.model.CommandParameter({id:adcParameter.id, name:adcParameter.name, value:adcParameter.getValue(), defaultValue:adcParameter.getDefault(), isMultiSelect:isMultiSelect, values:getSelectedValues(adcParameter, isMultiSelect)});
};
gridReport.model.CommandParameter.convertAdcParameters = function(adcParameters) {
  if (!adcParameters) {
    throw "adcParameters should be provided.";
  }
  var commandParameters = [];
  angular.forEach(adcParameters, function(parameter) {
    commandParameters.push(gridReport.model.CommandParameter.convertAdcParameter(parameter));
  });
  return commandParameters;
};
goog.provide("gridReport.services.CurrencyService");
goog.require("gridReport.Module");
gridReport.Module.factory("gfCurrencies", ["gfConfig", "$q", "$translate", "$rootScope", function(gfConfig, $q, $translate, $rootScope) {
  var cache = {}, udipEnvironmentConfig = gfConfig.udipOptions ? gfConfig.udipOptions.udipEnvironmentConfig : undefined, service = new UdipMetadataService(udipEnvironmentConfig);
  function listAsync() {
    var deferred = $q.defer();
    if (cache.list) {
      deferred.resolve(cache.list);
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
    } else {
      service.loadCurrencies(function(response) {
        cache.list = response;
        deferred.resolve(response);
        if (!$rootScope.$$phase) {
          $rootScope.$apply();
        }
      });
    }
    return deferred.promise;
  }
  return{listAsync:listAsync};
}]);
goog.provide("gridReport.filters.DateFormatter");
gridReport.Module.filter("gfDateFormatter", function() {
  return function(date) {
    return _.isDate(date) ? date.toString("MMM dd, yyyy") : date;
  };
});
goog.provide("gridReport.directives.MenuController");
gridReport.Module.controller("MenuController", ["$scope", "$timeout", function($scope, $timeout) {
  var DEFAULT_OPTIONS = {width:null, position:{x:0, y:0}};
  function executeMenuAction($event, item) {
    if (!$scope.getResultOrValue(item.isDisabled) && (item.action && item.action != angular.noop)) {
      item.action($event);
      $scope.isVisible = false;
    }
    $event.stopPropagation();
  }
  function _onClickOutside() {
    $scope.isVisible = false;
    $scope.$apply($scope.onClickOutside);
  }
  function tryCollapseAll() {
    var widget = getWidget();
    if (widget) {
      var initialDelay = widget.delay;
      widget.delay = 0;
      widget.collapseAll(null, true);
      $timeout(function() {
        widget.delay = initialDelay;
      });
    }
  }
  function getWidget() {
    return $scope.menuElement.data("ui-menu");
  }
  function init() {
    $scope.$watch("isVisible", function(value) {
      if (value) {
        tryCollapseAll();
        $timeout(function() {
          $scope.menuElement.menu();
          $scope.menuElement.show();
          $(document).on("click", _onClickOutside);
        });
      } else {
        $scope.menuElement.hide();
        $(document).off("click", _onClickOutside);
      }
    });
    $scope.$on("$destroy", function() {
      $(document).off("click", _onClickOutside);
      getWidget() && $scope.menuElement.menu("destroy");
    });
  }
  $scope.options = $.extend({}, DEFAULT_OPTIONS, $scope.options);
  $scope.executeMenuAction = executeMenuAction;
  $scope.getResultOrValue = gridReport.jsUtils.getResultOrValue;
  $scope.onClickOutside = $scope.onClickOutside || angular.noop;
  init();
}]);
goog.provide("gridReport.directives.MenuDirective");
goog.require("gridReport.directives.MenuController");
gridReport.Module.directive("gfMenu", [function() {
  return{restrict:"E", scope:{options:"=", items:"=", isVisible:"=", onClickOutside:"="}, controller:"MenuController", templateUrl:"scripts/directives/menu/Menu.html", link:function(scope, element) {
    scope.menuElement = $(element).find(".gf-menu");
  }};
}]);
goog.provide("gridReport.directives.ContextMenuDirective");
gridReport.Module.directive("gfContextMenu", ["$timeout", function($timeout) {
  return{restrict:"E", template:"<div></div>", scope:{options:"=", menuItems:"=", visible:"=", position:"=", openDirection:"="}, link:function(scope, element) {
    var menuId = 0;
    var jqxContextMenu = element.jqxMenu({});
    scope.$watch("options", function() {
      jqxContextMenu.jqxMenu(scope.options);
    }, true);
    scope.$watch("menuItems", function() {
      menuId = 0;
      _.each(scope.menuItems, updateIds);
      _.each(scope.menuItems, setupWatches);
      jqxContextMenu.jqxMenu({source:scope.menuItems});
    });
    scope.$watch("openDirection", function() {
      updateOpenDirection();
    });
    scope.$watch("visible", function() {
      if (scope.visible) {
        updateOpenDirection();
        jqxContextMenu.jqxMenu("open", scope.position.x, scope.position.y);
      } else {
        jqxContextMenu.jqxMenu("close");
      }
    });
    jqxContextMenu.on("itemclick", function(event) {
      var item = getContextMenuItem(scope.menuItems, event.args.id);
      if (item && (!item.disabled && item.action)) {
        item.action(event);
      }
    });
    jqxContextMenu.on("closed", function() {
      if (arguments[0].args.hasOwnProperty("menuElements")) {
        $timeout(function() {
          scope.visible = false;
        });
      }
    });
    function updateOpenDirection() {
      var direction = scope.openDirection ? scope.openDirection : "right";
      _.forEach(scope.menuItems, function(menuItem) {
        jqxContextMenu.jqxMenu("setItemOpenDirection", menuItem.id, direction, "down");
      });
    }
    function getContextMenuItem(items, id) {
      for (var key in items) {
        if (items[key].id === id) {
          return items[key];
        }
        var item = getContextMenuItem(items[key].items, id);
        if (item) {
          return item;
        }
      }
      return undefined;
    }
    function generateMenuId() {
      return "" + menuId++;
    }
    function updateIds(menuItem) {
      walk(menuItem, function(item) {
        _.extend(item, {id:generateMenuId()});
      });
    }
    function setupWatches(menuItem) {
      walk(menuItem, function(item) {
        if (typeof item.disabled == "function") {
          var isDisabledFunction = item.disabled;
          item.disabled = isDisabledFunction();
          var isDisabledScopeFunctionName = "menuItem_" + item.id + "_disabled";
          scope[isDisabledScopeFunctionName] = isDisabledFunction;
          scope.$watch(isDisabledScopeFunctionName + "()", function(newValue) {
            item.disabled = newValue;
            jqxContextMenu.jqxMenu("disable", item.id, newValue);
          });
        }
      });
    }
    function walk(menuItem, fn) {
      fn(menuItem);
      if (menuItem.items) {
        for (var key in menuItem.items) {
          walk(menuItem.items[key], fn);
        }
      }
    }
    scope.$on("$destroy", function() {
      jqxContextMenu.jqxMenu("destroy");
    });
  }};
}]);
goog.provide("gridReport.columnMath.ExressionEditorDirective");
goog.require("gridReport.columnMath.ExpressionParser");
gridReport.Module.directive("gfExpressionEditor", ["$translate", "gfExpressionParser", function($translate, gfExpressionParser) {
  return{restrict:"E", replace:true, scope:{model:"=", enterPressed:"&"}, template:'<div class="gf-expression-editor">' + '<div class="gf-expression-editor-placeholder"></div>' + '<span class="textEditor-errorLabel" ' + 'ng-show="model.validationMessage">{{model.validationMessage}}</span>' + "</div>", link:function(scope, element) {
    var model = scope.model;
    var expressionEditor = CodeMirror(element.find(".gf-expression-editor-placeholder")[0], {value:model.expression, lineWrapping:true, autoCloseBrackets:true, placeholder:$translate.instant("CLICK_ON_ANY_COLUMN"), extraKeys:{"Enter":function() {
      (scope.enterPressed || angular.noop)();
    }}});
    updateColors(expressionEditor);
    model.expressionInserted = function(expression) {
      setTextAtCursor(expression);
    };
    expressionEditor.on("change", function() {
      var expressionValue = expressionEditor.getValue();
      if (model.expression != expressionValue) {
        scope.$apply(function() {
          model.setExpression(expressionValue);
          updateColors(expressionEditor);
        });
      }
    });
    scope.$on("$destroy", function() {
      model.expressionInserted = null;
      expressionEditor.off("change");
    });
    function updateColors(editor) {
      var lineIndex = 0;
      editor.eachLine(function(lineHandle) {
        var tokens = null;
        try {
          tokens = gfExpressionParser.tokenize(lineHandle.text);
        } catch (e) {
        }
        _.each(tokens, function(token) {
          if (token.type == "string") {
            editor.markText({line:lineIndex, ch:token.from}, {line:lineIndex, ch:token.to}, {atomic:true, className:scope.model.getExpressionClassName(token.value)});
          }
        });
        lineIndex++;
      });
    }
    function setTextAtCursor(text) {
      var startPos = expressionEditor.getCursor(true);
      expressionEditor.replaceRange(text, startPos, null);
      expressionEditor.focus();
    }
  }};
}]);
goog.provide("gridReport.columnMath.ColumnSelectionColors");
gridReport.Module.value("gfColumnSelectionColors", ["#0082FF", "#008000", "#9924CC", "#FF7F7F", "#00CC33", "#FF6600", "#CC0099"]);
goog.provide("gridReport.columnMath.IdentifierCssClasses");
gridReport.Module.value("gfIdentifierCssClasses", {"#0082FF":"first-identifier", "#008000":"second-identifier", "#9924CC":"third-identifier", "#FF7F7F":"fourth-identifier", "#00CC33":"fifth-identifier", "#FF6600":"sixth-identifier", "#CC0099":"seventh-identifier"});
goog.provide("gridReport.utils.IdentifierHelper");
gridReport.Module.factory("gfIdentifierHelper", function() {
  var service = {}, symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  service.getIdentifier = function(index) {
    var dividend = index + 1, columnName = "", modulo;
    while (dividend > 0) {
      modulo = (dividend - 1) % 26;
      columnName = symbols[modulo].toString() + columnName;
      dividend = Math.floor((dividend - modulo) / 26);
    }
    return columnName;
  };
  return service;
});
goog.provide("gridReport.columnMath.ColumnMathManager");
goog.require("gridReport.columnMath.ExpressionParser");
goog.require("gridReport.model.Formula");
goog.require("gridReport.services.FormulaValidator");
goog.require("gridReport.columnMath.ColumnSelectionColors");
goog.require("gridReport.columnMath.IdentifierCssClasses");
goog.require("gridReport.utils.IdentifierHelper");
gridReport.Module.service("gfColumnMathManager", ["gfExpressionParser", "gfFormulaValidator", "gfColumnSelectionColors", "gfIdentifierCssClasses", "gfIdentifierHelper", function(gfExpressionParser, gfFormulaValidator, gfColumnSelectionColors, gfIdentifierCssClasses, gfIdentifierHelper) {
  var ColumnMathModel = function() {
    this.columnsDictionary_ = {};
    this.columns = [];
    this.tokens_ = [];
    this.columnAliases_ = {};
  };
  ColumnMathModel.prototype.expression = "";
  ColumnMathModel.prototype.tokens_ = undefined;
  ColumnMathModel.prototype.currentColorIndex_ = 0;
  ColumnMathModel.prototype.columnsDictionary_ = null;
  ColumnMathModel.prototype.columnAliases_ = null;
  ColumnMathModel.prototype.columns = null;
  ColumnMathModel.prototype.validationMessage = "";
  ColumnMathModel.prototype.expressionInserted = null;
  ColumnMathModel.prototype.expressionChanged = null;
  ColumnMathModel.prototype.initialColumnId = null;
  ColumnMathModel.prototype.getNextColor_ = function() {
    if (this.currentColorIndex_ + 1 > gfColumnSelectionColors.length) {
      this.currentColorIndex_ = 0;
    }
    return gfColumnSelectionColors[this.currentColorIndex_++];
  };
  ColumnMathModel.prototype.insertColumn = function(column, parentColumn) {
    if (!column) {
      throw new Error("column should be provided.");
    }
    var columnId = parentColumn == null ? column.id : this.addPostfix_(column.id, parentColumn);
    if (this.columnsDictionary_[columnId] == null) {
      this.columnsDictionary_[columnId] = {column:column};
    }
    var color;
    if (this.columnsDictionary_[columnId].color) {
      color = this.columnsDictionary_[columnId].color;
    } else {
      color = this.columnsDictionary_[columnId].color = this.getNextColor_();
    }
    (this.expressionInserted || angular.noop)("'" + columnId + "'", color);
    return color;
  };
  ColumnMathModel.prototype.setFormula = function(formula) {
    if (!formula) {
      throw new Error("formula should be provided");
    }
    var tokens = gfExpressionParser.tokenize(formula.expression);
    _.each(tokens, function(token) {
      if (token.type === "name") {
        var columnId, item = formula.columnIds[token.value];
        if (item) {
          if (item.id && item.parentId) {
            columnId = this.addPostfix_(item.id, _.findWhere(this.columns, {id:item.parentId}));
          } else {
            columnId = item;
          }
          token.value = "'" + columnId + "'";
        }
      }
    }, this);
    this.setExpression(_.pluck(tokens, "value").join(""));
  };
  ColumnMathModel.prototype.getExpression = function() {
    return this.expression.trim();
  };
  ColumnMathModel.prototype.getFormula = function() {
    var columnIds = {}, index = 0, usedColumns = {}, tokens = gfExpressionParser.tokenize(this.getExpression());
    _.each(tokens, function(token) {
      if (token.type === "string" && this.columnsDictionary_[token.value]) {
        var identifier;
        if (usedColumns[token.value]) {
          identifier = usedColumns[token.value];
        } else {
          identifier = gfIdentifierHelper.getIdentifier(index++);
          usedColumns[token.value] = identifier;
          var clmn = this.columnsDictionary_[token.value].column;
          if (clmn && clmn.parentColumn) {
            columnIds[identifier] = {id:clmn.id, parentId:clmn.parentColumn};
          } else {
            columnIds[identifier] = token.value;
          }
        }
        token.value = identifier;
      }
    }, this);
    return new gridReport.model.Formula({expression:_.pluck(tokens, "value").join(""), columnIds:columnIds});
  };
  ColumnMathModel.prototype.getAdcExpression = function() {
    var tokens = gfExpressionParser.tokenize(this.expression);
    _.each(tokens, function(token) {
      if (token.type === "string" && this.columnsDictionary_[token.value]) {
        token.value = "(" + this.columnsDictionary_[token.value].column.id + ")";
      }
    }, this);
    return _.pluck(tokens, "value").join("");
  };
  ColumnMathModel.prototype.setExpression = function(expression) {
    this.expression = expression;
    this.parseExpression_();
    this.validate();
    (this.expressionChanged || angular.noop)(expression);
  };
  ColumnMathModel.prototype.flatten_ = function(columns) {
    var flattenList = [];
    _.each(columns, function(column) {
      flattenList.push(column);
      _.each(column.gridColumns, function(subColumn) {
        flattenList.push(subColumn);
      }, this);
    }, this);
    return flattenList;
  };
  ColumnMathModel.prototype.addPostfix_ = function(expression, parentColumn) {
    return parentColumn ? expression + "/*" + this.getColumnAlias_(parentColumn) + "*/" : expression;
  };
  ColumnMathModel.prototype.setColumns = function(columns) {
    this.columns = this.flatten_(columns);
    this.columnsDictionary_ = {};
    _.each(this.columns, function(column) {
      var columnId;
      if (column.parentColumn && this.columnsDictionary_[column.parentColumn]) {
        columnId = this.addPostfix_(column.id, this.columnsDictionary_[column.parentColumn].column);
      } else {
        columnId = column.id;
      }
      this.columnsDictionary_[columnId] = {column:column};
    }, this);
    this.parseExpression_();
  };
  ColumnMathModel.prototype.parseExpression_ = function() {
    if (this.isValid()) {
      var tokens = gfExpressionParser.tokenize(this.getExpression());
      _.each(tokens, function(token) {
        if (token.type === "string") {
          if (this.columnsDictionary_[token.value] && this.columnsDictionary_[token.value].color == null) {
            this.columnsDictionary_[token.value].color = this.getNextColor_();
          }
        }
      }, this);
      this.tokens_ = tokens;
    }
  };
  ColumnMathModel.prototype.getExpressionColors = function() {
    var colors = {};
    _.each(this.columnsDictionary_, function(value, key) {
      if (value.color) {
        colors[key] = value.color;
      }
    });
    return colors;
  };
  ColumnMathModel.prototype.getExpressionColor = function(expression) {
    return this.columnsDictionary_[expression] && _.findWhere(this.tokens_, {value:expression}) ? this.columnsDictionary_[expression].color : undefined;
  };
  ColumnMathModel.prototype.getExpressionClassName = function(expression) {
    return gfIdentifierCssClasses[this.getExpressionColor(expression)];
  };
  ColumnMathModel.prototype.isValid = function() {
    return!_.isEmpty(this.getExpression()) && this.getValidationResult_().isValid;
  };
  ColumnMathModel.prototype.validate = function() {
    var validationResult = this.getValidationResult_();
    this.validationMessage = _.isEmpty(validationResult.errorMessages) ? "" : validationResult.errorMessages[0];
  };
  ColumnMathModel.prototype.getValidIdentifiers_ = function() {
    var validIdentifiers = [];
    _.each(this.columns, function(column) {
      validIdentifiers.push(column.id);
      _.each(column.gridColumns, function(subColumn) {
        validIdentifiers.push(this.addPostfix_(subColumn.id, _.findWhere(this.columns, {id:column.id})));
      }, this);
    }, this);
    return validIdentifiers;
  };
  ColumnMathModel.prototype.getValidationResult_ = function() {
    var expression = this.getExpression(), validationResult = gfFormulaValidator.validateExpression(expression, this.getValidIdentifiers_());
    if (this.initialColumnId && this.columnsDictionary_[this.initialColumnId]) {
      var additionalValidationResult = gfFormulaValidator.validateForCyclicDependencies(expression, this.initialColumnId, this.columns);
      validationResult.isValid = validationResult.isValid && additionalValidationResult.isValid;
      validationResult.errorMessages = _.union(validationResult.errorMessages, additionalValidationResult.errorMessages);
    }
    return validationResult;
  };
  ColumnMathModel.prototype.getColumnAlias_ = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    if (!this.columnAliases_[column.id]) {
      this.columnAliases_[column.id] = column.header;
    }
    return this.columnAliases_[column.id];
  };
  return{createInstance:function() {
    return new ColumnMathModel;
  }};
}]);
goog.provide("gridReport.columnMath.ColumnMathDialogController");
goog.require("gridReport.columnMath.ColumnMathManager");
goog.require("gridReport.services.UuidGenerator");
gridReport.Module.controller("gfColumnMathDialogController", ["$scope", "$modalInstance", "settings", "gfGridManagementService", "gfEventsAggregator", "$timeout", "gfColumnMathManager", "$translate", "gfFormulaValidator", "gfUuidGenerator", function($scope, $modalInstance, settings, gfGridManagementService, gfEventsAggregator, $timeout, gfColumnMathManager, $translate, gfFormulaValidator, gfUuidGenerator) {
  var eventsAggregator = gfEventsAggregator.getChildAggregator(settings.gridInstanceId);
  eventsAggregator.addHandler(gridReport.model.GridEvents.columnSelected, function(args) {
    if (args.column && (args.column.command && (args.column.isNumber() && (args.column.command.isDataCloud() && (!args.column.command.isVector() && (!args.column.command.isMultiSelect() && (!args.column.command.isMultiOutput() && (!args.column.command.isFactorRank() && (!(isInEditMode() && args.column.id == settings.column.id) && (args.parentColumn == null || args.parentColumn.command && args.parentColumn.command.isDataBlock())))))))))) {
      var color = $scope.model.insertColumn(args.column, args.parentColumn);
      gfGridManagementService.selectColumn(settings.gridInstanceId, args.column.id, color);
    }
  });
  function getSuggestedName() {
    var columnNumber = 1, columns = gfGridManagementService.getGridColumns(settings.gridInstanceId), suggestedName;
    do {
      suggestedName = $translate.instant("COLUMN_N", {columnNumber:columnNumber++});
    } while (_.findWhere(columns, {header:suggestedName}) != null);
    return suggestedName;
  }
  function createCommand() {
    var id, name, formula, enableHeatMap;
    if (isInEditMode()) {
      id = settings.column.command.id;
      name = settings.column.command.name;
    } else {
      id = gfUuidGenerator.get();
      name = getSuggestedName();
    }
    formula = $scope.model.getFormula();
    enableHeatMap = gfFormulaValidator.isHeatMapEnabled(formula, gfGridManagementService.getGridColumns(settings.gridInstanceId));
    return new gridReport.model.Command({id:id, name:name, expression:$scope.model.getAdcExpression(), formula:formula, dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, returnType:scr.DataTypes.Float, enableHeatMap:enableHeatMap, decimalDigits:1, metadata:{type:"columnmath"}});
  }
  function expressionChanged() {
    var gridColumns = gfGridManagementService.getGridColumns(settings.gridInstanceId);
    _.each(gridColumns, function(column) {
      gfGridManagementService.selectColumn(settings.gridInstanceId, column.id, $scope.model.getExpressionColor(column.id));
      if (column.gridColumns) {
        _.each(column.gridColumns, function(subColumn) {
          if (subColumn.parentColumn) {
            var parentColumn = _.findWhere(gridColumns, {id:subColumn.parentColumn});
            if (parentColumn) {
              gfGridManagementService.selectColumn(settings.gridInstanceId, subColumn.id, $scope.model.getExpressionColor(subColumn.id + "/*" + parentColumn.header + "*/"));
            }
          }
        });
      }
    });
  }
  function init() {
    gfGridManagementService.columnSelectionState(settings.gridInstanceId, true);
    $scope.model = gfColumnMathManager.createInstance();
    $scope.model.setColumns(gfGridManagementService.getGridColumns(settings.gridInstanceId));
    $scope.model.expressionChanged = expressionChanged;
    if (isInEditMode()) {
      $scope.model.initialColumnId = settings.column.id;
      $scope.model.setFormula(settings.column.command.formula);
    }
  }
  function isInEditMode() {
    return settings.column != null && settings.mode === "edit";
  }
  $scope.ok = function() {
    $scope.closeDialog();
    $timeout(function() {
      if (settings.mode === "edit" || settings.mode === "insert") {
        var eventType = isInEditMode() ? gridReport.model.InternalEvents.changeCommand : gridReport.model.InternalEvents.insertCommand;
        var prevCommand = settings.column ? settings.column.command : null;
        var curCommand = createCommand();
        if (eventType === gridReport.model.InternalEvents.changeCommand && (prevCommand && prevCommand.expression === curCommand.expression)) {
          return;
        }
        eventsAggregator.raiseEvent(eventType, {previousCommand:prevCommand, newCommand:curCommand, isUserTriggered:true, isFromUDIP:false});
      } else {
        eventsAggregator.raiseEvent(gridReport.model.InternalEvents.addCommand, {command:createCommand(), isUserTriggered:true, isFromUDIP:false});
      }
    });
  };
  $scope.closeDialog = function() {
    gfGridManagementService.columnSelectionState(settings.gridInstanceId, false);
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.onHeaderHover = function() {
    $(".gf-modal").draggable({handle:".modal-header"});
  };
  $scope.onEnterPressed = function() {
    if ($scope.model.isValid() === true) {
      $scope.ok();
    }
  };
  $scope.$on("$destory", function() {
    eventsAggregator.removeAllHandlers();
  });
  init();
}]);
goog.provide("gridReport.columnMath.ColumnMathDialogService");
goog.require("gridReport.columnMath.ColumnMathDialogController");
goog.require("gridReport.columnMath.ExressionEditorDirective");
gridReport.Module.service("gfColumnMathDialogService", ["$modal", function($modal) {
  var service = {};
  service.openDialog = function(gridInstanceId, options) {
    options = options || {};
    return $modal.open({windowClass:"gf-modal gf-column-math-dialog", templateUrl:"scripts/services/columnMath/ColumnMathDialog.html", controller:"gfColumnMathDialogController", backdrop:false, keyboard:false, resolve:{settings:function() {
      return{gridInstanceId:gridInstanceId, column:options.column, mode:options.mode};
    }}});
  };
  return service;
}]);
goog.provide("gridReport.directives.GridColumnContextMenuDirective");
goog.require("gridReport.directives.ContextMenuDirective");
goog.require("gridReport.Module");
goog.require("gridReport.model.SortingTypes");
goog.require("gridReport.columnMath.ColumnMathDialogService");
gridReport.Module.directive("gridColumnContextMenu", ["$translate", "$timeout", "gfColumnMathDialogService", "gfConditionalValueFormattingService", function($translate, $timeout, gfColumnMathDialogService, gfConditionalValueFormattingService) {
  return{restrict:"E", replace:true, require:"^gridReport", scope:{actions:"=", gridInstanceId:"="}, template:"<div>" + '<gf-context-menu menu-items="contextMenu.menuItems" ' + 'options="contextMenu.options" ' + 'visible="contextMenu.visible" ' + 'position="contextMenu.position" ' + 'open-direction="contextMenu.openDirection">' + "</gf-context-menu>" + "</div>", link:function(scope, element, attrs, controller) {
    scope.clickedColumn = {};
    var contextMenuWidth = 160;
    var gridReportContainer = element.closest(".gridReportContainer").first();
    scope.contextMenu = {openDirection:"right", menuItems:[], options:{width:contextMenuWidth + "px", height:"140px", autoCloseOnClick:true, autoOpenPopup:false, mode:"popup", theme:controller.theme.theme, animationShowDuration:0, animationHideDuration:0}};
    function tooggleMenuVisibility(value) {
      scope.contextMenu.visible = !!value;
      $timeout(angular.noop);
    }
    function transposedGridContainerMouseDownHandler(event) {
      var result, columnId, content = $(event.target).closest('[column-key="columnName"]').first(), isFirstColumn = true;
      if (_.size(content) < 1) {
        isFirstColumn = false;
        content = $(event.target).closest('[role="gridcell"]').first();
      }
      if (_.size(content) > 0) {
        columnId = decodeURI($(event.target).closest("[row-key]").attr("row-key"));
        if (!columnId || columnId === "undefined") {
          return true;
        }
        scope.clickedColumn = controller.updateClickedColumnById(columnId);
        scope.contextMenu.menuItems = (isFirstColumn ? getMenuItems : getSimpleTransposedMenuItems)(scope.clickedColumn);
        calculatePosition(event);
        if (scope.contextMenu.visible) {
          scope.$apply(function() {
            scope.contextMenu.visible = false;
          });
        }
        tooggleMenuVisibility(true);
        result = false;
      } else {
        scope.contextMenu.visible = false;
        result = true;
      }
      scope.$apply();
      return result;
    }
    function calculatePosition(event) {
      var initialXPos = parseInt(event.clientX) + 5 + $(window).scrollLeft();
      var finalXPos = initialXPos + contextMenuWidth >= $(document).width() ? initialXPos - contextMenuWidth : initialXPos;
      var finalYPos = parseInt(event.clientY) + 5 + $(window).scrollTop();
      scope.contextMenu.openDirection = finalXPos + contextMenuWidth * 2 <= $(document).width() ? "right" : "left";
      scope.contextMenu.position = {x:finalXPos, y:finalYPos};
    }
    function getColId(element) {
      var items = element.attr("class").match(/jqx-column-id-(\S+)/);
      if (items == undefined || items.length < 2) {
        return null;
      }
      return decodeURI(items[1]);
    }
    function gridReportContainerMouseDownHandler(event) {
      var result;
      var columnHeader = $(event.target).closest(".jqx-grid-column-header").first();
      if (columnHeader.length > 0) {
        var columnId = getColId(columnHeader);
        if (columnId == null) {
          scope.contextMenu.visible = false;
          result = true;
        } else {
          var subColId = getColId($(event.target).closest(".jqx-column-command-header").first());
          scope.clickedColumn = controller.updateClickedColumnById(columnId, subColId == columnId ? null : subColId);
          scope.contextMenu.menuItems = getMenuItems(scope.clickedColumn);
          if (_.isEmpty(scope.contextMenu.menuItems)) {
            return true;
          }
          calculatePosition(event);
          if (scope.contextMenu.visible) {
            scope.$apply(function() {
              scope.contextMenu.visible = false;
            });
          }
          tooggleMenuVisibility(true);
          result = false;
        }
      } else {
        scope.contextMenu.visible = false;
        result = true;
      }
      scope.$apply();
      return result;
    }
    function bodyMouseDownHandler(event) {
      if (scope.contextMenu.visible && (event.which != 3 && $(event.originalEvent.srcElement).closest(".jqx-menu-item, .jqx-menu-item-top").length == 0)) {
        scope.contextMenu.visible = false;
        scope.$apply();
      }
    }
    function mouseDownHandler(event) {
      if (event.which != 3 || !controller.isColumnContextMenuActive()) {
        return true;
      }
      return controller.getIsTransposed() ? transposedGridContainerMouseDownHandler(event) : gridReportContainerMouseDownHandler(event);
    }
    angular.element(gridReportContainer).mousedown(mouseDownHandler);
    angular.element("body,html").mousedown(bodyMouseDownHandler);
    function getSimpleTransposedMenuItems(clickedColumn) {
      var menuItems = [], clickedColumnModel = clickedColumn.subColModel || clickedColumn.model;
      if (controller.canInsertBlankRow()) {
        menuItems.push({label:$translate.instant("INSER_BLANK_ROW"), action:function() {
          controller.insertBlankColumn(clickedColumnModel.id, "before");
        }});
      }
      return menuItems;
    }
    function getMenuItems(clickedColumn) {
      var menuItems = [];
      var isTransposedGrid = controller.getIsTransposed();
      var clickedColumnModel = clickedColumn.subColModel || clickedColumn.model;
      if (isTransposedGrid && controller.canInsertBlankRow()) {
        menuItems.push({label:$translate.instant("INSER_BLANK_ROW"), action:function() {
          controller.insertBlankColumn(clickedColumnModel.id, "before");
        }});
      }
      if (controller.columnContextMenuOptions.canPin && (!clickedColumnModel.forcePinned && (clickedColumnModel.canPin && !isTransposedGrid))) {
        menuItems.push(!clickedColumnModel.pinned ? {label:$translate.instant("PIN"), action:controller.pinColumn} : {label:$translate.instant("UNPIN"), action:controller.unpinColumn});
      }
      if (controller.columnContextMenuOptions.canAdd && clickedColumnModel.canAdd) {
        menuItems.push({label:!isTransposedGrid ? $translate.instant("ADD_COLUMN") : $translate.instant("ADD_FIELD"), action:controller.insertColumn});
      }
      if (controller.columnContextMenuOptions.canAddFormula && clickedColumnModel.canAddFormula) {
        menuItems.push({label:$translate.instant("ADD_FORMULA"), action:function() {
          gfColumnMathDialogService.openDialog(scope.gridInstanceId, {column:clickedColumnModel, mode:"insert"});
        }});
      }
      if (controller.columnContextMenuOptions.canAddRank && (isColumnCanBeConvertedToMfr(clickedColumnModel) && clickedColumn.subColModel == null)) {
        menuItems.push(getAddRankForColumnMenuSection(clickedColumnModel));
      }
      if (controller.columnContextMenuOptions.canEdit && (clickedColumnModel.canEdit && !clickedColumnModel.command.isDeleted())) {
        menuItems.push({label:$translate.instant("EDIT_COLUMN"), action:controller.editColumn});
      }
      if (controller.columnContextMenuOptions.canDelete && clickedColumnModel.canDelete) {
        menuItems.push({label:$translate.instant("REMOVE_COLUMN"), action:controller.deleteColumn});
      }
      if (controller.columnContextMenuOptions.canRename && (clickedColumnModel.canRename && (!clickedColumnModel.command.isFactorRank() && !clickedColumnModel.command.isDeleted()))) {
        menuItems.push({label:$translate.instant("RENAME_COLUMN"), action:controller.renameColumn});
      }
      if (controller.columnContextMenuOptions.canRename && (clickedColumnModel.canRename && !clickedColumnModel.command.isFactorRank())) {
        menuItems.push({label:$translate.instant("REVERT_RENAMING"), action:controller.resetHeaderToDefault, disabled:!clickedColumnModel.isHeaderChanged()});
      }
      if (controller.columnContextMenuOptions.canHideParameters && (clickedColumnModel.canHideParameters && (clickedColumnModel.command && clickedColumnModel.command.hasParameters()))) {
        menuItems.push(clickedColumnModel.areParametersVisible ? {label:$translate.instant("HIDE_PARAMETERS"), action:_.partial(controller.setColumnParametersVisibility, false)} : {label:$translate.instant("SHOW_PARAMETERS"), action:_.partial(controller.setColumnParametersVisibility, true)});
      }
      if (controller.columnContextMenuOptions.canChangeCellsFormatting && (clickedColumnModel.isNumber() || clickedColumnModel.isDate())) {
        menuItems.push(getFormatCellsMenuSection(clickedColumn));
      }
      if (controller.columnContextMenuOptions.canChangeSortingType && clickedColumnModel.isNumber()) {
        menuItems.push(getColumnSortingTypeMenuSection(clickedColumn));
      }
      if (controller.columnContextMenuOptions.canChangeStatistics && (clickedColumnModel.canChangeStatistics && (clickedColumnModel.totalCalculations && (clickedColumnModel.totalCalculations.length > 0 && !isTransposedGrid)))) {
        menuItems.push(getColumnStatisticsMenuSection(clickedColumn));
      }
      return menuItems;
    }
    function getColumnSortingTypeMenuSection(column) {
      var isSelectedAction = function(sortingType) {
        return column.model.sortingType == sortingType;
      };
      var getItem = function(text, value) {
        return{action:_.partial(controller.setColumnSortingType, column.model.id, value, true), selected:isSelectedAction(value), html:formatLabel(text, isSelectedAction(value))};
      };
      return{label:$translate.instant("SORTING_TYPE"), items:[getItem($translate.instant("BY_VALUE"), gridReport.model.SortingTypes.ByValue), getItem($translate.instant("BY_ABSOLUTE_VALUE"), gridReport.model.SortingTypes.ByAbsoluteValue)]};
    }
    function getColumnFormattingMenuSection(gridColumn) {
      var isSelectedAction = function(numOfDigits) {
        return gridColumn.cellsFormat.decimalDigits === numOfDigits;
      };
      var getFormattingItem = function(text, value) {
        return{action:function() {
          gridColumn.cellsFormat.decimalDigits = value;
          controller.applyCellsFormatting();
        }, selected:isSelectedAction(value), html:formatTickedLabel(text, isSelectedAction(value))};
      };
      return{html:formatTickedLabel($translate.instant("PRECISION")), subMenuWidth:"140px", items:[getFormattingItem($translate.instant("FORMAT_NO_SYMBOLS"), 0), getFormattingItem($translate.instant("FORMAT_ONE_SYMBOLS"), 1), getFormattingItem($translate.instant("FORMAT_TWO_SYMBOLS"), 2), getFormattingItem($translate.instant("FORMAT_THREE_SYMBOLS"), 3), getFormattingItem($translate.instant("FORMAT_FOUR_SYMBOLS"), 4)]};
    }
    function getDateMenuSection(gridColumn) {
      var items = [getDateFormatSubMenuItem(gridColumn, $translate.instant("DD_MM_YYYY"), $translate.instant("DD_MM_YYYY_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("DD_MM_YY"), $translate.instant("DD_MM_YY_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("DD_MM"), $translate.instant("DD_MM_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("MM_DD_YYYY"), $translate.instant("MM_DD_YYYY_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("MM_DD_YY"), 
      $translate.instant("MM_DD_YY_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("MM_DD"), $translate.instant("MM_DD_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("MM_YYYY"), $translate.instant("MM_YYYY_F")), getDateFormatSubMenuItem(gridColumn, $translate.instant("MM_YY"), $translate.instant("MM_YY_F"))];
      if ($translate.instant("SHOW_ABBREVIATIONS") === "true") {
        items.push(getDateFormatSubMenuItem(gridColumn, $translate.instant("DAY_MONTHDATE_YEAR"), "dddd, MMMM d, yyyy"));
        items.push(getDateFormatSubMenuItem(gridColumn, $translate.instant("DATE_ABBREVIATEDMONTH"), "d-MMM"));
        items.push(getDateFormatSubMenuItem(gridColumn, $translate.instant("DATE_ABBREVIATEDMONYH_YEARE"), "d-MMM-yyyy"));
        items.push(getDateFormatSubMenuItem(gridColumn, $translate.instant("MONTH_YEAR"), "MM-yyyy"));
        items.push(getDateFormatSubMenuItem(gridColumn, $translate.instant("ABBREVIATEMONYH_ABBREVIATEDYEAR"), "MMM-yy"));
      }
      items = _.filter(items, function(item) {
        return item != null;
      });
      return{html:formatTickedLabel($translate.instant("DATE")), subMenuWidth:"250px", items:items};
    }
    function getNegativeNumberMenuSection(gridColumn) {
      var disabled = gridColumn.getReturnType() === scr.DataTypes.Score;
      return{html:formatTickedLabel($translate.instant("NUMBER")), subMenuWidth:"140px", items:[getNegativeNumberFormatSubMenuItem(gridColumn, gridReport.model.NegativeNumberFormats.Default, {label:"-12345"}, disabled), getNegativeNumberFormatSubMenuItem(gridColumn, gridReport.model.NegativeNumberFormats.ColoredDefault, {label:"-12345", color:"red"}, disabled), getNegativeNumberFormatSubMenuItem(gridColumn, gridReport.model.NegativeNumberFormats.Colored, {label:"12345", color:"red"}, disabled), getNegativeNumberFormatSubMenuItem(gridColumn, 
      gridReport.model.NegativeNumberFormats.Brackets, {label:"(12345)"}, disabled), getNegativeNumberFormatSubMenuItem(gridColumn, gridReport.model.NegativeNumberFormats.ColoredBrackets, {label:"(12345)", color:"red"}, disabled)], disabled:disabled};
    }
    function getPercentageMenuSection(gridColumn) {
      var selected = !!gridColumn.cellsFormat.percentage;
      return{html:formatTickedLabel($translate.instant("PERCENTAGE"), selected), action:function() {
        gridColumn.cellsFormat.setPercentage(!gridColumn.cellsFormat.percentage);
        gridColumn.conditionalValueFormatting = gfConditionalValueFormattingService.create(gridColumn);
        controller.applyCellsFormatting();
      }, selected:selected};
    }
    function getThousandsSeparatorMenuSection(gridColumn) {
      return{html:formatTickedLabel($translate.instant("THOUSANDS_SEPARATOR")), subMenuWidth:"140px", items:[getThousandsSepratorSubMenuItem(gridColumn, $translate.instant("NONE"), ""), getThousandsSepratorSubMenuItem(gridColumn, ".", "."), getThousandsSepratorSubMenuItem(gridColumn, ",", ",")]};
    }
    function getFormatCellsMenuSection(clickedColumn) {
      var menuItems = [], gridColumn = clickedColumn.subColModel || clickedColumn.model;
      if (gridColumn.isDate()) {
        menuItems.push(getDateMenuSection(gridColumn));
      }
      if (gridColumn.isNumber()) {
        menuItems.push(getNegativeNumberMenuSection(gridColumn));
      }
      if (gridColumn.isNumber()) {
        menuItems.push(getPercentageMenuSection(gridColumn));
      }
      if (controller.columnContextMenuOptions.canChangeValueFormatting && (gridColumn.canChangeValueFormatting && gridColumn.isNumber())) {
        menuItems.push(getColumnFormattingMenuSection(gridColumn));
      }
      if (gridColumn.isNumber()) {
        menuItems.push(getThousandsSeparatorMenuSection(gridColumn));
      }
      return{label:$translate.instant("FORMAT_CELLS"), items:menuItems};
    }
    function getThousandsSepratorSubMenuItem(gridColumn, label, thousandsSeparator) {
      var selected = gridColumn.cellsFormat.thousandsSeparator === thousandsSeparator;
      return{html:formatTickedLabel(label, selected), action:function() {
        gridColumn.cellsFormat.thousandsSeparator = thousandsSeparator;
        controller.applyCellsFormatting();
      }, selected:selected};
    }
    function getNegativeNumberFormatSubMenuItem(gridColumn, negativeNumberFormat, options, disabled) {
      var selected = gridColumn.cellsFormat.negativeNumberFormat === negativeNumberFormat;
      return{action:function() {
        gridColumn.cellsFormat.setNegativeNumberFormat(negativeNumberFormat);
        gridColumn.conditionalValueFormatting = gfConditionalValueFormattingService.create(gridColumn);
        controller.applyCellsFormatting();
      }, selected:selected, html:formatTickedLabel(options.label, selected, options.color), disabled:disabled};
    }
    function getDateFormatSubMenuItem(gridColumn, label, dateFormat) {
      if (label == "" || dateFormat == "") {
        return null;
      }
      var selected = gridColumn.cellsFormat.dateFormat === dateFormat;
      return{html:formatTickedLabel(label, selected), action:function() {
        gridColumn.cellsFormat.dateFormat = dateFormat;
        controller.applyCellsFormatting();
      }, selected:selected};
    }
    function getAddRankForColumnMenuSection(gridColumn) {
      return{label:$translate.instant("ADD_RANK_FOR_THIS_COLUMN"), items:[getAddRankForColumnItem($translate.instant("PERCENTILE"), scr.mfr.MFMethodology.PercentileScoring, gridColumn), getAddRankForColumnItem($translate.instant("DECILE"), scr.mfr.MFMethodology.DecileScoring, gridColumn), getAddRankForColumnItem($translate.instant("QUINTILE"), scr.mfr.MFMethodology.QuintileScoring, gridColumn), getAddRankForColumnItem($translate.instant("QUARTILE"), scr.mfr.MFMethodology.OuartileScoring, gridColumn), 
      getAddRankForColumnItem($translate.instant("RANK"), scr.mfr.MFMethodology.NScoring, gridColumn), getAddRankForColumnItem($translate.instant("ZSCORE"), scr.mfr.MFMethodology.ZScores, gridColumn)]};
    }
    function isColumnCanBeConvertedToMfr(gridColumn) {
      return gridColumn && (gridColumn.canAddRank && (gridColumn.command && ((gridColumn.command.isNumber() || gridColumn.command.isBoolean()) && (!gridColumn.command.isMultiFactorRank() && (!gridColumn.command.isFactorRank() && (!gridColumn.command.isColumnMath() && !gridColumn.command.isVector()))))));
    }
    function getAddRankForColumnItem(label, methodology, gridColumn) {
      return{label:label, action:function() {
        controller.addRankForColumn(gridColumn, methodology);
      }};
    }
    function getColumnStatisticsMenuSection(column) {
      var isDisabled = !controller.canChangeStatistics();
      var statisticsSubItems = [];
      var columnModel = column.subColModel || column.model;
      if (!isDisabled) {
        statisticsSubItems = _.foldl(columnModel.totalCalculations, function(list, totalCalc) {
          var selected = isSelected(column, totalCalc);
          list.push({selected:selected, html:formatTickedLabel(totalCalc.displayText, selected), action:_.partial(controller.setTotalCalculation, totalCalc), disabled:isDisabled});
          return list;
        }, []);
      }
      return{label:$translate.instant("SUMMARY_STATISTICS"), items:statisticsSubItems, disabled:isDisabled};
    }
    function formatTickedLabel(text, selected, color) {
      var result = "";
      var notSelectedClass = "gf-context-menuitem-tick";
      if (selected) {
        result = '<span class="icon-tick gf-selected" style="margin-right:3px;"></span>';
      } else {
        notSelectedClass = "gf-context-menuitem-no-tick";
      }
      if (color) {
        result += '<span class="' + notSelectedClass + '" style="color:' + color + '">' + text + "</span>";
      } else {
        result += '<span class="' + notSelectedClass + '">' + text + "</span>";
      }
      return result;
    }
    function formatLabel(text, selected, color) {
      if (selected) {
        return'<span style="color:#ff9c00">' + text + "</span>";
      }
      if (color) {
        return'<span style="color:' + color + '">' + text + "</span>";
      }
      return "<span>" + text + "</span>";
    }
    function isSelected(clickedColumn, calc) {
      var gridColumn = clickedColumn.subColModel || clickedColumn.model;
      return!gridColumn.selectedTotalsCalculation && calc.isNone || gridColumn.selectedTotalsCalculation && calc.name == gridColumn.selectedTotalsCalculation.name;
    }
    function hideContextMenu() {
      if (scope.contextMenu.visible) {
        tooggleMenuVisibility(false);
      }
    }
    if (scope.actions) {
      scope.actions = {hideContextMenu:hideContextMenu};
    }
    gridReportContainer.on("contextmenu", function() {
      return false;
    });
    element.bind("$destroy", function() {
      angular.element("body,html").unbind("mousedown", bodyMouseDownHandler);
      angular.element(gridReportContainer).unbind("mousedown", gridReportContainerMouseDownHandler);
    });
  }};
}]);
goog.provide("gridReport.gridReportVersion");
gridReport.gridReportVersion = "20.0.19";
goog.provide("gridReport.localization.ja");
gridReport.localization = gridReport.localization || {};
gridReport.localization.ja = {TOGGLE:"\u5207\u308a\u66ff\u3048", GROUPING:"\u30b0\u30eb\u30fc\u30d7\u5316", PRECISION:"\u6841\u6570", DEFAULT:"\u521d\u671f\u5024", FORMAT_NO_SYMBOLS:"0", FORMAT_ONE_SYMBOLS:"0.0", FORMAT_TWO_SYMBOLS:"0.00", FORMAT_THREE_SYMBOLS:"0.000", FORMAT_FOUR_SYMBOLS:"0.0000", STATISTICS:"\u7d71\u8a08", ADD_COLUMN:"\u5217\u3092\u8ffd\u52a0", EDIT_COLUMN:"\u7de8\u96c6", REMOVE_COLUMN:"\u524a\u9664", RENAME_COLUMN:"\u540d\u524d\u5909\u66f4", REVERT_RENAMING:"\u540d\u524d\u5909\u66f4\u3092\u5143\u306b\u623b\u3059", 
PIN:"\u5217\u3092\u56fa\u5b9a", UNPIN:"\u5217\u306e\u56fa\u5b9a\u89e3\u9664", HIDE_PARAMETERS:"\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u975e\u8868\u793a", SHOW_PARAMETERS:"\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u8868\u793a", SELECT_ALL:"\u3059\u3079\u3066\u9078\u629e", DESELECT_ALL:"\u3059\u3079\u3066\u9078\u629e\u89e3\u9664", UNGROUP:"\u30b0\u30eb\u30fc\u30d7\u89e3\u9664", NEW:"\u65b0\u898f\u4f5c\u6210", OBJECT_MANAGER:"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u30de\u30cd\u30fc\u30b8\u30e3\u30fc", 
SAVE:"\u4fdd\u5b58", REVERT:"\u623b\u308b", EXCLUDE:"\u9664\u5916", INCLUDE:"\u542b\u3080", ADDITIONAL_ACTIONS:"\u305d\u306e\u4ed6\u306e\u30a2\u30af\u30b7\u30e7\u30f3", ACTIONS:"\u30a2\u30af\u30b7\u30e7\u30f3", ADD_ALL_TO_LIST:"\u3059\u3079\u3066\u306e\u9805\u76ee\u3092\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0", ADD_SELECTED_TO_LIST:"\u9078\u629e\u3057\u305f\u9805\u76ee\u3092\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0", WARNING:"\u8b66\u544a", OK:"OK", CANCEL:"\u30ad\u30e3\u30f3\u30bb\u30eb", DONT_ASK_AGAIN:"\u6b21\u56de\u304b\u3089\u78ba\u8a8d\u3057\u306a\u3044", 
RECALL:"\u547c\u3073\u51fa\u3057", CLOSE:"\u9589\u3058\u308b", PERSONAL:"\u500b\u4eba\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", GLOBAL:"Thomson Reuters \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", RECENT:"\u6700\u8fd1\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", CUSTOM_EXPRESSIONS:"\u30ab\u30b9\u30bf\u30e0\u5f0f", FORMAT_WAS_CHANGED_CONFIRMATION:"'{{name}}' \u306e\u5909\u66f4\u3092\u4fdd\u5b58\u3057\u307e\u3059\u304b?", RESULTS_WITH_COUNT:"\u7d50\u679c ({{count}})", EXCLUDED_WITH_COUNT:"\u9664\u5916\u9805\u76ee ({{count}})", 
ALL_SECURITIES_WITH_COUNT:"\u3059\u3079\u3066\u306e\u8a3c\u5238 ({{count}})", IDENTIFIERS_ADDED_WITH_COUNT_INFO_MSG:"{{count}} \u4ef6\u306e\u8b58\u5225\u30b3\u30fc\u30c9\u304c\u9664\u5916\u9805\u76ee\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002", IDENTIFIERS_REMOVED_WITH_COUNT_INFO_MSG:"{{count}} \u4ef6\u306e\u8b58\u5225\u30b3\u30fc\u30c9\u304c\u9664\u5916\u9805\u76ee\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002", FORMAT_WILL_BE_REVERTED_CONFIRMATION:"\u5f62\u5f0f\u304c\u521d\u671f\u8a2d\u5b9a\u306b\u623b\u308a\u307e\u3059\u3002", 
SEARCH:"\u691c\u7d22", NAME:"\u540d\u79f0", NUMBER_OF_FIELDS:"\u30d5\u30a3\u30fc\u30eb\u30c9\u6570", SHARP:"#", FIELD_NAME:"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d", PREVIEW:"\u30d7\u30ec\u30d3\u30e5\u30fc", LAST_MODIFIED:"\u6700\u7d42\u66f4\u65b0\u65e5", IDENTIFIER:"\u8b58\u5225\u30b3\u30fc\u30c9", ERROR:"\u30a8\u30e9\u30fc", INFORMATION:"\u60c5\u5831", GROUPED_BY:"\u30b0\u30eb\u30fc\u30d7\u5225\u8868\u793a:", SUM:"\u5408\u8a08", AVERAGE:"\u5e73\u5747", MEDIAN:"\u4e2d\u592e\u5024", SERVER_SIDE:"\u30b5\u30fc\u30d0\u30fc\u5074", 
NONE:"\u306a\u3057", TEMPLATE_MANAGER:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u30de\u30cd\u30fc\u30b8\u30e3\u30fc", REPORT_TEMPLATE_MANAGER:"\u30ec\u30dd\u30fc\u30c8 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u30de\u30cd\u30fc\u30b8\u30e3\u30fc", SERVICE_UNAVAILABLE:"\u30b5\u30fc\u30d3\u30b9\u304c\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002", UNABLE_TO_LOAD_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3002", UNABLE_TO_LOAD_GLOBAL_TEMPLATES:"\u30b0\u30ed\u30fc\u30d0\u30eb \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3002", 
UNABLE_TO_SAVE_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4fdd\u5b58\u3067\u304d\u307e\u305b\u3093\u3002", UNABLE_TO_LOAD_PERSONAL_TEMPLATES:"\u500b\u4eba\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3002", UNABLE_TO_DELETE_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u524a\u9664\u3067\u304d\u307e\u305b\u3093\u3002", UNABLE_TO_RENAME_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u3092\u5909\u66f4\u3067\u304d\u307e\u305b\u3093\u3002", 
UNABLE_TO_COPY_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30b3\u30d4\u30fc\u3067\u304d\u307e\u305b\u3093\u3002", INVALID_CHARACTER:"\u7121\u52b9\u306a\u6587\u5b57\u5217", NAME_IS_REQUIRED:"\u540d\u79f0\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002", NEW_TEMPLATE:"\u65b0\u898f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", SAVE_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4fdd\u5b58", SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST:"\u30b5\u30fc\u30d3\u30b9\u304c\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u518d\u5ea6\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002", 
FAILED_TO_RESOLVE_UNIVERSE:"\u30e6\u30cb\u30d0\u30fc\u30b9\u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002", THERE_ARE_NO_ITEMS_TO_DISPLAY:"\u8868\u793a\u3059\u308b\u9805\u76ee\u306f\u3042\u308a\u307e\u305b\u3093\u3002", MAX_ROWS_COUNT_EXCEEDED_INDUSTRY_MESSAGE:"\u9078\u629e\u3057\u305f\u6761\u4ef6\u306e\u7d50\u679c\u306f\u3001{{maxRowsCount}} \u884c\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u3088\u308a\u8a73\u7d30\u306a\u6761\u4ef6\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002", 
RENAME:"\u540d\u79f0\u3092\u5909\u66f4", DUPLICATE:"\u30b3\u30d4\u30fc", DELETE:"\u524a\u9664", COLUMN_ALREADY_EXISTS:'\u5217\u540d\u3001"{{name}}" \u306f\u3001\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u305f\u3081\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002', NOT_AVAILABLE:"\u5229\u7528\u3067\u304d\u307e\u305b\u3093", NOT_AVAILABLE_ABBREVIATION:"N/A", NO_MATCHING_DATA_ITEMS:"\u4e00\u81f4\u3059\u308b\u30c7\u30fc\u30bf\u9805\u76ee\u304c\u3042\u308a\u307e\u305b\u3093\u3002", 
SEARCH_RESULTS:"\u691c\u7d22\u7d50\u679c", PRINT:"\u5370\u5237", LOAD:"\u30ed\u30fc\u30c9", CREATE_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f5c\u6210", MANAGE_TEMPLATES:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7ba1\u7406", UNSAVED_TEMPLATE:"\u672a\u4fdd\u5b58\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", CLICK_TO_VIEW_FIELDS_IN_TEMPLATE:"\u30af\u30ea\u30c3\u30af\u3057\u3066\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8868\u793a", SEARCH_FOR_TEMPLATES:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u691c\u7d22", 
TEMPLATE_NAME:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d", NAME_ALREADY_EXISTS:"\u3053\u306e\u540d\u524d\u306f\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002", DO_NOT_SAVE:"\u4fdd\u5b58\u3057\u306a\u3044", SAVE_AS:"\u540d\u524d\u3092\u4ed8\u3051\u3066\u4fdd\u5b58", EXPORT_ALL_AS_VALUES:"\u3059\u3079\u3066\u3092\u5024\u3068\u3057\u3066\u30a8\u30af\u30b9\u30dd\u30fc\u30c8", EXPORT_ALL_AS_FORMULAS:"\u3059\u3079\u3066\u3092\u95a2\u6570\u3068\u3057\u3066\u30a8\u30af\u30b9\u30dd\u30fc\u30c8", 
EXPORT_SELECTED_AS_VALUES:"\u9078\u629e\u3057\u305f\u5024\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8", EXPORT_SELECTED_AS_FORMULAS:"\u9078\u629e\u3057\u305f\u95a2\u6570\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8", OPEN_ALL_IN_QUOTE_OBJECT:"\u3059\u3079\u3066\u3092\u30af\u30a9\u30fc\u30c8\u3067\u958b\u304f", OPEN_SELECTED_IN_QUOTE_OBJECT:"\u9078\u629e\u3057\u305f\u9805\u76ee\u3092\u30af\u30a9\u30fc\u30c8\u3067\u958b\u304f", TEMPLATE_ALREADY_EXISTS_CONFIRMATION:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d '{{name}}' \u306f\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u306e\u30ec\u30dd\u30fc\u30c8 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u304b?", 
REPORT_TEMPLATE:"\u30ec\u30dd\u30fc\u30c8 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", SEE_ERROR_DETAILS:"\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002", REPORT_TEMPLATE_SUCCESSFULLY_SAVED_INFO_MSG:"\u30ec\u30dd\u30fc\u30c8 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u6b63\u5e38\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3057\u305f\u3002", MAX_LENGTH_EXCEEDED:"\u6587\u5b57\u6570\u304c\u5236\u9650\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002", TEMPLATE_DETAILS:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u8a73\u7d30", 
ADD_SECURITY:"\u8a3c\u5238\u3092\u8ffd\u52a0", CRITERIA_FOR_GROUPING_ROWS:"\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u3059\u308b\u6761\u4ef6", ORDER:"\u9806\u5e8f", CRITERIA:"\u6761\u4ef6", ENABLE_GROUPING:"\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b", REGION:"\u5730\u57df", COUNTRY:"\u56fd", INDUSTRY:"\u696d\u7a2e", GICS:"GICS", TRBC:"TRBS", BUSINESS_SECTOR:"\u4e8b\u696d\u30bb\u30af\u30bf\u30fc", ECONOMIC_SECTROR:"\u7d4c\u6e08\u30bb\u30af\u30bf\u30fc", INDUSTRY_GROUP:"\u696d\u7a2e\u30b0\u30eb\u30fc\u30d7", 
INDUSTRY_NAME:"\u696d\u7a2e\u540d", SECTOR_NAME:"\u30bb\u30af\u30bf\u30fc\u540d", SUBINDUSTRY_NAME:"\u526f\u696d\u7a2e\u540d", COUNTRY_OF_EXCHANGE:"\u53d6\u5f15\u6240\u56fd", COUNTRY_OF_HEADQURTERS:"\u672c\u793e\u6240\u5728\u56fd", SELECT_FIELD:"\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u9078\u629e", EDIT:"\u7de8\u96c6", GROUP_ROWS:"\u30b0\u30eb\u30fc\u30d7", REMOVE_ROW:"\u524a\u9664", ADVANCED_SETTINGS_BUTTON_TITLE:"\u8a73\u7d30\u8a2d\u5b9a", ADVANCED_SETTINGS_DEFAULT_CURRENCY:"\u65e2\u5b9a\u901a\u8ca8", 
ADVANCED_SETTINGS_NO_DEFAULT_CURRENCY:"\u306a\u3057", ADVANCED_SETTINGS_UPDATE:"\u30ec\u30dd\u30fc\u30c8\u3092\u66f4\u65b0", ADVANCED_SETTINGS_CANCEL:"\u30ad\u30e3\u30f3\u30bb\u30eb", STATISTICS_CONTROL_COLUMN_STATISTICS:"\u7d71\u8a08\u5024", STATISTICS_CONTROL_COLUMN_PREMIUM_DISCOUNT:"\u30d7\u30ec\u30df\u30a2\u30e0/\u30c7\u30a3\u30b9\u30ab\u30a6\u30f3\u30c8", FOCUS_STOCK_FINANCIALS:"\u5f53\u8a72\u9298\u67c4 (\u30d5\u30a1\u30a4\u30ca\u30f3\u30b7\u30e3\u30eb: {{currencyId}})", FOCUS_STOCK_PRICING:"\u5f53\u8a72\u9298\u67c4 (\u30d7\u30e9\u30a4\u30b7\u30f3\u30b0: {{currencyId}})", 
PRESS_REFRESH_TO_DISPLAY_NUMBER_OF_FIELDS:"\u66f4\u65b0\u3057\u3066\u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u3092\u8868\u793a\u3059\u308b\u3002", SECURITY_ALREADY_ADDED:'\u8a3c\u5238 "{{ric}}" \u306f\u3001\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\u3002', SECURITIES_ALREADY_ADDED:'\u8a3c\u5238 "{{rics}}" \u306f\u3001\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\u3002', ADD_RANK:"\u30e9\u30f3\u30af\u3092\u8ffd\u52a0", SHOW_FACTOR_RANKS:"\u30d5\u30a1\u30af\u30bf\u30fc\u30e9\u30f3\u30af\u3092\u8868\u793a", 
FIELD_DEFINITION:"\u9805\u76ee\u306e\u5b9a\u7fa9", THOMSON_REUTERS_EIKON_EXCEL_FUNCTION:"Thomson Reuters Eikon Excel \u95a2\u6570", SUM_SYMBOL:"\u03a3", EXCLUDED:"\u9664\u5916", INCLUDE_ALL:"\u3059\u3079\u3066\u3092\u542b\u3080", COMPANY_NAME:"\u4f1a\u793e\u540d", EXPAND_ALL:"\u3059\u3079\u3066\u5c55\u958b", COLLAPSE_ALL:"\u3059\u3079\u3066\u6298\u308a\u305f\u305f\u3080", NATIVE_CURRENCY:"\u81ea\u56fd\u901a\u8ca8", MULTIPLE_VALUES:"\u8907\u6570\u306e\u5024", COLUMNS_RETURN_MULTIPLE_VALUES:"\u8907\u6570\u306e\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002", 
DATA_ITEM_IS_NO_LONGER_SUPPORTED:"\u3053\u306e\u30c7\u30fc\u30bf\u9805\u76ee\u306f\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002", PREMIUM_DISCOUNT_TITLE:"\u5bfe {{statisticsName}}", DISPLAY_OPTIONS:"\u8868\u793a\u30aa\u30d7\u30b7\u30e7\u30f3", SMALL:"\u5c0f", LARGE:"\u5927", MEDIUM:"\u4e2d", FONT_SIZE_AND_ROW_HEIGHT:"\u30d5\u30a9\u30f3\u30c8 \u30b5\u30a4\u30ba\u3068\u884c\u306e\u9ad8\u3055", CURRENCY:"\u901a\u8ca8", SELECT_UP_TO_MAX_GROUPS_COUNT:"\u6700\u5927 {{maxGroupsCount}} \u9805\u76ee\u307e\u3067\u9078\u629e\u3067\u304d\u307e\u3059", 
HIGH:"\u6700\u9ad8\u5024", LOW:"\u6700\u4f4e\u5024", FIRST_QAURTILE:"\u7b2c1\u56db\u5206\u4f4d\u6570", THIRD_QAURTILE:"\u7b2c3\u56db\u5206\u4f4d\u6570", DISPLAYING_FACTOR_RANKS:"\u30d5\u30a1\u30af\u30bf\u30fc\u30e9\u30f3\u30af\u8868\u793a", ADD_ALL_TO_EXISTING_LIST:"\u3059\u3079\u3066\u306e\u9805\u76ee\u3092\u65e2\u5b58\u306e\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0", ADD_SELECTED_TO_EXISTING_LIST:"\u9078\u629e\u3057\u305f\u9805\u76ee\u3092\u65e2\u5b58\u306e\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0", WATCHLIST_WAS_SUCCESSFULLY_UPDATED:'\u30a6\u30a9\u30c3\u30c1\u30ea\u30b9\u30c8 "{{watchlistName}}" \u306f\u6b63\u5e38\u306b\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002', 
PERSONAL_WATCHLIST_SHOULD_BE_SELECTED:"\u500b\u4eba\u7528\u30a6\u30a9\u30c3\u30c1\u30ea\u30b9\u30c8\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002", CLEAR_ALL:"\u3059\u3079\u3066\u30af\u30ea\u30a2", SHOW_FACTOR_RANK:"\u30d5\u30a1\u30af\u30bf\u30fc\u30e9\u30f3\u30af\u3092\u8868\u793a", ADD_FIELD:"\u9805\u76ee\u3092\u8ffd\u52a0", TRANSPOSE:"\u884c\u5217\u306e\u5165\u308c\u66ff\u3048", SUMMARY:"\u30b5\u30de\u30ea\u30fc", SUMMARY_STATISTICS:"\u7d71\u8a08\u30b5\u30de\u30ea\u30fc", VECTOR_NOT_SUPPORTED:"\u3053\u306e\u884c\u3068\u5217\u306e\u5165\u308c\u66ff\u3048\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093", 
EXCLUDE_ALL_SELECTED:"\u9078\u629e\u9805\u76ee\u3092\u3059\u3079\u3066\u9664\u5916", ENABLE_TRANSPOSE:"\u884c\u5217\u306e\u5165\u308c\u66ff\u3048\u3092\u3059\u308b", DISABLE_TRANSPOSE:"\u884c\u5217\u306e\u5165\u308c\u66ff\u3048\u3092\u5143\u306b\u623b\u3059", ALL:"\u3059\u3079\u3066", SAMPLE_TEMPLATES:"\u30b5\u30f3\u30d7\u30eb \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", VIEW_MORE:"\u3055\u3089\u306b {{count}} \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u8868\u793a", VIEW_AND_MANAGE_ALL_TEMPLATES:"\u3059\u3079\u3066\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u8868\u793a/\u7ba1\u7406", 
CREATE_NEW_TEMPLATE:"\u65b0\u898f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f5c\u6210", ADVANCED_SORT:"\u4e26\u3079\u66ff\u3048\u8a2d\u5b9a", ENABLE_ADVANCED_SORT:"\u4e26\u3079\u66ff\u3048\u3092\u6709\u52b9\u306b\u3059\u308b", SORT_BY:"\u4e26\u3079\u66ff\u3048\u57fa\u6e96", ASCENDING:"\u6607\u9806", DESCENDING:"\u964d\u9806", SUMMARY_ROW:"\u96c6\u8a08\u884c", ELLIPSIS:"...", HEAT_MAP:"\u4e0a\u4f4d/\u4e0b\u4f4d\u306e\u5024\u3092\u30cf\u30a4\u30e9\u30a4\u30c8", WATCHLIST_FAILED_UPDATE:'T\u30a6\u30a9\u30c3\u30c1\u30ea\u30b9\u30c8\u3001"{{watchlistName}}" \u306e\u66f4\u65b0\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002', 
ADD_RANK_FOR_THIS_COLUMN:"\u3053\u306e\u5217\u306b\u30e9\u30f3\u30af\u3092\u8ffd\u52a0", PERCENTILE:"\u767e\u5206\u4f4d", DECILE:"\u5341\u5206\u4f4d", QUINTILE:"\u4e94\u5206\u4f4d", QUARTILE:"\u56db\u5206\u4f4d", RANK:"\u30e9\u30f3\u30af", ZSCORE:"Z \u30b9\u30b3\u30a2", SORTING_TYPE:"\u4e26\u3079\u66ff\u3048", BY_VALUE:"\u5024\u57fa\u6e96", BY_ABSOLUTE_VALUE:"\u7d76\u5bfe\u5024\u57fa\u6e96", TIME_SERIES_CHART:"\u6642\u7cfb\u5217\u30c1\u30e3\u30fc\u30c8", TORNADO_CHART:"\u30c8\u30eb\u30cd\u30fc\u30c9\u30c1\u30e3\u30fc\u30c8", 
EXCLUDE_FROM_STATISTICS:"\u96c6\u8a08\u304b\u3089\u9664\u5916\u3059\u308b", EXCLUDED_FROM_STATISTICS:"\u96c6\u8a08\u304b\u3089\u9664\u5916\u3057\u305f\u9298\u67c4", EXCLUDE_ALL_SELECTED_FROM_STATISTICS:"\u3059\u3079\u3066\u306e\u9078\u629e\u9805\u76ee\u3092\u96c6\u8a08\u304b\u3089\u9664\u5916", EXPORT_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8", IMPORT_TEMPLATE:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8", APPLY:"\u9069\u7528", 
REMOVE_ALL_FILTERS:"\u3059\u3079\u3066\u89e3\u9664", UNIQUE_VALUE:"\u9805\u76ee", DEFINE_RANGE:"\u7bc4\u56f2\u3092\u6307\u5b9a", TOP_BOTTOM:"\u4e0a\u4f4d/\u4e0b\u4f4d", CLEAR:"\u30af\u30ea\u30a2", FROM:"\u6700\u4f4e\u5024", TO:"\u6700\u9ad8\u5024", NUMBER_OF_ROWS:"\u884c\u6570", KEYWORD_SEARCH:"\u30ad\u30fc\u30ef\u30fc\u30c9\u691c\u7d22", FILTER_RESULTS:"\u7d50\u679c\u306e\u7d5e\u308a\u8fbc\u307f", INPUT_DATE:"\u65e5\u4ed8\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044", NPUT_NUMBER:"\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044", 
FREEZE_FOCUS_STOCK_ON_TOP:"\u5f53\u8a72\u9298\u67c4\u3092\u4e0a\u4f4d\u306b\u56fa\u5b9a", FACTOR:"\u30d5\u30a1\u30af\u30bf\u30fc", ADD_FORMULA:"\u8a08\u7b97\u5f0f\u3092\u4f7f\u7528\u3057\u3066\u5217\u3092\u8ffd\u52a0", FORMULA_EDITOR:"\u8a08\u7b97\u5f0f\u306e\u8a2d\u5b9a", COLUMN_N:"\u5217 {{columnNumber}}", LANDSCAPE:"\u6a2a\u5411\u304d", PORTRAIT:"\u7e26\u5411\u304d", TR_COPYRIGHT:"\u00a9 {{year}} Thomson Reuters. All rights reserved.", CLICK_ON_ANY_COLUMN:"\u8a08\u7b97\u5f0f\u306b\u4f7f\u7528\u3059\u308b\u9805\u76ee\u3092\u30ec\u30dd\u30fc\u30c8\u306e\u5217\u304b\u3089\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044", 
FORMAT_CELLS:"\u5024\u306e\u8868\u793a\u8a2d\u5b9a", DATE:"\u65e5\u4ed8\u5f62\u5f0f", NUMBER:"\u6570\u5024\u5f62\u5f0f", PERCENTAGE:"\u30d1\u30fc\u30bb\u30f3\u30c8", THOUSANDS_SEPARATOR:"\u6841\u533a\u5207\u308a", DAY_MONTHDATE_YEAR:"\u65e5\u3001\u6708\u3001\u5e74", DATE_ABBREVIATEDMONTH:"\u65e5 - \u6708\u306e\u77ed\u7e2e\u5f62", DATE_ABBREVIATEDMONYH_YEARE:"\u65e5 - \u6708\u306e\u77ed\u7e2e\u5f62 - \u5e74", MONTH_YEAR:"\u6708 - \u5e74", ABBREVIATEMONYH_ABBREVIATEDYEAR:"\u6708\u306e\u77ed\u7e2e\u5f62 - \u5e74\u306e\u77ed\u7e2e\u5f62", 
EXPORT_PDF_LANDSCAPE:"PDF \u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8(\u6a2a\u5411\u304d)", EXPORT_PDF_PORTRAIT:"PDF \u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8(\u7e26\u5411\u304d)", EXPORT_PDF_FAILED:"PDF \u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002", MAX_ROWS_COUNT_EXCEEDED:"\u6700\u5927\u884c\u6570\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002\u6700\u5927\u884c\u6570\u3092 {{maxRowsCount}} \u884c\u4ee5\u4e0b\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002", 
SHOW_ABBREVIATIONS:"false", DD_MM_YYYY:"YYYY/MM/DD", DD_MM_YYYY_F:"yyyy/MM/dd", DD_MM_YY:"YY/MM/DD", DD_MM_YY_F:"yy/MM/dd", DD_MM:"MM/DD", DD_MM_F:"MM/dd", MM_DD_YYYY:"", MM_DD_YYYY_F:"", MM_DD_YY:"", MM_DD_YY_F:"", MM_DD:"", MM_DD_F:"", MM_YYYY:"YYYY/MM", MM_YYYY_F:"yyyy/MM", MM_YY:"YY/MM", MM_YY_F:"yy/MM", COPY_TO_CLIPBOARD:"\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u306b\u30b3\u30d4\u30fc", ERROR_MESSAGE_HAS_BEEN_COPIED:"\u30a8\u30e9\u30fc \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u306b\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3057\u305f", 
NOTIFY_PRINT_MESSAGE:"\u30d7\u30ea\u30f3\u30bf\u30fc\u306e\u30ed\u30fc\u30ab\u30eb\u8a2d\u5b9a\u3067\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u65b9\u5411\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002", SHARE:"\u5171\u6709", SHARE_WITH:"\u5171\u6709\u5148", SHARED_TEMPLATES:"\u5171\u6709\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8", UNABLE_TO_LOAD_SHARED_TEMPLATES:"\u5171\u6709\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002", AUTHOR:"\u4f5c\u6210\u8005", 
SHARED_TO:"\u5171\u6709\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d", INSER_BLANK_ROW:"\u65b0\u3057\u3044\u884c\u3092\u633f\u5165\u3059\u308b", NUMBER_INPUT_VALIDATION_MESSAGE:"\u5024\u3092\u6570\u5024\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044", NUMBER_OUT_OF_RANGE_VALIDATION_MESSAGE:"0\u304b\u3089100\u307e\u3067\u306e\u6570\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044", T_B_FILTER_TOP_VALUE:"\u9806\u4f4d\u4e0a\u4f4d #", T_B_FILTER_BOTTOM_VALUE:"\u9806\u4f4d\u4e0b\u4f4d #", 
T_B_FILTER_TOP_PER:"\u767e\u5206\u4f4d\u4e0a\u4f4d %", T_B_FILTER_BOTTOM_PER:"\u767e\u5206\u4f4d\u4e0b\u4f4d %", T_B_FILTER_DEFAULT_FIELD:"\u4e26\u3079\u66ff\u3048\u306e\u6761\u4ef6\u3092\u9078\u629e"};
goog.provide("gridReport.services.DataProviderResolver");
gridReport.services.DataProviderResolver = function() {
  this.resolve = function(providerId) {
    return this[providerId] || this.defaultService;
  };
  this.register = function(providerId, provider) {
    this[providerId] = provider;
  };
  this.unregister = function(providerId) {
    delete this[providerId];
  };
};
goog.provide("gridReport.services.DefaultGridColumns");
goog.require("gridReport.model.Command");
goog.require("gridReport.model.GridColumn");
var defaultColumns = [new gridReport.model.GridColumn({id:"rowKey", header:"Identifier", initialHeader:"Identifier", areParametersVisible:true, pinned:true, forcePinned:true, groupable:false, canEdit:false, canDelete:false, tooltipField:"rowKey;TR.CommonName", parameters:{}, showInHeaderAsTransposed:true, width:241, cellClass:"key-cell", command:new gridReport.model.Command({expression:"rowKey"})}), new gridReport.model.GridColumn({id:"TR.CommonName", header:"Company Name", areParametersVisible:true, 
initialHeader:"Company Name", pinned:true, forcePinned:true, groupable:false, canEdit:false, canDelete:false, tooltipField:"rowKey;TR.CommonName", parameters:{}, width:241, showInHeaderAsTransposed:true, doNotShowPremiumDiscount:true, command:new gridReport.model.Command({dataProviderId:gridReport.model.Command.ADC_DATA_PROVIDER_ID, expression:"TR.CommonName"})})];
gridReport.Module.constant("gfDefaultGridColumns", defaultColumns);
goog.provide("gridReport.datacloud.DataCloudRequestParameters");
gridReport.datacloud.DataCloudRequestParameters = function() {
  this.universe = "";
  this.globalParameters = [];
  this.resolvedUniverse = "";
  this.rowsCount = 0;
};
gridReport.datacloud.DataCloudRequestParameters.prototype.universe = undefined;
gridReport.datacloud.DataCloudRequestParameters.prototype.globalParameters = undefined;
gridReport.datacloud.DataCloudRequestParameters.prototype.resolvedUniverse = undefined;
gridReport.datacloud.DataCloudRequestParameters.prototype.uniberseType = undefined;
gridReport.datacloud.DataCloudRequestParameters.prototype.universeContext = undefined;
gridReport.datacloud.DataCloudRequestParameters.prototype.rowsCount = undefined;
goog.provide("gridReport.model.UniverseTypes");
gridReport.model.UniverseTypes = {Screen:"UniverseTypes_Screen", List:"UniverseTypes_List"};
goog.provide("gridReport.model.RankOutputTypes");
gridReport.model.RankOutputTypes = {DataValue:"datavalue", FinalRank:"finalrank"};
goog.provide("gridReport.services.excelFormula.FactorRankExcelFormulaBuilder");
goog.require("gridReport.model.RankOutputTypes");
gridReport.Module.factory("gfFactorRankExcelFormulaBuilder", [function() {
  function getMfrName(columnId) {
    var match = (new RegExp(/\/\*.*?\*\//g)).exec(columnId);
    if (_.size(match) > 0) {
      return match[0].replace("/*MfrExpression:", "").replace("*/", "");
    }
    return columnId;
  }
  var service = {};
  service.getString = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    var innerExpressions = [];
    _.each(column.gridColumns, function(subColumn) {
      innerExpressions.push(subColumn.command.expression.replace(/\/\*.*?\*\//g, "").replace(/ /g, ""));
    });
    var str = "/*Factor:Start*/";
    str += innerExpressions.join(";");
    str += "/*Factor:";
    str += column.header;
    str += ",rankNumber:" + column.command.factor.rankNumber;
    str += ",showFactorRank:" + column.command.factor.showFactorRank;
    str += ",mfr:" + getMfrName(column.parentColumn);
    str += ",weight:" + column.command.factor.weight;
    str += "*/";
    return str;
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.DataBlockExcelFormulaBuilder");
gridReport.Module.factory("gfDataBlockExcelFormulaBuilder", [function() {
  var service = {};
  service.getString = function(column) {
    var expressions = [];
    _.each(column.gridColumns, function(subColumn) {
      if (subColumn.isComposeToVector) {
        _.each(subColumn.gridColumns, function(clmn) {
          expressions.push(clmn.id);
        });
      } else {
        expressions.push(subColumn.id);
      }
    });
    return "/*DB:START*/" + expressions.join(";") + "/*DB:" + column.command.name + "*/";
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.ColumnMathExcelFormulaBuilder");
gridReport.Module.factory("gfColumnMathExcelFormulaBuilder", [function() {
  function safeComments(str) {
    return str.replace(/\/\*|\*\//g, "///");
  }
  function getColumnId(columnId) {
    if (columnId.id != null && columnId.parentId != null) {
      return columnId.id + "@" + columnId.parentId;
    }
    return columnId;
  }
  var service = {};
  service.getString = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    var formula = column.command.formula.expression, associations = [];
    _.each(column.command.formula.columnIds, function(columnId, identifier) {
      associations.push(identifier + "|" + safeComments(getColumnId(columnId)));
    });
    return column.command.expression + "/*Math:" + safeComments(column.header) + "$formula:" + formula + "$columnIds:" + associations.join(",") + "*/";
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.ColumnExcelFormulaBuilder");
gridReport.Module.factory("gfColumnExcelFormulaBuilder", [function() {
  var service = {};
  service.getString = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    return column.id;
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.MultiColumnFormulaBuilder");
gridReport.Module.factory("gfMultiColumnFormulaBuilder", [function() {
  var service = {};
  service.getString = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    var expressions = _.map(column.gridColumns, function(gridColumn) {
      if (gridColumn.isComposeToVector && gridColumn.gridColumns) {
        return _.map(gridColumn.gridColumns, function(subColumn) {
          return subColumn.id;
        });
      }
      return gridColumn.id;
    });
    return "/*MultiOutput:Begin*/" + _.flatten(expressions).join(";") + "/*MultiOutput*/";
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.CustomExpressionExcelFormulaBuilder");
gridReport.Module.factory("gfCustomExpressionExcelFormulaBuilder", [function() {
  var service = {};
  service.getString = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    return column.command.getExpression(false).replace(/ /g, "") + "/*" + column.command.name + "*/";
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.FormulaBuilderFactory");
goog.require("gridReport.services.excelFormula.CustomExpressionExcelFormulaBuilder");
goog.require("gridReport.services.excelFormula.ColumnMathExcelFormulaBuilder");
goog.require("gridReport.services.excelFormula.DataBlockExcelFormulaBuilder");
goog.require("gridReport.services.excelFormula.FactorRankExcelFormulaBuilder");
goog.require("gridReport.services.excelFormula.MultiColumnFormulaBuilder");
goog.require("gridReport.services.excelFormula.ColumnExcelFormulaBuilder");
gridReport.Module.factory("gfFormulaBuilderFactory", ["gfColumnMathExcelFormulaBuilder", "gfCustomExpressionExcelFormulaBuilder", "gfDataBlockExcelFormulaBuilder", "gfFactorRankExcelFormulaBuilder", "gfMultiColumnFormulaBuilder", "gfColumnExcelFormulaBuilder", function(gfColumnMathExcelFormulaBuilder, gfCustomExpressionExcelFormulaBuilder, gfDataBlockExcelFormulaBuilder, gfFactorRankExcelFormulaBuilder, gfMultiColumnFormulaBuilder, gfColumnExcelFormulaBuilder) {
  var service = {};
  service.getBuilder = function(column) {
    if (!column) {
      throw new Error("column should be provided");
    }
    if (column.command) {
      if (column.command.isFactorRank()) {
        return gfFactorRankExcelFormulaBuilder;
      }
      if (column.command.isMultiOutput()) {
        return gfMultiColumnFormulaBuilder;
      }
      if (column.command.isDataBlock()) {
        return gfDataBlockExcelFormulaBuilder;
      }
      if (column.command.isColumnMath()) {
        return gfColumnMathExcelFormulaBuilder;
      }
      if (column.command.isCustom()) {
        return gfCustomExpressionExcelFormulaBuilder;
      }
    }
    return gfColumnExcelFormulaBuilder;
  };
  return service;
}]);
goog.provide("gridReport.services.excelFormula.ExcelFormulaBuilder");
goog.require("gridReport.services.excelFormula.FormulaBuilderFactory");
gridReport.Module.factory("gfExcelFormulaBuilder", ["gfFormulaBuilderFactory", function(gfFormulaBuilderFactory) {
  function createExcelString(string, excelStringLimit) {
    return createExcelStringV2(replaceQuatationMarks(string), excelStringLimit);
  }
  function createExcelStringV2(string, excelStringLimit) {
    excelStringLimit = excelStringLimit || 255;
    var result = '"' + string + '"';
    if (string.length > excelStringLimit) {
      var currentIndex = 0;
      result = "";
      while (currentIndex < string.length) {
        var end = currentIndex + excelStringLimit > string.length ? string.length : currentIndex + excelStringLimit;
        if (end === string.length) {
          result += '"' + string.slice(currentIndex, end) + '"';
        } else {
          result += '"' + string.slice(currentIndex, end) + '"&';
        }
        currentIndex += excelStringLimit;
      }
    }
    return result;
  }
  function replaceQuatationMarks(string) {
    return string.replace(/"/g, '""');
  }
  function getColumnExpression(column) {
    return gfFormulaBuilderFactory.getBuilder(column).getString(column);
  }
  function getColumnExpressions(columns) {
    return _.map(columns, function(column) {
      return getColumnExpression(column);
    });
  }
  function isAnyCommandTimeSeriesable(columns) {
    return _.any(columns, function(c) {
      if (c.command) {
        if (c.command.isDataBlock()) {
          return isAnyCommandTimeSeriesable(c.gridColumns);
        } else {
          return c.command.isTimeSeries();
        }
      } else {
        return false;
      }
    });
  }
  function buildGlobalParamsString(globalParameters) {
    var globalParamsString = "";
    if (globalParameters && globalParameters.length > 0) {
      globalParamsString = _.map(globalParameters, function(parameter) {
        return parameter.name + "=" + parameter.value;
      }).join();
    }
    return globalParamsString;
  }
  function getSortingString(sortColumns) {
    return _.map(sortColumns, function(sortColumn) {
      return(sortColumn.direction === "asc" ? "SORTA=" : "SORTD=") + sortColumn.column;
    }).join(" ");
  }
  function buildUniverseString(universe) {
    return universe;
  }
  function buildExpressionString(columns) {
    return buildExpressionStrings(columns).join(";");
  }
  function buildExpressionStrings(columns) {
    return getColumnExpressions(columns);
  }
  function buildParametersString(exportData) {
    var globalParamsString = buildGlobalParamsString(exportData.globalParameters);
    var transposeString = exportData.isTranspose ? " Transpose=Y" : "";
    var calcDateString = "";
    if (isAnyCommandTimeSeriesable(exportData.columns)) {
      calcDateString = ";CalcDate";
    }
    var sortingString = getSortingString(exportData.sortColumns);
    if (sortingString) {
      sortingString = " " + sortingString;
    }
    return globalParamsString + " RH=In CH=Fd" + (transposeString || calcDateString) + sortingString;
  }
  var service = {};
  service.buildFormula = function(exportData) {
    if (!exportData) {
      throw new Error("exportData should be provided");
    }
    var universeString = replaceQuatationMarks(buildUniverseString(exportData.universe)), colString = replaceQuatationMarks(buildExpressionString(exportData.columns)), parametersString = replaceQuatationMarks(buildParametersString(exportData));
    return "TR(" + createExcelStringV2(universeString + '","' + colString + '","' + parametersString, 235) + ")";
  };
  service.buildUniverseString = function(universe) {
    return createExcelString(buildUniverseString(universe));
  };
  service.getColumnExpression = getColumnExpression;
  service.buildExpressionString = function(columns) {
    return createExcelString(buildExpressionString(columns));
  };
  service.buildExpressionStrings = function(columns) {
    return buildExpressionStrings(columns);
  };
  service.buildParametersString = function(exportData) {
    return createExcelString(buildParametersString(exportData));
  };
  service.createExcelString = createExcelString;
  service.isAnyCommandTimeSeriesable = isAnyCommandTimeSeriesable;
  return service;
}]);
goog.provide("gridReport.datacloud.service.DataCloudErrorHelper");
gridReport.Module.factory("gfDataCloudErrorHelper", ["gfLogManager", "$translate", function(gfLogManager, $translate) {
  function formatFault(fault) {
    if (fault.token && fault.token.length) {
      return fault.Description.Value.replace(/.$/, "") + ": " + _.pluck(fault.token, "Value").join(", ");
    }
    return fault.Description.Value;
  }
  function getErrorStack(fault) {
    var errorStack = [];
    if (fault.InternalDetails && (fault.InternalDetails.POS && fault.InternalDetails.POS.length >= 0)) {
      errorStack = fault.InternalDetails.POS[0].ErrorStack;
    }
    return errorStack;
  }
  var service = {};
  service.handleFaults = function(faults) {
    angular.forEach(faults, function(fault) {
      if (fault.Description) {
        gfLogManager.warning({message:formatFault(fault)});
      }
    });
  };
  service.createExceptions = function(faults, columnIds, errorCode) {
    var exceptions = [];
    angular.forEach(faults, function(fault) {
      exceptions.push({errorCode:errorCode, message:formatFault(fault), errorStack:getErrorStack(fault), columns:columnIds, notificationMessage:$translate.instant("SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST"), fault:fault});
    });
    return exceptions;
  };
  return service;
}]);
goog.provide("gridReport.datacloud.service.DataCloudRowsService");
goog.require("gridReport.datacloud.service.DataCloudErrorHelper");
goog.require("gridReport.services.CompanyService");
gridReport.Module.factory("gfDataCloudRowsService", ["gfDataCloudService", "gfDataCloudErrorHelper", "$translate", "gfCompanyService", function(gfDataCloudService, gfDataCloudErrorHelper, $translate, gfCompanyService) {
  function dataCloudRowsService(gfDataCloudResponseParser) {
    function handleFailRowsDataRequest(error, options) {
      (options.callbacks.dataLoaded || angular.noop)(new gridReport.model.Response({exceptions:[error]}));
      (options.callbacks.endLoading || angular.noop)(options.requestGuid);
    }
    function handleSuccessRowsDataReuqest(response, options) {
      var isAborted = false, data;
      if (options.callbacks.dataLoaded) {
        var filteredRows = options.tracker.getValidRows();
        isAborted = filteredRows.length == 0;
        if (filteredRows.length != 0) {
          if (response.status === gridReport.datacloud.ResponseStatus.Ok || response.status === gridReport.datacloud.ResponseStatus.MaxThresholdExceeded) {
            gfDataCloudErrorHelper.handleFaults(response.faults);
            data = gfDataCloudResponseParser.parseResponse(response, options.columns, {maxRowsCount:options.request.maxScreenRows, parseResponseIfMaxTresholdExceeded:options.passDataToGridIfExceeded != undefined ? options.passDataToGridIfExceeded : true, universeContext:options.parameters.universeContext});
            if (data.status != null) {
              response.status = data.status;
            }
            if (data.columns.length > 0) {
              _.each(data.columns[0].values, function(columnValue) {
                if (options.parameters.universeContext != scr.UniverseType.PublicPrivate) {
                  columnValue.isPublic = options.parameters.universeContext === scr.UniverseType.Public;
                }
                gfCompanyService.setIsPublic(columnValue.rowKey, columnValue.isPublic);
              });
            }
            if (data.rowsCount == 0) {
              options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:[{errorCode:gridReport.model.ErrorCodes.THERE_ARE_NO_ITEMS_TO_DISPLAY, message:$translate.instant("THERE_ARE_NO_ITEMS_TO_DISPLAY"), severity:gridReport.model.Severity.information, columns:options.requestedColumns, rows:options.requestedRows}]}));
            } else {
              if (response.status === gridReport.datacloud.ResponseStatus.MaxThresholdExceeded) {
                options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:[{errorCode:gridReport.model.ErrorCodes.MAX_ROWS_COUNT_EXCEEDED, message:$translate.instant("MAX_ROWS_COUNT_EXCEEDED", {maxRowsCount:options.request.maxScreenRows, size:data.rowsCount}), severity:gridReport.model.Severity.warning, columns:options.requestedColumns, rows:options.requestedRows}]}));
              }
              if (response.status !== gridReport.datacloud.ResponseStatus.MaxThresholdExceeded || options.passDataToGridIfExceeded) {
                options.callbacks.dataLoaded(new gridReport.model.Response({data:data.columns, screenCount:response.screenCount}));
              }
            }
          } else {
            if (response.status === gridReport.datacloud.ResponseStatus.Error) {
              var errorCode = options.parameters.resolvedUniverse == undefined || options.parameters.resolvedUniverse == "" ? gridReport.model.ErrorCodes.FAILED_TO_RESOLVE_UNIVERSE : gridReport.model.ErrorCodes.ADC_ERROR;
              options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:gfDataCloudErrorHelper.createExceptions(response.faults, options.requestedColumns, errorCode)}));
            }
          }
        }
      }
      (options.callbacks.endLoading || angular.noop)(options.requestGuid);
      if (!isAborted && (response.status === gridReport.datacloud.ResponseStatus.MaxThresholdExceeded && options.maxRowsCountExceeded)) {
        options.maxRowsCountExceeded({maxRowsCount:options.request.maxScreenRows, rowsCount:data ? data.rowsCount : 0});
      }
    }
    this.sendRowsDataRequest = function(options) {
      gfDataCloudService.requestData(options.request, function(response) {
        handleSuccessRowsDataReuqest(response, options);
      }, function(error) {
        handleFailRowsDataRequest(error, options);
      });
    };
  }
  return{createInstance:function(gfDataCloudResponseParser) {
    return new dataCloudRowsService(gfDataCloudResponseParser);
  }};
}]);
goog.provide("gridReport.datacloud.service.DataCloudRequest");
gridReport.datacloud.service.DataCloudRequest = function(options) {
  if (options) {
    if (options.hasOwnProperty("method")) {
      this.method = options.method;
    }
    if (options.hasOwnProperty("content")) {
      this.content = options.content;
    }
    if (options.hasOwnProperty("filters")) {
      this.filters = options.filters;
    }
    if (options.hasOwnProperty("universe")) {
      this.universe = options.universe;
    }
    if (options.hasOwnProperty("output")) {
      this.output = options.output;
    }
    if (options.hasOwnProperty("universeAsIs")) {
      this.universeAsIs = options.universeAsIs;
    }
    if (options.hasOwnProperty("type")) {
      this.type = options.type;
    }
    if (options.hasOwnProperty("maxScreenRows")) {
      this.maxScreenRows = options.maxScreenRows;
    }
    if (options.hasOwnProperty("finalScreenResult")) {
      this.finalScreenResult = options.finalScreenResult;
    }
  }
};
gridReport.datacloud.service.DataCloudRequest.prototype.method = null;
gridReport.datacloud.service.DataCloudRequest.prototype.content = null;
gridReport.datacloud.service.DataCloudRequest.prototype.filters = null;
gridReport.datacloud.service.DataCloudRequest.prototype.universe = null;
gridReport.datacloud.service.DataCloudRequest.prototype.output = null;
gridReport.datacloud.service.DataCloudRequest.prototype.universeAsIs = null;
gridReport.datacloud.service.DataCloudRequest.prototype.type = "Unknown";
gridReport.datacloud.service.DataCloudRequest.prototype.maxScreenRows = null;
gridReport.datacloud.service.DataCloudRequest.prototype.finalScreenResult = true;
gridReport.datacloud.service.DataCloudRequest.prototype.getRequestUrl = function(serviceUrl, productId, lang) {
  if (this.type === "EmptyTable") {
    return "";
  }
  this.universeAsIs = goog.isDefAndNotNull(this.universeAsIs) ? this.universeAsIs : false;
  var comma = this.filters == null || this.filters.length == 0 ? "" : ",";
  var filterString = "";
  var universe;
  if (this.method == "histogram") {
    universe = "";
  } else {
    if (this.filters != null && (this.filters.length > 0 && !this.universeAsIs)) {
      this.universe = "SCREEN(U(" + this.universe + ")" + comma + filterString + ")";
    }
    universe = "&identifiers=" + encodeURIComponent(this.universe);
  }
  var maxScreenRowsString = this.maxScreenRows != null ? ",MaxScreenRows(" + this.maxScreenRows + "," + this.finalScreenResult + ")" : "";
  return serviceUrl + this.method + "?formula=" + encodeURIComponent(this.content + maxScreenRowsString) + universe + "&productid=" + productId + "&output=" + this.output + (lang != undefined ? "&lang=" + encodeURIComponent(lang) : "") + "&jscallback=?";
};
gridReport.datacloud.service.DataCloudRequest.prototype.getRequestBody = function(productId, lang) {
  if (this.type === "EmptyTable") {
    return "";
  }
  this.universeAsIs = goog.isDefAndNotNull(this.universeAsIs) ? this.universeAsIs : false;
  var comma = this.filters == null || this.filters.length == 0 ? "" : ",";
  var filterString = "";
  var universe;
  if (this.method == "histogram") {
    universe = "";
  } else {
    if (this.filters != null && (this.filters.length > 0 && !this.universeAsIs)) {
      this.universe = "SCREEN(U(" + this.universe + ")" + comma + filterString + ")";
    }
    universe = "&identifiers=" + encodeURIComponent(this.universe);
  }
  var maxScreenRowsString = this.maxScreenRows != null ? ",MaxScreenRows(" + this.maxScreenRows + "," + this.finalScreenResult + ")" : "";
  return "formula=" + encodeURIComponent(this.content + maxScreenRowsString) + universe + "&productid=" + encodeURIComponent(productId) + "&output=" + encodeURIComponent(this.output) + (lang != undefined ? "&lang=" + encodeURIComponent(lang) : "");
};
goog.provide("gridReport.datacloud.parsers.AuditabilityDataCloudResponseParser");
gridReport.Module.factory("gfAuditabilityDataCloudResponseParser", ["gfColumnHeaderFormatterService", "gfDataCloudResponseParser", function(gfColumnHeaderFormatterService, gfDataCloudResponseParser) {
  var service = angular.extend({}, gfDataCloudResponseParser);
  service.getProperties_ = function(row, valueColumnIndexses, columnReturnTypes, expectedItemsPerVectorCount) {
    var properties = {}, i = 0, parsedRowValue, rowValue, cols, n = valueColumnIndexses.length;
    if (expectedItemsPerVectorCount != null && expectedItemsPerVectorCount != n) {
    } else {
      for (;i < n;i++) {
        rowValue = row[valueColumnIndexses[i]];
        parsedRowValue = this.tryParseRowValue_(rowValue, columnReturnTypes[i]);
        if (!(_.isNull(parsedRowValue) || _.isUndefined(parsedRowValue))) {
          cols = {};
          _.each(rowValue.cols, function(value, key) {
            cols[key] = value;
          });
          properties[parsedRowValue] = cols;
        }
      }
    }
    return properties;
  };
  return service;
}]);
goog.provide("gridReport.datacloud.service.DataCloudIdentifiersConverter");
goog.require("gridReport.services.CompanyService");
gridReport.Module.factory("gfDataCloudIdentifiersConverter", ["gfCompanyService", function(gfCompanyService) {
  var service = {};
  service.convertIdentifiersToUniverse = function(identifiers, universeContext) {
    if (!identifiers) {
      throw new Error("identifiers should be provided");
    }
    if (universeContext === scr.UniverseType.PublicPrivate) {
      return _.map(identifiers, function(ric) {
        return ric + service.getAdcPortfix(gfCompanyService.isPublic(ric));
      }).join();
    }
    var postfix = service.getAdcPortfix(universeContext === scr.UniverseType.Public);
    return _.map(identifiers, function(ric) {
      return ric + postfix;
    }).join();
  };
  service.getAdcPortfix = function(isPublic) {
    return isPublic ? "@RIC" : "@ORGPERMID";
  };
  return service;
}]);
goog.provide("gridReport.datacloud.service.DataCloudColumnsService");
goog.require("gridReport.datacloud.service.DataCloudIdentifiersConverter");
gridReport.Module.factory("gfDataCloudColumnsService", ["gfDataCloudService", "gfDataCloudErrorHelper", "gfEventsAggregator", "$translate", "gfDataCloudIdentifiersConverter", "gfCompanyService", function(gfDataCloudService, gfDataCloudErrorHelper, gfEventsAggregator, $translate, gfDataCloudIdentifiersConverter, gfCompanyService) {
  function dataCloudColumnService(gfDataCloudResponseParser) {
    var SUCCESS = false, FAIL = true;
    function markLoadingResult(columns, failed) {
      angular.forEach(columns, function(c) {
        c.dataLoadingFailed = failed;
      });
    }
    function handleFailColumnsDataRequest(error, options) {
      if (options.callbacks.dataLoaded) {
        var filteredColumns = options.tracker.getValidColumns();
        if (filteredColumns.length !== 0) {
          markLoadingResult(filteredColumns, FAIL);
          error.columns = _.pluck(filteredColumns, "id");
          options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:[error]}));
        }
      }
      (options.callbacks.endLoading || angular.noop)(options.requestGuid);
    }
    function handleSuccessColumnsDataReuqest(response, options) {
      var isAborted = false, data;
      if (options.callbacks.dataLoaded) {
        var filteredColumns = options.tracker.getValidColumns();
        isAborted = filteredColumns.length == 0;
        if (filteredColumns.length != 0) {
          if (response.status === gridReport.datacloud.ResponseStatus.Ok || response.status === gridReport.datacloud.ResponseStatus.MaxThresholdExceeded) {
            markLoadingResult(filteredColumns, SUCCESS);
            gfDataCloudErrorHelper.handleFaults(response.faults);
            angular.forEach(filteredColumns, function(c) {
              if (options.dataRetrievedColumnIds.indexOf(c.id) === -1) {
                options.dataRetrievedColumnIds.push(c.id);
              }
            });
            data = gfDataCloudResponseParser.parseResponse(response, filteredColumns, {maxRowsCount:options.request.maxScreenRows, parseResponseIfMaxTresholdExceeded:options.passDataToGridIfExceeded != undefined ? options.passDataToGridIfExceeded : true, universeContext:options.parameters.universeContext});
            if (data.status != null) {
              response.status = data.status;
            }
            if (data.columns.length > 0) {
              _.each(data.columns[0].values, function(columnValue) {
                if (options.parameters.universeContext != scr.UniverseType.PublicPrivate) {
                  columnValue.isPublic = options.parameters.universeContext === scr.UniverseType.Public;
                }
                gfCompanyService.setIsPublic(columnValue.rowKey, columnValue.isPublic);
              });
            }
            options.parameters.rowsCount = data.rowsCount;
            if (options.parameters.resolvedUniverse == undefined || options.parameters.resolvedUniverse == "") {
              var identifiers = data.columns.length > 0 ? _.pluck(data.columns[0].values, "rowKey") : [];
              if (options.parameters.universeType === gridReport.model.UniverseTypes.Screen) {
                options.parameters.resolvedUniverse = gfDataCloudIdentifiersConverter.convertIdentifiersToUniverse(identifiers, options.parameters.universeContext);
              } else {
                options.parameters.resolvedUniverse = identifiers.join(",");
              }
              gfEventsAggregator.raiseEvent(gridReport.model.GridEvents.screenResolved, {identifiers:identifiers, screenCount:response.screenCount === undefined ? data.rowsCount : response.screenCount});
            }
            if (data.rowsCount === 0) {
              markLoadingResult(filteredColumns, FAIL);
              options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:[{errorCode:gridReport.model.ErrorCodes.THERE_ARE_NO_ITEMS_TO_DISPLAY, message:$translate.instant("THERE_ARE_NO_ITEMS_TO_DISPLAY"), severity:gridReport.model.Severity.information, columns:options.requestedColumns}]}));
            } else {
              if (response.status === gridReport.datacloud.ResponseStatus.MaxThresholdExceeded) {
                options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:[{errorCode:gridReport.model.ErrorCodes.MAX_ROWS_COUNT_EXCEEDED, message:$translate.instant("MAX_ROWS_COUNT_EXCEEDED", {maxRowsCount:options.request.maxScreenRows, size:data.rowsCount}), severity:gridReport.model.Severity.warning, columns:options.requestedColumns}]}));
              }
              if (response.status !== gridReport.datacloud.ResponseStatus.MaxThresholdExceeded || options.passDataToGridIfExceeded) {
                options.callbacks.dataLoaded(new gridReport.model.Response({data:data.columns, screenCount:response.screenCount}));
              }
            }
          } else {
            if (response.status === gridReport.datacloud.ResponseStatus.Error) {
              var errorCode = options.parameters.resolvedUniverse == undefined || options.parameters.resolvedUniverse == "" ? gridReport.model.ErrorCodes.FAILED_TO_RESOLVE_UNIVERSE : gridReport.model.ErrorCodes.ADC_ERROR;
              markLoadingResult(filteredColumns, FAIL);
              options.callbacks.dataLoaded(new gridReport.model.Response({exceptions:gfDataCloudErrorHelper.createExceptions(response.faults, _.pluck(filteredColumns, "id"), errorCode)}));
            }
          }
        }
      }
      (options.callbacks.endLoading || angular.noop)(options.requestGuid);
      if (!isAborted && (response.status === gridReport.datacloud.ResponseStatus.MaxThresholdExceeded && options.maxRowsCountExceeded)) {
        options.maxRowsCountExceeded({maxRowsCount:options.request.maxScreenRows, rowsCount:data ? data.rowsCount : 0});
      }
    }
    this.sendColumnsDataRequest = function(options) {
      if (!options) {
        throw new Error("options should be defined");
      }
      gfDataCloudService.requestData(options.request, function(response) {
        handleSuccessColumnsDataReuqest(response, options);
      }, function(error) {
        handleFailColumnsDataRequest(error, options);
      });
    };
  }
  return{createInstance:function(gfDataCloudResponseParser) {
    return new dataCloudColumnService(gfDataCloudResponseParser);
  }};
}]);
goog.provide("gridReport.datacloud.service.DataCloudService");
gridReport.Module.factory("gfDataCloudService", ["gfConfig", "$translate", function(gfConfig, $translate) {
  function prepareError(errorThrown) {
    return _.isObject(errorThrown) ? _.extend(errorThrown, {errorCode:gridReport.model.ErrorCodes.ADC_ERROR, message:errorThrown.message == "" ? $translate.instant("SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST") : errorThrown.message}) : {message:errorThrown == "" ? $translate.instant("SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST") : errorThrown, errorCode:gridReport.model.ErrorCodes.ADC_ERROR};
  }
  var service = {};
  service.requestData = function(request, successCallback, errorCallback) {
    if (!request) {
      throw new Error("Request should be provided.");
    }
    var params;
    if (gfConfig.useGetRequestForDataCloudService) {
      params = {url:request.getRequestUrl(gfConfig.dataCloudUrl, gfConfig.productId, gfConfig.lang), dataType:"jsonp", type:"GET"};
    } else {
      params = {url:gfConfig.dataCloudUrl + request.method, type:"POST", contentType:"application/x-www-form-urlencoded", data:request.getRequestBody(gfConfig.productId, gfConfig.lang)};
    }
    $.ajax(params).done(function(response) {
      if (_.isString(response)) {
        if (errorCallback) {
          errorCallback({message:$translate.instant("SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST"), errorCode:gridReport.model.ErrorCodes.ADC_ERROR});
        }
      } else {
        if (successCallback) {
          successCallback(response);
        }
      }
    }).fail(function(jqXhr, textStatus, errorThrown) {
      if (textStatus == "parsererror" && (errorThrown && (errorThrown.message == "Unexpected token N" || errorThrown.message == "Unexpected token I"))) {
        var response;
        try {
          response = JSON.parse(jqXhr.responseText.replace(new RegExp("NaN|Infinity", "g"), "null"));
        } catch (e) {
          if (errorCallback) {
            errorCallback(prepareError(errorThrown));
            return;
          }
        }
        if (successCallback) {
          successCallback(response || {});
          return;
        }
      }
      if (errorCallback) {
        if (jqXhr.status === 404 || jqXhr.status === 503) {
          errorCallback({message:$translate.instant("SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST"), errorCode:gridReport.model.ErrorCodes.ADC_ERROR});
        } else {
          errorCallback(prepareError(errorThrown));
        }
      }
    });
  };
  return service;
}]);
goog.provide("gridReport.datacloud.RequestsTrackerColumns");
gridReport.datacloud.RequestsTrackerColumns = function(requestTokens, columns) {
  angular.forEach(columns, function(column) {
    requestTokens[column.id] = {};
  });
  var tokensCopy = _.extend({}, requestTokens);
  this.getValidColumns = function() {
    return _.filter(columns, function(column) {
      return requestTokens[column.id] === tokensCopy[column.id];
    });
  };
};
goog.provide("gridReport.services.CacheService");
gridReport.Module.factory("gfCache", function() {
  var cache = {};
  var service = {};
  service.getData = function(column) {
    var cachedValue = cache[column];
    if (cachedValue) {
      if (cachedValue.expireOnGet) {
        delete cache[column];
      }
      return cachedValue.data;
    }
    return undefined;
  };
  service.putData = function(column, data, options) {
    cache[column] = {expireOnGet:options && options.expireOnGet, data:data};
  };
  service.clear = function() {
    cache = {};
  };
  return service;
});
goog.provide("gridReport.datacloud.ResponseStatus");
gridReport.datacloud.ResponseStatus = {Ok:"Ok", MaxThresholdExceeded:"MaxThresholdExceeded", Error:"Error"};
goog.provide("gridReport.datacloud.RequestsTrackerRows");
gridReport.datacloud.RequestsTrackerRows = function(requestTokens, rows) {
  requestTokens.rows = requestTokens.rows || [];
  _.each(rows, function(row) {
    requestTokens.rows[row] = {};
  });
  var tokensCopy = _.extend({}, requestTokens);
  this.getValidRows = function() {
    return _.filter(rows, function(row) {
      return requestTokens.rows[row] === tokensCopy.rows[row];
    });
  };
};
goog.provide("gridReport.datacloud.parsers.DataCloudResponseParser");
gridReport.Module.factory("gfDataCloudResponseParser", ["gfColumnHeaderFormatterService", function(gfColumnHeaderFormatterService) {
  var service = {};
  service.createTickerValues_ = function(rows, columnValueKey, columnReturnType, expectedItemsPerVectorCount) {
    var tickers = {}, identifierColumnIndex = 0, valueColumnIndexses = findColumnIndexses(rows[0], columnValueKey), isPublicColumnIndex = this.findIsPublicColumnIndex_(rows[0]), rowIndex, length, row, identifier, rowValues, currency, isPublic, columnReturnTypes = _.map(valueColumnIndexses, function() {
      return columnReturnType;
    }), properties;
    for (rowIndex = 1, length = rows.length;rowIndex < length;rowIndex++) {
      row = rows[rowIndex];
      identifier = getIdentifier(row[identifierColumnIndex]);
      rowValues = getRowValues(row, valueColumnIndexses, columnReturnTypes, expectedItemsPerVectorCount);
      currency = getCurrency(row, valueColumnIndexses);
      isPublic = this.getIsPublic_(row, isPublicColumnIndex);
      properties = this.getProperties_(row, valueColumnIndexses, columnReturnTypes, expectedItemsPerVectorCount);
      tickers[identifier] = new gridReport.model.ColumnValue(identifier, rowValues, undefined, currency, properties, isPublic);
    }
    return tickers;
  };
  function getRowValues(row, valueColumnIndexses, columnReturnTypes, expectedItemsPerVectorCount) {
    var values = [], i = 0, n = valueColumnIndexses.length;
    if (expectedItemsPerVectorCount != null && expectedItemsPerVectorCount != n) {
      for (;i < expectedItemsPerVectorCount;i++) {
        values.push(null);
      }
    } else {
      if (n == 1) {
        return service.tryParseRowValue_(row[valueColumnIndexses[0]], columnReturnTypes[0]);
      }
      for (;i < n;i++) {
        values.push(service.tryParseRowValue_(row[valueColumnIndexses[i]], columnReturnTypes[i]));
      }
    }
    return values;
  }
  function getCurrency(row, valueColumnIndexses) {
    if (!_.isEmpty(valueColumnIndexses) && (row[valueColumnIndexses[0]] && row[valueColumnIndexses[0]].cols)) {
      return row[valueColumnIndexses[0]].cols.currency;
    }
    return null;
  }
  function getCurrencies(row, currencyIndexes) {
    var currencies = {};
    _.each(currencyIndexes, function(currencyColumnIndex, commandExpression) {
      for (var columnIndex = 0, count = row.length;columnIndex < count;columnIndex++) {
        var cellValue = row[columnIndex];
        if (cellValue && cellValue.cols) {
          currencies[commandExpression] = cellValue.cols.currency;
          break;
        }
      }
    });
    return currencies;
  }
  function findCurrencyIndexes(columns, commandExpressions) {
    var currencyIndexes = {};
    _.each(commandExpressions, function(commandExpression) {
      for (var columnIndex = 0, count = columns.length;columnIndex < count;columnIndex++) {
        if (columns[columnIndex].r === commandExpression && currencyIndexes[commandExpression] == null) {
          currencyIndexes[commandExpression] = columnIndex;
          break;
        }
      }
    });
    return currencyIndexes;
  }
  function createReturnTypesPerColumn(columns, commandExpressions, commandReturnTypes) {
    var returnTypes = [];
    _.each(commandExpressions, function(commandExpression, commandExpressionIndex) {
      for (var columnIndex = 0, count = columns.length;columnIndex < count;columnIndex++) {
        if (columns[columnIndex].r === commandExpression) {
          returnTypes.push(commandReturnTypes[commandExpressionIndex]);
        }
      }
    });
    return returnTypes;
  }
  function findColumnKeysToColumnIndexes(columns, commandExpressions) {
    var associations = {}, index = 0;
    _.each(commandExpressions, function(commandExpression) {
      for (var columnIndex = 0, count = columns.length;columnIndex < count;columnIndex++) {
        if (columns[columnIndex].r === commandExpression) {
          associations[index++] = commandExpression;
        }
      }
    });
    return associations;
  }
  service.createTickerCompositeValues_ = function(rows, columnValueKeys, columnReturnTypes) {
    var tickers = {}, identifierColumnIndex = 0, row, valueColumnIndexses = findColumnIndexses(rows[0], columnValueKeys), columnReturnTypePerValueColumnIndex = createReturnTypesPerColumn(rows[0], columnValueKeys, columnReturnTypes), identifier, rowValues, currencies, currencyIndexes = findCurrencyIndexes(rows[0], columnValueKeys), columnIdToColumnIndexes = findColumnKeysToColumnIndexes(rows[0], columnValueKeys), isPublic, isPublicColumnIndex = this.findIsPublicColumnIndex_(rows[0]), properties;
    for (var rowIndex = 1, lenght = rows.length;rowIndex < lenght;rowIndex++) {
      row = rows[rowIndex];
      identifier = getIdentifier(row[identifierColumnIndex]);
      rowValues = getRowValues(row, valueColumnIndexses, columnReturnTypePerValueColumnIndex);
      currencies = getCurrencies(row, currencyIndexes);
      isPublic = this.getIsPublic_(row, isPublicColumnIndex);
      properties = this.getProperties_(row, valueColumnIndexses, columnReturnTypePerValueColumnIndex);
      if (!_.isArray(rowValues)) {
        rowValues = [rowValues];
      }
      rowValues.columns = columnIdToColumnIndexes;
      tickers[identifier] = new gridReport.model.ColumnValue(identifier, rowValues, undefined, currencies, properties, isPublic);
    }
    return tickers;
  };
  service.createResponseData_ = function(rows, columns, responseStatus) {
    var data = {status:responseStatus, rowsCount:rows.length - 1, columns:[]};
    _.each(columns, function(column) {
      if (column.isComposeToVector && column.hasSubColumns()) {
        data.columns.push({id:column.id, values:this.createTickerCompositeValues_(rows, _.pluck(column.gridColumns, "id"), _.map(column.gridColumns, function(clmn) {
          return clmn.getReturnType();
        }))});
      } else {
        var expectedItemsPerVectorCount = this.getExpectedItemsPerVectorCount_(column);
        data.columns.push({id:column.id, values:this.createTickerValues_(rows, column.id, column.getReturnType(), expectedItemsPerVectorCount)});
      }
    }, this);
    return data;
  };
  function findColumnIndexses(columns, commandExpression) {
    var indexes = [], columnIndex, count;
    if (_.isArray(commandExpression)) {
      for (columnIndex = 0, count = columns.length;columnIndex < count;columnIndex++) {
        if (_.indexOf(commandExpression, columns[columnIndex].r) != -1) {
          indexes.push(columnIndex);
        }
      }
    } else {
      for (columnIndex = 0, count = columns.length;columnIndex < count;columnIndex++) {
        if (columns[columnIndex].r === commandExpression) {
          indexes.push(columnIndex);
        }
      }
    }
    return indexes;
  }
  function tryParseNumber(rowValue) {
    if (_.isNull(rowValue) || (_.isUndefined(rowValue) || (_.isNaN(rowValue) || (rowValue === Number.Infinity || (rowValue === Number.POSITIVE_INFINITY || rowValue === Number.NEGATIVE_INFINITY))))) {
      return null;
    }
    return rowValue;
  }
  function getIdentifier(rowValue) {
    if (typeof rowValue === "object") {
      if (rowValue && rowValue.hasOwnProperty("v")) {
        return rowValue.v;
      }
      return null;
    }
    return rowValue;
  }
  service.findIsPublicColumnIndex_ = function(columns) {
    for (var columnIndex = 0, count = columns.length;columnIndex < count;columnIndex++) {
      if (columns[columnIndex].r === "/*UtilityField*/TR.IsPublic/*UtilityField*/") {
        return columnIndex;
      }
    }
    return-1;
  };
  service.getProperties_ = function() {
    return undefined;
  };
  service.getIsPublic_ = function(row, index) {
    return row != null && (row[index] != null && row[index].v === true);
  };
  service.getExpectedItemsPerVectorCount_ = function(column) {
    if (column.command && column.command.isVector()) {
      return gfColumnHeaderFormatterService.getSubColumns(column).length;
    }
    return null;
  };
  service.tryParseRowValue_ = function(rowValue, returnType) {
    if (_.isNull(rowValue) || _.isUndefined(rowValue)) {
      return null;
    }
    rowValue = rowValue.v;
    if (returnType === scr.DataTypes.Date || returnType === scr.DataTypes.DateTime) {
      if (_.isDate(rowValue)) {
        return rowValue;
      }
      try {
        return Date.parse(rowValue);
      } catch (error) {
        return rowValue;
      }
    }
    if (returnType === scr.DataTypes.Percentage) {
      if (_.isNumber(rowValue) && tryParseNumber(rowValue) !== null) {
        return rowValue / 100;
      }
    }
    if (typeof rowValue === "object" || tryParseNumber(rowValue) === null) {
      return null;
    }
    return rowValue;
  };
  service.parseResponse = function(response, columns, options) {
    if (!response) {
      throw new Error("response should be provided");
    }
    if (!columns) {
      throw new Error("columns should be provided");
    }
    if (options != undefined && (options.universeContext === scr.UniverseType.PublicPrivate && response.screenCount != undefined)) {
      var finalScreenCount = service.getActualRowsCount(response.screenCount);
      if (finalScreenCount != undefined && finalScreenCount > options.maxRowsCount) {
        return{status:gridReport.datacloud.ResponseStatus.MaxThresholdExceeded, rowsCount:finalScreenCount, columns:[]};
      }
    }
    if (options != undefined && (options.maxRowsCount < response.rows - 1 && options.parseResponseIfMaxTresholdExceeded == false)) {
      return{status:response.status, rowsCount:response.rows - 1, columns:[]};
    }
    if (response.r == undefined || response.r.length == 0) {
      return{status:response.status, rowsCount:0, columns:[]};
    }
    return this.createResponseData_(response.r, columns, response.status);
  };
  function filterInt(value) {
    if (/^(\-|\+)?([0-9]+|Infinity)$/.test(value)) {
      return Number(value);
    }
    return NaN;
  }
  service.getActualRowsCount = function(screenCount) {
    screenCount = _.isString(screenCount) ? JSON.parse(screenCount) : screenCount;
    var count = 0;
    _.each(screenCount, function(value, key) {
      var parsedKey = filterInt(key);
      if (_.isNumber(parsedKey) && _.isFinite(parsedKey)) {
        count = value;
      }
    });
    return count;
  };
  return service;
}]);
goog.provide("gridReport.datacloud.DataCloudProvider");
goog.require("gridReport.datacloud.parsers.DataCloudResponseParser");
goog.require("gridReport.datacloud.service.DataCloudRequest");
goog.require("gridReport.datacloud.service.DataCloudService");
goog.require("gridReport.services.CacheService");
goog.require("gridReport.model.InternalEvents");
goog.require("gridReport.model.Severity");
goog.require("gridReport.model.ErrorCodes");
goog.require("gridReport.datacloud.ResponseStatus");
goog.require("gridReport.datacloud.service.DataCloudRowsService");
goog.require("gridReport.datacloud.service.DataCloudColumnsService");
goog.require("gridReport.datacloud.RequestsTrackerColumns");
goog.require("gridReport.datacloud.RequestsTrackerRows");
gridReport.datacloud.DataCloudProvider = function(gfLogManager, gfEventsAggregator, gfCache, $translate, gfDataCloudRowsService, gfDataCloudColumnsService, gfConfig) {
  var subscribedColumns = [];
  var dataRetrievedColumnIds = [];
  var requestTokens = {};
  var isSuspended = false;
  var needToReload = false;
  this.getCallbacks = function() {
    return{startLoading:this.startLoading, endLoading:this.endLoading, dataLoading:this.dataLoading, dataLoaded:this.dataLoaded};
  };
  this.reloadData = function(parameters) {
    this.parameters = parameters;
    (this.clearData || angular.noop)(this.id);
    dataRetrievedColumnIds = [];
    return this.requestData(subscribedColumns, this.parameters, requestTokens, this.getCallbacks(), this.maxRowsCountExceeded, this.maxRowsCount, this.requestScreenCount, this.passDataToGridIfExceeded);
  };
  this.subscribe = function(columns) {
    _.each(columns, function(column) {
      subscribedColumns.push(column);
    });
  };
  this.unsubscribe = function(columns) {
    subscribedColumns = _.filter(subscribedColumns, function(column) {
      var isSubscribed = !_.findWhere(columns, {id:column.id});
      if (!isSubscribed && dataRetrievedColumnIds.indexOf(column.id) !== -1) {
        dataRetrievedColumnIds.splice(dataRetrievedColumnIds.indexOf(column.id), 1);
      }
      return isSubscribed;
    });
  };
  this.unsubscribeAll = function() {
    subscribedColumns = [];
  };
  this.suspend = function() {
    isSuspended = true;
  };
  this.resume = function() {
    isSuspended = false;
    if (needToReload) {
      needToReload = false;
      this.requestData(subscribedColumns, this.parameters, requestTokens, this.getCallbacks(), this.maxRowsCountExceeded, this.maxRowsCount, this.requestScreenCount, this.passDataToGridIfExceeded);
    }
  };
  this.createRequest_ = function(content, universe, requestScreenCount, maxScreenRows, finalScreenResult, universeContext) {
    if (requestScreenCount) {
      content += ",SCREENCOUNT(H)";
    }
    if (universeContext === scr.UniverseType.PublicPrivate) {
      content += ",/*UtilityField*/TR.IsPublic/*UtilityField*/";
    }
    content += gfConfig && gfConfig.ignoreAllColumnsFlag ? "" : ",allcolumns";
    return new gridReport.datacloud.service.DataCloudRequest({method:"select", content:content, universe:universe, output:"Row, In | Col,Va,T,Attr,currency", universeAsIs:true, maxScreenRows:maxScreenRows, finalScreenResult:finalScreenResult});
  };
  this.requestData = function(columns, parameters, requestTokens, callbacks, maxRowsCountExceeded, maxRowsCount, requestScreenCount, passDataToGridIfExceeded, partialRowsRequest, requestedRows) {
    if (columns == undefined || (columns.length == 0 || (!parameters || !parameters.universe && !parameters.resolvedUniverse))) {
      return false;
    }
    if (isSuspended) {
      needToReload = true;
      return false;
    }
    columns = columns.slice();
    var requestedColumns = _.pluck(columns, "id");
    var requestGuid = uiIDGenerator.v1();
    (callbacks.startLoading || angular.noop)(requestGuid);
    (callbacks.dataLoading || angular.noop)(columns);
    var cachedData = [];
    for (var i = 0, n = requestedColumns.length;i < n;i++) {
      var data = gfCache.getData(requestedColumns[i]);
      if (data) {
        if (dataRetrievedColumnIds.indexOf(requestedColumns[i]) === -1) {
          dataRetrievedColumnIds.push(requestedColumns[i]);
        }
        cachedData.push(data);
        var column = _.findWhere(columns, {id:requestedColumns[i]});
        columns.splice(columns.indexOf(column), 1);
      }
    }
    if (cachedData.length > 0) {
      (callbacks.dataLoaded || angular.noop)(new gridReport.model.Response({data:cachedData}));
    }
    requestedColumns = [];
    _.each(columns, function(c) {
      if (c.hasSubColumns() && c.isComposeToVector) {
        _.each(c.gridColumns, function(cc) {
          requestedColumns.push(cc.id);
        });
      } else {
        requestedColumns.push(c.id);
      }
    });
    if (columns.length == 0) {
      (callbacks.endLoading || angular.noop)();
      return false;
    }
    var universe = partialRowsRequest ? parameters.universe : getUniverse(parameters);
    if (parameters.resolvedUniverse || parameters.rowsCount) {
      var size = parameters.resolvedUniverse != undefined && parameters.resolvedUniverse != "" ? parameters.resolvedUniverse.split(",").length : parameters.rowsCount;
      if (exceedMaxRowsCount(size, maxRowsCount, maxRowsCountExceeded, requestedColumns, callbacks)) {
        return false;
      }
    }
    var formula = createFormula(requestedColumns, parameters.globalParameters);
    var request = this.createRequest_(formula, universe, requestScreenCount && !parameters.resolvedUniverse, maxRowsCount, passDataToGridIfExceeded, parameters.universeContext);
    gfLogManager.trace("Requested columns: " + formula);
    if (partialRowsRequest) {
      gfDataCloudRowsService.sendRowsDataRequest({request:request, parameters:parameters, callbacks:callbacks, tracker:new gridReport.datacloud.RequestsTrackerRows(requestTokens, requestedRows), columns:columns, requestedColumns:requestedColumns, requestedRows:requestedRows, maxRowsCountExceeded:maxRowsCountExceeded, requestGuid:requestGuid, passDataToGridIfExceeded:passDataToGridIfExceeded});
    } else {
      gfDataCloudColumnsService.sendColumnsDataRequest({request:request, parameters:parameters, callbacks:callbacks, requestedColumns:requestedColumns, maxRowsCountExceeded:maxRowsCountExceeded, requestGuid:requestGuid, passDataToGridIfExceeded:passDataToGridIfExceeded, tracker:new gridReport.datacloud.RequestsTrackerColumns(requestTokens, columns), dataRetrievedColumnIds:dataRetrievedColumnIds});
    }
    return true;
  };
  function getUniverse(parameters) {
    if (parameters.universeType == gridReport.model.UniverseTypes.Screen) {
      return parameters.resolvedUniverse != undefined && parameters.resolvedUniverse != "" ? "SCREEN(U(IN(" + parameters.resolvedUniverse + ")))" : parameters.universe;
    } else {
      return parameters.resolvedUniverse || parameters.universe;
    }
  }
  function exceedMaxRowsCount(size, maxRowsCount, maxRowsCountExceeded, columns, callbacks) {
    if (maxRowsCount) {
      if (size > maxRowsCount) {
        if (callbacks.dataLoaded) {
          callbacks.dataLoaded(new gridReport.model.Response({exceptions:[{errorCode:gridReport.model.ErrorCodes.MAX_ROWS_COUNT_EXCEEDED, message:$translate.instant("MAX_ROWS_COUNT_EXCEEDED", {maxRowsCount:maxRowsCount, size:size}), severity:gridReport.model.Severity.warning, columns:columns}]}));
        }
        (callbacks.endLoading || angular.noop)();
        (maxRowsCountExceeded || angular.noop)({rowsCount:size, maxRowsCount:maxRowsCount});
        return true;
      }
    }
    return false;
  }
  function createFormula(requestedColumns, globalParameters) {
    var formula = _.unique(requestedColumns).join();
    if (globalParameters && globalParameters.length > 0) {
      formula += "," + _.map(globalParameters, function(parameter) {
        return parameter.name + "=" + parameter.value;
      }).join();
    }
    return formula;
  }
  this.abort = function() {
    for (var prop in requestTokens) {
      delete requestTokens[prop];
    }
  };
  this.loadData = function(needReload, parameters) {
    if (needReload) {
      return this.reloadData(parameters);
    }
    var columns = _.filter(subscribedColumns, function(c) {
      return c.dataLoadingFailed || dataRetrievedColumnIds.indexOf(c.id) === -1;
    });
    return this.requestData(columns, this.parameters, requestTokens, this.getCallbacks(), this.maxRowsCountExceeded, this.maxRowsCount, this.requestScreenCount, this.passDataToGridIfExceeded);
  };
  this.getSubscribedColumns = function() {
    return subscribedColumns;
  };
  this.loadPartialData = function(keys) {
    if (!keys) {
      throw new Error("keys should be provided");
    }
    var requestDataForAllTickers = _.some(subscribedColumns, function(column) {
      return column.command && (column.command.isMultiFactorRank() || column.command.isFactorRank());
    });
    this.parameters.resolvedUniverse = _.union(this.parameters.resolvedUniverse.split(","), keys).join();
    if (requestDataForAllTickers) {
      this.parameters.universe = this.parameters.resolvedUniverse;
    } else {
      this.parameters.universe = keys.join();
    }
    var that = this;
    var callbacks = {startLoading:function(requestGuid) {
      (that.startLoadingRows || angular.noop)(requestGuid, keys);
    }, endLoading:function(requestGuid) {
      (that.endLoadingRows || angular.noop)(requestGuid, keys);
    }, dataLoading:angular.noop, dataLoaded:this.dataLoaded};
    this.requestData(subscribedColumns, this.parameters, requestTokens, callbacks, this.maxRowsCountExceeded, this.maxRowsCount, this.requestScreenCount, this.passDataToGridIfExceeded, true, keys);
  };
  this.removeKeys = function(keys) {
    if (this.parameters && (this.parameters.resolvedUniverse && keys)) {
      this.parameters.universe = this.parameters.resolvedUniverse = _.difference(this.parameters.resolvedUniverse.split(","), keys).join();
      var requestDataForAllTickers = _.some(subscribedColumns, function(column) {
        return column.command && (column.command.isMultiFactorRank() || column.command.isFactorRank());
      });
      return requestDataForAllTickers;
    }
    return false;
  };
};
gridReport.datacloud.DataCloudProvider.prototype.clearData = undefined;
gridReport.datacloud.DataCloudProvider.prototype.dataLoading = undefined;
gridReport.datacloud.DataCloudProvider.prototype.dataLoaded = undefined;
gridReport.datacloud.DataCloudProvider.prototype.parameters = undefined;
gridReport.datacloud.DataCloudProvider.prototype.maxRowsCountExceeded = undefined;
goog.provide("gridReport.datacloud.AuditabilityDataCloudProvider");
goog.require("gridReport.datacloud.DataCloudProvider");
goog.require("gridReport.datacloud.parsers.AuditabilityDataCloudResponseParser");
goog.require("gridReport.datacloud.service.DataCloudRequest");
goog.require("gridReport.datacloud.service.DataCloudService");
goog.require("gridReport.services.CacheService");
goog.require("gridReport.model.InternalEvents");
goog.require("gridReport.model.Severity");
goog.require("gridReport.model.ErrorCodes");
goog.require("gridReport.datacloud.ResponseStatus");
goog.require("gridReport.datacloud.service.DataCloudRowsService");
goog.require("gridReport.datacloud.service.DataCloudColumnsService");
goog.require("gridReport.datacloud.RequestsTrackerColumns");
goog.require("gridReport.datacloud.RequestsTrackerRows");
gridReport.datacloud.AuditabilityDataCloudProvider = function(gfLogManager, gfEventsAggregator, gfCache, $translate, gfDataCloudRowsService, gfDataCloudColumnsService, gfConfig) {
  gridReport.datacloud.DataCloudProvider.call(this, gfLogManager, gfEventsAggregator, gfCache, $translate, gfDataCloudRowsService, gfDataCloudColumnsService, gfConfig);
  this.createRequest_ = function(content, universe, requestScreenCount, maxScreenRows, finalScreenResult, universeContext) {
    var request = new gridReport.datacloud.service.DataCloudRequest({method:"select", content:content, universe:universe, output:"Row, In | Col,Va,T,Attr,currency,ctflg,prType,RepNoCT,stType,periodenddate,COA,lineId,source,stDate,periodlength,fxRate,stdConvertedTo,companyCurrency,isNotScalable,isInterimSingle,interimType,interimNumber,reportUnit,RFAAcronym,FiscalYr,PeriodLenType", universeAsIs:true, maxScreenRows:maxScreenRows, finalScreenResult:finalScreenResult});
    if (requestScreenCount) {
      request.content = request.content + ",SCREENCOUNT(H)";
    }
    if (universeContext === scr.UniverseType.PublicPrivate) {
      request.content = request.content + ",/*UtilityField*/TR.IsPublic/*UtilityField*/";
    }
    request.content = request.content + (gfConfig && gfConfig.ignoreAllColumnsFlag ? "" : ",allcolumns");
    return request;
  };
};
gridReport.datacloud.AuditabilityDataCloudProvider.prototype = Object.create(gridReport.datacloud.DataCloudProvider.prototype);
goog.provide("gridReport.datacloud.DataCloudProviderFactory");
goog.require("gridReport.Module");
goog.require("gridReport.model.Command");
goog.require("gridReport.datacloud.DataCloudProvider");
goog.require("gridReport.datacloud.AuditabilityDataCloudProvider");
gridReport.Module.service("gfDataCloudProviderFactory", ["gfLogManager", "gfEventsAggregator", "gfCache", "$translate", "gfDataCloudRowsService", "gfDataCloudColumnsService", "gfDataCloudResponseParser", "gfAuditabilityDataCloudResponseParser", "gfConfig", function(gfLogManager, gfEventsAggregator, gfCache, $translate, gfDataCloudRowsService, gfDataCloudColumnsService, gfDataCloudResponseParser, gfAuditabilityDataCloudResponseParser, gfConfig) {
  var service = {};
  service.createInstance = function() {
    var dataCloudProvider = new gridReport.datacloud.DataCloudProvider(gfLogManager, gfEventsAggregator, gfCache, $translate, gfDataCloudRowsService.createInstance(gfDataCloudResponseParser), gfDataCloudColumnsService.createInstance(gfDataCloudResponseParser), gfConfig);
    dataCloudProvider.id = gridReport.model.Command.ADC_DATA_PROVIDER_ID;
    return dataCloudProvider;
  };
  service.createAuditabilityInstance = function() {
    var dataCloudProvider = new gridReport.datacloud.AuditabilityDataCloudProvider(gfLogManager, gfEventsAggregator, gfCache, $translate, gfDataCloudRowsService.createInstance(gfAuditabilityDataCloudResponseParser), gfDataCloudColumnsService.createInstance(gfAuditabilityDataCloudResponseParser), gfConfig);
    dataCloudProvider.id = gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID;
    return dataCloudProvider;
  };
  return service;
}]);
goog.provide("gridReport.model.LoadingReasons");
gridReport.model.LoadingReasons = {RequestAllData:"LoadingReasons_RequestAllData", Grouping:"LoadingReasons_Grouping", TemplateLoading:"LoadingReasons_TemplateLoading", TemplateSaving:"LoadingReasons_TemplateSaving"};
goog.provide("gridReport.controllers.ADCGridController");
goog.require("gridReport.model.GridEvents");
goog.require("gridReport.services.GridManagementService");
goog.require("gridReport.model.LoadingReasons");
goog.require("gridReport.model.UniverseTypes");
goog.require("gridReport.datacloud.DataCloudProviderFactory");
goog.require("gridReport.datacloud.DataCloudRequestParameters");
goog.require("gridReport.services.excelFormula.ExcelFormulaBuilder");
gridReport.Module.controller("ADCGridController", ["$scope", "$element", "$timeout", "gfDataCloudProviderFactory", "gfEventsAggregator", "gfGridManagementService", "gfNotificationService", "eeExcelExporter", "gfColumnSources", "gfExcelFormulaBuilder", function($scope, $element, $timeout, gfDataCloudProviderFactory, gfEventsAggregator, gfGridManagementService, gfNotificationService, eeExcelExporter, gfColumnSources, gfExcelFormulaBuilder) {
  var requestParameters = new gridReport.datacloud.DataCloudRequestParameters;
  var eventsAggregator = null;
  var gfDataProviderResolver = new gridReport.services.DataProviderResolver;
  gfDataProviderResolver.register(gridReport.model.Command.ADC_DATA_PROVIDER_ID, gfDataCloudProviderFactory.createInstance());
  gfDataProviderResolver.register(gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID, gfDataCloudProviderFactory.createAuditabilityInstance());
  $scope.exclusionsType = $scope.exclusionsType || gridReport.model.ExclusionsTypes.Exclusions;
  var columnSource_ = null;
  var gridReportSettings = new gridReport.model.GridReportSettings({gridRowsCount:0, totalsLabel:$scope.totalsLabel ? $scope.totalsLabel : "Totals", gfDataProviderResolver:gfDataProviderResolver, selectionMode:$scope.selectionMode, isColumnContextMenuActive:$scope.isColumnContextMenuActive, showTotalsRow:$scope.showTotalsRow, showTotalsCount:$scope.showTotalsCount, showGroupCount:$scope.showGroupCount, showAddRemoveRows:$scope.showAddRemoveRows, canDeleteColumns:$scope.canDeleteColumns, universeContext:$scope.universeContext, 
  enableExclusions:$scope.enableExclusions, exclusionsType:$scope.exclusionsType, enableInColumnFiltering:$scope.enableInColumnFiltering});
  function updateParametersVisibilityFlag() {
    $timeout(function() {
      $scope.allParametersVisible = $scope.viewModel.gridReportSettings.getColumnsParametersVisibility();
    });
  }
  $scope.viewModel = {gridReportSettings:gridReportSettings, selectedPortfolio:undefined, selectedBenchmark:undefined, isWorking:false, dataCloudParameters:{}};
  var dataLoadingQueue = [];
  var dataCloudProvider = gridReportSettings.gfDataProviderResolver.resolve(gridReport.model.Command.ADC_DATA_PROVIDER_ID);
  var auditabilityDataCloudProvider = gridReportSettings.gfDataProviderResolver.resolve(gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID);
  initDataCloudProvider(dataCloudProvider, gridReport.model.Command.ADC_DATA_PROVIDER_ID);
  initDataCloudProvider(auditabilityDataCloudProvider, gridReport.model.Command.ADC_AUDITABILITY_DATA_PROVIDER_ID);
  function initDataCloudProvider(dataCloudProvider, dpId) {
    if (dataCloudProvider != undefined) {
      dataCloudProvider.id = dpId;
      dataCloudProvider.maxRowsCount = $scope.maxRowsCount;
      dataCloudProvider.passDataToGridIfExceeded = $scope.renderIfMaxRowsCountExceeded != undefined ? $scope.renderIfMaxRowsCountExceeded : true;
      dataCloudProvider.maxRowsCountExceeded = function(args) {
        var intervalId = setInterval(function() {
          if (!$scope.viewModel.isWorking) {
            eventsAggregator.raiseEvent(gridReport.model.GridEvents.maxRowsCountExceeded, args);
            clearInterval(intervalId);
          }
        }, 50);
      };
      dataCloudProvider.requestScreenCount = $scope.requestScreenCount;
      dataCloudProvider.startLoading = function(requestGuid) {
        gfNotificationService.clearMessages();
        dataProviderStartLoading(dataCloudProvider.id, requestGuid);
      };
      dataCloudProvider.endLoading = function(requestGuid) {
        dataProviderEndLoading(dataCloudProvider.id, requestGuid);
      };
      dataCloudProvider.startLoadingRows = function(requestGuid, keys) {
        dataCloudProvider.startLoading(requestGuid);
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.startLoadingRows, keys);
      };
      dataCloudProvider.endLoadingRows = function(requestGuid, keys) {
        dataProviderEndLoading(dataCloudProvider.id, requestGuid);
        eventsAggregator.raiseEvent(gridReport.model.GridEvents.endLoadingRows, keys);
      };
    }
  }
  function dataProviderStartLoading(dpId, requestGuid) {
    var dpRequest = _.findWhere(dataLoadingQueue, {dpId:dpId});
    if (dpRequest && dpRequest.requestGuid != requestGuid) {
      dataLoadingQueue.splice(dataLoadingQueue.indexOf(dpRequest), 1);
    }
    if (dataLoadingQueue.length == 0) {
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.loadingStarted);
    }
    dpRequest = {dpId:dpId, requestGuid:requestGuid};
    dataLoadingQueue.push(dpRequest);
  }
  function dataProviderEndLoading(dpId, requestGuid) {
    var dpRequest = _.findWhere(dataLoadingQueue, {dpId:dpId, requestGuid:requestGuid});
    if (dpRequest) {
      dataLoadingQueue.splice(dataLoadingQueue.indexOf(dpRequest), 1);
      if (dataLoadingQueue.length == 0) {
        $timeout(function() {
          if (dataLoadingQueue.length == 0) {
            $scope.viewModel.isWorking = false;
            eventsAggregator.raiseEvent(gridReport.model.GridEvents.loadingEnded);
          }
        });
      }
    }
  }
  $scope.$watch("customDataProviders", function() {
    angular.forEach($scope.customDataProviders, function(dp) {
      dp.startLoading = function(requestGuid) {
        dataProviderStartLoading(dp.id, requestGuid);
      };
      dp.endLoading = function(requestGuid) {
        dataProviderEndLoading(dp.id, requestGuid);
      };
      gridReportSettings.gfDataProviderResolver.register(dp.id, dp);
    });
  }, true);
  $scope.$watch("maxRowsCount", function() {
    dataCloudProvider.maxRowsCount = $scope.maxRowsCount;
    auditabilityDataCloudProvider.maxRowsCount = $scope.maxRowsCount;
  });
  $scope.$watch("requestScreenCount", function() {
    requestParameters.resolvedUniverse = "";
    dataCloudProvider.requestScreenCount = $scope.requestScreenCount;
    auditabilityDataCloudProvider.requestScreenCount = $scope.requestScreenCount;
  });
  $scope.$watch("totalsLabel", function(newValue) {
    if (newValue) {
      $scope.viewModel.gridReportSettings.totalsLabel = newValue;
    }
  });
  function registerEventHandlers() {
    eventsAggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
    eventsAggregator.addHandler(gridReport.model.InternalEvents.insertCommand, function(args) {
      gfGridManagementService.insertCommand($scope.gridInstanceId, args.previousCommand, args.newCommand, args.columnParams);
      loadDataCallback(false);
    });
    eventsAggregator.addHandler(gridReport.model.InternalEvents.groupingToolbarVisibilityChanged, function(args) {
      if ($scope.groupingToolbarVisibilityChanged) {
        $scope.groupingToolbarVisibilityChanged(args.isVisible);
      }
    });
    eventsAggregator.addHandler(gridReport.model.InternalEvents.exclusionsToolbarVisibilityChanged, function(args) {
      if ($scope.exclusionsToolbarVisibilityChanged) {
        $scope.exclusionsToolbarVisibilityChanged(args.isVisible);
      }
    });
    eventsAggregator.addHandler(gridReport.model.InternalEvents.changeCommand, function(args) {
      gfGridManagementService.changeCommand($scope.gridInstanceId, args.previousCommand, args.newCommand);
      loadDataCallback(false);
    });
    eventsAggregator.addHandler(gridReport.model.InternalEvents.addCommand, function(args) {
      if (args.isUserTriggered && args.command) {
        columnSource_ = args.isFromUDIP ? gfColumnSources.UDIP : gfColumnSources.QDIP;
        gfGridManagementService.addByUserCommand($scope.gridInstanceId, args.command);
        gfGridManagementService.scrollToColumn($scope.gridInstanceId, args.command.expression);
        if (args.command.isMultiFactorRank()) {
          gfGridManagementService.setSortDirection($scope.gridInstanceId, args.command.expression, args.command.getDefaultSortDirection());
        }
        loadDataCallback(false);
      }
    });
    eventsAggregator.addHandler(gridReport.model.GridEvents.loadingEnded, function() {
      gfGridManagementService.endLoading($scope.gridInstanceId, gridReport.model.GridContentPlacement.Rows, gridReport.model.LoadingReasons.RequestAllData);
    });
    eventsAggregator.addHandler(gridReport.model.GridEvents.loadingStarted, function(loadingReason) {
      if (loadingReason === gridReport.model.LoadingReasons.RequestAllData) {
        gfGridManagementService.startLoading($scope.gridInstanceId, gridReport.model.GridContentPlacement.Rows, gridReport.model.LoadingReasons.RequestAllData);
      }
    });
    eventsAggregator.addHandler(gridReport.model.InternalEvents.columnAdded, function(col) {
      updateParametersVisibilityFlag();
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.columnAdded, {column:col, source:columnSource_});
      columnSource_ = undefined;
    });
    eventsAggregator.addHandler(gridReport.model.GridEvents.columnRemoved, updateParametersVisibilityFlag);
    eventsAggregator.addHandler(gridReport.model.GridEvents.columnParametersVisibilityChanged, updateParametersVisibilityFlag);
  }
  function setScopeValue(propertyName, value, sourceName) {
    if ($scope[propertyName] === undefined) {
      return;
    }
    if (sourceName == undefined) {
      sourceName = propertyName;
    }
    if ($scope[propertyName] != $scope.viewModel.gridReportSettings[sourceName]) {
      $scope[propertyName] = $scope.viewModel.gridReportSettings[sourceName];
    }
  }
  function abortDataLoadingCallback() {
    function abortDataLoading(dataProvider) {
      if (dataProvider.abort) {
        dataProvider.abort();
      }
      if (dataProvider.clearData) {
        dataProvider.clearData();
      }
    }
    abortDataLoading(dataCloudProvider);
    abortDataLoading(auditabilityDataCloudProvider);
    angular.forEach($scope.customDataProviders, abortDataLoading);
    dataLoadingQueue = [];
  }
  function setUniverseCallback(universe, universeType, universeContext) {
    if (universeType == gridReport.model.UniverseTypes.Screen) {
      requestParameters.resolvedUniverse = "";
    } else {
      requestParameters.resolvedUniverse = universe;
    }
    requestParameters.rowsCount = 0;
    requestParameters.universe = universe;
    requestParameters.universeType = universeType;
    requestParameters.universeContext = universeContext;
  }
  function getUniverseCallback() {
    return{universe:requestParameters.universe, universeType:requestParameters.universeType, universeContext:requestParameters.universeContext};
  }
  function getGlobalParametersCallback() {
    return requestParameters.globalParameters;
  }
  function setGlobalParametersCallback(globalParameters) {
    requestParameters.globalParameters = globalParameters;
    eventsAggregator.raiseEvent(gridReport.model.GridEvents.globalParametersApplied, {globalParameters:globalParameters});
  }
  function getMaxRowsCountCallback() {
    return $scope.maxRowsCount;
  }
  function loadDataCallback(needReload) {
    if (needReload && $scope.gridInstanceId) {
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.loadingStarted, gridReport.model.LoadingReasons.RequestAllData);
    }
    var isDataLoadingStarted = false;
    if (dataCloudProvider.loadData(needReload, requestParameters) | auditabilityDataCloudProvider.loadData(needReload, requestParameters)) {
      isDataLoadingStarted = true;
    }
    angular.forEach($scope.customDataProviders, function(dp) {
      if (needReload) {
        (dp.clearData || angular.noop)(dp.id);
      }
      if (dp.loadData(needReload, requestParameters)) {
        isDataLoadingStarted = true;
      }
    });
    if (!isDataLoadingStarted) {
      eventsAggregator.raiseEvent(gridReport.model.GridEvents.loadingEnded);
    }
  }
  var callbacksArray = [[gfGridManagementService.loadData, loadDataCallback], [gfGridManagementService.setUniverse, setUniverseCallback], [gfGridManagementService.getUniverse, getUniverseCallback], [gfGridManagementService.setGlobalParameters, setGlobalParametersCallback], [gfGridManagementService.getGlobalParameters, getGlobalParametersCallback], [gfGridManagementService.getMaxRowsCount, getMaxRowsCountCallback], [gfGridManagementService.abortDataLoading, abortDataLoadingCallback], [gfGridManagementService.exportToExcelAsFormula, 
  exportToExcelAsFormulaCallback], [gfGridManagementService.getExcelAsFormulaExportData, getExcelAsFormulaExportDataCallback]];
  function registerManagementServiceCallbacks(gridInstanceId) {
    gfGridManagementService.registerCallbacks(gridInstanceId, callbacksArray);
  }
  function unregisterManagementServiceCallbacks(gridInstanceId) {
    gfGridManagementService.unregisterCallbacks(gridInstanceId, callbacksArray);
  }
  if ($scope.gridInstanceId) {
    registerManagementServiceCallbacks($scope.gridInstanceId);
    registerEventHandlers();
  }
  $scope.$watch("gridInstanceId", function(newVal, oldVal) {
    if (newVal === oldVal) {
      return;
    }
    if (oldVal) {
      unregisterManagementServiceCallbacks(oldVal);
    }
    registerManagementServiceCallbacks(newVal);
    registerEventHandlers();
  });
  $scope.$watch("viewModel.gridReportSettings.sortable", function() {
    setScopeValue("sortable", $scope.viewModel.gridReportSettings.sortable);
  });
  $scope.$watch("viewModel.gridReportSettings.showGroupsHeader", function() {
    setScopeValue("showGroupsHeader", $scope.viewModel.gridReportSettings.showGroupsHeader);
  });
  $scope.$watch("viewModel.gridReportSettings.columnsReorder", function() {
    setScopeValue("columnsReorder", $scope.viewModel.gridReportSettings.columnsReorder);
  });
  $scope.$watch("viewModel.gridReportSettings.columnsResize", function() {
    setScopeValue("columnsResize", $scope.viewModel.gridReportSettings.columnsResize);
  });
  $scope.$watch("viewModel.gridReportSettings.groupable", function() {
    setScopeValue("groupable", $scope.viewModel.gridReportSettings.groupable);
  });
  $scope.$watch("viewModel.gridReportSettings.enableTooltips", function() {
    setScopeValue("enableTooltips", $scope.viewModel.gridReportSettings.enableTooltips);
  });
  $scope.$watch("viewModel.gridReportSettings.showTotalsRow", function() {
    setScopeValue("showTotalsRow", $scope.viewModel.gridReportSettings.showTotalsRow);
  });
  $scope.$watch("viewModel.gridReportSettings.showTotalsCount", function() {
    setScopeValue("showTotalsCount", $scope.viewModel.gridReportSettings.showTotalsCount);
  });
  $scope.$watch("viewModel.gridReportSettings.showGroupCount", function() {
    setScopeValue("showGroupCount", $scope.viewModel.gridReportSettings.showGroupCount);
  });
  $scope.$watch("viewModel.gridReportSettings.hideGroupedColumns", function() {
    setScopeValue("hideGroupedColumns", $scope.viewModel.gridReportSettings.hideGroupedColumns);
  });
  $scope.$watch("viewModel.gridReportSettings.showFilterRow", function() {
    setScopeValue("showFilterRow", $scope.viewModel.gridReportSettings.showTotalsRow);
  });
  $scope.$watch("viewModel.gridReportSettings.selectionMode", function() {
    setScopeValue("selectionMode", $scope.viewModel.gridReportSettings.selectionMode, "selectionMode");
  });
  $scope.$watch("sortable", function(newVal) {
    $scope.viewModel.gridReportSettings.sortable = newVal;
  });
  $scope.$watch("showGroupsHeader", function(newVal) {
    $scope.viewModel.gridReportSettings.showGroupsHeader = newVal;
  });
  $scope.$watch("columnsReorder", function(newVal) {
    $scope.viewModel.gridReportSettings.columnsReorder = newVal;
  });
  $scope.$watch("columnsResize", function(newVal) {
    $scope.viewModel.gridReportSettings.columnsResize = newVal;
  });
  $scope.$watch("groupable", function(newVal) {
    $scope.viewModel.gridReportSettings.groupable = newVal;
  });
  $scope.$watch("enableTooltips", function(newVal) {
    $scope.viewModel.gridReportSettings.enableTooltips = newVal;
  });
  $scope.$watch("showTotalsRow", function(newVal) {
    $scope.viewModel.gridReportSettings.showTotalsRow = newVal;
  });
  $scope.$watch("showTotalsCount", function(newVal) {
    $scope.viewModel.gridReportSettings.showTotalsCount = newVal;
  });
  $scope.$watch("showGroupCount", function(newVal) {
    $scope.viewModel.gridReportSettings.showGroupCount = newVal;
  });
  $scope.$watch("hideGroupedColumns", function(newVal) {
    $scope.viewModel.gridReportSettings.hideGroupedColumns = newVal;
  });
  $scope.$watch("showFilterRow", function(newVal) {
    $scope.viewModel.gridReportSettings.showFilterRow = newVal;
  });
  $scope.$watch("allParametersVisible", function(newVal) {
    if (newVal != undefined) {
      $scope.viewModel.gridReportSettings.setColumnsParametersVisibility(newVal);
    }
  });
  $scope.$watch("enableExclusions", function(newValue) {
    $scope.viewModel.gridReportSettings.enableExclusions = newValue;
  });
  $scope.$watch("exclusionsType", function(newValue) {
    $scope.viewModel.gridReportSettings.exclusionsType = newValue;
  });
  $scope.$watch("selectionMode", function(newVal) {
    $scope.viewModel.gridReportSettings.selectionMode = newVal ? newVal : gridReport.model.GridReportSelectionMode.None;
  });
  $scope.$watch("isAutoSaveState", function(newVal) {
    $scope.viewModel.gridReportSettings.isStateful = newVal;
  });
  $scope.$watch("viewModel.gridReportSettings.columns", function(newValue) {
    $scope.columns = newValue;
  }, true);
  $scope.$watch("showAddRemoveRows", function(newVal) {
    $scope.viewModel.gridReportSettings.showAddRemoveRows = newVal;
  });
  $scope.$watch("universeContext", function(newVal) {
    $scope.viewModel.gridReportSettings.universeContext = newVal;
  });
  $scope.$watch("enableInColumnFiltering", function(newVal) {
    $scope.viewModel.gridReportSettings.enableInColumnFiltering = newVal;
  });
  $scope.$watch("enableConditionalValueFormatting", function(newVal) {
    $scope.viewModel.gridReportSettings.enableConditionalValueFormatting = newVal;
  });
  $scope.$watch("enableEmptyRowInserting", function(newVal) {
    $scope.viewModel.gridReportSettings.enableEmptyRowInserting = newVal;
  });
  $element.on("$destroy", function() {
    unregisterManagementServiceCallbacks($scope.gridInstanceId);
    angular.forEach($scope.customDataProviders, function(dp) {
      dp.startLoading = null;
      dp.endLoading = null;
      gridReportSettings.gfDataProviderResolver.unregister(dp.id);
    });
    if (dataCloudProvider) {
      dataCloudProvider.maxRowsCountExceeded = null;
      dataCloudProvider.startLoading = null;
      dataCloudProvider.endLoading = null;
      dataCloudProvider.startLoadingRows = null;
      dataCloudProvider.endLoadingRows = null;
    }
    $scope.$destroy();
  });
  $scope.resolvedStateChangeCauses = $scope.stateChangeCauses;
  if ($scope.stateChangeCauses == null || $scope.stateChangeCauses == undefined) {
    $scope.resolvedStateChangeCauses = [gridReport.model.StateChangesCause.ColumnResized, gridReport.model.StateChangesCause.ColumnAdded, gridReport.model.StateChangesCause.ColumnProgrammaticallyAdded, gridReport.model.StateChangesCause.ColumnRemoved, gridReport.model.StateChangesCause.ColumnInserted, gridReport.model.StateChangesCause.ColumnChanged, gridReport.model.StateChangesCause.ColumnReordered, gridReport.model.StateChangesCause.ColumnRenamed, gridReport.model.StateChangesCause.ColumnPinned, 
    gridReport.model.StateChangesCause.ColumnUnpinned, gridReport.model.StateChangesCause.ColumnFormattingChanged, gridReport.model.StateChangesCause.ColumnParametersVisibilityChanged, gridReport.model.StateChangesCause.SortChanged, gridReport.model.StateChangesCause.HiddenIdentifiersChanged, gridReport.model.StateChangesCause.ColumnTotalCalculationChanged, gridReport.model.StateChangesCause.ColumnBarChartStateChanged];
  }
  function getExcelAsFormulaExportDataCallback(exportSettings) {
    var currentUniverse = exportSettings.universe || requestParameters.universe;
    if (!exportSettings.universe && requestParameters.universeType == gridReport.model.UniverseTypes.List) {
      currentUniverse = gfGridManagementService.getVisibleIdentifiers($scope.gridInstanceId).join();
    }
    return{columns:_.filter($scope.columns, function(c) {
      return c.canSubscribe();
    }), universe:currentUniverse, globalParameters:requestParameters.globalParameters, isTranspose:exportSettings.isTransposed || false, sortColumns:getSortColumns($scope.columns, gfGridManagementService.getSortingFullState($scope.gridInstanceId) || {})};
  }
  function exportToExcelAsFormulaCallback(exportSettings) {
    var exportData = getExcelAsFormulaExportDataCallback(exportSettings);
    eeExcelExporter.exportAsFormula(gfExcelFormulaBuilder.buildFormula(exportData), exportSettings.fileName);
  }
  function getSortColumns(gridColumns, sortingFillState) {
    var sortColumns = [];
    if (sortingFillState.advancedSortingState && sortingFillState.advancedSortingState.enabled) {
      sortColumns = _.map(sortingFillState.advancedSortingState.criterias, function(criteria) {
        return{column:criteria.dataField, direction:criteria.asc ? "asc" : "desc"};
      });
    } else {
      if (sortingFillState.singleSortingState && (sortingFillState.singleSortingState.column != null && sortingFillState.singleSortingState.direction != null)) {
        sortColumns = [{column:sortingFillState.singleSortingState.column, direction:sortingFillState.singleSortingState.direction.toLowerCase()}];
      }
    }
    var filteredAndUpdatedSortColumns = [];
    _.each(sortColumns, function(sortColumnItem) {
      var column = _.find(gridColumns, {id:sortColumnItem.column});
      if (column && isColumnCanBeUsedInAdcSorting(column)) {
        var item = _.extend({}, sortColumnItem);
        if (item.column === "rowKey") {
          item.column = "IN";
        }
        filteredAndUpdatedSortColumns.push(item);
      }
    });
    return filteredAndUpdatedSortColumns;
  }
  function isColumnCanBeUsedInAdcSorting(gridColumn) {
    return!gridColumn.command.isDataBlock() && !gridColumn.command.isCustom();
  }
}]);
goog.provide("gridReport.directives.ADCGrid");
goog.require("gridReport.model.GridReportSettings");
goog.require("gridReport.model.GridColumn");
goog.require("gridReport.services.DataProviderResolver");
goog.require("gridReport.model.CommandEvents");
goog.require("gridReport.services.GridColumnConverterService");
goog.require("gridReport.services.DefaultGridColumns");
goog.require("gridReport.controllers.ADCGridController");
goog.require("gridReport.model.ColumnContextMenuOptions");
gridReport.Module.directive("adcGrid", ["$timeout", function($timeout) {
  return{restrict:"E", replace:true, transclude:true, templateUrl:"scripts/directives/adcGrid/ADCGrid.html", scope:{identifiers:"=", hiddenIdentifiers:"=", selectedRows:"=", theme:"=", selectionMode:"=", showGroupsHeader:"=", columnsResize:"=", columnsReorder:"=", sortable:"=", groupable:"=", enableTooltips:"=", showTotalsRow:"=", showTotalsCount:"=", showGroupCount:"=", hideGroupedColumns:"=", showFilterRow:"=", allParametersVisible:"=", isAutoSaveState:"=", maxRowsCount:"=", gridInstanceId:"=", 
  requestScreenCount:"=", isColumnContextMenuActive:"=", totalsLabel:"=", customDataProviders:"=", columns:"=", renderIfMaxRowsCountExceeded:"=", showAddRemoveRows:"=", stateChangeCauses:"=", primaryRowKey:"=", columnContextMenuOptions:"=", barChartInTransposeOff:"=", enableRowsDragging:"=?", showTimeseriesChartButton:"=?", canDeleteColumns:"=", universeContext:"=", enableExclusions:"=", exclusionsType:"=?", isTransposed:"=?", heatMapState:"=?", enableInColumnFiltering:"=?", highlightedRowKey:"=", 
  enablePrimaryRowFreezing:"=?", disableExclusionsToolbar:"=?", enableConditionalValueFormatting:"=?", enableAudit:"=", enableEmptyRowInserting:"=?"}, controller:"ADCGridController", link:function(scope, element) {
    function getGridBootomToolbarHeight() {
      return $(".grid-bottom-toolbar", element).height() + 3;
    }
    scope.exclusionsToolbarVisibilityChanged = function() {
      $timeout(function() {
        $(".gf-grid-report-container", element).css("height", "calc(100% - " + getGridBootomToolbarHeight() + "px)");
        $(window).trigger("resize");
      }, 100);
    };
    scope.groupingToolbarVisibilityChanged = function() {
      $timeout(function() {
        $(".gf-grid-report-container", element).css("height", "calc(100% - " + getGridBootomToolbarHeight() + "px)");
        $(window).trigger("resize");
      }, 100);
    };
  }};
}]);
goog.provide("gridReport.directives.GridContextMenuDirective");
goog.require("gridReport.directives.ContextMenuDirective");
goog.require("gridReport.Module");
gridReport.Module.directive("gridContextMenu", ["$translate", "$timeout", function($translate, $timeout) {
  return{restrict:"E", replace:true, require:"^gridReport", scope:{isAnyRowSelected:"=", actions:"="}, template:'<div><gf-context-menu menu-items="contextMenu.menuItems" ' + 'open-direction="contextMenu.openDirection" ' + 'options="contextMenu.options" ' + 'visible="contextMenu.visible" ' + 'position="contextMenu.position"></gf-context-menu></div>', link:function(scope, element, attrs, controller) {
    var actionParams = {rowKey:undefined}, contextMenuWidth = 160;
    function getMenuItems(rowKey) {
      var menuItems = [], isTransposedGrid = controller.getIsTransposed();
      if (!isTransposedGrid && controller.canInsertBlankRow()) {
        menuItems.push({label:$translate.instant("INSER_BLANK_ROW"), action:function() {
          controller.insertBlankRow(rowKey, "before");
        }});
      }
      if (controller.canExlcuded(rowKey)) {
        menuItems.push({label:$translate.instant("EXCLUDE"), action:function() {
          if (!scope.isAnyRowSelected) {
            controller.excludeRow(rowKey);
          } else {
            controller.excludeSelectedRows();
          }
        }});
      }
      if (controller.canExcludedFromStatistics(rowKey)) {
        menuItems.push({label:$translate.instant("EXCLUDE_FROM_STATISTICS"), action:function() {
          if (!scope.isAnyRowSelected) {
            controller.excludeRowFromStatistics(rowKey);
          } else {
            controller.excludeSelectedRowsFromStatistics();
          }
        }});
      }
      if (controller.canSelectAll()) {
        menuItems.push({label:$translate.instant("SELECT_ALL"), action:controller.selectAllRows});
        menuItems.push({label:$translate.instant("DESELECT_ALL"), action:controller.clearSelection});
      }
      return menuItems;
    }
    var gridReportContainer = element.closest(".gridReportContainer").first();
    scope.contextMenu = {menuItems:[], openDirection:"right", options:{width:contextMenuWidth + "px", height:"140px", autoCloseOnClick:true, autoOpenPopup:false, mode:"popup", theme:controller.theme.theme, animationShowDuration:0, animationHideDuration:0}};
    function tooggleMenuVisibility(value) {
      scope.contextMenu.visible = !!value;
      $timeout(angular.noop);
    }
    function showContextMenu(rowKey, event) {
      scope.contextMenu.menuItems = getMenuItems(rowKey);
      if (scope.contextMenu.menuItems.length == 0) {
        tooggleMenuVisibility(false);
        return true;
      }
      var initialXPos = parseInt(event.clientX) + 5 + $(window).scrollLeft();
      var finalXPos = initialXPos + contextMenuWidth >= $(document).width() ? initialXPos - contextMenuWidth : initialXPos;
      var finalYPos = parseInt(event.clientY) + 5 + $(window).scrollTop();
      scope.contextMenu.openDirection = finalXPos + contextMenuWidth * 2 <= $(document).width() ? "right" : "left";
      scope.contextMenu.position = {x:finalXPos, y:finalYPos};
      if (scope.contextMenu.visible) {
        scope.$apply(function() {
          scope.contextMenu.visible = false;
        });
      }
      tooggleMenuVisibility(true);
      return undefined;
    }
    function mouseDownHandler(event) {
      return controller.getIsTransposed() ? transposedGridContainerMouseDownHandler(event) : gridReportContainerMouseDownHandler(event);
    }
    function gridReportContainerMouseDownHandler(event) {
      if (event.which != 3 || !controller.isGridContextMenuActive()) {
        return true;
      }
      var result;
      var content = $(event.target).closest(".jqx-grid-content").first();
      if (content.length > 0) {
        actionParams.rowKey = $(event.target).closest("[row-key]").attr("row-key");
        showContextMenu(actionParams.rowKey, event);
        result = false;
      } else {
        if (scope.contextMenu.visible) {
          tooggleMenuVisibility(false);
        }
        result = true;
      }
      return result;
    }
    function transposedGridContainerMouseDownHandler(event) {
      var result;
      if (event.which != 3 || !controller.isGridContextMenuActive()) {
        return true;
      }
      var columnHeader = $(event.target).closest(".columnHeader:not(.statistic-row):not(.totals-row)").first();
      if (columnHeader.length) {
        var items = columnHeader.closest(".jqx-grid-column-header").attr("class").match(/jqx-column-id-(\S+)/);
        if (items == undefined || items.length < 2) {
          scope.contextMenu.visible = false;
          result = true;
        } else {
          var rowKey = decodeURI(items[1]);
          showContextMenu(rowKey, event);
          result = false;
        }
      } else {
        scope.contextMenu.visible = false;
        result = true;
      }
      scope.$apply();
      return result;
    }
    function gridReportContainerContextMenuHandler() {
      return false;
    }
    function hideContextMenu() {
      if (scope.contextMenu.visible) {
        tooggleMenuVisibility(false);
      }
    }
    if (scope.actions) {
      scope.actions = {hideContextMenu:hideContextMenu};
    }
    gridReportContainer.mousedown(mouseDownHandler);
    gridReportContainer.on("contextmenu", gridReportContainerContextMenuHandler);
    element.bind("$destroy", function() {
      angular.element(gridReportContainer).unbind("mousedown", mouseDownHandler);
      gridReportContainer.off("contextmenu", gridReportContainerContextMenuHandler);
    });
  }};
}]);
goog.provide("gridReport.services.PAWebApiService");
gridReport.Module.factory("gfPAWebApiService", ["$q", "$http", "gfConfig", function($q, $http, gfConfig) {
  var service = {};
  service.getWatchListById = function(id) {
    var deffered = $q.defer();
    $http.get(gfConfig.PAWebApiUrl + "watchLists/" + id).success(function(response) {
      deffered.resolve(response);
    }).error(function() {
      deffered.reject();
    });
    return deffered.promise;
  };
  service.updateWatchList = function(request) {
    if (!request) {
      throw new Error("request should be provided");
    }
    var deferred = $q.defer();
    service.getWatchListById(request.portfolio.id).then(function(response) {
      var rq = prepareCreateWatchListRequest(request.identifiers, response.result);
      $http.post(gfConfig.PAWebApiUrl + "watchLists/" + request.portfolio.id, angular.toJson(rq)).success(function(response) {
        if (response && response.success) {
          deferred.resolve();
        } else {
          deferred.reject(new Error("Unable to update the watch list"));
        }
      }).error(function(error) {
        if (error) {
          deferred.reject(new Error(error.errorMessage));
        } else {
          deferred.reject(new Error("Unable to update the watch list"));
        }
      });
    }, function(error) {
      if (error) {
        deferred.reject(new Error(error.errorMessage));
      } else {
        deferred.reject(new Error("Unable to update the watch list"));
      }
    });
    return deferred.promise;
  };
  service.addToExsistingList = function(request) {
    if (!request) {
      throw new Error("request should be provided");
    }
    var deferred = $q.defer();
    service.getWatchListById(request.portfolio.id).then(function(response) {
      var rq = prepareAddToExistingWatchListRequest(request.identifiers, response.result, request.universeContext);
      $http.post(gfConfig.PAWebApiUrl + "watchLists/" + request.portfolio.id, angular.toJson(rq)).success(function(response) {
        if (response && response.success) {
          deferred.resolve();
        } else {
          deferred.reject(new Error("Unable to update the watch list"));
        }
      }).error(function(error) {
        if (error) {
          deferred.reject(new Error(error.errorMessage));
        } else {
          deferred.reject(new Error("Unable to update the watch list"));
        }
      });
    }, function(error) {
      if (error) {
        deferred.reject(new Error(error.errorMessage));
      } else {
        deferred.reject(new Error("Unable to update the watch list"));
      }
    });
    return deferred.promise;
  };
  function prepareAddToExistingWatchListRequest(identifiers, originalWatchList, universeContext) {
    return{header:{code:originalWatchList.header.code, description:originalWatchList.header.description, lastModifiedDateTime:originalWatchList.header.lastModifiedDateTime, name:originalWatchList.header.name, state:originalWatchList.header.state}, watchListStatement:{constituents:appendConstituents(identifiers, originalWatchList.watchListStatement.constituents, universeContext)}};
  }
  function appendConstituents(identifiers, constituents, universeContext) {
    var mergedConstituents = constituents;
    var symbolType = universeContext === "Public" ? "" : "GEMCompanyPermId";
    _.each(identifiers, function(identifier) {
      var constituen = _.findWhere(constituents, {sourceSymbol:identifier});
      if (!constituen) {
        mergedConstituents.push({componentId:0, sourceSymbol:identifier, sourceSymbolType:symbolType});
      }
    });
    return mergedConstituents;
  }
  function mergeConstituents(identifiers, constituents, universeContext) {
    var mergedConstituents = [];
    _.each(identifiers, function(identifier) {
      var constituen = _.findWhere(constituents, {sourceSymbol:identifier});
      if (constituen) {
        mergedConstituents.push({componentId:constituen.componentId, sourceSymbol:constituen.sourceSymbol, sourceSymbolType:constituen.sourceSymbolType});
      } else {
        mergedConstituents.push({componentId:0, sourceSymbol:identifier, sourceSymbolType:""});
      }
    });
    return mergedConstituents;
  }
  function prepareCreateWatchListRequest(identifiers, originalWatchList) {
    return{header:{code:originalWatchList.header.code, description:originalWatchList.header.description, lastModifiedDateTime:originalWatchList.header.lastModifiedDateTime, name:originalWatchList.header.name, state:originalWatchList.header.state}, watchListStatement:{constituents:mergeConstituents(identifiers, originalWatchList.watchListStatement.constituents)}};
  }
  return service;
}]);
goog.provide("gridReport.directives.ExclusionsToolbarController");
gridReport.Module.controller("ExclusionsToolbarController", ["$scope", "$translate", "gfExclusions", "gfStatisticsExclusions", "gfEventsAggregator", "localStorageService", "gfLogManager", "gfGridManagementService", "gfStateProviderService", "gfExclusionManagerDialogService", function($scope, $translate, gfExclusions, gfStatisticsExclusions, gfEventsAggregator, localStorageService, gfLogManager, gfGridManagementService, gfStateProviderService, gfExclusionManagerDialogService) {
  var EXCLUSIONS_POSTFIX = "GRID_EXCLUSIONS_TOOLBAR";
  var currentStateId;
  function getService() {
    return $scope.exclusionsType == gridReport.model.ExclusionsTypes.StatisticsExclusions ? gfStatisticsExclusions.instance($scope.gridInstanceId) : gfExclusions.instance($scope.gridInstanceId);
  }
  function tryRestoreState() {
    if ($scope.gridInstanceId) {
      registerManagementSerivceCallbacks($scope.gridInstanceId);
      registerStateCallbacks($scope.gridInstanceId);
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exclusionsComponentRegistered, {gridInstanceId:$scope.gridInstanceId, exclusionsType:$scope.exclusionsType});
      var stateId = gfStateProviderService.getStateId($scope.gridInstanceId);
      if (!_.isUndefined(stateId) && !_.isNull(stateId)) {
        restoreStateCallback(stateId);
      }
    }
  }
  function onExcludedIdentifiersChanged(excludedIdentifiers, exclusionsType) {
    if (exclusionsType != $scope.exclusionsType) {
      return;
    }
    var removedExclusionsCount = _.difference($scope.excludedIdentifiers, excludedIdentifiers).length;
    var addedExclusionsCount = _.difference(excludedIdentifiers, $scope.excludedIdentifiers).length;
    if (removedExclusionsCount || addedExclusionsCount) {
      $scope.excludedIdentifiers = excludedIdentifiers;
      trySaveLocalState();
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.componentStateChanged, {component:gridReport.services.StateProvideService.components.exclusionsToolbar});
    }
  }
  function setUniverseCallback() {
    clearExclusions();
  }
  function registerManagementSerivceCallbacks(gridId) {
    gfGridManagementService.registerCallback(gridId, gfGridManagementService.restoreState, restoreStateCallback);
    gfGridManagementService.registerCallback(gridId, gfGridManagementService.createNew, createNewCallback);
    gfGridManagementService.registerCallback(gridId, gfGridManagementService.setUniverse, setUniverseCallback);
  }
  function unregisterManagementSerivceCallbacks(gridId) {
    gfGridManagementService.unregisterCallback(gridId, gfGridManagementService.restoreState, restoreStateCallback);
    gfGridManagementService.unregisterCallback(gridId, gfGridManagementService.createNew, createNewCallback);
    gfGridManagementService.unregisterCallback(gridId, gfGridManagementService.setUniverse, setUniverseCallback);
  }
  function registerStateCallbacks(gridId) {
    gfStateProviderService.register(gridReport.services.StateProvideService.components.exclusions, gridId, {getStateCallback:getState, setStateCallback:setState});
  }
  function unregisterStateCallbacks(gridId) {
    gfStateProviderService.unregister(gridReport.services.StateProvideService.components.exclusions, gridId);
  }
  function restoreStateCallback(stateId) {
    if (!$scope.isAutoSaveState) {
      log("unable to restore state for isAutoSaveState == false");
      return;
    }
    if (stateId === undefined) {
      log("trying to restore state with undefined id");
      return;
    }
    currentStateId = stateId;
    log("restore state id: " + stateId);
    setState(loadLocalState());
  }
  function createNewCallback(newStateId) {
    if ($scope.isAutoSaveState) {
      currentStateId = newStateId;
    }
  }
  function getState() {
    return{excludedIdentifiers:getService().getExcludedIdentifiers()};
  }
  function setState(state) {
    if (state) {
      if (state.excludedIdentifiers && state.excludedIdentifiers.length > 0) {
        var identifiersToExclude = state.excludedIdentifiers;
        if ($scope.identifiers && $scope.identifiers.length) {
          identifiersToExclude = _.intersection(state.excludedIdentifiers, $scope.identifiers);
        }
        getService().setExclusions(identifiersToExclude);
        $scope.excludedIdentifiers = getService().getExcludedIdentifiers();
      }
    }
  }
  function log(message) {
    gfLogManager.trace(EXCLUSIONS_POSTFIX + ". " + message);
  }
  function loadLocalState() {
    if (!$scope.isAutoSaveState) {
      return null;
    }
    return localStorageService.get(currentStateId + EXCLUSIONS_POSTFIX);
  }
  function trySaveLocalState() {
    if (!$scope.isAutoSaveState) {
      return;
    }
    if (currentStateId === undefined) {
      log("trying to save state with undefined id");
      return;
    }
    var state = getState();
    localStorageService.add(currentStateId + EXCLUSIONS_POSTFIX, JSON.stringify(state));
    log("Request to save exclusions state [id: " + (currentStateId + EXCLUSIONS_POSTFIX) + "]");
  }
  function clearExclusions() {
    getService().setExclusions([]);
  }
  var oldIsVisible = false;
  function isVisible() {
    var newValue = $scope.excludedIdentifiers && $scope.excludedIdentifiers.length;
    if (newValue != oldIsVisible) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.InternalEvents.exclusionsToolbarVisibilityChanged, {isVisible:newValue});
      oldIsVisible = newValue;
    }
    return newValue;
  }
  function getExclusionsAsString() {
    return $scope.excludedIdentifiers ? $scope.excludedIdentifiers.join(", ") : "";
  }
  function init() {
    var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
    aggregator.addHandler(gridReport.model.GridEvents.identifiersExcluded, onExcludedIdentifiersChanged);
    aggregator.addHandler(gridReport.model.GridEvents.loadingEnded, function() {
      getService().filterExclusions($scope.identifiers);
    });
    tryRestoreState();
  }
  function getExcludedMessage() {
    return $scope.exclusionsType == gridReport.model.ExclusionsTypes.Exclusions ? $translate.instant("EXCLUDED") : $translate.instant("EXCLUDED_FROM_STATISTICS");
  }
  $scope.getExcludedMessage = getExcludedMessage;
  $scope.isVisible = isVisible;
  $scope.clearExclusions = clearExclusions;
  $scope.getExclusionsAsString = getExclusionsAsString;
  if ($scope.gridInstanceId) {
    init();
  }
  $scope.$watch("gridInstanceId", function(newVal, oldVal) {
    if (newVal === oldVal) {
      return;
    }
    init();
  });
  function openDialog() {
    gfExclusionManagerDialogService.openExclusionManagerDialog($scope.gridInstanceId, $scope.identifiers, $scope.exclusionsType);
  }
  $scope.$on("$destroy", function() {
    unregisterManagementSerivceCallbacks($scope.gridInstanceId);
    unregisterStateCallbacks($scope.gridInstanceId);
  });
  $scope.openDialog = openDialog;
}]);
goog.provide("gridReport.directives.ExclusionsToolbarDirective");
goog.require("gridReport.directives.ExclusionsManagerDirective");
goog.require("gridReport.directives.ExclusionsToolbarController");
goog.require("gridReport.model.ExclusionsTypes");
gridReport.Module.directive("gfExclusionsToolbar", [function() {
  return{restrict:"E", replace:true, templateUrl:"scripts/directives/exclusionsToolbar/ExclusionsToolbar.html", scope:{identifiers:"=", gridInstanceId:"=", isEnabled:"=", isAutoSaveState:"=", exclusionsType:"="}, controller:"ExclusionsToolbarController"};
}]);
goog.provide("gridReport.directives.onEnterDirective");
gridReport.Module.directive("onEnter", function() {
  return{link:function(scope, element, attrs) {
    element.bind("keydown", function(event) {
      if (event.which === 13) {
        scope.$apply(function() {
          scope.$eval(attrs.onEnter);
        });
        event.preventDefault();
        event.stopPropagation();
      }
    });
  }};
});
goog.provide("gridReport.templates");
angular.module("gridReport").run(["$templateCache", function($templateCache) {
  $templateCache.put("scripts/directives/adcGrid/ADCGrid.html", '<div><div ng-transclude></div><div style="height:100%" class="gf-grid-report-container"><grid-report grid-instance-id="gridInstanceId" grid-report-settings="viewModel.gridReportSettings" all-parameters-visible="allParametersVisible" is-working="viewModel.isWorking" selected-rows="selectedRows" grid-rows-count="viewModel.gridRowsCount" identifiers="identifiers" hidden-identifiers="hiddenIdentifiers" theme="theme" state-change-causes="resolvedStateChangeCauses" primary-row-key="primaryRowKey" enable-browser-selection="true" column-context-menu-options="columnContextMenuOptions" is-transposed="isTransposed" bar-chart-in-transpose-off="barChartInTransposeOff" enable-rows-dragging="enableRowsDragging" show-timeseries-chart-button="showTimeseriesChartButton" heat-map-state="heatMapState" highlighted-row-key="highlightedRowKey" enable-primary-row-freezing="enablePrimaryRowFreezing" enable-audit="enableAudit"><grid-column-context-menu grid-instance-id="gridInstanceId"></grid-column-context-menu><grid-context-menu is-any-row-selected="selectedRows && selectedRows.length"></grid-context-menu></grid-report></div><div class="grid-bottom-toolbar">\x3c!-- Grouping --\x3e<div style="margin-bottom:2px"><gf-grouping-toolbar grid-instance-id="gridInstanceId"></gf-grouping-toolbar></div>\x3c!-- Exclusions --\x3e<div ng-if="!disableExclusionsToolbar"><gf-exclusions-toolbar identifiers="identifiers" is-enabled="enableExclusions" is-auto-save-state="isAutoSaveState" grid-instance-id="gridInstanceId" exclusions-type="exclusionsType"></gf-exclusions-toolbar></div></div></div>');
  $templateCache.put("scripts/directives/advancedControls/AdvancedControls.html", '<div class="gf-advancedControlsContainer"><div class="dropdown gf-dropdown" ng-controller="DropDownFakeController" ng-disabled="!isEnabled"><button ng-disabled="!isEnabled" type="button" class="dropdown-toggle" title="{{\'ADVANCED_SETTINGS_BUTTON_TITLE\' | translate}}"><div class="gf-button-icon icon-settings"></div></button><div class="dropdown-menu open-direction-left gf-advanced-control-dropdown" ng-disabled="!isEnabled"><ul><li ng-repeat="switchItem in menuButtons" ng-click="(getResultOrValue(switchItem.disabled) && ($event.stopPropagation() || true)) || executeItemAction($event, switchItem, true)" ng-show="getResultOrValue(switchItem.visible)" ng-disabled="getResultOrValue(switchItem.disabled)"><div class="gf-dropdown-menu-item" ng-class="{\'gf-dropdown-menu-item-disabled\': getResultOrValue(switchItem.disabled) }"><span class="icon-tick" ng-show="switchItem.inEnabledState && switchItem.inEnabledState()"></span> <span class="switch-label" ng-class="{ \'advanced-ctrl-without-tick-label\': !switchItem.inEnabledState() }">{{switchItem.label}}</span></div><hr class="gf-dropdown-menu-item-delimeter" ng-show="switchItem.bottomDelimiter"/></li></ul></div></div></div>');
  $templateCache.put("scripts/directives/advancedControls/currencyDialog/CurrencyDialog.html", '<div class="gf-currency-dialog-modal"><div class="modal-header"><span class="modal-title">{{\'CURRENCY\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div class="control-container currency-container"><div class="currency-control"><label class="sel">{{\'ADVANCED_SETTINGS_DEFAULT_CURRENCY\'|translate}}</label><gf-currency custom-items="model.customCurrencies" currency="model.currency" is-enabled="true" no-selection-text="{{\'ADVANCED_SETTINGS_NO_DEFAULT_CURRENCY\'|translate}}"></gf-currency></div></div></div><div class="modal-footer"><button class="grid-report-button" ng-click="ok()">{{\'OK\' | translate}}</button> <button class="grid-report-button" ng-click="closeDialog()">{{\'CLOSE\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/advancedControls/displayOptionsDialog/DisplayOptionsDialog.html", '<div class="gf-display-options-dialog-modal"><div class="modal-header"><span class="modal-title">{{\'DISPLAY_OPTIONS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div class="sel">{{\'FONT_SIZE_AND_ROW_HEIGHT\' | translate}}</div><div class="button-split"><button ng-repeat="themeItem in model.themes" ng-click="selectTheme(themeItem.value)" ng-class="{\'selected\': model.theme.theme == themeItem.value.theme}">{{themeItem.name}}</button></div></div><div class="modal-footer"><button class="grid-report-button" ng-click="ok()">{{\'OK\' | translate}}</button> <button class="grid-report-button" ng-click="closeDialog()">{{\'CLOSE\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/advancedControls/statisticsDialog/StatisticsDialog.html", '<div class="gf-statistics-dialog-modal"><div class="modal-header"><span class="modal-title">{{\'STATISTICS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div class="control-container"><gf-statistics-control grid-instance-id="gridInstanceId" algorithms="model.algorithms" show-premium-discount="model.showPremiumDiscount" is-enabled="true"></gf-statistics-control></div></div><div class="modal-footer"><button class="grid-report-button" ng-click="ok()">{{\'OK\' | translate}}</button> <button class="grid-report-button" ng-click="closeDialog()">{{\'CLOSE\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/advancedSortingManager/AdvancedSortingManager.html", '<div class="{{\'gf-advanced-sorting-modal gf-advanced-sorting-modal_\' + gridInstanceId }}"><div class="modal-header"><span class="modal-title">{{\'ADVANCED_SORT\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()"></button></div><div class="modal-body"><div ng-show="primaryRowFreezingCanBeEnabled"><div class="controls-container"><input type="checkbox" id="{{\'isPrimaryRowFreezed\' + gridInstanceId }}" ng-model="model.isPrimaryRowFreezed"><label class="sel" for="{{\'isPrimaryRowFreezed\' + gridInstanceId }}">{{\'FREEZE_FOCUS_STOCK_ON_TOP\' | translate}}</label></div><hr/></div><div class="controls-container"><input type="checkbox" id="{{\'advancedSortingEnabled_\' + gridInstanceId }}" ng-model="model.multiSortingEnabled" ng-disabled="!canEnableMultiSorting()"><label class="sel" for="{{\'advancedSortingEnabled_\' + gridInstanceId }}" ng-disabled="!canEnableMultiSorting()">{{\'ENABLE_ADVANCED_SORT\' | translate}}</label></div><div class="gf-block-table"><div class="head"><div class="row"><div class="row-cell">{{\'SHARP\' | translate}}</div><div class="row-cell">{{\'SORT_BY\' | translate}}</div><div class="row-cell">{{\'ORDER\' | translate}}</div><div class="row-cell">{{\'ACTIONS\' | translate}}</div></div></div><div class="body"><div class="row" data-datafield="{{criteria.dataField}}" ng-repeat="criteria in model.criterias"><div class="row-cell">{{$index + 1}}</div><div class="row-cell"><gf-select2 placeholder="{{\'SELECT_FIELD\' | translate}}" select-list="possibleOptions[$index]" on-change="callbackToChangeCriteria($index)" value="model.criterias[$index].dataField"></gf-select2></div><div class="row-cell"><gf-select2 select-list="orderOptions" value="model.criterias[$index].order" on-change="callbackToChangeCriteriaOrder($index)"></gf-select2></div><div class="row-cell"><div title="{{\'DELETE\'| translate}}" class="gf-icon icon-trash" ng-click="deleteCriteria($index)"></div></div></div></div><div class="footer"><div class="row additional" ng-hide="!isAddCriteriaEnabled()"><div class="row-cell">{{model.criterias.length + 1}}</div><div class="row-cell"><gf-select2 placeholder="{{\'SELECT_FIELD\' | translate}}" select-list="unusedColumnsOptions" on-change="tryAddCriteria" reset-on-change="true"></gf-select2></div><div class="row-cell"></div><div class="row-cell"></div></div></div></div></div><div class="modal-footer"><button class="grid-report-button" ng-click="ok()">{{\'OK\' | translate}}</button> <button class="grid-report-button" ng-click="closeDialog()">{{\'CANCEL\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/buttonWithContextMenu/ButtonWithContextMenu.html", '<div class="gf-buttonWithContextMenuContainer dropdown" ng-controller="DropDownFakeController"><button ng-show="!isSingleButton" ng-disabled="isDisabled" title="{{defaultMenuItem.label}}" class="button-default grid-report-button" type="button" ng-click="defaultMenuItem.action()">{{buttonText}}<div ng-show="buttonIconClass" class="button-icon {{buttonIconClass}}"></div></button> <button ng-disabled="isDisabled" class="{{buttonSelectClass}} dropdown-toggle grid-report-button" type="button"><span ng-show="!isSingleButton">\u25bc</span><div ng-show="isSingleButton" class="button-icon {{buttonIconClass}}"></div></button><ul ng-show="!isDisabled" class="dropdown-menu open-direction-{{options.openDirection}}"><li ng-repeat="item in menuItems" class="menu-item" item-disabled="{{getResultOrValue(item.disabled)}}" ng-show="getResultOrValue(item.visible)" ng-click="executeMenuAction($event,item)"><a>{{item.label}}</a><hr class="gf-dropdown-menu-item-delimeter" ng-show="item.bottomDelimiter"/></li></ul></div>');
  $templateCache.put("scripts/directives/columnFilteringManager/compositeTopBottomColumnFilteringManager/CompositeTopBottomColumnFilteringManager.html", '<div><div class="modal-header gf-numeric-range-filter-manager-modal-header"><span class="modal-title">{{\'FILTER_RESULTS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body" style="width: 405px"><div class="gf-numeric-range-filter-manager-container"><div style="padding-top: 5px"><a style="display: inline" ng-click="changeFilterType(\'rangeFilter\')" ng-class="menuItem !== \'rangeFilter\' ? \'links-alt-color\' : \'\'">{{\'DEFINE_RANGE\' | translate}}</a><div style="display: inline; padding-left: 5px">|</div><a style="display: inline; padding-left: 5px" ng-click="changeFilterType(\'topFilter\')" ng-class="menuItem === \'rangeFilter\' ? \'links-alt-color\' : \'\'">{{\'TOP_BOTTOM\' | translate}}</a><div style="display: inline; padding-left: 5px">|</div><a style="display: inline; padding-left: 5px" ng-click="clear()" ng-disabled="!model.isEnabled" class="links-alt-color">{{\'CLEAR\' | translate}}</a></div><div style="padding-top: 5px" ng-show="menuItem === \'rangeFilter\'"><gf-range values="data" is-enabled="model.isEnabled" min="model.min" max="model.max" max-value="model.maxValue" min-value="model.minValue" slid="onSlid(values)"></gf-range></div><div style="padding-top: 5px" ng-show="menuItem !== \'rangeFilter\'"><div class="table-container"><gf-top-bottom-range-selector type="model.typeTB.id" value="model.topBottomValue" type-list="model.typeList"></gf-top-bottom-range-selector></div></div></div></div></div><div class="modal-footer"><button ng-click="ok()" ng-disabled="!model.isEnabled">{{\'APPLY\' | translate}}</button> <button ng-click="closeDialog()">{{\'CANCEL\' | translate}}</button></div>');
  $templateCache.put("scripts/directives/columnFilteringManager/dateColumnFilteringManager/DateColumnFilteringManager.html", '<div><div class="modal-header gf-date-range-filter-manager-modal-header"><span class="modal-title">{{\'FILTER_RESULTS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body" style="width: 405px"><div class="gf-date-range-filter-manager-container"><div style="padding-top: 5px"><div style="display: inline">{{\'DEFINE_RANGE\' | translate}}</div><div style="display: inline; padding-left: 5px">|</div><a style="display: inline; padding-left: 5px" ng-click="clear()" class="links-alt-color">{{\'CLEAR\' | translate}}</a></div><div style="padding-top: 5px"><div style="display: inline-block">{{\'FROM\' | translate}}</div><div style="display: inline-block; padding-left: 5px"><gf-datepicker date="model.minDate" min="model.min" max="model.max"></gf-datepicker></div><div style="display: inline-block; padding-left: 5px">{{\'TO\' | translate}}</div><div style="display: inline-block; padding-left: 5px"><gf-datepicker date="model.maxDate" min="model.min" max="model.max"></gf-datepicker></div></div></div></div><div class="modal-footer"><button ng-click="ok()">{{\'APPLY\' | translate}}</button> <button ng-click="closeDialog()">{{\'CANCEL\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/columnFilteringManager/membershipColumnFilteringManager/MembershipColumnFilteringManager.html", '<div><div class="modal-header gf-membership-filter-manager-modal-header"><span class="modal-title">{{\'FILTER_RESULTS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div class="gf-membership-filter-manager-container"><div class="gf-search-textbox-container"><input placeholder="{{\'KEYWORD_SEARCH\' | translate }}" type="text" ng-model="searchText" ng-change="filterItems(searchText)"/><div class="gf-icon-search"></div></div><div class="gf-membership-filter-manager-control"><div class="gf-template-templates-list"><div ng-grid="gridOptions" class="checkbox-fix" style="height: 300px"></div><div class="no-items-message" ng-show="!model.items.length">{{\'THERE_ARE_NO_ITEMS_TO_DISPLAY\'| translate }}</div></div></div></div></div><div class="modal-footer"><button ng-click="ok()">{{\'APPLY\' | translate}}</button> <button ng-click="closeDialog()">{{\'CANCEL\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/columnFilteringManager/numericColumnFilteringManager/NumericColumnFilteringManager.html", '<div><div class="modal-header gf-numeric-range-filter-manager-modal-header"><span class="modal-title">{{\'FILTER_RESULTS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body" style="width: 405px"><div class="gf-numeric-range-filter-manager-container"><div style="padding-top: 5px"><a style="display: inline">{{\'DEFINE_RANGE\' | translate}}</a><div style="display: inline; padding-left: 5px">|</div><a style="display: inline; padding-left: 5px" ng-click="clear()" ng-disabled="!model.isEnabled" class="links-alt-color">{{\'CLEAR\' | translate}}</a></div><div style="padding-top: 5px"><gf-range values="data" is-enabled="model.isEnabled" min="model.min" max="model.max" max-value="model.maxValue" min-value="model.minValue" slid="onSlid(values)"></gf-range></div></div></div><div class="modal-footer"><button ng-click="ok()" ng-disabled="!model.isEnabled">{{\'APPLY\' | translate}}</button> <button ng-click="closeDialog()">{{\'CANCEL\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/currency/Currency.html", '<div class="gf-currency"><div class="dropdown" ng-controller="DropDownFakeController" ng-disabled="!isEnabled"><button ng-show="currency" style="width:300px" class="gf-select-button dropdown-toggle" title="{{currency.displayText}}" ng-disabled="!isEnabled"><span class="gf-select-button-text">{{currency.displayText}}</span> <span class="icon-down"></span></button> <button ng-show="!currency" style="width:300px" class="gf-select-button dropdown-toggle" title="{{noSelectionText}}" ng-disabled="!isEnabled"><span class="gf-select-button-text">{{noSelectionText}}</span> <span class="icon-down"></span></button><div class="dropdown-menu" ng-disabled="!isEnabled"><div class="search" ng-click="$event.stopPropagation();"><input type="text" placeholder="{{\'SEARCH\' | translate}}" ng-change="search(model.searchText)" ng-model="model.searchText" ng-maxlength="20" ng-trim="true"/></div><div class="gf-currency-list-container"><ul role="menu" class="currency-list">\x3c!-- Show loading indicator when loading --\x3e<li ng-show="isLoading" class="loading"><span class="b-icon-loading-16"></span></li><li class="currency-item custom-item" ng-repeat="custom in customItems" ng-click="(custom.disabled && $event.stopPropagation()); select(custom)" ng-class="{selected: isSelectedCurrency(custom), disabled: !!custom.disabled}">{{custom.displayText}}</li><li ng-show="customItems && customItems.length > 0 && favorites && favorites.length > 0" class="divider"><hr/></li><li class="currency-item system-item" ng-repeat="system in systemItems" ng-click="select(system)" ng-class="{selected: isSelectedCurrency(system) }">{{system.displayText}}</li><li class="currency-item favorite-item" ng-repeat="favorite in favorites" ng-click="select(favorite)" ng-class="{selected: isSelectedCurrency(favorite)}">{{favorite.displayText}}</li><li ng-show="favorites && favorites.length > 0 && currencies && currencies.length > 0" class="divider"><hr/></li><li class="currency-item" ng-repeat="item in currencies" ng-click="select(item)" ng-class="{selected: isSelectedCurrency(item)}">{{item.displayText}}</li><li ng-show="!isLoading && customItems.length == 0 && favorites.length == 0 && currencies.length == 0" class="no-records">{{\'THERE_ARE_NO_ITEMS_TO_DISPLAY\' | translate}}</li></ul></div></div></div></div>');
  $templateCache.put("scripts/directives/errorView/ErrorView.html", '<div><div class="jqx-grid-error-message text-style3">{{error.displayMessage}}</div><div class="expand-control" ng-show="error.errorDetails"><div class="expand-control-header" style="border-bottom: 0;box-shadow: inherit" ng-class="{\'expand-control-expanded\': model.isExpanded, \'expand-control-collapsed\': !model.isExpanded}"><span class="expand-control-icon" ng-click="switchExpandCollapse()"></span><div class="expand-control-text" ng-click="switchExpandCollapse()"><div class="sel gf-expand-collapse-text">{{ \'SEE_ERROR_DETAILS\' | translate }}</div><div class="sel gf-copy-to-clipboard-text" ng-click="copyToClipboard($event)">{{ \'COPY_TO_CLIPBOARD\' | translate }}</div></div></div><div class="expand-control-content"><div class="content-spacer" style="padding-top: 0"><div class="jqx-grid-error-details sel">{{error.errorDetails}}</div><div class="jqx-grid-error-stacktrace sel" ng-repeat="item in error.errorStack">{{item.ErrMessage.Value}}</div></div></div></div></div>');
  $templateCache.put("scripts/directives/exclusionsManager/ExclusionsManager.html", '<div class="modal-dialog"><div class="modal-header"><span class="modal-title">{{getExcludedMessage()}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="close()">\u00d7</button></div><div class="modal-body"><div class="gf-block-table"><div class="head"><div class="row"><div class="row-cell"><input type="checkbox" ng-checked="anyExclusionsSelected()" ng-class="{\'square-shape\':!areEveryIdentifiersSelected()}" ng-click="toogleSelectionForAllIdentifiers()" id="chHead"/><label for="chHead"></label></div><div class="row-cell">{{\'IDENTIFIER\' | translate}}</div><div class="row-cell">{{\'COMPANY_NAME\' | translate}}</div></div></div><div class="body"><div class="gridLoadingPanel" ng-show="isWorking"/><div class="row" ng-repeat="ex in exclusions"><div class="row-cell"><input type="checkbox" ng-model="ex.isSelected" id="ch{{$index}}"/><label for="ch{{$index}}"></label></div><div class="row-cell"><span class="gf-ellipsis-line">{{ex.id}}</span></div><div class="row-cell"><span class="gf-ellipsis-line">{{ex.companyName}}</span></div></div></div></div></div><div class="modal-footer"><button class="grid-report-button" ng-disabled="!anyExclusionsSelected()" ng-click="save()">{{\'INCLUDE\' | translate}}</button> <button class="grid-report-button" ng-click="close()">{{\'CLOSE\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/exclusionsToolbar/ExclusionsToolbar.html", '<div class="gf-control-box-panel gf-exclusions-toolbar-container" ng-show="isVisible()"><div class="gf-control-box gf-toolbar-control-container"><div style="float:left"><button ng-click="openDialog()" type="button" class="grid-report-button">{{ getExcludedMessage() }} ({{excludedIdentifiers.length}})</button></div><div style="float:right"><button ng-click="clearExclusions()" type="button" class="grid-report-button include-all">{{ \'INCLUDE_ALL\' | translate }}</button></div><div class="tickers-list"><span class="gf-ellipsis-line inlineControl" title="{{getExclusionsAsString()}}">{{getExclusionsAsString()}}</span></div></div></div>');
  $templateCache.put("scripts/directives/exportToExcel/ExportToExcel.html", '<div class="gf-exportToExelContainer"><div ng-controller="ExportToExcelController"><gf-button-with-context-menu menu-items="menuItems" is-disabled="isDisabled() || !isEnabled" button-icon-class="\'icon-excel branded\'" default-menu-item="getDefaultItem()" is-single-button="false" options="buttonWithMenuOptions"/></div></div>');
  $templateCache.put("scripts/directives/exportToPdf/ExportToPdf.html", '<div class="gf-exportToPdfContainer"><gf-button-with-context-menu menu-items="menuItems" is-disabled="!isExportEnabled()" button-icon-class="\'icon-pdf branded\'" default-menu-item="getDefaultMenuItem()" is-single-button="false" options="buttonWithMenuOptions"/></div>');
  $templateCache.put("scripts/directives/exportToQuoteList/ExportToQuoteList.html", '<div class="gf-exportToQuoteListContainer"><div ng-controller="ExportToQuoteListController"><gf-button-with-context-menu menu-items="menuItems" is-disabled="isDisabled() || !isEnabled" button-icon-class="\'icon-fullview\'" default-menu-item="getDefaultItem()" is-single-button="false" options="buttonWithMenuOptions"/></div></div>');
  $templateCache.put("scripts/directives/factorRanksButton/FactorRanksButton.html", '<div class="gf-factor-ranks-button-container"><button type="button" class="grid-report-button" ng-disabled="!isEnabled || isGridTransposed" ng-click="openFactorRanksDialog()">{{\'SHOW_FACTOR_RANKS\' | translate}}</button></div>');
  $templateCache.put("scripts/directives/factorRanksManager/FactorRanksManagerDialog.html", '<div class="gf-factor-ranks-manager-modal"><div class="modal-header"><span class="modal-title">{{\'SHOW_FACTOR_RANKS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div ng-repeat="rank in model.ranks" class="gf-multi-factor-rank"><div><label class="sel">{{rank.name}}</label></div><div ng-repeat="factor in rank.factors" class="gf-factor-rank"><input id="checkbox-show-rank-{{$parent.$index}}-{{$index}}" type="checkbox" ng-model="factor.enabled"/><label for="checkbox-show-rank-{{$parent.$index}}-{{$index}}" class="sel">{{factor.name}}</label><div class="gf-show-factor-ranks" ng-show="factor.enabled"><input id="checkbox-show-factor-rank-{{$parent.$index}}-{{$index}}" type="checkbox" ng-model="factor.showFactorRank"/><label for="checkbox-show-factor-rank-{{$parent.$index}}-{{$index}}" class="sel">{{\'SHOW_FACTOR_RANK\' | translate}}</label></div></div></div></div><div class="modal-footer"><div class="gf-complex-modal-footer"><div class="gf-footer-left-part"><button class="grid-report-button" ng-click="selectAll()">{{\'SELECT_ALL\' | translate}}</button> <button class="grid-report-button" ng-click="clearAll()">{{\'CLEAR_ALL\' | translate}}</button></div><div class="gf-footer-right-part"><button class="grid-report-button" ng-click="ok()">{{\'OK\' | translate}}</button> <button class="grid-report-button" ng-click="closeDialog()">{{\'CLOSE\' | translate}}</button></div></div></div></div>');
  $templateCache.put("scripts/directives/gridReport/GridReport.html", '<div style="width:100%; height:100%; position:relative"><div class="gridReportContainer"><div class="reportGrid"></div>\x3c!-- Error panel --\x3e<div class="gridErrorPanel" ng-show="error!=null" style="height:100%"><gf-error-view error="error"></gf-error-view></div><div ng-transclude></div></div><div class="gf-transposed-add-identifer-container" style="display:none"><gf-add-row placeholder-text="placeholderText" grid-instance-id="gridInstanceId"></gf-add-row></div>\x3c!-- Loading panel --\x3e<div class="gridLoadingPanel" ng-show="isWorking" style="height:100%"><div class="throbber"></div></div></div>');
  $templateCache.put("scripts/directives/groupingButton/GroupingButton.html", '<div class="gf-grouping-button-container"><button class="grid-report-button" ng-disabled="!isEnabled || isGridTransposed" type="button" ng-click="openGroupingManagerDialog()">{{\'GROUP_ROWS\' | translate}}</button></div>');
  $templateCache.put("scripts/directives/groupingManager/GroupingManager.html", '<div class="modal-header"><span class="modal-title">{{\'CRITERIA_FOR_GROUPING_ROWS\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="close()">\u00d7</button></div><div class="modal-body"><div class="controls-container"><input type="checkbox" ng-disabled="criterias.length == 0" id="isCriteriasEnabled" ng-model="isCriteriasEnabled"><label class="sel" for="isCriteriasEnabled">{{\'ENABLE_GROUPING\' | translate}}</label></div><div style="margin-bottom:4px">{{getMaxGroupCountMessage()}}</div><div class="table-container"><div class="head"><div class="row"><div class="row-cell">{{\'ORDER\' | translate}}</div><div class="row-cell">{{\'CRITERIA\' | translate}}</div><div class="row-cell">{{\'ACTIONS\' | translate}}</div></div></div><div class="body"><div class="row" data-id="{{criteria.id}}" ng-repeat="criteria in criterias"><div class="row-cell">{{$index + 1}}</div><div class="row-cell" ng-switch="criteria.editMode"><span ng-switch-when="false">{{criteria.header}}</span> <span class="criteria-dropdown" ng-switch-when="true"><button class="gf-select-button" title=" {{criteria.header}}"><span class="gf-select-button-text">{{criteria.header}}</span> <span class="icon-down"></span></button><gf-menu style="position: relative" items="menu.items" is-visible="criteria.editMode" options="menu.options" on-click-outside="onClickOutsideEditMenu"></gf-menu></span></div><div class="row-cell"><div title="{{\'EDIT\'| translate}}" class="gf-icon icon-edit" ng-click="onEdit($event,$index)"></div><div title="{{\'DELETE\'| translate}}" class="gf-icon icon-trash" ng-click="deleteCriteria($index)"></div></div></div></div><div class="footer"><div class="row" ng-class="{\'row-odd\': criterias.length % 2 == 0}" ng-hide="isAddCriteriaDisabled()"><div class="row-cell">{{criterias.length + 1}}</div><div class="row-cell"><button class="gf-select-button" ng-click="onAdd($event)" title=" {{\'select_field\' | translate}}"><span class="gf-select-button-text">{{\'SELECT_FIELD\' | translate}}</span> <span class="icon-down"></span></button><gf-menu style="position: relative" items="menu.items" is-visible="addCriteriaMenu.isVisible" options="menu.options" on-click-outside="onClickOutsideEditMenu"></gf-menu></div><div class="row-cell"><div style="width:60px"></div></div></div></div></div></div><div class="modal-footer"><button class="grid-report-button" ng-click="save()">{{\'OK\' | translate}}</button> <button class="grid-report-button" ng-click="close()">{{\'CANCEL\' | translate}}</button></div>');
  $templateCache.put("scripts/directives/groupingToolbar/GroupingToolbar.html", '<div class="gf-control-box-panel gf-grouping-toolbar-container gf-control-box gf-toolbar-control-container" ng-show="isVisible()"><button ng-show="!allGroupsExpanded()" type="button" class="grid-report-button" ng-click="expandAll()">{{ \'EXPAND_ALL\' | translate }}</button> <button ng-show="!allGroupsCollapsed()" type="button" class="grid-report-button" ng-click="collapseAll()">{{ \'COLLAPSE_ALL\' | translate }}</button></div>');
  $templateCache.put("scripts/directives/menu/Menu.html", '<div class="gf-menu-container"><ul class="gf-menu" style="width:{{options.width+\'px\'}};  left: {{options.position.x +\'px\'}}; top: {{options.position.y +\'px\'}}; display: none"><li class="gf-menu-item {{item.class}}" ng-repeat="item in items" ng-click="executeMenuAction($event,item)" ng-class="{\'gf-menu-item-empty\':!item.subitems || !item.subitems.length,\r' + "\n" + "                              'ui-state-disabled':getResultOrValue(item.isDisabled),\r" + 
  "\n" + '                              \'gf-menu-item-whithout-active-subitems\': item.isGrayed() }"><a href="javascript:">{{item.label}}</a><ul ng-class="{\'gf-invisible\':!item.subitems || !item.subitems.length}"><li class="gf-menu-item {{item.class}}" ng-repeat="item in item.subitems" ng-click="executeMenuAction($event,item)" ng-class="{\'gf-menu-item-empty\':!item.subitems || !item.subitems.length,\r' + "\n" + "                              'ui-state-disabled':getResultOrValue(item.isDisabled),\r" + 
  "\n" + '                              \'gf-menu-item-whithout-active-subitems\': item.isGrayed() }"><a href="javascript:">{{item.label}}</a><ul ng-class="{\'gf-invisible\':!item.subitems || !item.subitems.length}"><li class="{{item.class}}" ng-repeat="item in item.subitems" ng-click="executeMenuAction($event,item)" ng-class="{\'gf-menu-item-empty\':!item.subitems || !item.subitems.length,\r' + "\n" + "                              'ui-state-disabled':getResultOrValue(item.isDisabled),\r" + "\n" + 
  '                              \'gf-menu-item-whithout-active-subitems\': item.isGrayed() }"><a href="javascript:">{{item.label}}</a></li></ul></li></ul></li></ul></div>');
  $templateCache.put("scripts/directives/multiFactorRankButton/MultiFactorRankButton.html", '<div class="gf-multi-factor-rank-button-container"><button class="grid-report-button" type="button" ng-disabled="!isEnabled" ng-click="openMfr()">{{\'ADD_RANK\' | translate}}</button></div>');
  $templateCache.put("scripts/directives/printButton/PrintButton.html", '<div class="gf-printContainer"><gf-button-with-context-menu menu-items="menuItems" button-icon-class="\'icon-print\'" is-disabled="!isPrintingEnabled()" default-menu-item="getDefaultMenuItem()" is-single-button="false" options="buttonWithMenuOptions"></gf-button-with-context-menu></div>');
  $templateCache.put("scripts/directives/rangeSelector/RangeSelector.html", '<div ng-class="{ \'gf-range-disabled\': !isEnabled }"><div ng-if="!isHistogramAvailable"><div style="padding-top: 5px; width: 400px; display: inline-table"><div style="float: left">{{\'FROM\' | translate}}</div><div style="float: right">{{\'TO\' | translate}}</div></div><div style="padding-top: 5px"><gf-slider is-enabled="isEnabled" min="min" max="max" max-value="maxValue" min-value="minValue" slid="onSlid(values)"></gf-slider></div><div style="padding-top: 5px; width: 400px; display: inline-table">\x3c!-- Minimum value --\x3e<div style="float: left"><gf-number-input value="model.minValue" max="max" min="min" is-enabled="isEnabled"></gf-number-input></div>\x3c!-- Maximum value --\x3e<div style="float: right"><gf-number-input value="model.maxValue" max="max" min="min" is-enabled="isEnabled"></gf-number-input></div></div></div><div ng-show="isHistogramAvailable" class="gf-range-histogram-container"><div id="histogram" class="gf-range-histogram"></div><div id="histogramInputs" class="gf-range-histogram-inputs"></div><div class="gf-range-histogram-overlay"></div></div></div>');
  $templateCache.put("scripts/directives/reportTemplateManager/ReportTemplateManagerDialog.html", '<div><div class="modal-header gf-template-manager-modal-header" ng-mouseenter="onHeaderHover()" ng-mousedown="onHeaderMouseDown()"><span class="modal-title">{{\'REPORT_TEMPLATE_MANAGER\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div class="gf-template-manager-container" ng-class="{\'saveMode\':!!saveModeSettings}"><div class="loadingPanelContainer"><div class="gridLoadingPanel" ng-show="isWorking"><div class="throbber"></div></div><div class="gf-search-textbox-container" style="width:40%"><input placeholder="{{\'SEARCH_FOR_TEMPLATES\' | translate }}" type="text" ng-model="searchText" ng-change="filterFormats(searchText)"/><div class="gf-icon-search"></div></div><div class="gf-template-manager-control"><div class="gf-template-types-selector"><ul class="gf-block-list"><li ng-repeat="item in filteredData" class="gf-block-list-item"><div ng-click="setCurrentType(item)" class="gf-template-type" ng-class="{active:item.type==currentType.type}">{{item.label}} [{{item.data.length}}]</div></li></ul></div><div class="gf-template-templates-list"><form name="editFormatForm" class="gf-template-manager-control-form" ng-init="setFormScope(this)"><div ng-grid="gridOptions" style="height: 100%"></div><div class="no-items-message" ng-show="!currentType.data.length">{{\'THERE_ARE_NO_ITEMS_TO_DISPLAY\'| translate }}</div></form></div></div></div><div style="position: absolute; top:0; z-index: 1" ng-include="\'scripts/directives/reportTemplateManager/ReportTemplateManagerFiedsListDialog.html\'"></div></div></div><div class="modal-footer"><div class="gf-template-manager-selectedFormatContainer" ng-show="!!saveModeSettings"><form name="saveFormatForm" ng-init="setFormScope(this)"><span>{{\'TEMPLATE_NAME\' | translate}} :</span> <span class="gf-texbox-error-container"><input maxlength="{{templateNameMaxLengh}}" ng-class="{\'input-error\':!isWorking && !saveFormatForm.formatName.$valid}" type="text" gf-object-name name="formatName" ng-model="saveModeSettings.selectedFormatName" focus-me="true" on-enter="trySaveFormat()" selected/> <span class="gf-textbox-erroricon" ng-show="!isWorking && !saveFormatForm.formatName.$valid"><div class="gf-tooltip">{{saveFormatForm.formatName.errorMsg}}</div></span></span></form></div><button class="grid-report-button" ng-show="isSaveVisible()" ng-disabled="isSaveDisabled()" ng-click="trySaveFormat()">{{\'SAVE\' | translate}}</button> <button class="grid-report-button cta" ng-show="isLoadVisible()" ng-disabled="isLoadDisabled()" ng-click="loadFormat()">{{\'LOAD\' | translate}}</button> <button class="grid-report-button" ng-click="closeDialog()">{{\'CLOSE\' | translate}}</button></div></div>');
  $templateCache.put("scripts/directives/reportTemplateManager/ReportTemplateManagerFiedsListDialog.html", '<div class="gf-template-manager-fields-modal modal-dialog gf-modal" style="left:{{fieldsModal.position.x}}px; top:{{fieldsModal.position.y}}px" ng-show="fieldsModal.visible" ng-click="stopPropagationByCondition($event)"><div class="modal-header gf-template-manager-fields-modal-header"><span class="modal-title">{{fieldsModal.formatName}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeFieldsList()">\u00d7</button></div><div class="modal-body"><div><div class="fields-table-container"><table class="fields-table l-table s-table3 links-alt-color"><thead class="l-table s-table3 links-alt-color"><tr class="l-table-row s-header-row"><td class="l-table-cell" ng-repeat="header in fieldsModal.fieldsTableHeaders">{{ header | translate }}</td></tr></thead><tbody class="l-table s-table3 links-alt-color"><tr class="l-table-row" ng-repeat=" field in fieldsModal.fieldsList track by $index"><td class="l-table-cell">{{$index+1}}</td><td class="l-table-cell">{{field}}</td></tr></tbody></table></div></div></div></div>');
  $templateCache.put("scripts/directives/reportTemplateSelector/ReportTemplateSelector.html", '<div title="{{selectedTemplate.name}}" class="gf-report-template-selector"><div class="dropdown" id="templateSelector" ng-controller="DropDownFakeController" ng-disabled="!isEnabled"><button ng-disabled="!isEnabled" type="button" class="dropdown-toggle gf-select-button" title="{{getFormattedTemplateName()}}"><span class="gf-select-button-text">{{getFormattedTemplateName()}}</span> <span class="icon-down"></span></button><div class="dropdown-menu" ng-disabled="!isEnabled"><div class="gf-template-selector-list-container"><ul role="menu"><li class="gf-template-selector-default-action" ng-show="canCreateBlankTemplate"><a ng-click="createBlankTemplate($event)" title="{{ \'CREATE_NEW_TEMPLATE\' | translate }}">{{ \'CREATE_NEW_TEMPLATE\' | translate }}</a></li><li ng-repeat="item in customItems" ng-class="{ \'gf-template-selector-link-item\': item.isLink(), \'gf-template-selector-item-header\': item.isHeader(), \'gf-template-selector-default-action\': item.isDefaultAction() }"><a ng-click="setSelectedCustomItem($event, item)" ng-class="{ \'gf-template-selector-item-text\': item.isItem() }" title="{{item.text}}">{{item.text}}</a></li>\x3c!-- PERSONAL --\x3e\x3c!-- Personal templates header --\x3e<li class="gf-template-selector-item-header" ng-show="model.templates.personalFormats.length > 0"><a title="{{getPersonalText()}}">{{getPersonalText()}}</a></li>\x3c!-- Personal templates --\x3e<li ng-repeat="t in model.templates.personalFormats | orderBy:\'name\' | filter: mruOptions.filter | orderBy:\'-accessDate\' | limitTo: numberOfItemsPerCategory"><a class="gf-template-selector-item-text" ng-click="setSelectedTemplate(t)" title="{{t.name}}">{{t.name}}</a></li>\x3c!-- View more personal templates --\x3e<li ng-if="model.templates.personalFormats.length > numberOfItemsPerCategory"><a class="gf-template-selector-item-view-more" ng-click="showReportTemplateManager(\'personal\')" title="{{getPersonalViewMoreText()}}">{{getPersonalViewMoreText()}}</a></li>\x3c!-- GLOBAL --\x3e\x3c!-- Global templates header --\x3e<li class="gf-template-selector-item-header" ng-show="model.templates.globalFormats.length > 0"><a title="{{getGlobalText()}}">{{getGlobalText()}}</a></li>\x3c!-- Global templates --\x3e<li ng-if="useDateSortingForGlobals" ng-repeat="t in model.templates.globalFormats | orderBy:[\'-accessDate\',\'name\'] | limitTo: numberOfItemsPerCategory"><a class="gf-template-selector-item-text" ng-click="setSelectedTemplate(t)" title="{{t.name}}">{{t.name}}</a></li><li ng-if="!useDateSortingForGlobals" ng-repeat="t in model.templates.globalFormats | limitTo: numberOfItemsPerCategory"><a class="gf-template-selector-item-text" ng-click="setSelectedTemplate(t)" title="{{t.name}}">{{t.name}}</a></li>\x3c!-- View more global templates --\x3e<li ng-if="model.templates.globalFormats.length > numberOfItemsPerCategory"><a class="gf-template-selector-item-view-more" ng-click="showReportTemplateManager(\'global\')" title="{{getGlobalViewMoreText()}}">{{getGlobalViewMoreText()}}</a></li>\x3c!-- SHARED --\x3e\x3c!-- Shared templates header --\x3e<li class="gf-template-selector-item-header" ng-show="model.templates.sharedFormats.length > 0"><a title="{{getSharedText()}}">{{getSharedText()}}</a></li>\x3c!-- Shared templates --\x3e<li ng-repeat="t in model.templates.sharedFormats | orderBy:[\'-accessDate\',\'name\'] | limitTo: numberOfItemsPerCategory"><a class="gf-template-selector-item-text" ng-click="setSelectedTemplate(t)" title="{{t.name}}">{{t.name}}</a></li>\x3c!-- View more shared templates --\x3e<li ng-if="model.templates.sharedFormats.length > numberOfItemsPerCategory"><a class="gf-template-selector-item-view-more" ng-click="showReportTemplateManager(\'shared\')" title="{{getSharedViewMoreText()}}">{{getSharedViewMoreText()}}</a></li></ul></div><hr style="margin: 0" class="gf-report-template-selector-footer-delimeter"/><div style="margin: 5px" ng-show="canImportTemplate"><a id="gfRTS_importTempalteLink">{{ \'IMPORT_TEMPLATE\' | translate }}</a> <input type="file" name="importFile" id="importFile" style="display: none" accept=".ugrf"/></div><div style="margin: 5px" ng-show="canOpenTemplateManager" class="gf-template-selector-link-item"><a ng-click="showReportTemplateManager(\'All\')" title="{{ \'VIEW_AND_MANAGE_ALL_TEMPLATES\' | translate }}">{{ \'VIEW_AND_MANAGE_ALL_TEMPLATES\' | translate }}</a></div></div></div><div class="throbber-mini" ng-show="model.isTemplatesLoading"></div></div>');
  $templateCache.put("scripts/directives/saveControl/SaveControl.html", '<div class="gf-saveContainer"><gf-button-with-context-menu menu-items="menuItems" button-icon-class="buttonIconClass" is-disabled="!isEnabled" default-menu-item="getDefaultMenuItem()" is-single-button="false" options="menuItemOptions"></gf-button-with-context-menu></div>');
  $templateCache.put("scripts/directives/sharingDetails/SharingDetails.html", '<div class="gf-sharing-details"><div class="group-selector"></div><div ng-show="isLoading" class="component-loading throbber-mini"></div></div>');
  $templateCache.put("scripts/directives/statistics/StatisticsControl.html", '<div class="statistics-control"><ul class="algorithm-list"><li class="algorithm-item header"><div class="column statistics" ng-class="{\'two-columns\': showPremiumDiscount}"><p>{{\'STATISTICS_CONTROL_COLUMN_STATISTICS\'|translate}}</p></div><div ng-show="showPremiumDiscount" class="column premium"><p>{{\'STATISTICS_CONTROL_COLUMN_PREMIUM_DISCOUNT\'|translate}}</p></div></li><li class="algorithm-item" ng-repeat="algorithm in algorithms" style="clear:both"><div class="column statistics" ng-class="{\'two-columns\': showPremiumDiscount}"><input id="checkbox-{{algorithm.name}}" type="checkbox" ng-model="algorithm.selected" ng-change="!algorithm.selected && unmarkPremium(algorithm);" ng-disabled="!isEnabled"/><label for="checkbox-{{algorithm.name}}">{{algorithm.displayText}}</label></div><div ng-show="showPremiumDiscount" class="column premium"><input id="checkbox-{{algorithm.name}}-premium" type="checkbox" ng-model="algorithm.isPremium" ng-change="algorithm.isPremium && markAsPremium(algorithm);" ng-disabled="!isEnabled"/><label for="checkbox-{{algorithm.name}}-premium"></label></div></li><li class="footer"></li></ul></div>');
  $templateCache.put("scripts/directives/topBottomRangeSelector/TopBottomRangeSelector.html", '<div class="row"><div class="filterSet"><div class="row-cell top-bottom-filter-select"><select name=" filtertype" id="filterType" ng-model="type" ng-options="item.id as item.title for item in typeList" class="top-bottom-filter-select"><option value="">{{\'T_B_FILTER_DEFAULT_FIELD\' | translate}}</option></select></div><div class="row-cell top-bottom-filter-number" ng-show="!!type" ng-form="topbottomForm"><input type="number" class="ui-spinner-input" autocomplete="off" role="spinbutton" aria-valuenow="1" maxlength="3" style="padding-bottom: 0px" name="val" min="0" max="{{(type === typeList[2].id || type === typeList[3].id) ? 100 : 10000}}" ng-model="value" ng-disabled="!type" ng-class=" !topbottomForm.val.$valid ? \'gf-input-invalid\' : \' \' "> <span class="gf-input-error" ng-show="topbottomForm.val.$error.number" title="{{errors.notNumber}}"></span> <span class="gf-input-error" ng-show="topbottomForm.val.$error.max || topbottomForm.val.$error.min" title="{{errors.outOfRange}}"></span> <span tabindex="-1" class="numericSuffix" style="display: inline; right: 27px; padding-top: 6px" ng-show="type === typeList[2].id || type === typeList[3].id">%</span></div><div class="row-cell top-bottom-filter-remove"><span ng-click="clear()" class="icon-trash" ng-show="!!type"></span></div></div></div>');
  $templateCache.put("scripts/services/columnInfoDialog/ColumnInfoDialog.html", '<div class="gf-column-info-dialog-modal"><div class="modal-header" ng-mouseenter="onHeaderHover()"><span class="modal-title">{{\'FIELD_DEFINITION\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div class="loadingPanelContainer"><div class="gridLoadingPanel" ng-show="model.isLoading"><div class="throbber-mini"></div></div><div class="text-style3 command-name selectable-text">{{model.name}}</div><hr/><div class="sel command-description selectable-text" ng-show="model.description">{{model.description}}</div><hr ng-show="model.description"/><div class="command-expression"><span class="text-style3">{{\'THOMSON_REUTERS_EIKON_EXCEL_FUNCTION\' | translate}}:</span> <span class="sel selectable-text">=TR("{{model.primaryRow}}", "{{model.expression}}")</span></div></div></div></div>');
  $templateCache.put("scripts/services/columnMath/ColumnMathDialog.html", '<div><div class="modal-header gf-column-math-modal-header" ng-mouseenter="onHeaderHover()"><span class="modal-title">{{\'FORMULA_EDITOR\'|translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body" style="width: 700px"><div class="gf-column-math-container"><gf-expression-editor model="model" enter-pressed="onEnterPressed()"></gf-expression-editor></div></div><div class="modal-footer"><button class="cta" ng-disabled="model.isValid()==false" ng-click="ok()">{{\'OK\' | translate}}</button> <button ng-click="closeDialog()">{{\'CANCEL\' | translate}}</button></div></div>');
  $templateCache.put("scripts/services/exclusionDialog/ExclusionManagerDialog.html", '<gf-exclusions-manager identifiers="settings.identifiers" grid-instance-id="settings.gridInstanceId" exclusions-type="settings.exclusionsType"></gf-exclusions-manager>');
  $templateCache.put("scripts/services/groupingManagerDialog/GroupingManagerDialog.html", '<gf-grouping-manager grid-instance-id="settings.gridInstanceId" is-auto-save-state="settings.isAutoSaveState" max-groups-count="settings.maxGroupsCount()"></gf-grouping-manager>');
  $templateCache.put("scripts/services/printingLandscapeDialog/PrintingLandscapeDialog.html", '<div><div class="modal-header" ng-mouseenter="onHeaderHover()"><span class="modal-title">{{settings.title}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="closeDialog()">\u00d7</button></div><div class="modal-body"><div><span class="gf-text-container">{{settings.message}}</span><div style="margin-top: 10px"><input type="checkbox" id="dontShowCheckBox" ng-model="viewModel.doNotShowThisMessageAgain"><label for="dontShowCheckBox">{{settings.checkboxTitle}}</label></div></div></div><div class="modal-footer"><button class="grid-report-button" ng-click="ok()">{{\'OK\' | translate}}</button></div></div>');
  $templateCache.put("scripts/templates/confirmation/confirm.html", '<div><div class="modal-header"><span class="modal-title">{{confirmSettings.title}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="cancel()">\u00d7</button></div><div class="modal-body"><span>{{confirmSettings.message}}</span><div ng-show="confirmSettings.showCheckbox" style="margin-top: 10px"><input id="doNotShowThisMessageAgain" type="checkbox" ng-model="viewModel.doNotShowThisMessageAgain" style="margin-left: 0"/><label for="doNotShowThisMessageAgain">{{confirmSettings.checkboxTitle}}</label></div></div><div class="modal-footer"><button class="btn btn-default grid-report-button" ng-click="ok()">{{confirmSettings.okText}}</button> <button class="btn btn-default grid-report-button" ng-click="cancel()">{{confirmSettings.cancelText}}</button></div></div>');
  $templateCache.put("scripts/templates/confirmation/confirmSave.html", '<div><div class="modal-header"><span class="modal-title">{{\'REPORT_TEMPLATE_MANAGER\' | translate}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="cancel()">\u00d7</button></div><div class="modal-body"><span class="gf-text-container">{{message}}</span></div><div class="modal-footer"><button class="btn btn-default grid-report-button" ng-click="yes()">{{\'SAVE\' | translate}}</button> <button class="btn btn-default grid-report-button" ng-click="no()">{{\'DO_NOT_SAVE\' | translate}}</button> <button class="btn btn-default grid-report-button" ng-click="cancel()">{{\'CANCEL\' | translate}}</button></div></div>');
  $templateCache.put("scripts/templates/confirmation/infoDialog.html", '<div class="gf-info-dialog-modal"><div class="modal-header"><span class="modal-title">{{title}}</span> <button type="button" class="modal-header-close-buttton grid-report-button" ng-click="cancel()">\u00d7</button></div><div class="modal-body"><span class="sel">{{message}}</span></div></div>');
}]);
goog.provide("gridReport.directives.ErrorViewController");
gridReport.Module.controller("gfErrorViewController", ["$scope", "gfJetService", "gfNotificationService", "$translate", function($scope, gfJetService, gfNotificationService, $translate) {
  function getFormattedErrorMessage() {
    return $scope.error.displayMessage ? $scope.error.displayMessage + "\n\r" + $scope.error.errorDetails : $scope.error.errorDetails;
  }
  $scope.model = {isExpanded:false};
  $scope.switchExpandCollapse = function() {
    $scope.model.isExpanded = !$scope.model.isExpanded;
  };
  $scope.copyToClipboard = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    gfJetService.copyToClipboard({entries:[{name:"TEXT", value:getFormattedErrorMessage()}]});
    gfNotificationService.info($translate.instant("ERROR_MESSAGE_HAS_BEEN_COPIED"));
  };
}]);
goog.provide("gridReport.directives.ErrorViewDirective");
goog.require("gridReport.directives.ErrorViewController");
gridReport.Module.directive("gfErrorView", [function() {
  return{restrict:"E", templateUrl:"scripts/directives/errorView/ErrorView.html", scope:{error:"="}, controller:"gfErrorViewController"};
}]);
goog.provide("gridReport.directives.onBlurDirective");
gridReport.Module.directive("onBlur", ["$parse", function($parse) {
  return function(scope, element, attr) {
    var fn = $parse(attr["onBlur"]);
    element.bind("blur", function(event) {
      if (scope.$$phase === "$apply" || scope.$$phase === "$digest") {
        fn(scope, {$event:event});
      } else {
        scope.$apply(function() {
          fn(scope, {$event:event});
        });
      }
    });
  };
}]);
goog.provide("gridReport.directives.ExportToQuoteContextMenuOptions");
gridReport.directives.ExportToQuoteContextMenuOptions = function(options) {
  gridReport.jsUtils.mergeProperties(this, options, ["canOpenAllInQuoteObject", "canOpenSelectedInQuoteObject", "canAddAllToList", "canAddSelectedToList", "canAddAllToExistingList", "canAddSelectedToExistingList"]);
};
gridReport.directives.ExportToQuoteContextMenuOptions.prototype.canOpenAllInQuoteObject = true;
gridReport.directives.ExportToQuoteContextMenuOptions.prototype.canOpenSelectedInQuoteObject = true;
gridReport.directives.ExportToQuoteContextMenuOptions.prototype.canAddAllToList = true;
gridReport.directives.ExportToQuoteContextMenuOptions.prototype.canAddSelectedToList = true;
gridReport.directives.ExportToQuoteContextMenuOptions.prototype.canAddAllToExistingList = true;
gridReport.directives.ExportToQuoteContextMenuOptions.prototype.canAddSelectedToExistingList = true;
goog.provide("gridReport.directives.ExportToQuoteListController");
goog.require("gridReport.services.Exclusions");
goog.require("gridReport.services.PAWebApiService");
gridReport.Module.controller("ExportToQuoteListController", ["$scope", "$translate", "gfExclusions", "gfConfig", "gfLogManager", "gfPAWebApiService", "gfNotificationService", "gfEventsAggregator", "gfGridManagementService", "gfCompanyService", function($scope, $translate, gfExclusions, gfConfig, gfLogManager, gfPAWebApiService, gfNotificationService, gfEventsAggregator, gfGridManagementService, gfCompanyService) {
  var INTEGRATION_CLIENT_POPUP_OPTIONS = {width:665, height:574};
  var integrationClient = null;
  var isActionForAllFired = null;
  function setActionFlagAndExecute(flag, func) {
    isActionForAllFired = flag;
    func();
  }
  function getExportToListAction(isActionForAll) {
    return function() {
      setActionFlagAndExecute(isActionForAll, exportToList);
    };
  }
  function getExportToQuoteAction(isActionForAll) {
    return function() {
      setActionFlagAndExecute(isActionForAll, exportToQuoteList);
    };
  }
  function getDefaultItem() {
    if ($scope.options.canOpenAllInQuoteObject && $scope.options.canOpenSelectedInQuoteObject) {
      return $scope.anyIdentifiersChecked() ? $scope.getMenuItemByLabel("OPEN_SELECTED_IN_QUOTE_OBJECT") : $scope.getMenuItemByLabel("OPEN_ALL_IN_QUOTE_OBJECT");
    } else {
      if ($scope.options.canAddAllToList && $scope.options.canAddSelectedToList) {
        return $scope.anyIdentifiersChecked() ? $scope.getMenuItemByLabel("ADD_SELECTED_TO_LIST") : $scope.getMenuItemByLabel("ADD_ALL_TO_LIST");
      } else {
        return undefined;
      }
    }
  }
  function initIntegrationClient() {
    try {
      integrationClient = new pal.services.Integration.IntegrationClient;
    } catch (e) {
      gfLogManager.trace("Cannot create integration client: " + e.message);
    }
    if (integrationClient) {
      integrationClient.getApplicationName = function() {
        return "GridReport";
      };
      integrationClient.getContext = getIntegrationClientContext;
    }
  }
  function exportToList() {
    integrationClient.onContextChanged = null;
    if (isActionForAllFired) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exportAllToList);
    } else {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exportSelectedToList);
    }
    integrationClient.openPopup(gfConfig.listManagerUrl, true, INTEGRATION_CLIENT_POPUP_OPTIONS.width, INTEGRATION_CLIENT_POPUP_OPTIONS.height);
  }
  function exportToQuoteList() {
    var tickersList = $scope.getIdentifiersForExport(isActionForAllFired);
    var entities = [];
    _.forEach(tickersList, function(ticker) {
      entities.push({RIC:ticker});
    });
    if (isActionForAllFired) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exportAllToQuoteObject);
    } else {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exportSelectedToQuoteObject);
    }
    if (JET && JET.Initialized) {
      JET.navigate({name:"Quote List Object", entities:entities});
    }
  }
  function getIntegrationClientContext() {
    var context = {symbols:[]};
    var tickersList = $scope.getIdentifiersForExport(isActionForAllFired);
    var data = gfGridManagementService.exportData($scope.gridInstanceId);
    _.forEach(tickersList, function(ticker) {
      var dataRow = _.findWhere(data, {rowKey:ticker});
      if (gfCompanyService.isPublic(ticker)) {
        context.symbols.push({symbol:ticker, companyName:dataRow["TR.CommonName"]});
      } else {
        context.symbols.push({"OAPermId":ticker, companyName:dataRow["TR.CommonName"]});
      }
    });
    return context;
  }
  function initMenu() {
    $scope.addMenuItem("OPEN_ALL_IN_QUOTE_OBJECT", getExportToQuoteAction, true, false, function() {
      return $scope.options.canOpenAllInQuoteObject;
    });
    $scope.addMenuItem("OPEN_SELECTED_IN_QUOTE_OBJECT", getExportToQuoteAction, false, false, function() {
      return $scope.options.canOpenSelectedInQuoteObject;
    });
    $scope.addMenuItem("ADD_ALL_TO_LIST", getExportToListAction, true, false, function() {
      return $scope.options.canAddAllToList;
    });
    $scope.addMenuItem("ADD_SELECTED_TO_LIST", getExportToListAction, false, false, function() {
      return $scope.options.canAddSelectedToList;
    });
    $scope.addMenuItem("ADD_ALL_TO_EXISTING_LIST", getOpenForAddToList, true, false, function() {
      return $scope.options.canAddAllToExistingList;
    });
    $scope.addMenuItem("ADD_SELECTED_TO_EXISTING_LIST", getOpenForAddToList, false, false, function() {
      return $scope.options.canAddSelectedToExistingList;
    });
  }
  function init() {
    initIntegrationClient();
    initMenu();
  }
  function getOpenForAddToList(isActionForAll) {
    return function() {
      integrationClient.onContextChanged = _.partial(portfolioSelectedHandler, isActionForAll);
      if (isActionForAll) {
        gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exportAllToExistingList);
      } else {
        gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.exportSelectedToExistingList);
      }
      integrationClient.openPopup(gfConfig.listManagerUrl + "/lists/my");
    };
  }
  function portfolioSelectedHandler(useAllIdentifiers, context) {
    if (context && (context.portfolio && context.portfolio.id)) {
      if (context.portfolio.type == "Watchlist" && context.portfolio.canEdit) {
        gfPAWebApiService.addToExsistingList({portfolio:context.portfolio, identifiers:$scope.getIdentifiersForExport(useAllIdentifiers), universeContext:gfGridManagementService.getUniverse($scope.gridInstanceId).universeContext}).then(function() {
          gfNotificationService.info($translate.instant("WATCHLIST_WAS_SUCCESSFULLY_UPDATED", {watchlistName:context.portfolio.name}));
        }, function(fail) {
          var message = fail.message || $translate.instant("WATCHLIST_WAS_SUCCESSFULLY_UPDATED", {watchlistName:context.portfolio.name});
          gfNotificationService.error(message);
        });
      } else {
        gfNotificationService.error($translate.instant("PERSONAL_WATCHLIST_SHOULD_BE_SELECTED"));
      }
    }
  }
  $scope.getDefaultItem = getDefaultItem;
  init();
}]);
goog.provide("gridReport.directives.ExportToQuoteListDirective");
goog.require("gridReport.directives.ButtonWithContextMenuDirective");
goog.require("gridReport.controllers.ExportControllerBase");
goog.require("gridReport.directives.ExportToQuoteListController");
goog.require("gridReport.directives.ExportToQuoteContextMenuOptions");
gridReport.Module.directive("gfExportToQuoteList", [function() {
  return{restrict:"E", transclude:false, scope:{buttonWithMenuOptions:"=", allTickers:"=", selectedRows:"=", isEnabled:"=", options:"=", isVisible:"=", gridInstanceId:"="}, replace:true, controller:"ExportControllerBase", templateUrl:"scripts/directives/exportToQuoteList/ExportToQuoteList.html", link:function($scope, $element, attr) {
    if (attr.hasOwnProperty("isVisible")) {
      $scope.$watch("isVisible", function(value) {
        if (value) {
          $element.show();
        } else {
          $element.hide();
        }
      });
    }
  }};
}]);
goog.provide("gridReport.directives.AddRowDirective");
gridReport.Module.directive("gfAddRow", [function() {
  return{replace:true, template:'<div style="padding:0 2px;">' + '<input type="text" ' + 'size="30" ' + 'is-enabled="values.toolbar.isTickerSearchEnabled" ' + 'ticker-selected="onTickerSelected(ticker)" ' + 'more-search-selected="onMoreSearchSelected(event)" ' + 'placeholder-text="placeholderText" ' + 'style="width:100%;" ' + "gf-ticker-autosuggest />" + "</div>", restrict:"E", scope:{gridInstanceId:"=", placeholderText:"="}, controller:["$scope", "gfGridManagementService", "gfEventsAggregator", 
  function($scope, gfGridManagementService, gfEventsAggregator) {
    $scope.onTickerSelected = function(ticker) {
      if (ticker) {
        gfGridManagementService.addIdentifiers($scope.gridInstanceId, [ticker]);
      }
    };
    $scope.onMoreSearchSelected = function(event) {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).raiseEvent(gridReport.model.GridEvents.showMoreSearchResultsSelected, {event:event});
    };
  }]};
}]);
goog.provide("gridReport.directives.FactorRanksManagerController");
goog.require("gridReport.services.GridManagementService");
goog.require("gridReport.model.RankOutputTypes");
goog.require("gridReport.services.FactorRankService");
gridReport.Module.controller("gfFactorRanksManagerController", ["$scope", "$modalInstance", "gfGridManagementService", "gridInstanceId", "gfFactorRankService", "gfGridColumnConverterService", "gfAggregatesAlgorithms", function($scope, $modalInstance, gfGridManagementService, gridInstanceId, gfFactorRankService, gfGridColumnConverterService, gfAggregatesAlgorithms) {
  $scope.model = {ranks:[]};
  $scope.closeDialog = function() {
    $modalInstance.close();
    $scope.$destroy();
  };
  $scope.ok = function() {
    $scope.closeDialog();
    var columns = gfGridManagementService.getGridColumns(gridInstanceId);
    gfGridManagementService.beginUpdate(gridInstanceId);
    _.each($scope.model.ranks, function(rank) {
      _.each(rank.factors, function(factor) {
        if (factor.parentDataBlockColumnId != null) {
          updateDataBlockColumn(gfGridManagementService.getColumnById(gridInstanceId, factor.parentDataBlockColumnId), rank, factor);
        } else {
          var factorColumn = _.find(columns, function(clmn) {
            return factor.column && clmn.id === factor.column.id;
          });
          if (!factorColumn) {
            factorColumn = _.findWhere(columns, {id:gfFactorRankService.formatFactorRankColumnId(rank.column.id, factor.rankNumber)});
          }
          if (factor.enabled) {
            if (factorColumn) {
              chageColumn(factor, rank, factorColumn);
            } else {
              addColumn(factor, rank);
            }
          } else {
            if (factorColumn) {
              removeColumn(factor);
            }
          }
        }
      });
    });
    gfGridManagementService.endUpdate(gridInstanceId);
    gfGridManagementService.loadData(gridInstanceId, false);
  };
  $scope.selectAll = function() {
    setForAll(true);
  };
  $scope.clearAll = function() {
    setForAll(false);
  };
  loadRanks();
  function setForAll(enabled) {
    _.each($scope.model.ranks, function(rank) {
      _.each(rank.factors, function(factor) {
        factor.enabled = enabled;
        factor.showFactorRank = enabled;
      });
    });
  }
  function addColumn(factor, rank) {
    gfGridManagementService.addColumn(gridInstanceId, createFactorColumn(rank, factor), gridReport.model.StateChangesCause.ColumnAdded);
  }
  function chageColumn(factor, rank, factorColumn) {
    gfGridManagementService.changeColumn(gridInstanceId, factorColumn, createFactorColumn(rank, factor), gridReport.model.StateChangesCause.ColumnChanged);
  }
  function removeColumn(factor) {
    gfGridManagementService.removeColumn(gridInstanceId, factor.column.id, gridReport.model.StateChangesCause.ColumnRemoved);
  }
  function updateDataBlockColumn(parentDataBlockColumn, rank, factor) {
    var prevousColumn = parentDataBlockColumn, factorColumn, newColumn = new gridReport.model.GridColumn(parentDataBlockColumn), previousFactorColumn;
    previousFactorColumn = _.find(parentDataBlockColumn.gridColumns, function(clmn) {
      return factor.column && factor.column.id === clmn.id;
    });
    if (!previousFactorColumn) {
      previousFactorColumn = _.findWhere(parentDataBlockColumn.gridColumns, {id:gfFactorRankService.formatFactorRankColumnId(rank.column.id, factor.rankNumber)});
    }
    if (previousFactorColumn) {
      delete newColumn.gridColumns[previousFactorColumn.id];
    }
    if (factor.enabled) {
      var reorderedGridColumns = {}, subColumns = [], rankColumn, columnsCount = parentDataBlockColumn.command.subCommands.length, ranksCount = 0;
      factorColumn = createFactorColumn(rank, factor);
      if (previousFactorColumn && factorColumn.id === previousFactorColumn.id) {
        factorColumn.filter = previousFactorColumn.filter;
      }
      _.each(newColumn.gridColumns, function(gridColumn) {
        reorderedGridColumns[gridColumn.id] = gridColumn;
        if (gridColumn.id === rank.column.id) {
          rankColumn = factorColumn;
          reorderedGridColumns[factorColumn.id] = factorColumn;
        }
      });
      _.each(reorderedGridColumns, function(gridColumn) {
        subColumns.push(gridColumn);
      });
      _.each(rank.factors, function(factor) {
        if (factor.enabled) {
          ranksCount++;
        }
      });
      if (subColumns.length === ranksCount + columnsCount) {
        var newReordered = {}, index = subColumns.indexOf(rankColumn), factorColumns = subColumns.splice(index, ranksCount).reverse();
        Array.prototype.splice.apply(subColumns, [index, 0].concat(factorColumns));
        subColumns.forEach(function(col) {
          newReordered[col.id] = col;
        });
        newColumn.gridColumns = newReordered;
      } else {
        newColumn.gridColumns = reorderedGridColumns;
      }
    }
    newColumn.selectedTotalsCalculation = gfAggregatesAlgorithms.getDataBlockCalculation(newColumn);
    gfGridManagementService.changeColumn(gridInstanceId, prevousColumn, newColumn, gridReport.model.StateChangesCause.ColumnChanged);
  }
  function createFactorColumn(rank, factor) {
    return gfFactorRankService.createFactorRankColumn(rank.column, factor.rankNumber, factor.showFactorRank);
  }
  function loadRanks() {
    var columns = gfGridManagementService.getGridColumns(gridInstanceId);
    _.each(columns, function(gridColumn) {
      if (gridColumn.command && gridColumn.command.isDataBlock()) {
        _.each(gridColumn.gridColumns, function(subColumn) {
          if (canBeRanked(subColumn)) {
            $scope.model.ranks.push(convertColumnToRank(subColumn, columns, gridColumn));
          }
        });
      } else {
        if (canBeRanked(gridColumn)) {
          $scope.model.ranks.push(convertColumnToRank(gridColumn, columns));
        }
      }
    });
  }
  function canBeRanked(gridColumn) {
    return gridColumn && (gridColumn.command && (gridColumn.command.isMultiFactorRank() && !gridColumn.command.metadata.deleted));
  }
  function convertColumnToRank(column, columns, parentDataBlockColumn) {
    var factors = [];
    columns = parentDataBlockColumn ? parentDataBlockColumn.gridColumns : columns;
    _.each(column.command.factors, function(factor, index) {
      var rankNumber = index + 1;
      var factorColumn = _.find(columns, function(clmn) {
        return clmn.parentColumn === column.id && (clmn.command && (clmn.command.factor && clmn.command.factor.rankNumber === rankNumber));
      });
      if (!factorColumn) {
        factorColumn = _.findWhere(columns, {id:gfFactorRankService.formatFactorRankColumnId(column.id, rankNumber)});
      }
      factors.push({enabled:!!factorColumn, showFactorRank:!!factorColumn && _.keys(factorColumn.gridColumns).length > 1, name:factor.name, factor:factor, rankNumber:rankNumber, column:factorColumn, parentDataBlockColumnId:parentDataBlockColumn ? parentDataBlockColumn.id : undefined});
    });
    return{name:column.command.name, factors:factors, column:column};
  }
}]);
goog.provide("gridReport.directives.FactorRanksManagerDialogService");
goog.require("gridReport.directives.FactorRanksManagerController");
gridReport.Module.service("gfFactorRanksManagerDialogService", ["$modal", "$timeout", function($modal, $timeout) {
  var service = {};
  service.openDialog = function(gridInstanceId) {
    var modal = $modal.open({windowClass:"gf-modal", templateUrl:"scripts/directives/factorRanksManager/FactorRanksManagerDialog.html", controller:"gfFactorRanksManagerController", keyboard:false, resolve:{gridInstanceId:function() {
      return gridInstanceId;
    }}});
    modal.opened.then(function() {
      $timeout(function() {
        var dialogs = $(document).find(".modal-dialog");
        $(dialogs[dialogs.length - 1]).draggable({handle:".modal-header"});
      });
    });
  };
  return service;
}]);
goog.provide("gridReport.directives.FactorRanksButtonDirective");
goog.require("gridReport.directives.FactorRanksManagerDialogService");
gridReport.Module.directive("gfFactorRanksButton", ["gfFactorRanksManagerDialogService", function(gfFactorRanksManagerDialogService) {
  return{restrict:"E", scope:{isEnabled:"=", gridInstanceId:"="}, templateUrl:"scripts/directives/factorRanksButton/FactorRanksButton.html", controller:["$scope", "gfEventsAggregator", function($scope, gfEventsAggregator) {
    $scope.isGridTransposed = false;
    function subscribe() {
      gfEventsAggregator.getChildAggregator($scope.gridInstanceId).addHandler(gridReport.model.GridEvents.transposed, function(args) {
        $scope.isGridTransposed = args.isTransposed;
      });
    }
    if ($scope.gridInstanceId) {
      subscribe();
    }
    $scope.$watch("gridInstanceId", function(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }
      subscribe();
    });
  }], link:function(scope) {
    scope.openFactorRanksDialog = function() {
      gfFactorRanksManagerDialogService.openDialog(scope.gridInstanceId);
    };
  }};
}]);
goog.provide("gridReport.localization.zh");
gridReport.localization = gridReport.localization || {};
gridReport.localization.zh = {TOGGLE:"\u5207\u6362", GROUPING:"\u5206\u7ec4", PRECISION:"\u7cbe\u786e\u5ea6", DEFAULT:"\u9ed8\u8ba4\u503c", FORMAT_NO_SYMBOLS:"0", FORMAT_ONE_SYMBOLS:"0.0", FORMAT_TWO_SYMBOLS:"0.00", FORMAT_THREE_SYMBOLS:"0.000", FORMAT_FOUR_SYMBOLS:"0.0000", STATISTICS:"\u7edf\u8ba1\u6570\u636e", ADD_COLUMN:"\u6dfb\u52a0\u5217", EDIT_COLUMN:"\u7f16\u8f91", REMOVE_COLUMN:"\u5220\u9664", RENAME_COLUMN:"\u91cd\u547d\u540d", REVERT_RENAMING:"\u64a4\u9500\u91cd\u547d\u540d", PIN:"\u9501\u5b9a\u5217", 
UNPIN:"\u89e3\u9664\u5217\u9501\u5b9a", HIDE_PARAMETERS:"\u9690\u85cf\u53c2\u6570", SHOW_PARAMETERS:"\u663e\u793a\u53c2\u6570", SELECT_ALL:"\u5168\u9009", DESELECT_ALL:"\u53d6\u6d88\u5168\u9009", UNGROUP:"\u89e3\u9664\u5206\u7ec4", NEW:"\u65b0\u5efa", OBJECT_MANAGER:"\u5bf9\u8c61\u7ba1\u7406\u5668", SAVE:"\u4fdd\u5b58", REVERT:"\u64a4\u9500", EXCLUDE:"\u4e0d\u5305\u62ec", INCLUDE:"\u5305\u62ec", ADDITIONAL_ACTIONS:"\u5176\u4ed6\u64cd\u4f5c", ACTIONS:"\u64cd\u4f5c", ADD_ALL_TO_LIST:"\u5c06\u6240\u6709\u6dfb\u52a0\u5230\u5217\u8868", 
ADD_SELECTED_TO_LIST:"\u5c06\u9009\u4e2d\u6dfb\u52a0\u5230\u5217\u8868", WARNING:"\u8b66\u544a", OK:"\u786e\u5b9a", CANCEL:"\u53d6\u6d88", DONT_ASK_AGAIN:"\u4e0d\u518d\u8be2\u95ee", RECALL:"\u53d6\u6d88", CLOSE:"\u5173\u95ed", PERSONAL:"\u4e2a\u4eba\u6a21\u677f", GLOBAL:"Thomson Reuters \u6a21\u677f", RECENT:"\u6700\u8fd1\u7684\u6a21\u677f", CUSTOM_EXPRESSIONS:"\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f", FORMAT_WAS_CHANGED_CONFIRMATION:"\u60a8\u8981\u4fdd\u5b58\u5bf9'{{name}}'\u7684\u66f4\u6539\u5417\uff1f", 
RESULTS_WITH_COUNT:"\u7ed3\u679c ({{count}})", EXCLUDED_WITH_COUNT:"\u5df2\u6392\u9664 ({{count}})", ALL_SECURITIES_WITH_COUNT:"\u6240\u6709\u8bc1\u5238\u6570 ({{count}})", IDENTIFIERS_ADDED_WITH_COUNT_INFO_MSG:"\u6dfb\u52a0\u5230\u4f8b\u5916\u7684 {{count}}\u4e2a\u6807\u8bc6\u7b26\u3002", IDENTIFIERS_REMOVED_WITH_COUNT_INFO_MSG:"\u4ece\u4f8b\u5916\u4e2d\u5220\u9664\u7684 {{count}} \u4e2a\u6807\u8bc6\u7b26\u3002", FORMAT_WILL_BE_REVERTED_CONFIRMATION:"\u683c\u5f0f\u5c06\u6062\u590d\u81f3\u5176\u521d\u59cb\u72b6\u6001\u3002", 
SEARCH:"\u641c\u7d22", NAME:"\u540d\u79f0", NUMBER_OF_FIELDS:"\u5b57\u6bb5\u6570", SHARP:"\u6570\u91cf", FIELD_NAME:"\u5b57\u6bb5\u540d\u79f0", PREVIEW:"\u9884\u89c8", LAST_MODIFIED:"\u6700\u65b0\u4fee\u6539\u65f6\u95f4", IDENTIFIER:"\u6807\u8bc6\u7b26", ERROR:"\u9519\u8bef", INFORMATION:"\u4fe1\u606f", GROUPED_BY:"\u5206\u7ec4\u65b9\u5f0f\uff1a", SUM:"\u603b\u503c", AVERAGE:"\u5e73\u5747\u503c", MEDIAN:"\u4e2d\u4f4d\u6570", SERVER_SIDE:"\u670d\u52a1\u5668\u7aef", NONE:"\u65e0", TEMPLATE_MANAGER:"\u6a21\u677f\u7ba1\u7406\u5668", 
REPORT_TEMPLATE_MANAGER:"\u62a5\u544a\u6a21\u677f\u7ba1\u7406\u5668", SERVICE_UNAVAILABLE:"\u670d\u52a1\u4e0d\u53ef\u7528\u3002", UNABLE_TO_LOAD_TEMPLATE:"\u65e0\u6cd5\u52a0\u8f7d\u6a21\u677f\u3002", UNABLE_TO_LOAD_GLOBAL_TEMPLATES:"\u65e0\u6cd5\u52a0\u8f7d\u5168\u7403\u6a21\u677f\u3002", UNABLE_TO_SAVE_TEMPLATE:"\u65e0\u6cd5\u4fdd\u5b58\u6a21\u677f\u3002", UNABLE_TO_LOAD_PERSONAL_TEMPLATES:"\u65e0\u6cd5\u52a0\u8f7d\u4e2a\u4eba\u6a21\u677f\u3002", UNABLE_TO_DELETE_TEMPLATE:"\u65e0\u6cd5\u5220\u9664\u6a21\u677f\u3002", 
UNABLE_TO_RENAME_TEMPLATE:"\u65e0\u6cd5\u91cd\u547d\u540d\u6a21\u677f\u3002", UNABLE_TO_COPY_TEMPLATE:"\u65e0\u6cd5\u590d\u5236\u6a21\u677f\u3002", INVALID_CHARACTER:"\u65e0\u6548\u5b57\u7b26", NAME_IS_REQUIRED:"\u540d\u79f0\u4e3a\u5fc5\u586b\u9879\u3002", NEW_TEMPLATE:"\u65b0\u5efa\u6a21\u677f", SAVE_TEMPLATE:"\u4fdd\u5b58\u6a21\u677f", SERVICE_UNAVAILABLE_RESUBMIT_YOUR_REQUEST:"\u670d\u52a1\u4e0d\u53ef\u7528\uff0c\u8bf7\u91cd\u65b0\u63d0\u4ea4\u60a8\u7684\u8bf7\u6c42\u3002", FAILED_TO_RESOLVE_UNIVERSE:"\u89e3\u6790\u6837\u672c\u5931\u8d25\u3002", 
THERE_ARE_NO_ITEMS_TO_DISPLAY:"\u6ca1\u6709\u8981\u663e\u793a\u7684\u9879\u76ee\u3002", MAX_ROWS_COUNT_EXCEEDED_INDUSTRY_MESSAGE:"\u9009\u5b9a\u7684\u6837\u672c\u5305\u542b\u7684\u8bc1\u5238\u8d85\u8fc7 {{maxRowsCount}} \u4e2a\u3002\u4e3a\u4e86\u67e5\u770b\u5176\u5b83\u6d4b\u8bc4\u6807\u51c6\u8bf7\u9009\u5b9a\u66f4\u8be6\u7ec6\u7684\u6837\u672c\u53c2\u6570\u3002", RENAME:"\u91cd\u547d\u540d", DUPLICATE:"\u91cd\u590d", DELETE:"\u5220\u9664", COLUMN_ALREADY_EXISTS:'\u5217 "{{name}}" \u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0e\u67d0\u4e2a\u73b0\u6709\u5217\u76f8\u540c\u3002', 
NOT_AVAILABLE:"\u4e0d\u53ef\u7528", NOT_AVAILABLE_ABBREVIATION:"N/A", NO_MATCHING_DATA_ITEMS:"\u65e0\u5339\u914d\u6570\u636e\u9879", SEARCH_RESULTS:"\u641c\u7d22\u7ed3\u679c", PRINT:"\u6253\u5370", LOAD:"\u52a0\u8f7d", CREATE_TEMPLATE:"\u521b\u5efa\u6a21\u677f", MANAGE_TEMPLATES:"\u7ba1\u7406\u6a21\u677f", UNSAVED_TEMPLATE:"\u672a\u4fdd\u5b58\u7684\u6a21\u677f", CLICK_TO_VIEW_FIELDS_IN_TEMPLATE:"\u70b9\u51fb\u67e5\u770b\u6a21\u677f\u4e2d\u7684\u5b57\u6bb5", SEARCH_FOR_TEMPLATES:"\u641c\u7d22\u6a21\u677f", 
TEMPLATE_NAME:"\u6a21\u677f\u540d\u79f0", NAME_ALREADY_EXISTS:"\u540d\u79f0\u5df2\u5b58\u5728", DO_NOT_SAVE:"\u4e0d\u4fdd\u5b58", EXPORT_ALL_AS_VALUES:"\u5c06\u6240\u6709\u5bfc\u51fa\u4e3a\u503c", EXPORT_ALL_AS_FORMULAS:"\u5c06\u6240\u6709\u5bfc\u51fa\u4e3a\u516c\u5f0f", EXPORT_SELECTED_AS_VALUES:"\u5c06\u9009\u4e2d\u5bfc\u51fa\u4e3a\u503c", EXPORT_SELECTED_AS_FORMULAS:"\u5c06\u9009\u4e2d\u5bfc\u51fa\u4e3a\u516c\u5f0f", OPEN_ALL_IN_QUOTE_OBJECT:"\u5728\u62a5\u4ef7\u5bf9\u8c61\u4e2d\u6253\u5f00\u5168\u90e8", 
OPEN_SELECTED_IN_QUOTE_OBJECT:"\u5728\u62a5\u4ef7\u5bf9\u8c61\u4e2d\u6253\u5f00\u9009\u4e2d", SAVE_AS:"\u53e6\u5b58\u4e3a", TEMPLATE_ALREADY_EXISTS_CONFIRMATION:"\u540d\u4e3a'{{name}}'\u7684\u6a21\u677f\u5df2\u5b58\u5728\uff0c\u60a8\u8981\u66ff\u6362\u62a5\u544a\u6a21\u677f\u5417\uff1f", REPORT_TEMPLATE:"\u62a5\u544a\u6a21\u677f", SEE_ERROR_DETAILS:"\u67e5\u770b\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f", REPORT_TEMPLATE_SUCCESSFULLY_SAVED_INFO_MSG:"\u62a5\u544a\u6a21\u677f\u5df2\u6210\u529f\u4fdd\u5b58\u3002", 
MAX_LENGTH_EXCEEDED:"\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\u3002", ADD_SECURITY:"\u6dfb\u52a0\u8bc1\u5238", TEMPLATE_DETAILS:"\u6a21\u677f\u8be6\u7ec6\u4fe1\u606f", CRITERIA_FOR_GROUPING_ROWS:"\u884c\u5206\u7ec4\u6807\u51c6", ORDER:"\u6392\u5e8f", CRITERIA:"\u6807\u51c6", ENABLE_GROUPING:"\u542f\u7528\u5206\u7ec4", REGION:"\u533a\u57df", COUNTRY:"\u56fd\u5bb6/\u5730\u533a", INDUSTRY:"\u884c\u4e1a", GICS:"GICS", TRBC:"TRBS", BUSINESS_SECTOR:"\u4e1a\u52a1\u90e8\u95e8", ECONOMIC_SECTROR:"\u7ecf\u6d4e\u90e8\u95e8", 
INDUSTRY_GROUP:"\u884c\u4e1a\u7ec4", INDUSTRY_NAME:"\u884c\u4e1a\u540d\u79f0", SECTOR_NAME:"\u90e8\u95e8\u540d\u79f0", SUBINDUSTRY_NAME:"\u5b50\u884c\u4e1a\u540d\u79f0", COUNTRY_OF_EXCHANGE:"\u4ea4\u6613\u6240\u6240\u5728\u56fd\u5bb6/\u5730\u533a", COUNTRY_OF_HEADQURTERS:"\u603b\u90e8\u6240\u5728\u56fd\u5bb6/\u5730\u533a", SELECT_FIELD:"\u9009\u62e9\u5b57\u6bb5", EDIT:"\u7f16\u8f91", GROUP_ROWS:"\u7ec4", REMOVE_ROW:"\u5220\u9664", ADVANCED_SETTINGS_BUTTON_TITLE:"\u9ad8\u7ea7\u8bbe\u7f6e", ADVANCED_SETTINGS_DEFAULT_CURRENCY:"\u9ed8\u8ba4\u8d27\u5e01", 
ADVANCED_SETTINGS_NO_DEFAULT_CURRENCY:"\u65e0", ADVANCED_SETTINGS_UPDATE:"\u66f4\u65b0\u62a5\u544a", ADVANCED_SETTINGS_CANCEL:"\u53d6\u6d88", STATISTICS_CONTROL_COLUMN_STATISTICS:"\u7edf\u8ba1\u6570\u636e", STATISTICS_CONTROL_COLUMN_PREMIUM_DISCOUNT:"\u6ea2\u4ef7/\u6298\u4ef7", FOCUS_STOCK_FINANCIALS:"\u5173\u6ce8\u80a1\u7968 (\u91d1\u878d\uff1a{{currencyId}})", FOCUS_STOCK_PRICING:"\u5173\u6ce8\u80a1\u7968 (\u5b9a\u4ef7\uff1a{{currencyId}})", PRESS_REFRESH_TO_DISPLAY_NUMBER_OF_FIELDS:"\u6309\u5237\u65b0\u6309\u94ae\u663e\u793a\u5b57\u6bb5\u6570\u3002", 
SECURITY_ALREADY_ADDED:'\u8bc1\u5238"{{ric}}"\u5df2\u51fa\u73b0\u5728\u7f51\u683c\u4e2d', SECURITIES_ALREADY_ADDED:'\u8bc1\u5238"{{rics}}"\u5df2\u51fa\u73b0\u5728\u7f51\u683c\u4e2d', ADD_RANK:"\u6dfb\u52a0\u6392\u540d", SHOW_FACTOR_RANKS:"\u663e\u793a\u56e0\u5b50\u6392\u540d", FIELD_DEFINITION:"\u5b57\u6bb5\u5b9a\u4e49", THOMSON_REUTERS_EIKON_EXCEL_FUNCTION:"Thomson Reuters Eikon Excel \u51fd\u6570", SUM_SYMBOL:"\u03a3", EXCLUDED:"\u5df2\u6392\u9664", INCLUDE_ALL:"\u5305\u542b\u6240\u6709", COMPANY_NAME:"\u516c\u53f8\u540d\u79f0", 
EXPAND_ALL:"\u5168\u90e8\u5c55\u5f00", COLLAPSE_ALL:"\u5168\u90e8\u6536\u8d77", NATIVE_CURRENCY:"\u672c\u56fd\u8d27\u5e01", MULTIPLE_VALUES:"\u591a\u503c", COLUMNS_RETURN_MULTIPLE_VALUES:"\u9009\u5b9a\u7684\u5217\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u4e0d\u80fd\u4ee5\u7f51\u683c\u683c\u5f0f\u8868\u793a", DATA_ITEM_IS_NO_LONGER_SUPPORTED:"\u4e0d\u518d\u53d7\u652f\u6301\u7684\u6570\u636e\u9879\u3002", PREMIUM_DISCOUNT_TITLE:"vs. {{statisticsName}}", DISPLAY_OPTIONS:"\u663e\u793a\u9009\u9879", SMALL:"\u5c0f", 
LARGE:"\u5927", MEDIUM:"\u4e2d", FONT_SIZE_AND_ROW_HEIGHT:"\u5b57\u4f53\u5927\u5c0f\u548c\u884c\u9ad8", CURRENCY:"\u8d27\u5e01", SELECT_UP_TO_MAX_GROUPS_COUNT:"\u9009\u62e9\u8d85\u8fc7 {{maxGroupsCount}} \u9879", HIGH:"\u9ad8", LOW:"\u4f4e", FIRST_QAURTILE:"\u7b2c 1 \u4e2a\u56db\u5206\u4f4d\u6570", THIRD_QAURTILE:"\u7b2c 3 \u4e2a\u56db\u5206\u4f4d\u6570", DISPLAYING_FACTOR_RANKS:"\u663e\u793a\u56e0\u5b50\u6392\u540d", ADD_ALL_TO_EXISTING_LIST:"\u6dfb\u52a0\u6240\u6709\u5230\u5df2\u6709\u5217\u8868", 
ADD_SELECTED_TO_EXISTING_LIST:"\u6dfb\u52a0\u9009\u4e2d\u5230\u5df2\u6709\u5217\u8868", WATCHLIST_WAS_SUCCESSFULLY_UPDATED:'\u5df2\u6210\u529f\u66f4\u65b0\u89c2\u5bdf\u5217\u8868 "{{watchlistName}}"\u3002', WATCHLIST_FAILED_UPDATE:'\u89c2\u5bdf\u5217\u8868 "{{watchlistName}}"\u66f4\u65b0\u5931\u8d25\u3002', PERSONAL_WATCHLIST_SHOULD_BE_SELECTED:"\u5e94\u9009\u62e9\u4e00\u4e2a\u4e2a\u4eba\u7684\u89c2\u5bdf\u5217\u8868\u3002", CLEAR_ALL:"\u6e05\u9664\u5168\u90e8", SHOW_FACTOR_RANK:"\u663e\u793a\u56e0\u5b50\u6392\u540d", 
ADD_FIELD:"\u6dfb\u52a0\u5b57\u6bb5", TRANSPOSE:"\u8f6c\u7f6e", SUMMARY:"\u6458\u8981", SUMMARY_STATISTICS:"\u6458\u8981\u7edf\u8ba1\u6570\u636e", VECTOR_NOT_SUPPORTED:"\u5728\u8f6c\u7f6e\u89c6\u56fe\u4e2d\u4e0d\u652f\u6301", EXCLUDE_ALL_SELECTED:"\u6392\u9664\u6240\u6709\u9009\u5b9a", ENABLE_TRANSPOSE:"\u542f\u7528\u8f6c\u7f6e", DISABLE_TRANSPOSE:"\u7981\u7528\u8f6c\u7f6e", ALL:"\u5168\u90e8", SAMPLE_TEMPLATES:"\u6a21\u677f\u8303\u4f8b", VIEW_MORE:"\u67e5\u770b {{count}} \u4e2a\u4ee5\u4e0a\u6a21\u677f", 
VIEW_AND_MANAGE_ALL_TEMPLATES:"\u67e5\u770b\u5e76\u7ba1\u7406\u6240\u6709\u6a21\u677f", CREATE_NEW_TEMPLATE:"\u521b\u5efa\u65b0\u7684\u6a21\u677f", ADVANCED_SORT:"\u9ad8\u7ea7\u6392\u5e8f", ENABLE_ADVANCED_SORT:"\u542f\u7528\u9ad8\u7ea7\u6392\u5e8f", SORT_BY:"\u6392\u5e8f\u6807\u51c6", ASCENDING:"\u5347\u5e8f", DESCENDING:"\u964d\u5e8f", SUMMARY_ROW:"\u6458\u8981\u884c", ELLIPSIS:"...", HEAT_MAP:"\u9ad8\u4eae\u663e\u793a\u6392\u540d\u9760\u524d/\u6392\u540d\u9760\u540e\u503c", ADD_RANK_FOR_THIS_COLUMN:"\u4e3a\u6b64\u5217\u6dfb\u52a0\u6392\u540d", 
PERCENTILE:"\u767e\u5206\u4f4d", DECILE:"\u5341\u5206\u4f4d", QUINTILE:"\u4e94\u5206\u4f4d", QUARTILE:"\u56db\u5206\u4f4d", RANK:"\u6392\u540d", ZSCORE:"Z - \u8bc4\u5206", SORTING_TYPE:"\u6392\u5e8f\u7c7b\u578b", BY_VALUE:"\u6309\u503c", BY_ABSOLUTE_VALUE:"\u6309\u7edd\u5bf9\u503c", TIME_SERIES_CHART:"\u65f6\u95f4\u5e8f\u5217\u56fe\u8868", TORNADO_CHART:"\u9f99\u5377\u98ce\u56fe", EXCLUDE_FROM_STATISTICS:"\u4ece\u7edf\u8ba1\u6570\u636e\u4e2d\u6392\u9664", EXCLUDED_FROM_STATISTICS:"\u5df2\u4ece\u7edf\u8ba1\u6570\u636e\u4e2d\u6392\u9664", 
EXCLUDE_ALL_SELECTED_FROM_STATISTICS:"\u4ece\u7edf\u8ba1\u6570\u636e\u4e2d\u6392\u51fa\u6240\u6709\u5df2\u9009\u9879", IMPORT_TEMPLATE:"\u5bfc\u5165\u6a21\u677f", EXPORT_TEMPLATE:"\u5bfc\u51fa\u6a21\u677f", APPLY:"\u5e94\u7528", REMOVE_ALL_FILTERS:"\u5220\u9664\u6240\u6709\u7b5b\u9009", UNIQUE_VALUE:"\u552f\u4e00\u503c", DEFINE_RANGE:"\u5b9a\u4e49\u8303\u56f4", CLEAR:"\u6e05\u9664", FROM:"\u4ece", TO:"\u5230", NUMBER_OF_ROWS:"\u884c\u6570", KEYWORD_SEARCH:"\u5173\u952e\u5b57\u641c\u7d22", FILTER_RESULTS:"\u7b5b\u9009\u7ed3\u679c", 
INPUT_DATE:"\u8f93\u5165\u65e5\u671f", INPUT_NUMBER:"\u8f93\u5165\u6570\u5b57", FREEZE_FOCUS_STOCK_ON_TOP:"\u5c06\u5173\u6ce8\u80a1\u7968\u51bb\u7ed3\u5728\u9876\u90e8", CLICK_ON_ANY_COLUMN:"\u70b9\u51fb\u62a5\u544a\u4e2d\u7684\u4efb\u4e00\u5217\uff0c\u5c06\u5176\u5f15\u7528\u5230\u516c\u5f0f", ADD_FORMULA:"\u4f7f\u7528\u516c\u5f0f\u6dfb\u52a0\u5217", FORMULA_EDITOR:"\u516c\u5f0f\u7f16\u8f91\u5668", COLUMN_N:"\u5217 {{columnNumber}}", FACTOR:"\u98ce\u9669\u56e0\u7d20", LANDSCAPE:"\u6a2a\u5411", PORTRAIT:"\u7eb5\u5411", 
TR_COPYRIGHT:"\u00a9 {{year}} Thomson Reuters. \u4fdd\u7559\u6240\u6709\u6743\u5229\u3002", FORMAT_CELLS:"\u683c\u5f0f\u5316\u5355\u5143\u683c", DATE:"\u65e5\u671f", NUMBER:"\u6570\u5b57", PERCENTAGE:"\u767e\u5206\u6bd4", THOUSANDS_SEPARATOR:"\u5343\u5206\u4f4d\u7b26", DAY_MONTHDATE_YEAR:"Day, Month Date, Year", DATE_ABBREVIATEDMONTH:"Date - Abbreviated Month", DATE_ABBREVIATEDMONYH_YEARE:"Date - Abbreviated Month - Year", MONTH_YEAR:"Month - Year", ABBREVIATEMONYH_ABBREVIATEDYEAR:"Abbreviated Month - Abbreviated Year", 
EXPORT_PDF_LANDSCAPE:"\u5bfc\u51fa\u4e3a PDF (\u6a2a\u5411)", EXPORT_PDF_PORTRAIT:"\u5bfc\u51fa\u4e3a PDF (\u7eb5\u5411)", EXPORT_PDF_FAILED:"\u65e0\u6cd5\u5bfc\u51fa\u4e3a PDF", MAX_ROWS_COUNT_EXCEEDED:"\u8d85\u8fc7\u4e86\u6700\u5927\u884c\u6570 {{maxRowsCount}}\u3002", SHOW_ABBREVIATIONS:"false", DD_MM_YYYY:"YYYY/MM/DD", DD_MM_YYYY_F:"yyyy/MM/dd", DD_MM_YY:"YY/MM/DD", DD_MM_YY_F:"yy/MM/dd", DD_MM:"MM/DD", DD_MM_F:"MM/dd", MM_DD_YYYY:"", MM_DD_YYYY_F:"", MM_DD_YY:"", MM_DD_YY_F:"", MM_DD:"", MM_DD_F:"", 
MM_YYYY:"YYYY/MM", MM_YYYY_F:"yyyy/MM", MM_YY:"YY/MM", MM_YY_F:"yy/MM", COPY_TO_CLIPBOARD:"\u590d\u5236\u5230\u526a\u8d34\u677f", ERROR_MESSAGE_HAS_BEEN_COPIED:"\u9519\u8bef\u6d88\u606f\u5df2\u590d\u5236\u5230\u526a\u8d34\u677f", NOTIFY_PRINT_MESSAGE:"\u82e5\u8981\u5728\u6253\u5370\u65f6\u5b9a\u4e49\u5e03\u5c40\u65b9\u5411\uff0c\u8fd8\u9700\u8bbe\u7f6e\u6253\u5370\u673a\u7684\u672c\u5730\u8bbe\u7f6e\u3002", SHARE:"\u5171\u4eab", SHARE_WITH:"\u5171\u4eab\u5230\uff1a", SHARED_TEMPLATES:"\u5171\u4eab\u6a21\u677f", 
UNABLE_TO_LOAD_SHARED_TEMPLATES:"\u65e0\u6cd5\u52a0\u8f7d\u5171\u4eab\u6a21\u677f\u3002", AUTHOR:"\u4f5c\u8005", SHARED_TO:"\u5171\u4eab\u5230\uff1a", INSER_BLANK_ROW:"\u63d2\u5165\u7a7a\u767d\u884c", NUMBER_INPUT_VALIDATION_MESSAGE:"\u503c\u5fc5\u987b\u4e3a\u6570\u5b57", NUMBER_OUT_OF_RANGE_VALIDATION_MESSAGE:"\u503c\u5fc5\u987b\u4e3a\u8303\u56f4 0 - 100 \u7684\u6570\u5b57", T_B_FILTER_TOP_VALUE:"\u6392\u540d\u9760\u524d\u4f4d\u6570", T_B_FILTER_BOTTOM_VALUE:"\u6392\u540d\u9760\u540e\u4f4d\u6570", 
T_B_FILTER_TOP_PER:"\u6392\u540d\u9760\u524d %", T_B_FILTER_BOTTOM_PER:"\u6392\u540d\u9760\u540e %", T_B_FILTER_DEFAULT_FIELD:"\u9009\u62e9\u7b5b\u9009\u7c7b\u578b"};
goog.provide("gridReport.directives.PrintContextMenuOptions");
gridReport.directives.PrintContextMenuOptions = function(options) {
  gridReport.jsUtils.mergeProperties(this, options, ["canPrintLandscape", "canPrintPortrait"]);
};
gridReport.directives.PrintContextMenuOptions.prototype.canPrintLandscape = true;
gridReport.directives.PrintContextMenuOptions.prototype.canPrintPortrait = true;
goog.provide("gridReport.directives.PrintButton");
goog.require("gridReport.Module");
goog.require("gridReport.directives.PrintContextMenuOptions");
gridReport.Module.directive("gfPrintButton", [function() {
  return{restrict:"E", replace:true, scope:{gridInstanceId:"=", isEnabled:"=", allTickers:"=", options:"=?", buttonWithMenuOptions:"=?", headerDescription:"=?", header:"=?", footer:"=?"}, templateUrl:"scripts/directives/printButton/PrintButton.html", controller:["$scope", "gfGridManagementService", "gfPrintingLandscapeDialogService", "$translate", "gfEventsAggregator", "localStorageService", function($scope, gfGridManagementService, gfPrintingLandscapeDialogService, $translate, gfEventsAggregator, 
  localStorageService) {
    function getTitle() {
      var selectedTemplate = gfGridManagementService.getSelectedTemplate($scope.gridInstanceId), timePattern = "MMMM dd, yyyy HH:mm:ss", date;
      date = Date.now().toString(timePattern);
      return selectedTemplate ? selectedTemplate.name + " - " + date : date;
    }
    function subscribe() {
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      aggregator.addHandler(gridReport.model.GridEvents.loadingStarted, function() {
        $scope.isDataLoading = true;
      });
      aggregator.addHandler(gridReport.model.GridEvents.loadingEnded, function() {
        $scope.isDataLoading = false;
      });
    }
    function menuItemAction(pageOrientation) {
      if (localStorageService.get("gf.showPrintNotify") !== "true") {
        gfPrintingLandscapeDialogService.openDialog($scope.print, pageOrientation);
      } else {
        $scope.print(pageOrientation);
      }
    }
    $scope.print = function(pageOrientation, showMessage) {
      var aggregator = gfEventsAggregator.getChildAggregator($scope.gridInstanceId);
      if (pageOrientation === pdfExporter.models.PageOrientation.Landscape) {
        aggregator.raiseEvent(gridReport.model.GridEvents.printLandscape);
      } else {
        aggregator.raiseEvent(gridReport.model.GridEvents.printPortrait);
      }
      if (showMessage) {
        localStorageService.set("gf.showPrintNotify", showMessage);
      }
      var title = getTitle();
      gfGridManagementService.print($scope.gridInstanceId, {title:title, exportAll:true, printingOptions:new pdfExporter.models.PrintingOptions({pageOrientation:pageOrientation, header:$scope.header || title, headerDescription:$scope.headerDescription, footer:$scope.footer || $translate.instant("TR_COPYRIGHT", {year:(new Date).getFullYear()}), printCollapsedGroups:false})});
    };
    $scope.options = $scope.options || new gridReport.directives.PrintContextMenuOptions;
    $scope.menuItems = [{label:$translate.instant("LANDSCAPE"), action:function() {
      menuItemAction(pdfExporter.models.PageOrientation.Landscape);
    }, disabled:function() {
      return!$scope.isEnabled;
    }, visible:function() {
      return $scope.options.canPrintLandscape;
    }}, {label:$translate.instant("PORTRAIT"), action:function() {
      menuItemAction(pdfExporter.models.PageOrientation.Portrait);
    }, disabled:function() {
      return!$scope.isEnabled;
    }, visible:function() {
      return $scope.options.canPrintLandscape;
    }}];
    $scope.getDefaultMenuItem = function() {
      return $scope.menuItems[0];
    };
    $scope.isPrintingEnabled = function() {
      return $scope.isEnabled && (!$scope.isDataLoading && !_.isEmpty($scope.allTickers));
    };
    if ($scope.gridInstanceId) {
      subscribe();
    }
    $scope.$watch("gridInstanceId", function(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }
      subscribe();
    });
  }]};
}]);
goog.provide("gridReport.directives.NumberInputFormatDirective");
gridReport.Module.directive("gfNumberInputFormat", ["$parse", "$filter", function($parse, $filter) {
  return{require:"ngModel", link:function(scope, element, attrs, ngModelController) {
    var decimals = $parse(attrs.gfDecimals)(scope), max = $parse(attrs.gfMax)(scope), min = $parse(attrs.gfMin)(scope), checkExponent = /^\d+\.\d+[eE][-+]?(\d+)$/;
    ngModelController.$parsers.push(function(data) {
      var parsed = parseFloat(data);
      if (!isNaN(parsed)) {
        return parsed;
      } else {
        return ngModelController.$modelValue;
      }
    });
    ngModelController.$formatters.push(function(data) {
      return $filter("number")(data, decimals);
    });
    element.on("focus", function() {
      var isExponent = ngModelController.$modelValue.toString().match(checkExponent), value = ngModelController.$modelValue;
      if (isExponent) {
        value = ngModelController.$modelValue.toFixed(isExponent[1]);
      }
      element.val(value);
    });
    element.on("blur", function() {
      if (ngModelController.$modelValue > max) {
        ngModelController.$setViewValue(max);
      }
      if (ngModelController.$modelValue < min) {
        ngModelController.$setViewValue(min);
      }
      element.val($filter("number")(ngModelController.$modelValue, decimals));
    });
    scope.$on("$destroy", function() {
      element.off("focus");
      element.off("blur");
    });
  }};
}]);
goog.provide("gridReport");
goog.require("gridReport.Module");
goog.require("gridReport.utils.jsUtils");
goog.require("gridReport.model.GridColumn");
goog.require("gridReport.model.ColumnValue");
goog.require("gridReport.model.SectorLevelValue");
goog.require("gridReport.model.Response");
goog.require("gridReport.model.GridReportSettings");
goog.require("gridReport.model.GridReportSelectionMode");
goog.require("gridReport.model.GridReportScrollMode");
goog.require("gridReport.model.ConditionalValueFormatting");
goog.require("gridReport.model.GridReportExpandCollapseState");
goog.require("gridReport.model.Command");
goog.require("gridReport.model.CommandParameter");
goog.require("gridReport.model.Currency");
goog.require("gridReport.dataProvider.BaseDataProvider");
goog.require("gridReport.services.AggregatesAlgorithmsService");
goog.require("gridReport.services.DapsService");
goog.require("gridReport.services.GlobalFormatsService");
goog.require("gridReport.services.DapsStorageProvider");
goog.require("gridReport.services.CategoryServiceFactory");
goog.require("gridReport.datacloud.service.DataCloudCommandService");
goog.require("gridReport.services.FormatsService");
goog.require("gridReport.services.HeatMapService");
goog.require("gridReport.services.SystemCurrenciesService");
goog.require("gridReport.services.MultiFactorRankConverter");
goog.require("gridReport.filters.DateFormatter");
goog.require("gridReport.filters.ValueFormatter");
goog.require("gridReport.directives.GridReportDirective");
goog.require("gridReport.directives.GridColumnContextMenuDirective");
goog.require("gridReport.directives.GridContextMenuDirective");
goog.require("gridReport.directives.ADCGrid");
goog.require("gridReport.directives.ADCDataPicker");
goog.require("gridReport.directives.ReportTemplateSelectorDirective");
goog.require("gridReport.directives.ReportTemplateManagerDialogService");
goog.require("gridReport.directives.SaveControlDirective");
goog.require("gridReport.directives.ObjectNameDirective");
goog.require("gridReport.directives.ButtonWithContextMenuDirective");
goog.require("gridReport.services.Exclusions");
goog.require("gridReport.services.gfPrintingLandscapeDialogService");
goog.require("gridReport.services.gfGroupingManagerDialogService");
goog.require("gridReport.services.gfExclusionManagerDialogService");
goog.require("gridReport.services.GroupStateRestoreService");
goog.require("gridReport.services.StatisticsExclusions");
goog.require("gridReport.services.AutoSuggestServiceFactory");
goog.require("gridReport.directives.ExportToExcelDirective");
goog.require("gridReport.directives.ExportToPdfDirective");
goog.require("gridReport.directives.ExportToQuoteListDirective");
goog.require("gridReport.directives.AutosuggestDirective");
goog.require("gridReport.directives.TickerAutosuggestDirective");
goog.require("gridReport.services.StateProvideService");
goog.require("gridReport.directives.GroupingManagerDirective");
goog.require("gridReport.directives.MenuDirective");
goog.require("gridReport.directives.GroupingButtonDirective");
goog.require("gridReport.directives.MultiFactorRankButtonDirective");
goog.require("gridReport.directives.FactorRanksButtonDirective");
goog.require("gridReport.directives.ExclusionsManagerDirective");
goog.require("gridReport.directives.ExclusionsToolbarDirective");
goog.require("gridReport.directives.GroupingToolbarDirective");
goog.require("gridReport.services.PAWebApiService");
goog.require("gridReport.services.CurrencyService");
goog.require("gridReport.services.NativeCurrencyService");
goog.require("gridReport.directives.CurrencyDirective");
goog.require("gridReport.directives.StatisticsControlDirective");
goog.require("gridReport.directives.AdvancedControls");
goog.require("gridReport.directives.AddRowDirective");
goog.require("gridReport.directives.AdvancedSortingManagerService");
goog.require("gridReport.directives.Select2Directive");
goog.require("gridReport.directives.onBlurDirective");
goog.require("gridReport.directives.focusMeDirective");
goog.require("gridReport.directives.onEnterDirective");
goog.require("gridReport.directives.onEscapeDirective");
goog.require("gridReport.directives.SliderDirective");
goog.require("gridReport.directives.DatepickerDirective");
goog.require("gridReport.directives.NumberInputFormatDirective");
goog.require("gridReport.directives.NumberInputDirective");
goog.require("gridReport.directives.PrintButton");
goog.require("gridReport.directives.ErrorViewDirective");
goog.require("gridReport.directives.SharingDetailsDirective");
goog.require("gridReport.utils.LogManager");
goog.require("gridReport.utils.CommandHelper");
goog.require("gridReport.localization.en");
goog.require("gridReport.localization.ja");
goog.require("gridReport.localization.zh");
goog.require("gridReport.constants.CurrencySymbols");
goog.require("gridReport.gridReportVersion");
goog.require("gridReport.templates");
 }).call(this);
